//----------------------------------------------------------------//
//****************** Brasil Life Simulation v2.0 *****************//
//**         			  Por Kuddy e Ran	            		**//
//----------------------------------------------------------------//
// Créditos: Viniborn, Vendetta, FeaR

// Adicionar mais música de qualidade ao iPod
// Consertar as tasks

/*_________________[IDÉIAS]_______________________
| Multas ir para o veículo                        |
| Mobiliar Casas                                  |
| Necessitar de galão e isqueiro para incêndiar   |
| O player terá que abrir uma conta no banco      |
| Necessário pagar as contas da casa na lotérica  |
| Player com máscara não ganha estrela em roubos  |
| Reativar o hospital							  |
...Jogador comum 15 segundos de recuperação | VIP Bronze 7 segundos de recuperação | VIP Prata = 5 segundos + spawn automático após recuperação | VIP Ouro = Spawn direto ao morrer
| Player VIP pode alterar o toque do seu celular  |
| Obrigatório o player ter carteira de motorista pra trabalhar em empregos que possuem veículos
| Gang's terem o mesmo sistema das máfias, porém com as drogas, será necessário de sementes para plantar drogas nas fazendas, sementes são compradas em um lugar distante
| Salários são pagos pela organização no payday   |
|_________________________________________________|*/

#include	<a_samp>
#include	<a_sampdb>
#include    <sscanf2>
#include    <izcmd>
#include    <dof2>
#include    <foreach>
#include	<a_npc>
#include	<core>
#include	<file>
#include	<float>
#include	<streamer>
#include	<time>
#include    <removebuilding>
#include 	<mapandreas>
#include    <skinchanging>
#include    <crashdetect>
#include	<strlib>

#include	"gamemodes/db/db.pwn"

native IsValidVehicle(vehicleid);
native SendMessageToJamelao(text[]);

//----------------------------------------------------------------//
//*************************** Defines ****************************//
//----------------------------------------------------------------//
// Vida e Colete
#define COR_TEXTDRAW00 0xFFFFFFFF
#define COR_TEXTDRAW01 0xFFFFFFFF

#define ANNOUNCE_URL        "monitor.sacnr.com/api/?Action=announce"
#define LOG_PREFIX          "[SACNR Monitor] "

#define HTTP_CREATED                201
#define HTTP_FORBIDDEN				403
#define HTTP_UNPROCESSABLE_ENTITY   422
#define HTTP_TOO_MANY_REQUESTS      429

#undef MAX_VEHICLES
#define MAX_VEHICLES    		1500
#define MAX_BOUGHT_VEHICLES 	500

#undef MAX_PLAYERS
#define MAX_PLAYERS     50

#define SITE_URL        "www.blsrpg.com.br"
#define	GM_NAME			"Brasil Life Simulation RPG"
#define GMVERSION		"v2.2.6"
#define BUILT           20170129
#define GMDATE  		"29 de Janeiro de 2017"

#define APRE_FILE       "/RPG/Carros/Apreendidos.ini"
#define RECORD_FILE     "/RPG/logs/Recorde.ini"
#define ConfigFile      "/RPG/logs/config.cfg"
#define ZonesFile       "/RPG/logs/zones.ini"

#define PixFile         "/RPG/piches/Saves.ini"
#define OrgDrugFile     "/RPG/orgs/GangDrogas.ini"
#define GuerraFile      "/RPG/orgs/GuerraFile.ini"

#define MAX_ORGS        18
#define USE_COMMANDS   	1

#define MAX_MODS     	12
#define TEMPO_ESCONDENDO 120

#define HUD_INDEX   	500
#define HUD_INDEX2  	270

#define GasMax 			100
#define RefuelWait 		5000
#define CONTRACT_TIME   1800

#define MAX_LOGIN_FAILS     4

#define ROB_CASH_MIN        3000
#define ROB_CASH_MAX		8000

#define ATM_CASH_MIN        3000
#define ATM_CASH_MAX        8000

#define LOTTO_NUM           200

new Float:KHM_MULTIPLIER  = 136.666667;

new ElevadoresNeon[4];

//Algumas Funções

#define public:do%0(%1) \
        forward%0(%1); \
        public%0(%1)

#define GetVehicleParamsNew(%0) \
        new engine, lights, alarm, doors, bonnet, boot, objective; \
        GetVehicleParamsEx(%0, engine, lights, alarm, doors, bonnet, boot, objective)

#define GetVehicleParams(%0) \
        GetVehicleParamsEx(%0, engine, lights, alarm, doors, bonnet, boot, objective)

#include "gamemodes/neon/declares.pwn"
#include "gamemodes/neon/publics.pwn"

//Imagem fundo
new Text:FundoLogin;

// Vida e Colete
new PlayerText:vida[MAX_PLAYERS];
new PlayerText:colete[MAX_PLAYERS];
new Float:vida2[MAX_PLAYERS];
new Float:colete2[MAX_PLAYERS];
new Total[6];
new Total2[6];

// Milestones
#define DIALOG_MILESTONES   28679
#define DIALOG_REPMILESTONE 28680
#define DIALOG_INFMILESTONE 28681

#define MilNonRepGrana   	2000
#define MilNonRepResp       3
#define MilNonRepCash       0

#define Mil1Grana   		1000
#define Mil1Resp            1
#define Mil1Cash            0

#define Mil2Grana   		2500
#define Mil2Resp            2
#define Mil2Cash            0

#define Mil3Grana   		6000
#define Mil3Resp      		3
#define Mil3Cash            0

#define Mil4Grana   		10000
#define Mil4Resp            4
#define Mil4Cash    		100

forward CompletarNonRepMilestone(playerid, id);

enum nonRepeatInfo
{
	milTask[48],
	milHint[128]
}

new MilNonRepeatTasks[5][nonRepeatInfo] = {
	{ "Usar o Pacote Iniciante", "Use o comando /pacoteiniciante para receber seu presente!"},
	{ "Usar o GPS com sucesso", "Use o comando /gps para ir até a Prefeitura." },
	{ "Conseguir um emprego", "Você pode fazer isso na Prefeitura. /gps -> Locais Importantes -> Prefeitura" },
	{ "Passar no teste de direção terrestre", "Você pode fazer isso na AutoEscola. /gps -> Locais Importantes -> Auto Escola" },
	{ "Entrar em uma organização", "Compre uma agenda e um celular na 24-7, depois ligue para um líder de organização." }
};

/*new Text:Milestone = Text:INVALID_TEXT_DRAW;
new Text:MilTask1 = Text:INVALID_TEXT_DRAW;
new Text:MilTask2 = Text:INVALID_TEXT_DRAW;*/

enum milInfo
{
	task1[30],
	task2[30],
}

/*new Mil1Tasks[6][milInfo] = {
	{ "Dominar um", "Territorio" },
	{ "Colocar neon", "em um veiculo" },
	{ "Matar Inimigo", "em gz" },
	{ "Gastar R$2000", "em tuning" },
	{ "Abastecer 80+", "Litros" },
	{ "Consertar Um", "Veiculo" }
};*/

//Plantação
#define MAX_DRUGS 3500
#define DRUG_PRICE 7000

#define FAZENDADROGAS1 14
#define FAZENDADROGAS2 15
#define FAZENDADROGAS3 13

enum plantInfo
{
    plantTime,
    plantAmount,
    Float:plantPos[3],
    plantChance,
    plantPlace
}
new Plantacao[10][plantInfo] = {
//Montanha
{-1, 3, {-1418.3978, -949.86834, 201.0937}, 10, FAZENDADROGAS1},
{-1, 1, {-1431.4990, -956.83148, 200.9474},  6, FAZENDADROGAS1},
{-1, 3, {-1422.9287, -963.55572, 200.7872}, 10, FAZENDADROGAS1},
//Chilliad
{-1, 2, {-2822.0036, -1512.2075, 139.2890}, 16, FAZENDADROGAS2},
{-1, 1, {-2825.7204, -1512.3270, 139.2890}, 14, FAZENDADROGAS2},
{-1, 4, {-2828.5805, -1520.5915, 139.1290}, 20, FAZENDADROGAS2},
//Rodovia
{-1, 2, {1582.89196, 25.9893640, 23.97161}, 10, FAZENDADROGAS3},
{-1, 1, {1583.41699, 33.0118710, 24.39581},  8, FAZENDADROGAS3},
{-1, 1, {1563.86169, 30.6187530, 24.16406},  8, FAZENDADROGAS3},
{-1, 3, {1550.95324, 17.7707950, 24.13581}, 12, FAZENDADROGAS3}
};

new PlantacaoObj[21],
    Float:PlantacaoObjFinalPos[sizeof(PlantacaoObj)][3],
    Text3D:PlantacaoText[sizeof(Plantacao)];

//Eleição
new VotacaoPickup,
    Text3D:VotacaoText,
    VotacaoID,
    bool:VotacaoAberta;

enum CandidatoInf
{
    candNome[MAX_PLAYER_NAME],
    candNumero,
    candVotos
}
new CandidatoInfo[25][CandidatoInf];

//Time Fix
new timeFixer = 0;
stock GetTimeFix(&h, &m, &s)
{
    gettime(h, m, s);

    h += timeFixer;
    if(h > 23)
        h -= 24;
    if(h < 0)
        h += 24;

    //23 + 1 = 24, 24 - 24 = 0
    //0 - 1 = -1, -1 + 24 = 23
    return 1;
}
stock GetTimeFix2(&h)
{
    gettime(h);

    h += timeFixer;
    if(h > 23)
        h -= 24;
    if(h < 0)
        h += 24;

    //23 + 1 = 24, 24 - 24 = 0
    //0 - 1 = -1, -1 + 24 = 23
    return 1;
}
// Casas e empresas

#define MAX_HOUSES          180
#define MAX_BIZ       		26

//RG
new actualRG;

//Anti-Bot
new IP[24];

// Kuddy Eventos
new Float:g_e@f[3],g_e@i[3],g_e@map_na[32],bool:g_e@b_checker,g_e@b_started,Float:g_e@fc[3],bool:g_e@autorizado[MAX_PLAYERS];
new g@PlayerSu[MAX_PLAYERS]; // Poder dar outro su apenas dps de 1 min

//gpci
native gpci(playerid,const serial[],maxlen);

//Modo SA
#define MODOSA_JOGANDO      0
#define MODOSA_TRABALHANDO  1
#define MODOSA_RPG          2

new ModoSA_Dialog[MAX_PLAYERS];
new bool:HiddenAdmin[MAX_PLAYERS];
new Float:AFK[MAX_PLAYERS][4];
new bool:IgnorarRelato[MAX_PLAYERS][MAX_PLAYERS];
new TipoAntiFK[MAX_PLAYERS];
new AFKTimer[MAX_PLAYERS];

enum ModoSA_Inf
{
	Float:SA_Pos[4],
	Float:SA_Vida[2],
	Float:SA_MarkPos[3],
	SA_Int[2]
}
new ModoSA_Info[MAX_PLAYERS][ModoSA_Inf];

enum ADMTimes
{
    Time_Play,
    Time_Work,
    Time_RPG,
    Time_AFK,
    Time_PlayS,
    Time_WorkS,
    Time_RPGS,
    Time_AFKS
}
new AdminTime[MAX_PLAYERS][ADMTimes];

//Troca de Cash por $
new TrocandoCash[MAX_PLAYERS];

//Tiro Ao Alvo
new ArmasTAA[MAX_PLAYERS][12][2];
new bool:InTAA[MAX_PLAYERS];
new TAAStarted[MAX_PLAYERS];
new Float:PosTAA[MAX_PLAYERS][3];
new TAAObjects[MAX_PLAYERS][6];
new TAAHits[MAX_PLAYERS];
new TAATime[MAX_PLAYERS];

enum TAAInfo
{
    taaWeapon,
    taaShots,
    taaMiss,
    taaTargets,
    taaBestTime,
}
new TAAStatus[MAX_PLAYERS][TAAInfo];

new TAAWeapons[5] = {24, 29, 31, 25, 34};

//Corrida por GZ
#define MAX_RACEGZ  2
#define RACEGZ_PAYOUT 80

#define RACE_WIN 0
#define RACE_LOST_DISCONNECT 1
#define RACE_LOST_RUNOUT 2
#define RACE_LOST_DIE 3
#define RACE_LOST_NOPLAYER 4

enum gzrInfo
{
    rOwner,
    Float:rPos[4],
    Float:rEnd[3],
    rName[32],
    Float:rStart1[4],
    Float:rStart2[4],
}

new RaceGZ[MAX_RACEGZ][gzrInfo] = {
{0, {1020.9194, -905.4631, 978.0555, -941.8554}, {2126.7404, 2764.89300, 10.8308}, "Posto",
    {991.8558, -910.8462, 41.7475, 180.0}, {987.8558, -910.8462, 41.7475, 180.0}},
{0, {509.6090, -1732.1821, 478.0621, -1756.4869}, {-1707.0325, 1336.5784, 7.1742}, "Pay'n Spray",
    {483.8071, -1768.3238, 5.1150, 180.0}, {487.8071, -1768.3238, 5.1150, 180.0}}
};
new RaceGZID[MAX_RACEGZ];

enum rInfo
{
    bool:rAllowRace,
    bool:rRacing,
    bool:rAllowInvite,
    rStartTime,
    rVeh[2],
    rVehModel[2],
    rRacer[2],
    rGZ
}
new RaceInfo[rInfo] = {true, false, false, 0, {INVALID_VEHICLE_ID, INVALID_VEHICLE_ID}, {0, 0}, {INVALID_PLAYER_ID, INVALID_PLAYER_ID}, -1};
new bool:PlayerInRace[MAX_PLAYERS],
    RaceRunnerID[MAX_PLAYERS],
    RaceLostTime[MAX_PLAYERS];

//new Float:RaceMapIcon[MAX_RACEGZ][2];
new Float:RacePickupPos[MAX_RACEGZ][3];

new RaceTimer;

new Text:RaceCountTD[3];
new Text:RaceVehPreview[2];
new Text:RaceSkinPreview[2];
new Text:RaceRacerName[2];
new Text:RaceTime = Text:INVALID_TEXT_DRAW;

//Sistema de Concessionária Pro
#define PastaConce "/RPG/Carros/"

forward LoadConceCars();
forward LoadPlayerCars();
forward ResetPlayerCars(playerid);
forward SavePlayerCars();
enum ConceCarInfo
{
	vModel,
	vID,
	vPreco,
    vCash,
	Text3D:vText
}

enum ClimaInfo
{
    MSG[129],
    WeatherID
}

new ClimaVar[13][ClimaInfo] = {
    {"", 31},
    {"", 1},
    {"", 2},
    {"", 4},
    {"", 50},
    {"", 32},
    {"", 6},
    {"", 7},
    {"", 33},
    {"", 9},
    {"", 16},
    {"", 11},
    {"", 12}
};

new ConceCars[77][ConceCarInfo];
new PlayerGerenciando[MAX_PLAYERS];

new BoughtCars = 0;
new Float:BoughtCarsPositions[10][4] = {
{1615.6166, -1119.1980, 23.5376, 270.2700},
{1615.6333, -1123.6937, 23.5365, 270.1363},
{1615.6140, -1128.1256, 23.5370, 270.1759},
{1615.5538, -1132.7218, 23.5361, 270.6974},
{1615.6298, -1137.1631, 23.5629, 270.1461},
{1666.2866, -1137.1299, 23.5369, 359.4280},
{1661.8036, -1137.1184, 23.5361, 359.6528},
{1657.3981, -1137.1259, 23.5359, 359.8643},
{1652.9185, -1137.1085, 23.5370, 359.9630},
{1648.4393, -1137.1338, 23.5369, 359.8820}
};

new BoughtPlanes = 0;
new Float:BoughtPlanesPositions[13][4] = {
{1788.5000000, -2648.3000000, 15.6000000, 0.0000000},
{1718.3000000, -2649.6001000, 15.1000000, 0.0000000},
{1579.0000000, -2631.0000000, 15.6000000, 0.0000000},
{1549.0000000, -2631.0000000, 15.6000000, 0.0000000},
{1519.0000000, -2631.0000000, 15.6000000, 0.0000000},
{1489.0000000, -2631.0000000, 15.6000000, 0.0000000},
{1459.0000000, -2631.0000000, 15.6000000, 0.0000000},
{1429.0000000, -2631.0000000, 15.6000000, 0.0000000},
{2070.0000000, -2630.0000000, 14.8000000, 0.0000000},
{2040.0000000, -2630.0000000, 14.8000000, 0.0000000},
{2010.0000000, -2630.0000000, 14.8000000, 0.0000000},
{1980.0000000, -2630.0000000, 14.8000000, 0.0000000},
{1950.0000000, -2630.0000000, 14.8000000, 0.0000000}
};

//Sistema de Evento Pro
#define PastaEvento "/RPG/Evento/"

enum EvntInfo
{
	bool:EventoVeiculos,
	bool:VeiculoEvento[MAX_VEHICLES],
    bool:InscritoEvento[MAX_PLAYERS],
	bool:EventoArmas,
	bool:EventoColete,
	bool:EventoCarregado,
	bool:EventoCP,
	bool:EventoGanhador[3],
	bool:EventoObjetos,
	bool:EventoNos,
    bool:EventoRace,
    bool:EventoTDM,
    bool:EventoNoAnim,
    bool:EventoNoFF,
	NumeroVeiculos,
	ArmaEvento[12],
	EventoNome[32],
    EventoArquivo[32],
	NumeroCheck,
	EventoInt,
    EventoSkin[2],
    EventoTeam[MAX_PLAYERS],
	Float:EventoSpawn[3],
    Float:EventoSpawn2[3]
}
new EventoInfo[EvntInfo];
new Float:EventoCheckPoint[100][3];

new Player_EventoCP[MAX_PLAYERS];

#define MAX_SPIKESTRIPS 200

enum sInfo
{
	sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};
new SpikeInfo[MAX_SPIKESTRIPS][sInfo];

/* Boombox */
#define DIALOG_BOOMBOX 31997
#define DIALOG_BOOMBOX1 31998

#define MAX_FREE_TOYS    3
#define MAX_VIP_TOYS     7

#define PLAYER_BOLSA_ATTACHED MAX_VIP_TOYS+1
#define PLAYER_CUFF_ATTACHED PLAYER_INFO_ATTACHED+1

// * Attachments * //
#define DIALOG_TOYS              14321
#define DIALOG_BUY_TOYS          DIALOG_TOYS+1
#define DIALOG_BUY_TOYS_SELECT   DIALOG_TOYS+2
#define DIALOG_BUY_TOYS_CONF     DIALOG_TOYS+3
#define DIALOG_TOYS_ATTACH       DIALOG_TOYS+4
#define DIALOG_TOYS_EDIT         DIALOG_TOYS+5
#define DIALOG_TOYS_EDIT_TYPE    DIALOG_TOYS+6
#define DIALOG_TOYS_EDIT_BONE    DIALOG_TOYS+7
#define DIALOG_TOYS_DELETE       DIALOG_TOYS+8
#define DIALOG_TOYS_DELETE_CONF  DIALOG_TOYS+9

enum ptInfo
{
	ptModelID,
	ptBoneID,
	Float:ptOffsetX,
	Float:ptOffsetY,
	Float:ptOffsetZ,
	Float:ptRotX,
	Float:ptRotY,
	Float:ptRotZ,
	bool:ptWearing
}

new PlayerToys[MAX_PLAYERS][MAX_VIP_TOYS][ptInfo];
new PlayerEditingToyID[MAX_PLAYERS];
new PlayerBuyingType[MAX_PLAYERS];
new PlayerBuyingModel[MAX_PLAYERS];
new PlayerDeletingID[MAX_PLAYERS];

enum AttachmentEnum
{
    attachtype,
    attachname[32],
    attachmodel,
    attachprice
}

enum DefaultOffsets
{
	dBoneid,
	Float:dOffSets[6]
}

/*>-=-=-=-=-=-=-=-=-=-=-=-=-=-=<
	       Toys System
 >-=-=-=-=-=-=-=-=-=-=-=-=-=-=<*/

#define TOYS_TYPE_GLASSES  0
#define TOYS_TYPE_RELOGIO  1
#define TOYS_TYPE_BOINA    2
#define TOYS_TYPE_BANDANA  3
#define TOYS_TYPE_BONE     4
#define TOYS_TYPE_CHAPEU   5
#define TOYS_TYPE_MASCARA  6
#define TOYS_TYPE_PERUCA   7
#define TOYS_TYPE_MAGNATA  8
#define TOYS_TYPE_VIP      9

new AttachmentHeaders[][] = {
{"Óculos"},
{"Relógios"},
{"Boinas/Tocas"},
{"Bandanas"},
{"Bonés"},
{"Chapéus"},
{"Máscaras/Capacetes"},
{"Perucas"},
{"Magnata"},
{"{FFE000}VIP"}
};

new Float:AttachmentDefaultOffsets[][DefaultOffsets] = {
{2, {0.098771,0.030772,-0.000335,85.342658, 84.122947,4.236968}}, // Óculos
{5, {-0.014000,-0.021721,-0.002143,9.279357,270.517852,190.637268}}, // Relógios
{2, {0.117533,0.007857,0.000726,268.970458,1.533373,269.223754}},    // Boinas
{2, {0.078534,0.041857,-0.001727,268.970458,1.533374,269.223754}},   // Bandanas
{2, {0.094485,0.007215,0.000000,0.000000,0.000000,0.000000}},        // Bonés/Tocas
{2, {0.128484,0.007215,0.000000,0.000000,0.000000,0.000000}},        // Chapéus
{2, {0.107000,0.020000,0.000000,90.000000,90.000000,0.000000}},      // Máscaras
{2, {0.128484,0.007215,0.000000,0.000000,0.000000,0.000000}},        // Perucas
{2, {0.004483,0.107215,0.000000,2.999999,-0.199998,-108.699966}},    // Bigodes
{2, {0.004483,0.107215,0.000000,2.999999,-0.199998,-108.699966}}     // VIP
};

new AttachmentObjects[][AttachmentEnum] = {
// Óculos
{TOYS_TYPE_GLASSES, "Óculos Vermelho", 19006, 150},
{TOYS_TYPE_GLASSES, "Óculos Laranja", 19007, 150},
{TOYS_TYPE_GLASSES, "Óculos Verde", 19008, 150},
{TOYS_TYPE_GLASSES, "Óculos Azul", 19009, 150},
{TOYS_TYPE_GLASSES, "Óculos Roxo", 19010, 150},
{TOYS_TYPE_GLASSES, "Óculos Preto", 19012, 150},
{TOYS_TYPE_GLASSES, "Óculos em Espiral", 19011, 200},
{TOYS_TYPE_GLASSES, "Óculos Xadrez", 19014, 200},
{TOYS_TYPE_GLASSES, "Óculos Transparente", 19015, 200},
{TOYS_TYPE_GLASSES, "Óculos de Raio-X", 19016, 250},
{TOYS_TYPE_GLASSES, "Óculos Quadradão Amarelo", 19017, 350},
{TOYS_TYPE_GLASSES, "Óculos Quadradão Laranja", 19018, 350},
{TOYS_TYPE_GLASSES, "Óculos Quadradão Vermelho", 19019, 350},
{TOYS_TYPE_GLASSES, "Óculos Quadradão Verde", 19021, 350},
{TOYS_TYPE_GLASSES, "Ray-Ban Cinza", 19022, 450},
{TOYS_TYPE_GLASSES, "Ray-Ban Azul", 19023, 450},
{TOYS_TYPE_GLASSES, "Ray-Ban Roxo", 19024, 450},
{TOYS_TYPE_GLASSES, "Ray-Ban Rosa", 19025, 450},
{TOYS_TYPE_GLASSES, "Ray-Ban Vermelho", 19026, 450},
{TOYS_TYPE_GLASSES, "Ray-Ban Laranja", 19027, 450},
{TOYS_TYPE_GLASSES, "Ray-Ban Amarelo", 19028, 450},
{TOYS_TYPE_GLASSES, "Ray-Ban Verde", 19029, 450},
{TOYS_TYPE_GLASSES, "Óculos de Polícial Preto", 19138, 200},
{TOYS_TYPE_GLASSES, "Óculos de Polícial Vermelho", 19139, 200},
{TOYS_TYPE_GLASSES, "Óculos de Polícial Azul", 19140, 200},
// Relógios
{TOYS_TYPE_RELOGIO, "Rolex de Ouro", 19039, 750},
{TOYS_TYPE_RELOGIO, "Rolex de Prata", 19043, 750},
{TOYS_TYPE_RELOGIO, "Relógio Digital Roxo", 19044, 250},
{TOYS_TYPE_RELOGIO, "Relógio Digital Rosa", 19045, 250},
{TOYS_TYPE_RELOGIO, "Relógio Digital Verde", 19046, 250},
{TOYS_TYPE_RELOGIO, "Relógio Digital Roxo Escuro", 19047, 250},
{TOYS_TYPE_RELOGIO, "Relógio Digital Trovão", 19048, 250},
{TOYS_TYPE_RELOGIO, "Relógio Digital Festivo", 19049, 250},
{TOYS_TYPE_RELOGIO, "Relógio Digital Surfista", 19050, 250},
{TOYS_TYPE_RELOGIO, "Relógio Digital Laranja e Preto", 19051, 250},
{TOYS_TYPE_RELOGIO, "Relógio Digital Florido", 19052, 250},
{TOYS_TYPE_RELOGIO, "Relógio Digital Exército", 19053, 250},
{TOYS_TYPE_RELOGIO, "Relógio de Ponteiro de Ouro", 19042, 450},
{TOYS_TYPE_RELOGIO, "Relógio de Ponteiro de Prata", 19040, 450},
{TOYS_TYPE_RELOGIO, "Relógio de Ponteiro de Cobre", 19041, 450},
{TOYS_TYPE_RELOGIO, "Relógio de Ponteiro Prateado", 19040, 450},
// Boinas
{TOYS_TYPE_BOINA, "Boina Vermelha", 18892, 75},
{TOYS_TYPE_BOINA, "Boina Amarela", 18902, 75},
{TOYS_TYPE_BOINA, "Boina Azul", 18897, 75},
{TOYS_TYPE_BOINA, "Boina Verde", 18898, 75},
{TOYS_TYPE_BOINA, "Boina Rosa", 18899, 75},
{TOYS_TYPE_BOINA, "Boina Roxa", 18903, 75},
{TOYS_TYPE_BOINA, "Boina Preta", 18891, 75},
{TOYS_TYPE_BOINA, "Boina Xadrez", 18893, 100},
{TOYS_TYPE_BOINA, "Boina Relâmpago", 18904, 100},
{TOYS_TYPE_BOINA, "Boina 420", 18894, 100},
{TOYS_TYPE_BOINA, "Boina UFO", 18895, 100},
{TOYS_TYPE_BOINA, "Boina dos Insetos", 18896, 100},
{TOYS_TYPE_BOINA, "Boina em Espiral", 18900, 100},
{TOYS_TYPE_BOINA, "Boina do Tigre", 18901, 100},
{TOYS_TYPE_BOINA, "Boina Militar", 18905, 100},
{TOYS_TYPE_BOINA, "Boina Festiva", 18906, 100},
{TOYS_TYPE_BOINA, "Boina Hippie", 18907, 100},
{TOYS_TYPE_BOINA, "Boina Surfista", 18908, 100},
{TOYS_TYPE_BOINA, "Boina Bolha", 18909, 100},
{TOYS_TYPE_BOINA, "Boina Pimenta", 18910, 100},
{TOYS_TYPE_BOINA, "Toca Preta", 18967, 85},
{TOYS_TYPE_BOINA, "Toca Cinza", 18968, 85},
{TOYS_TYPE_BOINA, "Toca Festiva", 18969, 90},
{TOYS_TYPE_BOINA, "Gorro Natalino", 19065, 125},
// Bandana
{TOYS_TYPE_BANDANA, "Bandana Verde", 18913, 75},
{TOYS_TYPE_BANDANA, "Bandana Cinza", 18918, 75},
{TOYS_TYPE_BANDANA, "Bandana Preta", 18912, 75},
{TOYS_TYPE_BANDANA, "Bandana UFO", 18911, 100},
{TOYS_TYPE_BANDANA, "Bandana Militar", 18914, 100},
{TOYS_TYPE_BANDANA, "Bandana Festiva", 18915, 100},
{TOYS_TYPE_BANDANA, "Bandana Taco", 18916, 100},
{TOYS_TYPE_BANDANA, "Bandana Relâmpago", 18917, 100},
{TOYS_TYPE_BANDANA, "Bandana Tigre Branco", 18919, 100},
{TOYS_TYPE_BANDANA, "Bandana Pirâmide", 18920, 100},
// Boné
{TOYS_TYPE_BONE, "Boné Verde", 18926, 65},
{TOYS_TYPE_BONE, "Boné Rosa", 18934, 65},
{TOYS_TYPE_BONE, "Boné Cinza", 18929, 65},
{TOYS_TYPE_BONE, "Boné Bege", 18933, 65},
{TOYS_TYPE_BONE, "Boné da Dude Cinza", 19093, 90},
{TOYS_TYPE_BONE, "Boné da Dude Azeitona", 19160, 90},
{TOYS_TYPE_BONE, "Boné Surfista", 18927, 80},
{TOYS_TYPE_BONE, "Boné Hippie", 18928, 80},
{TOYS_TYPE_BONE, "Boné Pimenta", 18930, 80},
{TOYS_TYPE_BONE, "Boné Relâmpago", 18931, 80},
{TOYS_TYPE_BONE, "Boné Festivo", 18932, 80},
{TOYS_TYPE_BONE, "Boné Militar", 18935, 80},
{TOYS_TYPE_BONE, "Boné da Polícia Preto", 19161, 125},
{TOYS_TYPE_BONE, "Boné da Polícia Azul", 19162, 125},
{TOYS_TYPE_BONE, "Boné da Polícia Aba Cinza", 18636, 125},
// Chapéus
{TOYS_TYPE_CHAPEU, "Chapéu Vermelho", 18950, 250},
{TOYS_TYPE_CHAPEU, "Chapéu Amarelo", 18951, 250},
{TOYS_TYPE_CHAPEU, "Chapéu Azul", 18948, 250},
{TOYS_TYPE_CHAPEU, "Chapéu Verde", 18949, 250},
{TOYS_TYPE_CHAPEU, "Chapéu Cinza", 19488, 250},
{TOYS_TYPE_CHAPEU, "Chapéu Preto", 18947, 250},
{TOYS_TYPE_CHAPEU, "Chapéu Tigresa", 18970, 350},
{TOYS_TYPE_CHAPEU, "Chapéu Pontilhado", 18971, 350},
{TOYS_TYPE_CHAPEU, "Chapéu Florido", 18972, 350},
{TOYS_TYPE_CHAPEU, "Chapéu Militar", 18973, 350},
{TOYS_TYPE_CHAPEU, "Chapéu de Piloto de Avião", 19520, 400},
{TOYS_TYPE_CHAPEU, "Chapéu do Detran Preto", 19099, 400},
{TOYS_TYPE_CHAPEU, "Chapéu do Detran Marrom", 19100, 400},
{TOYS_TYPE_CHAPEU, "Chapéu de Bombeiro Amarelo", 19330, 400},
{TOYS_TYPE_CHAPEU, "Chapéu de Bombeiro Preto", 19331, 400},
{TOYS_TYPE_CHAPEU, "Chapéu de Cowboy Preto", 19096, 450},
{TOYS_TYPE_CHAPEU, "Chapéu de Cowboy Marrom", 19095, 450},
{TOYS_TYPE_CHAPEU, "Chapéu de Cowboy Rosa", 19097, 450},
{TOYS_TYPE_CHAPEU, "Chapéu de Cowboy Marrom Escuro", 19098, 450},
{TOYS_TYPE_CHAPEU, "Cartola Preta", 19352, 600},
{TOYS_TYPE_CHAPEU, "Cartola Cinza", 19487, 600},
{TOYS_TYPE_CHAPEU, "Chapéu de Palha Festivo", 18944, 200},
{TOYS_TYPE_CHAPEU, "Chapéu de Palha Cinza", 18945, 200},
{TOYS_TYPE_CHAPEU, "Chapéu de Palha Preto", 18946, 200},
{TOYS_TYPE_CHAPEU, "Chapéu de Rockeiro", 19136, 400},
// Máscaras
{TOYS_TYPE_MASCARA, "Máscara de Hockey Branca", 19036, 250},
{TOYS_TYPE_MASCARA, "Máscara de Hockey Vermelha", 19037, 250},
{TOYS_TYPE_MASCARA, "Máscara de Hockey Verde", 19038, 250},
{TOYS_TYPE_MASCARA, "Máscara do Zorro", 18974, 350},
{TOYS_TYPE_MASCARA, "Máscara de Gás", 19472, 450},
{TOYS_TYPE_MASCARA, "Máscara de Estuprador", 19163, 250},
{TOYS_TYPE_MASCARA, "Capacete Emplumado Cinza", 18936, 400},
{TOYS_TYPE_MASCARA, "Capacete Emplumado Vermelho", 18936, 400},
{TOYS_TYPE_MASCARA, "Capacete Emplumado Azul", 18936, 400},
// Perucas
{TOYS_TYPE_PERUCA, "Peruca Black Power", 18640, 1000},
{TOYS_TYPE_PERUCA, "Peruca Topete", 19077, 1000},
{TOYS_TYPE_PERUCA, "Peruca Afro", 18975, 1000},
{TOYS_TYPE_PERUCA, "Peruca de Palhaço", 19274, 1200},
{TOYS_TYPE_PERUCA, "Peruca de Velho", 19518, 1200},
// Bigodes
{TOYS_TYPE_MAGNATA, "Bigode Magnata", 19350, 350},
{TOYS_TYPE_MAGNATA, "Bigode Francês", 19351, 350},
{TOYS_TYPE_MAGNATA, "Monóculo", 19349, 450},
{TOYS_TYPE_MAGNATA, "Bengala", 19348, 200},
// VIP
{TOYS_TYPE_VIP, "Chapéu Funcionário Cluckin Bell", 19137, 1000},
{TOYS_TYPE_VIP, "Chapéu Funcionário BurgerShot", 19094, 1000},
{TOYS_TYPE_VIP, "Chapéu de Pedreiro", 18638, 1200},
{TOYS_TYPE_VIP, "Escudo do Batalhão de Shock", 18637, 3000},
{TOYS_TYPE_VIP, "Colete", 19142, 3000},
{TOYS_TYPE_VIP, "Vara de Pescar", 18632, 1000},
{TOYS_TYPE_VIP, "Lanterna", 18641, 1000},
{TOYS_TYPE_VIP, "Distintivo", 19347, 1500},
{TOYS_TYPE_VIP, "Guitarra Ibanez GRG 150", 19317, 3000},
{TOYS_TYPE_VIP, "Guitarra Gibson Flying V", 19318, 3000},
{TOYS_TYPE_VIP, "Guitarra Trace Warbeast", 19319, 3000}
};

new AttachmentBones[][24] = {
{"Coluna"},
{"Cabeça"},
{"Braço esquerdo"},
{"Braço direito"},
{"Mão esquerda"},
{"Mão direita"},
{"Coxa esquerda"},
{"Coxa direita"},
{"Pé esquerdo"},
{"Pé direito"},
{"Panturrilha direita"},
{"Panturrilha esquerda"},
{"Antebraço esquerdo"},
{"Braço direito"},
{"Clavícula esquerda"},
{"Clavícula direita"},
{"Pescoço"},
{"Mandíbula"}
};

/*>-=-=-=-=-=-=-=-=-=-=-=-=-=-=<
			War Defines
 >-=-=-=-=-=-=-=-=-=-=-=-=-=-=<*/

#define ZONE_CHECKS         	30
#define PLAYERS_REQUIRED    	1
#define STAYING_POINTS     	 	1
#define MONEY_BONUS 			50
#define TIME_BOBUS_LOSING   	45
#define TIME_BOBUS_WINNING  	30
#define KILLING_POINTS      	400
#define DEF_POINTS  			50
#define WAR_TIME    			300
#define START_WAR				75
#define TAKE_OVER				75
#define DEFEND_TURF 			50
#define KILL_IN_WAR 			20
#define DIE_IN_WAR 				25
#define LOSE_WAR 				50

/*>-=-=-=-=-=-=-=-=-=-=-=-=-=-=<
 Internal Defines - Don't change
 >-=-=-=-=-=-=-=-=-=-=-=-=-=-=<*/

#define ONE_DAY            	24*60*60

#define VTYPE_CAR 			1
#define VTYPE_HEAVY 		2
#define VTYPE_BIKE 			3
#define VTYPE_AIR 			4
#define VTYPE_SEA 			5
#define VTYPE_MISC 			6
#define VTYPE_MOTORBIKE 	7
#define VTYPE_SPORT     	8
#define VTYPE_MAV       	9

#define CHECKPOINT_NONE     0
#define CHECKPOINT_HOME     12

#define MAX_PLYVEH_RATIO	(20) 		// per player.

//Tops
new TopLevelName[32];

//LojaBLS
#define PastaSeriais                "/RPG/Seriais"
#define PrecoTipo0                  14500
#define PrecoTipo1                  30000
#define PrecoTipo2                  75000

new VipCar[MAX_PLAYERS];

#define DIALOG_TOPS                 412
#define DIALOG_TOPLEVEL             413
#define DIALOG_RADIO        		233
#define DIALOG_MP3          		112
#define DIALOG_VIP          		113
#define DIALOG_VIP1                 114
#define DIALOG_VIP2                 115
#define DIALOG_VIP3                 116
#define DIALOG_VIP4                 117
#define DIALOG_VIP5                 118
#define DIALOG_VIP6                 119
#define DIALOG_VIP7                 120
#define DIALOG_VIP8                 121
#define DIALOG_VIP9                 122
#define DIALOG_VIP10                123
#define DIALOG_VIP11                124
#define DIALOG_VIP12                125
#define DIALOG_VIP13                126
#define DIALOG_VIP14                127
#define DIALOG_VIP15                128
#define DIALOG_MINHACONTA   		696
#define DIALOG_MEUNOME	  			697
#define DIALOG_MINHASENHA   		698
#define DIALOG_CREDITOS  			700
#define DIALOG_SELECIONARCARRO      7200
#define DIALOG_CARMENU              20
#define DIALOG_VENDERCARRO          21
#define DIALOG_LOGIN 				2
#define DIALOG_REGISTER 			3
#define DIALOG_RACE 				76
#define DIALOG_ATM          		79
#define DIALOG_SACAR        		80
#define DIALOG_DEPOSITAR    		81
#define DIALOG_TRANSFERIR1  		82
#define DIALOG_TRANSFERIR2  		83
#define DIALOG_SALDO        		84
#define	DIALOG_HELP   				99
#define DIALOG_EMPREGO              175

#define ADMIN_SPEC_TYPE_NONE 0
#define ADMIN_SPEC_TYPE_PLAYER 1
#define ADMIN_SPEC_TYPE_VEHICLE 2

//Joy
new bool:Joynado[MAX_PLAYERS], JoyTimer[MAX_PLAYERS];

//Veiculos Apreendidos
new VeiculosApreendidos[97] = {-1, -1, ...};

//Sistema de Ultimos IPs
#define MAX_ULTIMOS_IPS             50

//new UltimoIP = 0;
new UltimosIPs[MAX_ULTIMOS_IPS][16];
new UltimosIPsNome[MAX_ULTIMOS_IPS][MAX_PLAYER_NAME];

new bool:PlayerOuvindoBar[MAX_PLAYERS];
new bool:OuvindoIPod[MAX_PLAYERS];
new CarroCasa[MAX_HOUSES];
new Aereo[2];
new ComprouCash[MAX_PLAYERS];
new Text:TextCash[MAX_PLAYERS];
new MotoSpawn[20];
new Text3D:TextCarro[20];
new CarroVIP[6];
new Text3D:TextVIP[6];
new False = false;
new Float:uselessFloat;
new Pacote[MAX_PLAYERS];
new HighestID;
new Online;
new bool:Counting;
new NumCont;
new CD;
new MascaraTime[MAX_PLAYERS];

//----------

new DiasMeses[12] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

//----------

enum GuerraInfo
{
	GuerraPontos,
	GuerraKills
}
new Guerra[GuerraInfo][3];

new ControleLS = 0;
new GuerraGZ;
new TempoGuerra = 1800;
new InGuerra;
new bool:PodeGuerra = true;
new bool:PodeGuerraOrg[4] = {true, true, true, false};
new bool:AllowExplosions = false;

//----------
// Portões
new PortaoCasa34, PortaoCasa113_1, PortaoCasa113_2, PortaoCasa23;
//----------

// static const ClimasNormais[5] = {10, 1, 2, 3, 43};
// static const ClimaChuva[2] = {8, 16};
new CurrentWeather;

/*stock ChangeWeather(id)
{
	if(CurrentWeather == ClimaChuva[0] || CurrentWeather == ClimaChuva[1]) KillTimer(TimerChuva);
	if(id == ClimaChuva[0] || id == ClimaChuva[1]) TimerChuva = SetTimer("ChecarChuva", (30*60), true);

	SetWeather(id);
	CurrentWeather = id;
	return 1;
}*/
//------------

#define DoencaGripe		1

#define FormatLog(%1,%2,%3) do{new _string[128]; format(_string,sizeof(_string),%2,%3); WriteLog(%1, _string);} while(False)

static const News[7][128] = {
{"{1E90FF}Corrigido bug dos Caminhões de Entrega,"},
{"{FFFFFF}Corrigidos bugs em diversas TextDraws,"},
{"{1E90FF}Corregidos alarme, capô e porta-malas no /carmenu,"},
{"{FFFFFF}Corrigida localização do indicador de HP e colete,"},
{"{1E90FF}Remoção dos comandos /c e /v,"},
{"{FFFFFF}Os vidros do veículo podem ser abertos e fechados com o botão da roda do mouse,"},
{"{1E90FF}Conversar dentro de um carro com veículo fechado envia a mensagem só ao motorista e passageiros."}
};

static const Puni[14][64] = {
{"- Uso de Cheat = Ban"},
{"- RK = Bangu (105 Min) + Kick"},
{"- Surf = Bangu (30 Min) + Kick"},
{"- DeathMatch (DM) = Bangu (45 Min) + Kick"},
{"- AntiRP = Bangu (1 Hora) + Kick"},
{"- Abuso de Bug = Bangu (1 Hora) + Aviso + Kick"},
{"- DB = Bangu (20 Min) + Kick"},
{"- Anúncio indevido = Bangu (30 Min) + Kick"},
{"- Ofensa = Mutado (30 Min) + Kick"},
{"- JoyPad = Bangu (20 Min) + Kick"},
{"- Matar em Evento = Bangu (20 Min) + Kick"},
{"- Atirar em um Carro sem Motorista = Bangu (15 Min) + Kick"},
{"- Flood = Bangu (10 Min) + Kick"},
{"- Trote = Bangu (5 Min) + Perda de R$5.000 + Kick"}
};

static const Tutorial1[3][128] = {
{"{FFFFFF}Seja bem vindo ao Brasil {FF0000}Life{FFFFFF} Simulation !!\n"},
{"Este é um servidor que visa a simulação da vida real, para isso, é necessário saber algumas regras\n"},
{"A seguir, um breve tutorial a cerca do funcionamento do servidor."}
};

static const Tutorial2[4][128] = {
{"{FFFFFF}Essa será sua cidade, onde existem muitas novidades para você"},
{"Aqui é possível comprar casas, carros e empresas"},
{"Temos muitas formas de ganhar dinheiro, você pode optar por ter um"},
{"emprego primário(subordinado) ou secundário(autônomo)"}
};

static const Tutorial3[6][128] = {
{"{FFFFFF}Sua energia sempre irá se reduzir com o passar tempo, cabe a você restaurá-la"},
{"Você pode consumir bebidas, drogas, produtos preparados, dentre outros"},
{"As casas possuem sistema de aluguel, atualização de veículo, atualização"},
{"de energia e colete, e o spawn permanente nela, ao total são 180 casas."},
{"Caso queira entender mais digite /ajuda, e acesse 'casa'. Elas servem como fonte"},
{"de lucros ao seu dono, lucro esse que provém dos aluguéis."}
};

static const Tutorial4[7][128] = {
{"{FFFFFF}A auto-escola usa-se para realização de testes e garantia de habilitação."},
{"São 5 testes, três submetidos a tempo e dois questionários, segue as"},
{"habilitações: Motorista, Aérea, Náutica, Pesca, Porte de armas."},
{"Voce deve digitar (/entrar) no ícone de entrada da auto escola."},
{"A auto escola e marcada com um ícone de cifrão vermelho."},
{"No interior da auto escola, voce deve ficar sobre o pickup amarelo,"},
{"Então digite /autoescola. Mais informações sobre localidade, use /gps."}
};

static const Tutorial5[10][128] = {
{"{FFFFFF}Ajuda pode ser obtida com o comando (/ajuda) ou acessando nosso website /forum."},
{"Conte com a ajuda dos outros jogadores, use como forma de comunicação"},
{"os comandos (/sms) ou (/ligar), que vão lhe garantir conversa prolongada, mesmo que à distância."},
{"Para relatar usuários abusando com trapaças ou infringindo regras, use o comando (/relato)"},
{"Possuímos um sistema exclusivo de fila de atendimento, para usá-lo digite /senha"},
{"Com isso você entrará na fila de atendimento (/fila), e será atendido por um administrador"},
{"O servidor conta com a ajuda de moderadores evitando fraudes e problemas."},
{"Caso tente fazer algo contra as regras do servidor, voce será punido."},
{"Copere relatando, tambem, bugs ou mal funcionamento no servidor."},
{"Seremos gratos nesse ponto de vista."}
};

static const Tutorial6[9][128] = {
{"{FFFFFF}O objetivo do servidor sempre sera a diversão dos nossos players,"},
{"não estamos preocupados com concorrência, jã que nosso intuito é"},
{"ser mais uma opção aos brasileiros no SA:MP, procuramos atender todos"},
{"da melhor forma possível, por isso, seja paciente."},
{"Nos dedicamos o máximo a esse trabalho e sempre que existir sugestões"},
{"legais, iremos colocar em prática, contribuindo com sua participação."},
{"O portal eletrônico do fórum foi criado para o convívio social dos"},
{"jogadores que usufruem do nosso servidor, e para facilitar comunicações."},
{"Possuimos também um servidor de TS3, para comunicação via voz.   /ipts"}
};

static const Tutorial7[7][128] = {
{"{FFFFFF}Discussões entre outros podem ser feitas no forum do servidor. /forum"},
{"Ressaltamos que é expressamente proibido ter mais de uma conta no servidor"},
{"Para mais informações acerca de multi-conta verifique a área de notícias no fórum."},
{"Esperamos que voce se divirta muito jogando diante de nosso trabalho"},
{"Esperamos também que não desentendam nosso princípio de jogo."},
{"A equipe, Brasil {FF0000}Life{FFFFFF} Simulation"},
{"Agradecemos sua participação JUSTA aqui. Nos não temos fins lucrativos."}
};

static const VIPBronze[][128] = {
{"{FFFFFF}O pacote de {A0522D}VIP Bronze {FFFFFF}contém:\n"},
{"Comandos exclusivos: /doa /doador,"},
{"0% de juros se estiver devendo,"},
{"Atendimento preferencial no /senha,"},
{"/relato preferencial,"},
{"Nitro infinito em carro próprio,"},
{"{FF0000}Upa 2 vezes mais rápido.{FFFFFF}\n"},
{"Duração: {FF0000}31 dias. {FFFFFF}Preço: {FF0000}BLS$ 10.000"}
};

static const VIPPrata[][128] = {
{"{FFFFFF}O pacote de {C0C0C0}VIP Prata {FFFFFF}contém:\n"},
{"Comandos exclusivos: /vipan /doa /doador /reparo /guinchar /autocinto,"},
{"Não gasta para mudar o carro da casa (/atualizarcarro),"},
{"0% de juros se estiver devendo,"},
{"Atendimento preferencial no /senha,"},
{"/relato preferencial,"},
{"Nitro infinito em carro próprio,"},
{"Preferência para ser escolhido líder,"},
{"{FF0000}Upa 3 vezes mais rápido.{FFFFFF}"},
{"Duração: {FF0000}31 dias. {FFFFFF}Preço: {FF0000}BLS$ 20.000"}
};

static const VIPOuro[][128] = {
{"{FFFFFF}O pacote de {FFD700}VIP Ouro {FFFFFF}contém:\n"},
{"Comandos exclusivos: /vipan /vipcv /doa /doador /reparo /guinchar /autocinto,"},
{"Não gasta para mudar o carro da casa (/atualizarcarro),"},
{"Pode trocar o local do carro da casa (/estacionarcasa),"},
{"Carro da Casa chega na Hora,"},
{"0% de juros se estiver devendo,"},
{"Atendimento preferencial no /senha,"},
{"/relato preferencial,"},
{"Nitro infinito em carro próprio,"},
{"Preferência para ser escolhido líder,"},
{"Chances maiores de ser da STAFF,"},
{"{FF0000}Anti-AFK DESLIGADO!{FFFFFF},"},
{"{FF0000}Upa 4 vezes mais rápido.{FFFFFF}\n"},
{"Duração: {FF0000}31 dias. {FFFFFF}Preço: {FF0000}BLS$ 50.000"}
};

static const PacotesDeArmas[7][128] = {
{"{FFFFFF}Os pacotes de armas são armas que você recebe ao spawnar.\n"},
{"Por exemplo, se você compra um pacote, passa a receber armas incríveis"},
{"sempre que renasce.\n"},
{"{FF0000}Pacote Bronze (BLS$15.000): Soco Inglês, 9MM, MP5;"},
{"{009900}Pacote Prata (BLS$25.000): Taco de Golfe, Desert Eagle, M4, Country Rifle;"},
{"{FFFF00}Pacote Ouro (BLS$40.000): Katana, Desert Eagle, AK-47, Sniper Rifle.\n"},
{"{FFFFFF}Vale a pena comprar, visto que o benefício é pra sempre!"}
};

static const PacoteBronze[][48] = {
{"{FFFFFF}O pacote Bronze inclui:\n"},
{"{FF0000}Soco Inglês;"},
{"{009900}Pistola 9MM;"},
{"{FFFF00}MP5.\n"},
{"{FFFFFF}Deseja comprar o pacote?"},
{"Preço: {FF0000}BLS$15.000"}
};

static const PacotePrata[][48] = {
{"{FFFFFF}O pacote Prata inclui:\n"},
{"{FF0000}Taco de Golfe;"},
{"{009900}Desert Eagle;"},
{"{FFFF00}M4;"},
{"{0000FF}Country Rifle.\n"},
{"{FFFFFF}Deseja comprar o pacote?"},
{"Preço: {FF0000}BLS$25.000"}
};

static const PacoteOuro[][48] = {
{"{FFFFFF}O pacote Ouro inclui:\n"},
{"{FF0000}Katana;"},
{"{009900}Desert Eagle;"},
{"{FFFF00}AK-47;"},
{"{0000FF}Sniper Rifle.\n"},
{"{FFFFFF}Deseja comprar o pacote?"},
{"Preço: {FF0000}BLS$40.000"}
};

static const PacoteIniciante[8][128] = {
{"{FFFFFF}A Brasil {FF0000}Life {FFFFFF}Simulation tem um Pacote de edição de RG!\n"},
{"{FFFFFF}O pacote(como promoção) será oferecido para todos os novatos."},
{"{FFFFFF}Todos os players podem reclamar seu pacote.\n"},
{"{FFFFFF}O pacote contém:\n"},
{"{FF0000}+1 Nível{FFFFFF},"},
{"{FFFF00}BLS$500\n"},
{"{FFFFFF}Para reclamar seu Pacote, clique em Adquirir.\n"},
{"{FFFFFF}A Brasil {FF0000}Life {FFFFFF}Simulation deseja a você um ótimo jogo."}
};

static const EquipeBLS[2][64] = {
{"Smith_Bls - Fundador"},
{"Ran_BLS - The GodFather"}
};

static const Radios[10][48] = {
{"Radio - Hunter FM!"},
{"Radio - SkyPlus FM!"},
{"Radio - Energy FM!"},
{"Radio - Radio Uuno!"},
{"Blues Radio"},
{"Tok - Sertanejo"},
{"DEFJAY.com R&B"},
{"Pendimi"},
{"Soft 'N Easy"},
{"Southern Gospel"}
};

static const UrlRadio[10][80] = {
{"http://live.hunterfm.com/live"},
{"http://stream05.akaver.com/skyplus_hi.mp3"},
{"http://stream05.akaver.com/energyfm_hi.mp3"},
{"http://217.146.71.24/uuno.mp3"},
{"http://yp.shoutcast.com/sbin/tunein-station.pls?id=1270282"},
{"http://yp.shoutcast.com/sbin/tunein-station.pls?id=232868"},
{"http://yp.shoutcast.com/sbin/tunein-station.pls?id=84158"},
{"http://yp.shoutcast.com/sbin/tunein-station.pls?id=426343"},
{"http://yp.shoutcast.com/sbin/tunein-station.pls?id=612179"},
{"http://yp.shoutcast.com/sbin/tunein-station.pls?id=177871"}
};

static const Musicas[14][64] = {
{"Nicki Minaj & David Guetta - Hey Mama"},
{"David Guetta & Zara Larsson - This One's for You"},
{"David Guetta & Ne-Yo & Akon - Play Hard"},
{"Mike Posner - I Took a Pill in Ibiza"},
{"Black Sabbath - Paranoid"},
{"Calvin Harris - This is What you Came For"},
{"Fifth Harmony - Work from Home"},
{"Twenty One Pilots - Ride"},
{"The Chainsmokers & Halsey - Closer"},
{"Queen - Bohemian Rhapsody"},
{"O.T Genesis - Coco"},
{"Mc Davi - Hoje eu Acordei com o Pé Direito"},
{"Desiigner - Panda"},
{"2Pac - Initiated"}
};

static const URL[14][48] = {
{"heymama.mp3"},
{"thisonesforyou.mp3"},
{"playhard.mp3"},
{"itookapillinibiza.mp3"},
{"paranoid.mp3"},
{"thisiswhatyoucamefor.mp3"},
{"workfromhome.mp3"},
{"ride.mp3"},
{"closer.mp3"},
{"BohemianRhapsody.mp3"},
{"coco.mp3"},
{"pedireito.mp3"},
{"panda.mp3"},
{"Initiated.mp3"}
};

new Float:CivilSpawns[4] = {1715.7958,-1929.6537,13.5670,1.2853};

/*>-=-=-=-=-=-=-=-=-=-=-=-=-=-=<
 ORGs Defines - Don't change
 >-=-=-=-=-=-=-=-=-=-=-=-=-=-=<*/
#define TEAM_NONE       0
#define TEAM_PM     	1
#define TEAM_PF     	2
#define TEAM_FA     	3
#define TEAM_BOMBE      4
#define TEAM_BALLAS 	5
#define TEAM_GROOVE 	6
#define TEAM_PREF   	7
#define TEAM_HITMAN 	8
#define TEAM_SANEWS 	9
//#define TEAM_LOWRIDERS  10
//#define TEAM_HAMAS  	10
#define TEAM_VAGOS  	10
#define TEAM_BIKERS 	11
#define TEAM_ANGELS 	12
#define TEAM_AZTECAS 	13
#define TEAM_RUSSA  	14
#define TEAM_YAKUZA 	15
//#define TEAM_DRIFTERS 18
//#define TEAM_CV     	19
//#define TEAM_PCC    	20
#define TEAM_BOPE     	16
#define TEAM_ALQAEDA    17
//#define TEAM_PCIVIL     18
//#define TEAM_KINGS  	24
/*#define TEAM_ROCAM      25
#define TEAM_FT         26 */
//chat real
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
//chat real
#define COLOR_PM     	0x8D8DFF66
#define COLOR_PF     	0x8D8DFF66
#define COLOR_FA     	0x0A3F0466
#define COLOR_MEDICOS  	0xFF828266
#define COLOR_BALLAS 	0xD900D366
#define COLOR_GROOVE 	0x00D90066
#define COLOR_PREF   	0x00B9FF66
#define COLOR_HITMAN 	0x96969666
#define COLOR_SANEWS 	0xDCDCDC66
//#define COLOR_LOWRIDERS 0x80808066
#define COLOR_LOWRIDERS 0x0066FF66
#define COLOR_HAMAS   	0x00850066
#define COLOR_VAGOS  	0xFFC80166
#define COLOR_PISTONS 	0x8000FF66
#define COLOR_ANGELS	0xFFE60066
#define COLOR_AZTECAS 	0x01FCFF66
#define COLOR_RUSSA  	0xFF002D66
#define COLOR_YAKUZA 	0xA5000066
#define COLOR_DRIFTERS  0xA5FF0066
#define COLOR_CV    	0xFF000066
#define COLOR_PCC    	0x0000FF66
#define COLOR_BOPE   	0x28282866
#define COLOR_ALQAEDA	0x7C7B3166
#define COLOR_PCIVIL 	0x00FFB466
#define COLOR_KINGS  	0xFF450066

#define COLOR_PMPIX     	0x8D8DFFFF
#define COLOR_PFPIX     	0x8D8DFFFF
#define COLOR_FAPIX     	0x0A3F04FF
#define COLOR_MEDICOSPIX  	0xFF8282FF
#define COLOR_BALLASPIX 	0xD900D3FF
#define COLOR_GROOVEPIX 	0x00D900FF
#define COLOR_PREFPIX   	0x00B9FFFF
#define COLOR_HITMANPIX 	0x969696FF
#define COLOR_SANEWSPIX 	0xDCDCDCFF
//#define COLOR_LOWRIDERSPIX 	0x808080FF
#define COLOR_LOWRIDERSPIX 	0x0066FFFF
#define COLOR_HAMASPIX   	0x008500FF
#define COLOR_VAGOSPIX  	0xFFC801FF
#define COLOR_PISTONSPIX 	0x8000FFFF
#define COLOR_ANGELSPIX 	0xFFE600FF
#define COLOR_AZTECASPIX 	0x01FCFFFF
#define COLOR_RUSSAPIX  	0xFF002DFF
#define COLOR_YAKUZAPIX 	0xA50000FF
#define COLOR_DRIFTERSPIX  	0xA5FF00FF
#define COLOR_CVPIX    		0xFF0000FF
#define COLOR_PCCPIX    	0x0000FFFF
#define COLOR_BOPEPIX   	0x282828FF
#define COLOR_ALQAEDAPIX	0x7C7B31FF
#define COLOR_PCIVILPIX 	0x00FFB4FF
#define COLOR_KINGSPIX  	0xFF4500FF

#define SERVER_INFO         0xFF0000FF

new bool:USE_MASK = false;

//-- Sistema de CP - Marcos
#define CP_Marcos       5000
#define CP_Material     1
#define CP_DinheiroOrg  2

new Emails[10][4] = {
"1",
"2",
"3",
"4",
"5",
"6",
"7",
"8",
"9",
"10"
};

new Apreendido[60][4] = {
"1",
"2",
"3",
"4",
"5",
"6",
"7",
"8",
"9",
"10",
"11",
"12",
"13",
"14",
"15",
"16",
"17",
"18",
"19",
"20",
"21",
"22",
"23",
"24",
"25",
"26",
"27",
"28",
"29",
"30",
"31",
"32",
"33",
"34",
"35",
"36",
"37",
"38",
"39",
"40",
"41",
"42",
"43",
"44",
"45",
"46",
"47",
"48",
"49",
"50",
"51",
"52",
"53",
"54",
"55",
"56",
"57",
"58",
"59",
"60"
};

new OrgsCargos[30][12] = {
"Líder",
"Sub-líder-1",
"Sub-líder-2",
"Membro-1",
"Membro-2",
"Membro-3",
"Membro-4",
"Membro-5",
"Membro-6",
"Membro-7",
"Membro-8",
"Membro-9",
"Membro-10",
"Membro-11",
"Membro-12",
"Membro-13",
"Membro-14",
"Membro-15",
"Membro-16",
"Membro-17",
"Membro-18",
"Membro-19",
"Membro-20",
"Membro-21",
"Membro-22",
"Membro-23",
"Membro-24",
"Membro-25",
"Membro-26",
"Membro-27"
};

new OrgsCargosEx[30][12] = {
"Líder",
"Sub-Líder",
"Sub-Líder",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro",
"Membro"
};

new OrgsNames[MAX_ORGS][19] = {
{"Nenhuma"},
{"Policia Militar"},
{"Polícia Federal"},
{"Forças Armadas"},
{"Bombeiros"},
{"Front Yard Ballas"},
{"Grove Street"},
{"Político"},
{"Hitman"},
{"San News"},
//{"Lowrider"},
//{"Hamas"},
{"Los Santos Vagos"},
{"Black Pistons"},
{"Hell Angels"},
{"Varrio Los Aztecas"},
{"Mafia Russa"},
{"Mafia Yakuza"},
//{"Drifters"},
//{"Bloods"},
//{"PCC"},
{"BOPE"},
{"Al-Qaeda"}
//{"Policia Civil"}
//{"Kings"}
};

new OrgsNamesSmall[MAX_ORGS][19] = {
{"Nenhuma"},
{"PM"},
{"PF"},
{"FA"},
{"Bombeiros"},
{"Ballas"},
{"Grove"},
{"Politico"},
{"Hitman"},
{"SA News"},
//{"Lowrider"},
//{"Hamas"},
{"Vagos"},
{"Bikers"},
{"Angels"},
{"Aztecas"},
{"Russa"},
{"Yakuza"},
//{"Drifters"},
//{"Bloods"},
//{"PCC"},
{"BOPE"},
{"Al-Qaeda"}
//{"PC"}
//{"Kings"}
};

new OrgsSkins[MAX_ORGS] = {
23,
-1,
-1,
-1,
23,
103,
105,
255,
127,
//148,
//48,
44,
110,
100,
122,
173,
117,
123,
//30,
//180,
//21,
-1,
291
//-1
//144
};

/*new OrgsSalaries[MAX_ORGS] = {
0,
6000,//PM
7500,//PF
8000,//FA
4500,//BOMBEIROS
1500,//BALLAS
1500,//GROVE
8500,//POLITICO
7000,//HITMAN
6000,//SA NEWS
4000,//LOWRIDER
7000,//HAMAS
1500,//VAGOS
1500,//PISTONS
5500,//ANGELS
1500,//AZTECAS
9000,//RUSSA
9000,//Yakuza
1500,//DRIFTERS
1500,//BLOODS
1500,//PCC
9000,//BOPE
4000,//ALQAEDA
9000,//PC
1500 //KINGS
};*/

new OrgsSalaries[MAX_ORGS][7] = {
{0,    0,    0,    0,     0,     0,     0}, //Nenhum
{0, 850, 1000, 1320,  1585,  1790,  2000}, //Policia Militar
{0, 950, 1100, 1285,  1490,  1870,  2500}, //FBI
{0, 1200, 1450, 1785,  1990,  2100, 2950}, //Forcas Armadas
{0, 790, 950, 1120,  1480,  1720,  1990}, //Bombeiros
{0,  800,  950, 1100,  1250,  1400,  1550}, //Ballas
{0,  800,  950, 1100,  1250,  1400,  1550}, //Grove
{0, 1220, 1500, 1750, 2100, 2350, 3000}, //Governo
{0, 800, 950, 1120,  1250,  1400,  1550}, //Hitmans
{0, 950, 1120, 1350,  1550,  1750,  1990}, //San News
//{0,  800,  950, 1100,  1250,  1400,  1550}, //Low Riders
//{0, 950, 1100, 1350,  1500,  1750,  1990}, //Hamas
{0,  800,  950, 1100,  1250,  1400,  1550}, //Vagos
{0,  800,  950, 1100,  1250,  1400,  1550}, //Black Pistons
{0,  800,  950, 1100,  1250,  1400,  1550}, //Hell Angels
{0,  800,  950, 1100,  1250,  1400,  1550}, //Aztecas
{0, 950, 1150, 1380,  1550,  1750,  2000}, //Mafia Russa
{0, 950, 1150, 1380,  1550,  1750,  2000}, //Mafia Yakuza
//{0,  800,  950, 1100,  1250,  1400,  1550}, //Drifters
//{0,  800,  950, 1100,  1250,  1400,  1550}, //Bloods
//{0,  800,  950, 1100,  1250,  1400,  1550}, //PCC
{0, 980, 1120, 1295,  1495,  1890,  2800}, //BOPE
{0, 950, 1100, 1350,  1500,  1750,  1990} //Alqaeda
//{0, 980, 1120, 1295,  1495,  1890,  2800} //Policia Civil
//{0,  800,  950, 1100,  1250,  1400,  1550}  //Kings
};

//GPS
#define MAX_GPS 4

enum GPSInfo
{
    GPSName[32],
    Float:GPSPos[3]
};

new GPSList[MAX_GPS][24][GPSInfo] = {{
{"Prefeitura",              {1127.0536, -2036.8794, 69.8837}}, //1
{"Departamento de Policia", {1540.5223, -1676.3557, 13.1143}}, //2
{"Posto Sul",               {1940.3503, -1773.7915, 13.3906}}, //3
{"Auto-Escola",             {960.89980, -940.33860, 40.7551}}, //4
{"Banco",                   {1461.1576, -1021.2320, 24.0365}}, //5
{"Mercado Negro",           {1487.2972, -1725.3938, 6.70200}}, //6
{"Concessionária",          {1748.8490, -1086.6906, 23.9609}}, //7
{"Pier de Pesca",           {383.81090, -2081.1584, 7.83590}}, //8
{"Loja de Roupas",          {2245.7581, -1660.3862, 15.2865}}, //9
{"Cassino",                 {2174.4561, 1677.4171, 10.8203}}, //10
{"Deposito",                {1826.5095, -1768.2873, 13.3828}}, //11
{"24-7",                    {1350.0608, -1749.4111, 13.3685}}, //12
{"Igreja",                  {2230.8091, -1333.2401, 23.9815}}, //13
{"Oficina de Tunning",      {345.49300, -1790.6693, 4.94650}}, //14
{"Lotérica",                {1631.1586, -1167.8228, 24.0781}}, //15
{"Armazem de Drogas",       {1857.2000, -1870.5500, 13.5000}}, //16
{"Detran",                  {1745.5720, -1456.8271, 13.5318}}, //17
{"Neon Shop A",             {1568.3594, -2182.3420, 13.5765}}, //17
{"Neon Shop B",             {696.08310, -1185.4281, 15.2033}}, //20
{"Nenhum",                  {0.0000000, 0.00000000, 0.00000}}, //19
{"",                        {0.0000000, 0.00000000, 0.00000}}, //20
{"",                        {0.0000000, 0.00000000, 0.00000}}, //21
{"",                        {0.0000000, 0.00000000, 0.00000}}, //22
{"",                        {0.0000000, 0.00000000, 0.00000}} //23
},{
{"Vendedor de Drogas",      {1486.4407, -1727.5490, 6.70680}}, //1
{"Vendedor de Armas",       {1362.5498, -1280.2906, 12.9839}}, //2
{"Ladrão de Carros",        {1615.3383, -1502.7059, 14.2260}}, //3
{"Taxista",                 {1743.0668, -1860.7163, 13.5784}}, //4
{"Motoristas de Ônibus",    {1714.8660, -1870.0751, 13.5666}}, //5
{"Jornaleiros",             {912.17730, -993.37670, 37.9598}}, //6
{"Entregadores",            {1786.0092, -2038.7720, 13.5258}}, //7
{"Lutadores",               {2229.4380, -1721.6602, 13.5649}}, //8
{"Caminhoneiros",           {-121.4728, -378.77090, 1.42970}}, //9
{"Lixeiros",                {1658.6176, -1883.6648, 13.5526}}, //10
{"Entregadores de Pizza",   {2094.7805, -1817.1271, 13.3828}}, //11
{"Agentes Funerários",      {930.78310, -1116.9105, 24.0944}}, //12
{"Taxistas Aéreos",         {1665.6559, -1710.7373, 20.4772}}, //13
{"Mecânicos",               {2510.4922, -1468.1914, 24.0243}}, //14
{"Nenhum",                  {0.0000000, 0.00000000, 0.00000}}, //16
{"",                        {0.0000000, 0.00000000, 0.00000}}, //17
{"",                        {0.0000000, 0.00000000, 0.00000}}, //18
{"",                        {0.0000000, 0.00000000, 0.00000}}, //19
{"",                        {0.0000000, 0.00000000, 0.00000}}, //20
{"",                        {0.0000000, 0.00000000, 0.00000}}, //21
{"",                        {0.0000000, 0.00000000, 0.00000}}, //22
{"",                        {0.0000000, 0.00000000, 0.00000}}, //23
{"",                        {0.0000000, 0.00000000, 0.00000}}, //24
{"",                        {0.0000000, 0.00000000, 0.00000}}  //25
},{
{"{8D8DFF}Policia Militar",         {1540.5223, -1676.3557, 13.1143}}, //1
{"{8D8DFF}Polícia Federal",         {334.21910, -1517.0950, 35.4397}}, //2
{"{0A3F04}Forças Armadas",          {-1538.089, 505.313200, 7.17960}}, //3
{"{FF8282}Bombeiros",               {1032.3210, -2300.9087, 13.3423}}, //4
{"{D900D3}Front Yard Ballas",       {2167.0593, -1672.4514, 15.0755}}, //5
{"{00D900}Grove Street Families",  	{2492.3047, -1679.7281, 12.9105}}, //6
{"{00B9FF}Prefeitura",              {1127.0536, -2036.8794, 69.8837}}, //7
{"{969696}Hitmans",                 {-695.4072, 956.335900, 12.2661}}, //8
{"{0066FF}Repórter",               	{911.89800, -993.92400, 37.9482}}, //9
{"{FFC801}Los Santos Vagos",        {2812.3720, -1182.9647, 25.2744}}, //10
{"{8000FF}Black Pistons",      		{2310.0471, -1643.4968, 14.8270}}, //11
{"{FFE600}Hell Angels",             {681.64590, -473.34580, 16.5362}}, //12
{"{01FCFF}Varrio Los Aztecas",      {1821.6655, -2020.6992, 12.9591}}, //13
{"{FF002D}Máfia Russa",             {902.75160, -947.42230, 40.2368}}, //14
{"{A50000}Máfia Yakuza",            {664.82230, -1312.6451, 13.0285}}, //15
{"{282828}BOPE",                    {721.24810, -1388.3111, 13.6830}}, //16
{"{7C7B31}Al-Qaeda",                {339.38590, 2462.91620, 16.4765}}, //17
{"Nenhum",                  {0.0000000, 0.00000000, 0.00000}}, //18
{"",                        {0.0000000, 0.00000000, 0.00000}}, //19
{"",                        {0.0000000, 0.00000000, 0.00000}}, //20
{"",                        {0.0000000, 0.00000000, 0.00000}}, //21
{"",                        {0.0000000, 0.00000000, 0.00000}}, //22
{"",                        {0.0000000, 0.00000000, 0.00000}}, //23
{"",                        {0.0000000, 0.00000000, 0.00000}}  //24
},{
{"24-7",                    {1350.0608, -1749.4111, 13.3685}}, //1
{"Depósito",                {1830.3670, -1768.1752, 13.5468}}, //2
{"Lotérica",                {1631.6375, -1172.3061, 24.0842}}, //3
{"Cassino",                 {2174.4561, 1677.4171, 10.8203}}, //4
{"Prefeitura",              {1127.0536, -2036.8794, 69.8837}}, //5
{"Prédio",                  {1570.9338, -1336.6534, 16.4843}}, //6
{"Igreja",                  {2230.8091, -1333.2401, 23.9815}}, //7
{"Banco",                   {1461.1576, -1021.2320, 24.0365}}, //8
{"Alhambra",                {1835.9438, -1682.3970, 13.3686}}, //9
{"Nenhum",                  {0.0000000, 0.00000000, 0.00000}}, //10
{"",                        {0.0000000, 0.00000000, 0.00000}}, //11
{"",                        {0.0000000, 0.00000000, 0.00000}}, //12
{"",                        {0.0000000, 0.00000000, 0.00000}}, //13
{"",                        {0.0000000, 0.00000000, 0.00000}}, //14
{"",                        {0.0000000, 0.00000000, 0.00000}}, //15
{"",                        {0.0000000, 0.00000000, 0.00000}}, //16
{"",                        {0.0000000, 0.00000000, 0.00000}}, //17
{"",                        {0.0000000, 0.00000000, 0.00000}}, //18
{"",                        {0.0000000, 0.00000000, 0.00000}}, //19
{"",                        {0.0000000, 0.00000000, 0.00000}}, //20
{"",                        {0.0000000, 0.00000000, 0.00000}}, //21
{"",                        {0.0000000, 0.00000000, 0.00000}}, //22
{"",                        {0.0000000, 0.00000000, 0.00000}}, //23
{"",                        {0.0000000, 0.00000000, 0.00000}}  //24
}};

new GPSListNames[MAX_GPS + 2][32] = {
{"Locais Importantes"},
{"Locais de Emprego"},
{"Locais das HQs"},
{"Locais de Roubo"},
{"Locais das Empresas"},
{"Locais das Casas"}
};

new GPSHouses[MAX_PLAYERS],
bool:GPSTeleport[MAX_PLAYERS];

#define MAX_ALARME  4
enum alarmeI
{
    Float:alX,
    Float:alY,
    Float:alZ,
    alVW,
    bool:alAtivo
}
new AlarmeInfo[MAX_ALARME][alarmeI] = {
{1462.4152, -1010.4500, 26.843700, 0, false}, //Fora do Banco
{2313.3784, -8.5798000, 26.742100, 0, false}, //Dentro do Banco
{2526.7595, -1309.4439, 1031.4218, 0, false}, //Corredor do Banco
{2144.1123, 1634.29020, 993.57610, 1, false}  //Cofre do Banco
};

new OuvindoAlarme[MAX_PLAYERS];

new OrgsColors[MAX_ORGS] = {
0xC0C0C077,
COLOR_PM,
COLOR_PF,
COLOR_FA,
COLOR_MEDICOS,
COLOR_BALLAS,
COLOR_GROOVE,
COLOR_PREF,
COLOR_HITMAN,
COLOR_SANEWS,
//COLOR_LOWRIDERS,
//COLOR_HAMAS,
COLOR_VAGOS,
COLOR_PISTONS,
COLOR_ANGELS,
COLOR_AZTECAS,
COLOR_RUSSA,
COLOR_YAKUZA,
//COLOR_DRIFTERS,
//COLOR_CV,
//COLOR_PCC,
COLOR_BOPE,
COLOR_ALQAEDA
//COLOR_PCIVIL
//COLOR_KINGS
/*COLOR_PM,
COLOR_PM   */
};

new OrgsColorTags[MAX_ORGS][12] = {
{"C0C0C0"},
{"8D8DFF"},
{"8D8DFF"},
{"0A3F04"},
{"FF8282"},
{"D900D3"},
{"00D900"},
{"00B9FF"},
{"969696"},
//{"DCDCDC"},
{"0066FF"},
//{"008500"},
{"FFC801"},
{"8000FF"},
{"FFE600"},
{"01FCFF"},
{"FF002D"},
{"A50000"},
//{"A5FF00"},
//{"FF0000"},
//{"0000FF"},
{"282828"},
{"7C7B31"}
//{"00FFB4"}
//{"FF4500"}
};

new PixColors[MAX_ORGS] = {
0xFFFFFFFF,
COLOR_PMPIX,
COLOR_PFPIX,
COLOR_FAPIX,
COLOR_MEDICOSPIX,
COLOR_BALLASPIX,
COLOR_GROOVEPIX,
COLOR_PREFPIX,
COLOR_HITMANPIX,
COLOR_SANEWSPIX,
//COLOR_LOWRIDERSPIX,
//COLOR_HAMASPIX,
COLOR_VAGOSPIX,
COLOR_PISTONSPIX,
COLOR_ANGELSPIX,
COLOR_AZTECASPIX,
COLOR_RUSSAPIX,
COLOR_YAKUZAPIX,
//COLOR_DRIFTERSPIX,
//COLOR_CVPIX,
//COLOR_PCCPIX,
COLOR_BOPEPIX,
COLOR_ALQAEDAPIX
//COLOR_PCIVILPIX
//COLOR_KINGSPIX
};

new WarColor[3] = {
0x0A3F0430,
0x00850030,
0x7C7B3130
};

/*>-=-=-=-=-=-=-=-=-=-=-=-=-=-=<
 Jobs Defines - Don't change
 >-=-=-=-=-=-=-=-=-=-=-=-=-=-=<*/
#define MAX_JOBS    19

#define DESEMPREGADO    0
#define DETETIVE        1
#define ADVOGADO    	2
#define PROSTITUTA  	3
#define VDROGAS 		4
#define LCARROS 		5
#define MECANICO    	6
#define VARMAS       	7
#define LUTADOR         8
#define TAXISTA         9
#define JORNALEIRO  	10
#define CAMINHONEIRO    11
#define MEDICO  		12
#define ENTREGADOR  	13
#define MOTORISTA   	14
#define EPIZZA  		15
#define FUNERARIO	 	16
#define LIXEIRO     	17
#define TAXISTAAEREO   	18

#define JOB_SAL         1200

new JobsNames[MAX_JOBS][20] = {
{"Desempregado"},
{"Detetive"},
{"Advogado"},
{"Prostituta"},
{"Vendedor de drogas"},
{"Ladrão de carros"},
{"Mecânico"},
{"Vendedor de armas"},
{"Lutador"},
{"Taxista"},
{"Jornaleiro"},
{"Caminhoneiro"},
{"Médico"},
{"Entregador"},
{"Motorista de onibus"},
{"Entregador de Pizza"},
{"Agente funerário"},
{"Lixeiro"},
{"Taxista Aéreo"}
};

new JobsCommands[MAX_JOBS][80] = {
{"----"},
{"/encontrar"},
{"/libertar - /presos"},
{"/sexo"},
{"/venderdrogas - /liberardrogas - /j"},
{"/desmanchar - /j"},
{"/conserto - /abastecimento - /j - /batercartao e busina guincha um carro!"},
{"/venderarmas - /j - /liberarmateriais"},// /contrabando -
{"/lutar - /boxstats"},
{"/contagem /j"},
{"Nenhum"},
{"Vá onde estão os caminhões /gps empregos /j"},
{"/curar /j"},
{"/compraprods - /venderprods - /carga - /devolverprods"},
{"Motorista de onibus"},
{"/batercartao - /venderpizza"},
{"Vá até o cemitério de Los Santos."},
{"Vá onde estão os caminhões /gps empregos /j"},
{"/contagem /j"}
};

//0 = Civis, -1 = Todos, -2 Criminosos, -3 Cops, -4 Sem ser Criminoso, -5 COPS e Al-Qaeda
new AllowedOrgJobs_[MAX_JOBS] = {
-1, //Desempregado
-4, //Detetive
0,  //Advogado
-1, //Postituta
-2, //Vendedor de Drogas
-2, //Ladrão de Carros
-1, //Mecânico
-2, //Vendedor de Armas
-1, //Lutador
-1, //Taxista
-1, //Jornaleiro
-1, //Caminhoneiro
-4, //Medico
-1, //Entregador
-1, //Motorista de onibus
-1, //Entregador de Pizza
-1, //Agente Funerario
-1, //Lixeiro
-1 //Taxista Aéreo
};

new bool:AllowedOrgJobs[MAX_JOBS][MAX_ORGS];

//---------------------------- Trunk
enum _TrunkInfo
{
	TrunkArmas[5],
	TrunkBalas[5],
	TrunkDrogas,
	TrunkMateriais,
	TrunkCordas,
	Trunk2Dinheiro,
	Trunk2Cigarros,
	Trunk2Drogas
}
new TrunkInfo[MAX_VEHICLES + 1][_TrunkInfo];

new TrunkPlayer[MAX_PLAYERS][2];

/*>-=-=-=-=-=-=-=-=-=-=-=-=-=-=<
 Robs Defines - Don't change
 >-=-=-=-=-=-=-=-=-=-=-=-=-=-=<*/
#define MAX_ROBS        10

#define ROB_DEPOSITO    1
#define ROB_PREF        2
#define ROB_PREDIO      3
#define ROB_IGREJA      4
#define ROB_NORTE       5
#define ROB_LOTERICA    6
#define ROB_CASSINO     7
#define ROB_BANCO       8
#define ROB_ALHAMBRA    9

enum rob_data
{
	bool:CanSteal,
	bool:Stealing,
	LocName[24],
	Robber,
	Float:CoordX,
	Float:CoordY,
	Float:CoordZ,
	RobStep,
    RouboVW,
    RouboCofre
}

new Rob[MAX_ROBS][rob_data] = {
{true, false, "----", INVALID_PLAYER_ID,0.0,0.0,0.0, 0, -1},
{true, false, "Cofre do Depósito", INVALID_PLAYER_ID, 1077.6210,2096.9883,10.8203, 0, 0, -1},
{true, false, "Cofre da Prefeitura", INVALID_PLAYER_ID, 346.3626,161.4442,1025.7964, 0, 0, 2},
{true, false, "Cofre do Prédio", INVALID_PLAYER_ID, 962.7317,2096.8953,1011.0223, 0, 0, 1},
{true, false, "Cofre da Igreja", INVALID_PLAYER_ID, 366.8767,2329.3267,1890.6047, 0, 0, 4},
{true, false, "Cofre da loja 24-7", INVALID_PLAYER_ID, -27.7342,-52.5678,1003.5469, 0, 0, -1},
{true, false, "Cofre da Lotérica", INVALID_PLAYER_ID, 821.1687,9.6579,1004.1954, 0, 0, 0},
{true, false, "Cofre do Cassino", INVALID_PLAYER_ID, 2144.2375,1641.3346,993.5761, 0, 0, -1},
{true, false, "Cofre do Banco", INVALID_PLAYER_ID, 2144.2390,1639.9483,993.5761, 0, 1, -1},
{true, false, "Cofre do Alhambra", INVALID_PLAYER_ID, 475.8192,-14.9435,1003.6953, 0, 0, 3}
};

new HoldingOrgMoney[MAX_PLAYERS];
new RobCofres[5][2];

/*>-=-=-=-=-=-=-=-=-=-=-=-=-=-=<
 ATM Defines - Don't change
 >-=-=-=-=-=-=-=-=-=-=-=-=-=-=<*/
#define MAX_ATMS        9

enum atmInfo
{
    Float:ATMPosX,
    Float:ATMPosY,
    Float:ATMPosZ,
    ATMObj,
    bool:ATMRoubado,
    bool:ATMPodeUsar,
    ATMNome[32],
}

new Float:ATMs[MAX_ATMS][atmInfo] = {
{2631.9336, -1265.4479, 50.6398, -1, false, true, "East Los Santos"},
{1929.3555, -1769.6917, 14.3439, -1, false, true, "Posto de Gasolina"},
{1103.0015, -1448.9043, 16.4939, -1, false, true, "Shopping"},
{1134.9240, -923.29760, 44.0976, -1, false, true, "Bairro Temple"},
{-122.0384, -367.30120, 1.83180, -1, false, true, "Bluebarry"},
{360.73720, -1762.7653, 5.49280, -1, false, true, "Santa Maria Beach"},
{2866.5391, -1912.8894, 11.1094, -1, false, true, "East Beach"},
{1288.0024, -1770.7633, 13.5468, -1, false, true, "Quiosque"},
{1285.1527, -1646.3215, 13.5839, -1, false, true, "Banco"} //Dentro de uma Construção '-'
//{2308.9600, -13.252100, 26.7422, -1, false, true, "Banco"} //Banco .-.
};

new ATMsTimer[MAX_ATMS];

//--------------------------------//
//Boca
#define MAX_BOCAS       3

new Float:BocaCoords[MAX_BOCAS][3] = {
	{2505.3520, -1218.8549, 38.6299},
	{2679.7260, -1398.3269, 30.5737},
	{585.4180, -1551.0290, 15.5227}
};

//--------------------------------//
//Bares
#define MAX_BAR			3
#define BAR_DIALOG      1569

enum _barDialog
{
	_bdItem,
	_bdSabor,
	_bdTamanho
}
new BarDialogInfo[MAX_PLAYERS][_barDialog];
new BarDialog[MAX_PLAYERS];

new Float:BarCoords[MAX_BAR][3] = {
	{1020.7429, -639.6607, 120.5344},
	{404.1171, -1544.3975, 32.2734},
	{1289.5096, -1777.7152, 13.5468}
};

new BarNome[MAX_BAR][] = {
	{"Bar de Vinewood"},
	{"Quiosque"},
	{"Quiosque"}
};

new BarPrecos[3][3] = {
	{18, 6, 3},
	{24, 8, 4},
	{20, 15, 10}
};

//----------------------------------------------------------------//

#define MaxIrc		20
#define IrcLivre	0
#define IrcAdmin	1
#define IrcFamilia	2

enum _IrcInfo
{
	IrcConnectedPlayers,
	IrcLider[MAX_PLAYER_NAME],
	IrcMaxMembros,
	IrcMembros,
	IrcNome[32],
	IrcTipo
}
new IrcInfo[MaxIrc][_IrcInfo];

new IrcTime[MAX_PLAYERS];

//----------------------------------------------------------------//
//************************ Colors Defines ************************//
//----------------------------------------------------------------//
#define COLOR_OOC 0xB1C8FBAA
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_COCONUT 0x96D742FF
#define COLOR_GREEN 0x33AA33AA
#define COLOR_RED 0xAA3333AA
#define COLOR_REDEVAS 0xFF6A6AFF
#define COLOR_YELLOW 0xFFFF00FF
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_BLUE 0x0000BBAA
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_BLUERADIO 0x8D8DFF00
#define COLOR_ORANGE 0xFF9900AA
#define COLOR_LIGHTBLUE 0x33CCFFFF
#define COLOR_LIGHTYELLOW 0xFAEAA9FF
#define COLOR_LIGHTGREEN 0x5BC476FF
#define COLOR_LIGHTORANGE 0xF7A26FFF //f7a200
#define COLOR_LIGHTRED 0xFF6A6AFF
#define COLOR_MAROON 0x673B15FF
#define COLOR_BARRAS 0x96D742AA
#define COLOR_GOLD 0xFFD700AA
#define COLOR_ACTION 0xDC69EBAA
#define COLOR_ORCHID 0xDA70D6AA
#define COLOR_PLUM 0xDDA0DDFF
#define COLOR_PINK 0xFF69B4FF
#define COLOR_TEXT1 0xFFFFFFFF
#define COLOR_TEXT2 0xBDBDBDFF
#define COLOR_ELOGIO 0xB4DDA0FF
#define COLOR_STATS 0x9941BDFF
#define COLOR_BAR 0x0F58CFFF
#define COLOR_BAR_BACK 0x083278FF
#define COLOR_TRANSFENDER 0xD5AAFFFF
#define COLOR_TRANSFENDER2 0xB164FFFF
#define COLOR_LIGHTGREY 0xBDBDBDFF
#define COLOR_SOFTBLUE 0x5994FFFF
#define COLOR_MARINE 0x00BB99FF
#define COLOR_ADMIN3 0x8B795EFF
#define COLOR_VERDE 0x00FF00FF

#define COLOR_ADMIN 0x00808000
#define ADMIN_RED 0xFB0000FF


#define COLOR_PURPLE  0xC2A2DAAA
#define COLOR_NOTICIA 0xA2FF00FF

new PizzaDialog[MAX_PLAYERS];
new PizzaSabores[5][] = {
{"Frango"},
{"Calabresa"},
{"Presunto"},
{"Portuguesa"},
{"Queijo"}
};

//Locais
new MonthNames[12][16] = {
	"Janeiro",
	"Fevereiro",
	"Março",
	"Abril",
	"Maio",
	"Junho",
	"Julho",
	"Agosto",
	"Setembro",
	"Outubro",
	"Novembro",
	"Dezembro"
};

enum zoneinfo {
	zone_name[27],
    Float:zone_minx,
    Float:zone_miny,
    Float:zone_minz,
    Float:zone_maxx,
    Float:zone_maxy,
    Float:zone_maxz
}

new zones[][zoneinfo] = {
{ "The Big Ear",                -410.00,  1403.30,    -3.00,  -137.90,  1681.20,   200.00},
{ "Aldea Malvada",               -1372.10,  2498.50,     0.00, -1277.50,  2615.30,   200.00},
{ "Angel Pine",                  -2324.90, -2584.20,    -6.10, -1964.20, -2212.10,   200.00},
{ "Arco del Oeste",               -901.10,  2221.80,     0.00,  -592.00,  2571.90,   200.00},
{ "Avispa Country Club",         -2646.40,  -355.40,     0.00, -2270.00,  -222.50,   200.00},
{ "Avispa Country Club",         -2831.80,  -430.20,    -6.10, -2646.40,  -222.50,   200.00},
{ "Avispa Country Club",         -2361.50,  -417.10,     0.00, -2270.00,  -355.40,   200.00},
{ "Avispa Country Club",         -2667.80,  -302.10,   -28.80, -2646.40,  -262.30,    71.10},
{ "Avispa Country Club",         -2470.00,  -355.40,     0.00, -2270.00,  -318.40,    46.10},
{ "Avispa Country Club",         -2550.00,  -355.40,     0.00, -2470.00,  -318.40,    39.70},
{ "Back o Beyond",               -1166.90, -2641.10,     0.00,  -321.70, -1856.00,   200.00},
{ "Battery Point",               -2741.00,  1268.40,    -4.50, -2533.00,  1490.40,   200.00},
{ "Bayside",                     -2741.00,  2175.10,     0.00, -2353.10,  2722.70,   200.00},
{ "Bayside Marina",              -2353.10,  2275.70,     0.00, -2153.10,  2475.70,   200.00},
{ "Beacon Hill",                  -399.60, -1075.50,    -1.40,  -319.00,  -977.50,   198.50},
{ "Blackfield",                    964.30,  1203.20,   -89.00,  1197.30,  1403.20,   110.90},
{ "Blackfield",                    964.30,  1403.20,   -89.00,  1197.30,  1726.20,   110.90},
{ "Blackfield Chapel",            1375.60,   596.30,   -89.00,  1558.00,   823.20,   110.90},
{ "Blackfield Chapel",            1325.60,   596.30,   -89.00,  1375.60,   795.00,   110.90},
{ "Blackfield Intersection",      1197.30,  1044.60,   -89.00,  1277.00,  1163.30,   110.90},
{ "Blackfield Intersection",      1166.50,   795.00,   -89.00,  1375.60,  1044.60,   110.90},
{ "Blackfield Intersection",      1277.00,  1044.60,   -89.00,  1315.30,  1087.60,   110.90},
{ "Blackfield Intersection",      1375.60,   823.20,   -89.00,  1457.30,   919.40,   110.90},
{ "Blueberry",                     104.50,  -220.10,     2.30,   349.60,   152.20,   200.00},
{ "Blueberry",                      19.60,  -404.10,     3.80,   349.60,  -220.10,   200.00},
{ "Blueberry Acres",              -319.60,  -220.10,     0.00,   104.50,   293.30,   200.00},
{ "Caligula's Palace",            2087.30,  1543.20,   -89.00,  2437.30,  1703.20,   110.90},
{ "Caligula's Palace",            2137.40,  1703.20,   -89.00,  2437.30,  1783.20,   110.90},
{ "Calton Heights",              -2274.10,   744.10,    -6.10, -1982.30,  1358.90,   200.00},
{ "Chinatown",                   -2274.10,   578.30,    -7.60, -2078.60,   744.10,   200.00},
{ "City Hall",                   -2867.80,   277.40,    -9.10, -2593.40,   458.40,   200.00},
{ "Come-A-Lot",                   2087.30,   943.20,   -89.00,  2623.10,  1203.20,   110.90},
{ "Commerce",                     1323.90, -1842.20,   -89.00,  1701.90, -1722.20,   110.90},
{ "Commerce",                     1323.90, -1722.20,   -89.00,  1440.90, -1577.50,   110.90},
{ "Commerce",                     1370.80, -1577.50,   -89.00,  1463.90, -1384.90,   110.90},
{ "Commerce",                     1463.90, -1577.50,   -89.00,  1667.90, -1430.80,   110.90},
{ "Commerce",                     1583.50, -1722.20,   -89.00,  1758.90, -1577.50,   110.90},
{ "Commerce",                     1667.90, -1577.50,   -89.00,  1812.60, -1430.80,   110.90},
{ "Conference Center",            1046.10, -1804.20,   -89.00,  1323.90, -1722.20,   110.90},
{ "Conference Center",            1073.20, -1842.20,   -89.00,  1323.90, -1804.20,   110.90},
{ "Cranberry Station",           -2007.80,    56.30,     0.00, -1922.00,   224.70,   100.00},
{ "Creek",                        2749.90,  1937.20,   -89.00,  2921.60,  2669.70,   110.90},
{ "Dillimore",                     580.70,  -674.80,    -9.50,   861.00,  -404.70,   200.00},
{ "Doherty",                     -2270.00,  -324.10,    -0.00, -1794.90,  -222.50,   200.00},
{ "Doherty",                     -2173.00,  -222.50,    -0.00, -1794.90,   265.20,   200.00},
{ "Downtown",                    -1982.30,   744.10,    -6.10, -1871.70,  1274.20,   200.00},
{ "Downtown",                    -1871.70,  1176.40,    -4.50, -1620.30,  1274.20,   200.00},
{ "Downtown",                    -1700.00,   744.20,    -6.10, -1580.00,  1176.50,   200.00},
{ "Downtown",                    -1580.00,   744.20,    -6.10, -1499.80,  1025.90,   200.00},
{ "Downtown",                    -2078.60,   578.30,    -7.60, -1499.80,   744.20,   200.00},
{ "Downtown",                    -1993.20,   265.20,    -9.10, -1794.90,   578.30,   200.00},
{ "Downtown Los Santos",          1463.90, -1430.80,   -89.00,  1724.70, -1290.80,   110.90},
{ "Downtown Los Santos",          1724.70, -1430.80,   -89.00,  1812.60, -1250.90,   110.90},
{ "Downtown Los Santos",          1463.90, -1290.80,   -89.00,  1724.70, -1150.80,   110.90},
{ "Downtown Los Santos",          1370.80, -1384.90,   -89.00,  1463.90, -1170.80,   110.90},
{ "Downtown Los Santos",          1724.70, -1250.90,   -89.00,  1812.60, -1150.80,   110.90},
{ "Downtown Los Santos",          1370.80, -1170.80,   -89.00,  1463.90, -1130.80,   110.90},
{ "Downtown Los Santos",          1378.30, -1130.80,   -89.00,  1463.90, -1026.30,   110.90},
{ "Downtown Los Santos",          1391.00, -1026.30,   -89.00,  1463.90,  -926.90,   110.90},
{ "Downtown Los Santos",          1507.50, -1385.20,   110.90,  1582.50, -1325.30,   335.90},
{ "East Beach",                   2632.80, -1852.80,   -89.00,  2959.30, -1668.10,   110.90},
{ "East Beach",                   2632.80, -1668.10,   -89.00,  2747.70, -1393.40,   110.90},
{ "East Beach",                   2747.70, -1668.10,   -89.00,  2959.30, -1498.60,   110.90},
{ "East Beach",                   2747.70, -1498.60,   -89.00,  2959.30, -1120.00,   110.90},
{ "East Los Santos",              2421.00, -1628.50,   -89.00,  2632.80, -1454.30,   110.90},
{ "East Los Santos",              2222.50, -1628.50,   -89.00,  2421.00, -1494.00,   110.90},
{ "East Los Santos",              2266.20, -1494.00,   -89.00,  2381.60, -1372.00,   110.90},
{ "East Los Santos",              2381.60, -1494.00,   -89.00,  2421.00, -1454.30,   110.90},
{ "East Los Santos",              2281.40, -1372.00,   -89.00,  2381.60, -1135.00,   110.90},
{ "East Los Santos",              2381.60, -1454.30,   -89.00,  2462.10, -1135.00,   110.90},
{ "East Los Santos",              2462.10, -1454.30,   -89.00,  2581.70, -1135.00,   110.90},
{ "Easter Basin",                -1794.90,   249.90,    -9.10, -1242.90,   578.30,   200.00},
{ "Easter Basin",                -1794.90,   -50.00,    -0.00, -1499.80,   249.90,   200.00},
{ "Easter Bay Airport",          -1499.80,   -50.00,    -0.00, -1242.90,   249.90,   200.00},
{ "Easter Bay Airport",          -1794.90,  -730.10,    -3.00, -1213.90,   -50.00,   200.00},
{ "Easter Bay Airport",          -1213.90,  -730.10,     0.00, -1132.80,   -50.00,   200.00},
{ "Easter Bay Airport",          -1242.90,   -50.00,     0.00, -1213.90,   578.30,   200.00},
{ "Easter Bay Airport",          -1213.90,   -50.00,    -4.50,  -947.90,   578.30,   200.00},
{ "Easter Bay Airport",          -1315.40,  -405.30,    15.40, -1264.40,  -209.50,    25.40},
{ "Easter Bay Airport",          -1354.30,  -287.30,    15.40, -1315.40,  -209.50,    25.40},
{ "Easter Bay Airport",          -1490.30,  -209.50,    15.40, -1264.40,  -148.30,    25.40},
{ "Easter Bay Chemicals",        -1132.80,  -768.00,     0.00,  -956.40,  -578.10,   200.00},
{ "Easter Bay Chemicals",        -1132.80,  -787.30,     0.00,  -956.40,  -768.00,   200.00},
{ "El Castillo del Diablo",       -464.50,  2217.60,     0.00,  -208.50,  2580.30,   200.00},
{ "El Castillo del Diablo",       -208.50,  2123.00,    -7.60,   114.00,  2337.10,   200.00},
{ "El Castillo del Diablo",       -208.50,  2337.10,     0.00,     8.40,  2487.10,   200.00},
{ "El Corona",                    1812.60, -2179.20,   -89.00,  1970.60, -1852.80,   110.90},
{ "El Corona",                    1692.60, -2179.20,   -89.00,  1812.60, -1842.20,   110.90},
{ "El Quebrados",                -1645.20,  2498.50,     0.00, -1372.10,  2777.80,   200.00},
{ "Esplanade East",              -1620.30,  1176.50,    -4.50, -1580.00,  1274.20,   200.00},
{ "Esplanade East",              -1580.00,  1025.90,    -6.10, -1499.80,  1274.20,   200.00},
{ "Esplanade East",              -1499.80,   578.30,   -79.60, -1339.80,  1274.20,    20.30},
{ "Esplanade North",             -2533.00,  1358.90,    -4.50, -1996.60,  1501.20,   200.00},
{ "Esplanade North",             -1996.60,  1358.90,    -4.50, -1524.20,  1592.50,   200.00},
{ "Esplanade North",             -1982.30,  1274.20,    -4.50, -1524.20,  1358.90,   200.00},
{ "Fallen Tree",                  -792.20,  -698.50,    -5.30,  -452.40,  -380.00,   200.00},
{ "Fallow Bridge",                 434.30,   366.50,     0.00,   603.00,   555.60,   200.00},
{ "Fern Ridge",                    508.10,  -139.20,     0.00,  1306.60,   119.50,   200.00},
{ "Financial",                   -1871.70,   744.10,    -6.10, -1701.30,  1176.40,   300.00},
{ "Fisher's Lagoon",              1916.90,  -233.30,  -100.00,  2131.70,    13.80,   200.00},
{ "Flint Intersection",           -187.70, -1596.70,   -89.00,    17.00, -1276.60,   110.90},
{ "Flint Range",                  -594.10, -1648.50,     0.00,  -187.70, -1276.60,   200.00},
{ "Fort Carson",                  -376.20,   826.30,    -3.00,   123.70,  1220.40,   200.00},
{ "Foster Valley",               -2270.00,  -430.20,    -0.00, -2178.60,  -324.10,   200.00},
{ "Foster Valley",               -2178.60,  -599.80,    -0.00, -1794.90,  -324.10,   200.00},
{ "Foster Valley",               -2178.60, -1115.50,     0.00, -1794.90,  -599.80,   200.00},
{ "Foster Valley",               -2178.60, -1250.90,     0.00, -1794.90, -1115.50,   200.00},
{ "Frederick Bridge",             2759.20,   296.50,     0.00,  2774.20,   594.70,   200.00},
{ "Gant Bridge",                 -2741.40,  1659.60,    -6.10, -2616.40,  2175.10,   200.00},
{ "Gant Bridge",                 -2741.00,  1490.40,    -6.10, -2616.40,  1659.60,   200.00},
{ "Ganton",                       2222.50, -1852.80,   -89.00,  2632.80, -1722.30,   110.90},
{ "Ganton",                       2222.50, -1722.30,   -89.00,  2632.80, -1628.50,   110.90},
{ "Garcia",                      -2411.20,  -222.50,    -0.00, -2173.00,   265.20,   200.00},
{ "Garcia",                      -2395.10,  -222.50,    -5.30, -2354.00,  -204.70,   200.00},
{ "Garver Bridge",               -1339.80,   828.10,   -89.00, -1213.90,  1057.00,   110.90},
{ "Garver Bridge",               -1213.90,   950.00,   -89.00, -1087.90,  1178.90,   110.90},
{ "Garver Bridge",               -1499.80,   696.40,  -179.60, -1339.80,   925.30,    20.30},
{ "Glen Park",                    1812.60, -1449.60,   -89.00,  1996.90, -1350.70,   110.90},
{ "Glen Park",                    1812.60, -1100.80,   -89.00,  1994.30,  -973.30,   110.90},
{ "Glen Park",                    1812.60, -1350.70,   -89.00,  2056.80, -1100.80,   110.90},
{ "Green Palms",                   176.50,  1305.40,    -3.00,   338.60,  1520.70,   200.00},
{ "Greenglass College",            964.30,  1044.60,   -89.00,  1197.30,  1203.20,   110.90},
{ "Greenglass College",            964.30,   930.80,   -89.00,  1166.50,  1044.60,   110.90},
{ "Hampton Barns",                 603.00,   264.30,     0.00,   761.90,   366.50,   200.00},
{ "Hankypanky Point",             2576.90,    62.10,     0.00,  2759.20,   385.50,   200.00},
{ "Harry Gold Parkway",           1777.30,   863.20,   -89.00,  1817.30,  2342.80,   110.90},
{ "Hashbury",                    -2593.40,  -222.50,    -0.00, -2411.20,    54.70,   200.00},
{ "Hilltop Farm",                  967.30,  -450.30,    -3.00,  1176.70,  -217.90,   200.00},
{ "Hunter Quarry",                 337.20,   710.80,  -115.20,   860.50,  1031.70,   203.70},
{ "Idlewood",                     1812.60, -1852.80,   -89.00,  1971.60, -1742.30,   110.90},
{ "Idlewood",                     1812.60, -1742.30,   -89.00,  1951.60, -1602.30,   110.90},
{ "Idlewood",                     1951.60, -1742.30,   -89.00,  2124.60, -1602.30,   110.90},
{ "Idlewood",                     1812.60, -1602.30,   -89.00,  2124.60, -1449.60,   110.90},
{ "Idlewood",                     2124.60, -1742.30,   -89.00,  2222.50, -1494.00,   110.90},
{ "Idlewood",                     1971.60, -1852.80,   -89.00,  2222.50, -1742.30,   110.90},
{ "Jefferson",                    1996.90, -1449.60,   -89.00,  2056.80, -1350.70,   110.90},
{ "Jefferson",                    2124.60, -1494.00,   -89.00,  2266.20, -1449.60,   110.90},
{ "Jefferson",                    2056.80, -1372.00,   -89.00,  2281.40, -1210.70,   110.90},
{ "Jefferson",                    2056.80, -1210.70,   -89.00,  2185.30, -1126.30,   110.90},
{ "Jefferson",                    2185.30, -1210.70,   -89.00,  2281.40, -1154.50,   110.90},
{ "Jefferson",                    2056.80, -1449.60,   -89.00,  2266.20, -1372.00,   110.90},
{ "Julius Thruway East",          2623.10,   943.20,   -89.00,  2749.90,  1055.90,   110.90},
{ "Julius Thruway East",          2685.10,  1055.90,   -89.00,  2749.90,  2626.50,   110.90},
{ "Julius Thruway East",          2536.40,  2442.50,   -89.00,  2685.10,  2542.50,   110.90},
{ "Julius Thruway East",          2625.10,  2202.70,   -89.00,  2685.10,  2442.50,   110.90},
{ "Julius Thruway North",         2498.20,  2542.50,   -89.00,  2685.10,  2626.50,   110.90},
{ "Julius Thruway North",         2237.40,  2542.50,   -89.00,  2498.20,  2663.10,   110.90},
{ "Julius Thruway North",         2121.40,  2508.20,   -89.00,  2237.40,  2663.10,   110.90},
{ "Julius Thruway North",         1938.80,  2508.20,   -89.00,  2121.40,  2624.20,   110.90},
{ "Julius Thruway North",         1534.50,  2433.20,   -89.00,  1848.40,  2583.20,   110.90},
{ "Julius Thruway North",         1848.40,  2478.40,   -89.00,  1938.80,  2553.40,   110.90},
{ "Julius Thruway North",         1704.50,  2342.80,   -89.00,  1848.40,  2433.20,   110.90},
{ "Julius Thruway North",         1377.30,  2433.20,   -89.00,  1534.50,  2507.20,   110.90},
{ "Julius Thruway South",         1457.30,   823.20,   -89.00,  2377.30,   863.20,   110.90},
{ "Julius Thruway South",         2377.30,   788.80,   -89.00,  2537.30,   897.90,   110.90},
{ "Julius Thruway West",          1197.30,  1163.30,   -89.00,  1236.60,  2243.20,   110.90},
{ "Julius Thruway West",          1236.60,  2142.80,   -89.00,  1297.40,  2243.20,   110.90},
{ "Juniper Hill",                -2533.00,   578.30,    -7.60, -2274.10,   968.30,   200.00},
{ "Juniper Hollow",              -2533.00,   968.30,    -6.10, -2274.10,  1358.90,   200.00},
{ "K.A.C.C. Military Fuels",      2498.20,  2626.50,   -89.00,  2749.90,  2861.50,   110.90},
{ "Kincaid Bridge",              -1339.80,   599.20,   -89.00, -1213.90,   828.10,   110.90},
{ "Kincaid Bridge",              -1213.90,   721.10,   -89.00, -1087.90,   950.00,   110.90},
{ "Kincaid Bridge",              -1087.90,   855.30,   -89.00,  -961.90,   986.20,   110.90},
{ "King's",                      -2329.30,   458.40,    -7.60, -1993.20,   578.30,   200.00},
{ "King's",                      -2411.20,   265.20,    -9.10, -1993.20,   373.50,   200.00},
{ "King's",                      -2253.50,   373.50,    -9.10, -1993.20,   458.40,   200.00},
{ "LVA Freight Depot",            1457.30,   863.20,   -89.00,  1777.40,  1143.20,   110.90},
{ "LVA Freight Depot",            1375.60,   919.40,   -89.00,  1457.30,  1203.20,   110.90},
{ "LVA Freight Depot",            1277.00,  1087.60,   -89.00,  1375.60,  1203.20,   110.90},
{ "LVA Freight Depot",            1315.30,  1044.60,   -89.00,  1375.60,  1087.60,   110.90},
{ "LVA Freight Depot",            1236.60,  1163.40,   -89.00,  1277.00,  1203.20,   110.90},
{ "Las Barrancas",                -926.10,  1398.70,    -3.00,  -719.20,  1634.60,   200.00},
{ "Las Brujas",                   -365.10,  2123.00,    -3.00,  -208.50,  2217.60,   200.00},
{ "Las Colinas",                  1994.30, -1100.80,   -89.00,  2056.80,  -920.80,   110.90},
{ "Las Colinas",                  2056.80, -1126.30,   -89.00,  2126.80,  -920.80,   110.90},
{ "Las Colinas",                  2185.30, -1154.50,   -89.00,  2281.40,  -934.40,   110.90},
{ "Las Colinas",                  2126.80, -1126.30,   -89.00,  2185.30,  -934.40,   110.90},
{ "Las Colinas",                  2747.70, -1120.00,   -89.00,  2959.30,  -945.00,   110.90},
{ "Las Colinas",                  2632.70, -1135.00,   -89.00,  2747.70,  -945.00,   110.90},
{ "Las Colinas",                  2281.40, -1135.00,   -89.00,  2632.70,  -945.00,   110.90},
{ "Las Payasadas",                -354.30,  2580.30,     2.00,  -133.60,  2816.80,   200.00},
{ "Las Venturas Airport",         1236.60,  1203.20,   -89.00,  1457.30,  1883.10,   110.90},
{ "Las Venturas Airport",         1457.30,  1203.20,   -89.00,  1777.30,  1883.10,   110.90},
{ "Las Venturas Airport",         1457.30,  1143.20,   -89.00,  1777.40,  1203.20,   110.90},
{ "Las Venturas Airport",         1515.80,  1586.40,   -12.50,  1729.90,  1714.50,    87.50},
{ "Last Dime Motel",              1823.00,   596.30,   -89.00,  1997.20,   823.20,   110.90},
{ "Leafy Hollow",                -1166.90, -1856.00,     0.00,  -815.60, -1602.00,   200.00},
{ "Lil' Probe Inn",                -90.20,  1286.80,    -3.00,   153.80,  1554.10,   200.00},
{ "Linden Side",                  2749.90,   943.20,   -89.00,  2923.30,  1198.90,   110.90},
{ "Linden Station",               2749.90,  1198.90,   -89.00,  2923.30,  1548.90,   110.90},
{ "Linden Station",               2811.20,  1229.50,   -39.50,  2861.20,  1407.50,    60.40},
{ "Little Mexico",                1701.90, -1842.20,   -89.00,  1812.60, -1722.20,   110.90},
{ "Little Mexico",                1758.90, -1722.20,   -89.00,  1812.60, -1577.50,   110.90},
{ "Los Flores",                   2581.70, -1454.30,   -89.00,  2632.80, -1393.40,   110.90},
{ "Los Flores",                   2581.70, -1393.40,   -89.00,  2747.70, -1135.00,   110.90},
{ "Los Santos International",     1249.60, -2394.30,   -89.00,  1852.00, -2179.20,   110.90},
{ "Los Santos International",     1852.00, -2394.30,   -89.00,  2089.00, -2179.20,   110.90},
{ "Los Santos International",     1382.70, -2730.80,   -89.00,  2201.80, -2394.30,   110.90},
{ "Los Santos International",     1974.60, -2394.30,   -39.00,  2089.00, -2256.50,    60.90},
{ "Los Santos International",     1400.90, -2669.20,   -39.00,  2189.80, -2597.20,    60.90},
{ "Los Santos International",     2051.60, -2597.20,   -39.00,  2152.40, -2394.30,    60.90},
{ "Marina",                        647.70, -1804.20,   -89.00,   851.40, -1577.50,   110.90},
{ "Marina",                        647.70, -1577.50,   -89.00,   807.90, -1416.20,   110.90},
{ "Marina",                        807.90, -1577.50,   -89.00,   926.90, -1416.20,   110.90},
{ "Market",                        787.40, -1416.20,   -89.00,  1072.60, -1310.20,   110.90},
{ "Market",                        952.60, -1310.20,   -89.00,  1072.60, -1130.80,   110.90},
{ "Market",                       1072.60, -1416.20,   -89.00,  1370.80, -1130.80,   110.90},
{ "Market",                        926.90, -1577.50,   -89.00,  1370.80, -1416.20,   110.90},
{ "Market Station",                787.40, -1410.90,   -34.10,   866.00, -1310.20,    65.80},
{ "Montgomery",                   1119.50,   119.50,    -3.00,  1451.40,   493.30,   200.00},
{ "Montgomery",                   1451.40,   347.40,    -6.10,  1582.40,   420.80,   200.00},
{ "Montgomery Intersection",      1546.60,   208.10,     0.00,  1745.80,   347.40,   200.00},
{ "Montgomery Intersection",      1582.40,   347.40,     0.00,  1664.60,   401.70,   200.00},
{ "Mulholland",                   1414.00,  -768.00,   -89.00,  1667.60,  -452.40,   110.90},
{ "Mulholland",                   1281.10,  -452.40,   -89.00,  1641.10,  -290.90,   110.90},
{ "Mulholland",                   1269.10,  -768.00,   -89.00,  1414.00,  -452.40,   110.90},
{ "Mulholland",                   1357.00,  -926.90,   -89.00,  1463.90,  -768.00,   110.90},
{ "Mulholland",                   1318.10,  -910.10,   -89.00,  1357.00,  -768.00,   110.90},
{ "Mulholland",                   1169.10,  -910.10,   -89.00,  1318.10,  -768.00,   110.90},
{ "Mulholland",                    768.60,  -954.60,   -89.00,   952.60,  -860.60,   110.90},
{ "Mulholland",                    687.80,  -860.60,   -89.00,   911.80,  -768.00,   110.90},
{ "Mulholland",                    737.50,  -768.00,   -89.00,  1142.20,  -674.80,   110.90},
{ "Mulholland",                   1096.40,  -910.10,   -89.00,  1169.10,  -768.00,   110.90},
{ "Mulholland",                    952.60,  -937.10,   -89.00,  1096.40,  -860.60,   110.90},
{ "Mulholland",                    911.80,  -860.60,   -89.00,  1096.40,  -768.00,   110.90},
{ "Mulholland",                    861.00,  -674.80,   -89.00,  1156.50,  -600.80,   110.90},
{ "Mulholland Intersection",      1463.90, -1150.80,   -89.00,  1812.60,  -768.00,   110.90},
{ "North Rock",                   2285.30,  -768.00,     0.00,  2770.50,  -269.70,   200.00},
{ "Ocean Docks",                  2373.70, -2697.00,   -89.00,  2809.20, -2330.40,   110.90},
{ "Ocean Docks",                  2201.80, -2418.30,   -89.00,  2324.00, -2095.00,   110.90},
{ "Ocean Docks",                  2324.00, -2302.30,   -89.00,  2703.50, -2145.10,   110.90},
{ "Ocean Docks",                  2089.00, -2394.30,   -89.00,  2201.80, -2235.80,   110.90},
{ "Ocean Docks",                  2201.80, -2730.80,   -89.00,  2324.00, -2418.30,   110.90},
{ "Ocean Docks",                  2703.50, -2302.30,   -89.00,  2959.30, -2126.90,   110.90},
{ "Ocean Docks",                  2324.00, -2145.10,   -89.00,  2703.50, -2059.20,   110.90},
{ "Ocean Flats",                 -2994.40,   277.40,    -9.10, -2867.80,   458.40,   200.00},
{ "Ocean Flats",                 -2994.40,  -222.50,    -0.00, -2593.40,   277.40,   200.00},
{ "Ocean Flats",                 -2994.40,  -430.20,    -0.00, -2831.80,  -222.50,   200.00},
{ "Octane Springs",                338.60,  1228.50,     0.00,   664.30,  1655.00,   200.00},
{ "Old Venturas Strip",           2162.30,  2012.10,   -89.00,  2685.10,  2202.70,   110.90},
{ "Palisades",                   -2994.40,   458.40,    -6.10, -2741.00,  1339.60,   200.00},
{ "Palomino Creek",               2160.20,  -149.00,     0.00,  2576.90,   228.30,   200.00},
{ "Paradiso",                    -2741.00,   793.40,    -6.10, -2533.00,  1268.40,   200.00},
{ "Pershing Square",              1440.90, -1722.20,   -89.00,  1583.50, -1577.50,   110.90},
{ "Pilgrim",                      2437.30,  1383.20,   -89.00,  2624.40,  1783.20,   110.90},
{ "Pilgrim",                      2624.40,  1383.20,   -89.00,  2685.10,  1783.20,   110.90},
{ "Pilson Intersection",          1098.30,  2243.20,   -89.00,  1377.30,  2507.20,   110.90},
{ "Pirates in Men's Pants",       1817.30,  1469.20,   -89.00,  2027.40,  1703.20,   110.90},
{ "Playa del Seville",            2703.50, -2126.90,   -89.00,  2959.30, -1852.80,   110.90},
{ "Prickle Pine",                 1534.50,  2583.20,   -89.00,  1848.40,  2863.20,   110.90},
{ "Prickle Pine",                 1117.40,  2507.20,   -89.00,  1534.50,  2723.20,   110.90},
{ "Prickle Pine",                 1848.40,  2553.40,   -89.00,  1938.80,  2863.20,   110.90},
{ "Prickle Pine",                 1938.80,  2624.20,   -89.00,  2121.40,  2861.50,   110.90},
{ "Queens",                      -2533.00,   458.40,     0.00, -2329.30,   578.30,   200.00},
{ "Queens",                      -2593.40,    54.70,     0.00, -2411.20,   458.40,   200.00},
{ "Queens",                      -2411.20,   373.50,     0.00, -2253.50,   458.40,   200.00},
{ "Randolph Industrial Estate",   1558.00,   596.30,   -89.00,  1823.00,   823.20,   110.90},
{ "Redsands East",                1817.30,  2011.80,   -89.00,  2106.70,  2202.70,   110.90},
{ "Redsands East",                1817.30,  2202.70,   -89.00,  2011.90,  2342.80,   110.90},
{ "Redsands East",                1848.40,  2342.80,   -89.00,  2011.90,  2478.40,   110.90},
{ "Redsands West",                1236.60,  1883.10,   -89.00,  1777.30,  2142.80,   110.90},
{ "Redsands West",                1297.40,  2142.80,   -89.00,  1777.30,  2243.20,   110.90},
{ "Redsands West",                1377.30,  2243.20,   -89.00,  1704.50,  2433.20,   110.90},
{ "Redsands West",                1704.50,  2243.20,   -89.00,  1777.30,  2342.80,   110.90},
{ "Regular Tom",                  -405.70,  1712.80,    -3.00,  -276.70,  1892.70,   200.00},
{ "Richman",                       647.50, -1118.20,   -89.00,   787.40,  -954.60,   110.90},
{ "Richman",                       647.50,  -954.60,   -89.00,   768.60,  -860.60,   110.90},
{ "Richman",                       225.10, -1369.60,   -89.00,   334.50, -1292.00,   110.90},
{ "Richman",                       225.10, -1292.00,   -89.00,   466.20, -1235.00,   110.90},
{ "Richman",                        72.60, -1404.90,   -89.00,   225.10, -1235.00,   110.90},
{ "Richman",                        72.60, -1235.00,   -89.00,   321.30, -1008.10,   110.90},
{ "Richman",                       321.30, -1235.00,   -89.00,   647.50, -1044.00,   110.90},
{ "Richman",                       321.30, -1044.00,   -89.00,   647.50,  -860.60,   110.90},
{ "Richman",                       321.30,  -860.60,   -89.00,   687.80,  -768.00,   110.90},
{ "Richman",                       321.30,  -768.00,   -89.00,   700.70,  -674.80,   110.90},
{ "Robada Intersection",         -1119.00,  1178.90,   -89.00,  -862.00,  1351.40,   110.90},
{ "Roca Escalante",               2237.40,  2202.70,   -89.00,  2536.40,  2542.50,   110.90},
{ "Roca Escalante",               2536.40,  2202.70,   -89.00,  2625.10,  2442.50,   110.90},
{ "Rockshore East",               2537.30,   676.50,   -89.00,  2902.30,   943.20,   110.90},
{ "Rockshore West",               1997.20,   596.30,   -89.00,  2377.30,   823.20,   110.90},
{ "Rockshore West",               2377.30,   596.30,   -89.00,  2537.30,   788.80,   110.90},
{ "Rodeo",                          72.60, -1684.60,   -89.00,   225.10, -1544.10,   110.90},
{ "Rodeo",                          72.60, -1544.10,   -89.00,   225.10, -1404.90,   110.90},
{ "Rodeo",                         225.10, -1684.60,   -89.00,   312.80, -1501.90,   110.90},
{ "Rodeo",                         225.10, -1501.90,   -89.00,   334.50, -1369.60,   110.90},
{ "Rodeo",                         334.50, -1501.90,   -89.00,   422.60, -1406.00,   110.90},
{ "Rodeo",                         312.80, -1684.60,   -89.00,   422.60, -1501.90,   110.90},
{ "Rodeo",                         422.60, -1684.60,   -89.00,   558.00, -1570.20,   110.90},
{ "Rodeo",                         558.00, -1684.60,   -89.00,   647.50, -1384.90,   110.90},
{ "Rodeo",                         466.20, -1570.20,   -89.00,   558.00, -1385.00,   110.90},
{ "Rodeo",                         422.60, -1570.20,   -89.00,   466.20, -1406.00,   110.90},
{ "Rodeo",                         466.20, -1385.00,   -89.00,   647.50, -1235.00,   110.90},
{ "Rodeo",                         334.50, -1406.00,   -89.00,   466.20, -1292.00,   110.90},
{ "Royal Casino",                 2087.30,  1383.20,   -89.00,  2437.30,  1543.20,   110.90},
{ "San Andreas Sound",            2450.30,   385.50,  -100.00,  2759.20,   562.30,   200.00},
{ "Santa Flora",                 -2741.00,   458.40,    -7.60, -2533.00,   793.40,   200.00},
{ "Santa Maria Beach",             342.60, -2173.20,   -89.00,   647.70, -1684.60,   110.90},
{ "Santa Maria Beach",              72.60, -2173.20,   -89.00,   342.60, -1684.60,   110.90},
{ "Shady Cabin",                 -1632.80, -2263.40,    -3.00, -1601.30, -2231.70,   200.00},
{ "Shady Creeks",                -1820.60, -2643.60,    -8.00, -1226.70, -1771.60,   200.00},
{ "Shady Creeks",                -2030.10, -2174.80,    -6.10, -1820.60, -1771.60,   200.00},
{ "Sobell Rail Yards",            2749.90,  1548.90,   -89.00,  2923.30,  1937.20,   110.90},
{ "Spinybed",                     2121.40,  2663.10,   -89.00,  2498.20,  2861.50,   110.90},
{ "Starfish Casino",              2437.30,  1783.20,   -89.00,  2685.10,  2012.10,   110.90},
{ "Starfish Casino",              2437.30,  1858.10,   -39.00,  2495.00,  1970.80,    60.90},
{ "Starfish Casino",              2162.30,  1883.20,   -89.00,  2437.30,  2012.10,   110.90},
{ "Temple",                       1252.30, -1130.80,   -89.00,  1378.30, -1026.30,   110.90},
{ "Temple",                       1252.30, -1026.30,   -89.00,  1391.00,  -926.90,   110.90},
{ "Temple",                       1252.30,  -926.90,   -89.00,  1357.00,  -910.10,   110.90},
{ "Temple",                        952.60, -1130.80,   -89.00,  1096.40,  -937.10,   110.90},
{ "Temple",                       1096.40, -1130.80,   -89.00,  1252.30, -1026.30,   110.90},
{ "Temple",                       1096.40, -1026.30,   -89.00,  1252.30,  -910.10,   110.90},
{ "The Camel's Toe",              2087.30,  1203.20,   -89.00,  2640.40,  1383.20,   110.90},
{ "The Clown's Pocket",           2162.30,  1783.20,   -89.00,  2437.30,  1883.20,   110.90},
{ "The Emerald Isle",             2011.90,  2202.70,   -89.00,  2237.40,  2508.20,   110.90},
{ "The Farm",                    -1209.60, -1317.10,   114.90,  -908.10,  -787.30,   251.90},
{ "The Four Dragons Casino",      1817.30,   863.20,   -89.00,  2027.30,  1083.20,   110.90},
{ "The High Roller",              1817.30,  1283.20,   -89.00,  2027.30,  1469.20,   110.90},
{ "The Mako Span",                1664.60,   401.70,     0.00,  1785.10,   567.20,   200.00},
{ "The Panopticon",               -947.90,  -304.30,    -1.10,  -319.60,   327.00,   200.00},
{ "The Pink Swan",                1817.30,  1083.20,   -89.00,  2027.30,  1283.20,   110.90},
{ "The Sherman Dam",              -968.70,  1929.40,    -3.00,  -481.10,  2155.20,   200.00},
{ "The Strip",                    2027.40,   863.20,   -89.00,  2087.30,  1703.20,   110.90},
{ "The Strip",                    2106.70,  1863.20,   -89.00,  2162.30,  2202.70,   110.90},
{ "The Strip",                    2027.40,  1783.20,   -89.00,  2162.30,  1863.20,   110.90},
{ "The Strip",                    2027.40,  1703.20,   -89.00,  2137.40,  1783.20,   110.90},
{ "The Visage",                   1817.30,  1863.20,   -89.00,  2106.70,  2011.80,   110.90},
{ "The Visage",                   1817.30,  1703.20,   -89.00,  2027.40,  1863.20,   110.90},
{ "Unity Station",                1692.60, -1971.80,   -20.40,  1812.60, -1932.80,    79.50},
{ "Valle Ocultado",               -936.60,  2611.40,     2.00,  -715.90,  2847.90,   200.00},
{ "Verdant Bluffs",                930.20, -2488.40,   -89.00,  1249.60, -2006.70,   110.90},
{ "Verdant Bluffs",               1073.20, -2006.70,   -89.00,  1249.60, -1842.20,   110.90},
{ "Verdant Bluffs",               1249.60, -2179.20,   -89.00,  1692.60, -1842.20,   110.90},
{ "Verdant Meadows",                37.00,  2337.10,    -3.00,   435.90,  2677.90,   200.00},
{ "Verona Beach",                  647.70, -2173.20,   -89.00,   930.20, -1804.20,   110.90},
{ "Verona Beach",                  930.20, -2006.70,   -89.00,  1073.20, -1804.20,   110.90},
{ "Verona Beach",                  851.40, -1804.20,   -89.00,  1046.10, -1577.50,   110.90},
{ "Verona Beach",                 1161.50, -1722.20,   -89.00,  1323.90, -1577.50,   110.90},
{ "Verona Beach",                 1046.10, -1722.20,   -89.00,  1161.50, -1577.50,   110.90},
{ "Vinewood",                      787.40, -1310.20,   -89.00,   952.60, -1130.80,   110.90},
{ "Vinewood",                      787.40, -1130.80,   -89.00,   952.60,  -954.60,   110.90},
{ "Vinewood",                      647.50, -1227.20,   -89.00,   787.40, -1118.20,   110.90},
{ "Vinewood",                      647.70, -1416.20,   -89.00,   787.40, -1227.20,   110.90},
{ "Whitewood Estates",             883.30,  1726.20,   -89.00,  1098.30,  2507.20,   110.90},
{ "Whitewood Estates",            1098.30,  1726.20,   -89.00,  1197.30,  2243.20,   110.90},
{ "Willowfield",                  1970.60, -2179.20,   -89.00,  2089.00, -1852.80,   110.90},
{ "Willowfield",                  2089.00, -2235.80,   -89.00,  2201.80, -1989.90,   110.90},
{ "Willowfield",                  2089.00, -1989.90,   -89.00,  2324.00, -1852.80,   110.90},
{ "Willowfield",                  2201.80, -2095.00,   -89.00,  2324.00, -1989.90,   110.90},
{ "Willowfield",                  2541.70, -1941.40,   -89.00,  2703.50, -1852.80,   110.90},
{ "Willowfield",                  2324.00, -2059.20,   -89.00,  2541.70, -1852.80,   110.90},
{ "Willowfield",                  2541.70, -2059.20,   -89.00,  2703.50, -1941.40,   110.90},
{ "Yellow Bell Station",          1377.40,  2600.40,   -21.90,  1492.40,  2687.30,    78.00},
// Main Zones
{ "Los Santos",                     44.60, -2892.90,  -242.90,  2997.00,  -768.00,   900.00},
{ "Las Venturas",                  869.40,   596.30,  -242.90,  2997.00,  2993.80,   900.00},
{ "Bone County",                  -480.50,   596.30,  -242.90,   869.40,  2993.80,   900.00},
{ "Tierra Robada",               -2997.40,  1659.60,  -242.90,  -480.50,  2993.80,   900.00},
{ "Tierra Robada",               -1213.90,   596.30,  -242.90,  -480.50,  1659.60,   900.00},
{ "San Fierro",                  -2997.40, -1115.50,  -242.90, -1213.90,  1659.60,   900.00},
{ "Red County",                  -1213.90,  -768.00,  -242.90,  2997.00,   596.30,   900.00},
{ "Flint County",                -1213.90, -2892.90,  -242.90,    44.60,  -768.00,   900.00},
{ "Whetstone",                   -2997.40, -2892.90,  -242.90, -1213.90, -1115.50,   900.00}};

//Locais


#define MaxWindows 6

new Float:TutorialScreens[MaxWindows][7]  = {
// Player Pos X, Y, Z                Camera Pos X, Y, Z                     Look at Z
{1999.339111,1553.728881,0.0,2049.259521,1514.919799,31.136346,14.0}, // Introducao
{1963.526489,-1180.285156,0.0,1847.243041,-1251.703857,47.541156,27.0}, // Gangs
{1547.371704,-1675.775634,-15.945137,1487.381469,-1676.860351,34.054862,14.054862}, // Admin_Devas (Admin_Devas)
{1480.956787,-1746.498535,-15.612298,1484.832641,-1686.623901,34.387702,14.387701}, // Admin_Devas (Admin_Devas)
{2489.351806,-1669.849243,-16.664052,2449.902343,-1624.641357,33.335945,13.335947}, // Mais info (Devastator)
{1476.825317,-1747.654541,-14.719526,1441.047729,-1699.488525,35.280471,15.280473} // Regras (MavadUDO)
};

new bool:SeeHUD[MAX_PLAYERS] = false;

//----------------------------------------------------------------------------//

#define ELEVATOR_SPEED      (5.0)
#define DOORS_SPEED         (5.0)
#define ELEVATOR_WAIT_TIME  (5000)

// Private:
#define DIALOG_ELEVADOR     (1523)

#define X_DOOR_CLOSED       (1786.627685)
#define X_DOOR_R_OPENED     (1785.027685)
#define X_DOOR_L_OPENED     (1788.227685)
#define GROUND_Z_COORD      (14.511476)
#define ELEVATOR_OFFSET     (0.059523)

static FloorNames[21][] =
{
	"Térreo",
	"Primeiro Andar",
	"Segundo Andar",
	"Terceiro Andar",
	"Quarto Andar",
	"Quinto Andar",
	"Sexto Andar",
	"Setimo Andar",
	"Oitavo Andar",
	"Nono Andar",
	"Décimo Andar",
	"Décimo Primeiro Andar",
	"Décimo Segundo Andar",
	"Décimo Terceito Andar",
	"Décimo Quarto Andar",
	"Décimo Quinto Andar",
	"Décimo Sexto Andar",
	"Décimo Sétimo Andar",
	"Décimo Oitavo Andar",
	"Décimo Nono Andar",
	"Ultimo Andar"
};

static Float:FloorZOffsets[21] =
{
    0.0,		// 0.0,
    8.5479,		// 8.5479,
    13.99945,   // 8.5479 + (5.45155 * 1.0),
    19.45100,   // 8.5479 + (5.45155 * 2.0),
    24.90255,   // 8.5479 + (5.45155 * 3.0),
    30.35410,   // 8.5479 + (5.45155 * 4.0),
    35.80565,   // 8.5479 + (5.45155 * 5.0),
    41.25720,   // 8.5479 + (5.45155 * 6.0),
    46.70875,   // 8.5479 + (5.45155 * 7.0),
    52.16030,   // 8.5479 + (5.45155 * 8.0),
    57.61185,   // 8.5479 + (5.45155 * 9.0),
    63.06340,   // 8.5479 + (5.45155 * 10.0),
    68.51495,   // 8.5479 + (5.45155 * 11.0),
    73.96650,   // 8.5479 + (5.45155 * 12.0),
    79.41805,   // 8.5479 + (5.45155 * 13.0),
    84.86960,   // 8.5479 + (5.45155 * 14.0),
    90.32115,   // 8.5479 + (5.45155 * 15.0),
    95.77270,   // 8.5479 + (5.45155 * 16.0),
    101.22425,  // 8.5479 + (5.45155 * 17.0),
    106.67580,	// 8.5479 + (5.45155 * 18.0),
    112.12735	// 8.5479 + (5.45155 * 19.0)
};

new Obj_Elevator, Obj_ElevatorDoors[2],
	Obj_FloorDoors[21][2];

new Text3D:Label_Elevator, Text3D:Label_Floors[21];

#define ELEVATOR_STATE_IDLE     (0)
#define ELEVATOR_STATE_WAITING  (1)
#define ELEVATOR_STATE_MOVING   (2)

new ElevatorState,
	ElevatorFloor;

#define INVALID_FLOOR           (-1)

new ElevatorQueue[21],
	FloorRequestedBy[21];

new ElevatorBoostTimer;

forward IsPlayerInZone(playerid, zoneid);

// Public:
forward CallElevator(playerid, floorid);
forward ShowElevatorDialog(playerid);

// Private:
forward Elevator_Initialize();
forward Elevator_Destroy();

forward Elevator_OpenDoors();
forward Elevator_CloseDoors();
forward Floor_OpenDoors(floorid);
forward Floor_CloseDoors(floorid);

forward Elevator_MoveToFloor(floorid);
forward Elevator_Boost(floorid);
forward Elevator_TurnToIdle();

forward ReadNextFloorInQueue();
forward RemoveFirstQueueFloor();
forward AddFloorToQueue(floorid);
forward IsFloorInQueue(floorid);
forward ResetElevatorQueue();

forward DidPlayerRequestElevator(playerid);

forward Float:GetElevatorZCoordForFloor(floorid);
forward Float:GetDoorsZCoordForFloor(floorid);

stock GetIP(ip[], const len)
{
    GetServerVarAsString("bind", ip, len);
}

forward Announce();
public Announce()
{
    new postData[32],
        ip[16];
	GetIP(ip, sizeof(ip));
    printf("%sAnnouncing server...", LOG_PREFIX);
    if (!strlen(ip)) {
        printf("%sBind address empty, can't announce server", LOG_PREFIX);
    }
    format(postData, sizeof(postData), "ipp=%s:%d", ip, GetServerVarAsInt("port"));
    HTTP(0, HTTP_POST, ANNOUNCE_URL, postData, "OnAnnounced"); // no need for different announce indices
}

forward OnAnnounced(index, response_code, data[]);
public OnAnnounced(index, response_code, data[])
{
    #pragma unused data
    switch (response_code) {
        case HTTP_ERROR_BAD_HOST: {
            printf("%sServer failed to announce: HTTP_ERROR_BAD_HOST", LOG_PREFIX);
        }
        case HTTP_ERROR_NO_SOCKET: {
            printf("%sServer failed to announce: HTTP_ERROR_NO_SOCKET", LOG_PREFIX);
        }
        case HTTP_ERROR_CANT_CONNECT: {
            printf("%sServer failed to announce: HTTP_ERROR_CANT_CONNECT", LOG_PREFIX);
        }
        case HTTP_ERROR_CANT_WRITE: {
            printf("%sServer failed to announce: HTTP_ERROR_CANT_WRITE", LOG_PREFIX);
        }
        case HTTP_ERROR_CONTENT_TOO_BIG: {
            printf("%sServer failed to announce: HTTP_ERROR_CONTENT_TOO_BIG", LOG_PREFIX);
        }
        case HTTP_ERROR_MALFORMED_RESPONSE: {
            printf("%sServer failed to announce: HTTP_ERROR_MALFORMED_RESPONSE", LOG_PREFIX);
        }
        case HTTP_CREATED: {
            printf("%sServer announced successfully.", LOG_PREFIX);
        }
        case HTTP_FORBIDDEN: {
        	printf("%sServer failed to announce: 403 Forbidden. This can happen if your server has multiple IP addresses or lots of public SA-MP servers on your subnet.", LOG_PREFIX);
        }
        case HTTP_UNPROCESSABLE_ENTITY: {
            printf("%sServer failed to announce: 422 Unprocessable Entity. You might get this error if you are running a local/LAN server.", LOG_PREFIX);
        }
        case HTTP_TOO_MANY_REQUESTS: {
            printf("%sServer already announced (interval too small?).", LOG_PREFIX);
        }
        default: {
            printf("%sServer failed to announce (error %d).", LOG_PREFIX, response_code);
        }
    }
}

//----------------------------------------------------------------------------//

forward GivePlayerGP(playerid, gp);
forward SetPlayerGP(playerid, gp);
forward GetPlayerGP(playerid);
forward SpeakAnim(playerid);
forward OnPlayerClickPlayer(playerid, clickedplayerid, source);
//forward OnPlayerUpdate(playerid);
forward LoadFightStyle(playerid);
forward CheckRadars(playerid);
//forward CheckMarcha(playerid);
//forward OnRaceUpdate();
//forward OnRaceEnd();
forward Destrancado(playerid);
forward Descongelar(playerid);
forward Congelar(playerid);
forward LimparAnim(playerid);
forward Trancado(playerid);
//forward Trucks();
forward DestruirObjeto(objid);
forward CriarExplosao(Float:X,Float:Y,Float:Z,tipo,Float:diam);
forward DestruirObjetos(objid);
forward CriarExplosaod(Float:X,Float:Y,Float:Z,tipo,Float:diam);
forward CriarExplosaos(Float:X,Float:Y,Float:Z,tipo,Float:diam);
forward CriarExplosaoss(Float:X,Float:Y,Float:Z,tipo,Float:diam);
forward CriarExplosaosss(Float:X,Float:Y,Float:Z,tipo,Float:diam);
forward CriarExplosaossss(Float:X,Float:Y,Float:Z,tipo,Float:diam);
forward VehicleStep(playerid, concevid, buyid);
forward Viajar(playerid, local);
forward RemovePlayerWeapon(playerid, weaponid);
forward SafeGivePlayerWeapon(plyid, weaponid, ammo);
forward ClearChatbox(playerid, lines);
forward SaveTrunk(idx);
forward LoadTrunk();
forward OnPlayerEnterFood(playerid, foodid);
forward OnPlayerExitFood(playerid);
forward Checkpedagio();
forward UsarDrogaTimer(playerid);
forward ReduceTimer(playerid);
forward ReduceTimerArmas(playerid);
forward guerrat();
forward UsinaTimer(playerid);
forward SairTimer(giveplayerid);
forward PuxarTimer(giveplayerid, vehid);
forward batercarteiratimer(playerid);
forward MaterialTimer(playerid);
forward CarroBombaTimer(playerid);
forward JornalTimer(playerid);
forward BombTimer(playerid);
forward AtentadoTimer(playerid);
forward RemoveRoadblock(playerid);
forward RemoveCone(playerid);
forward RemoveCorrente(playerid);
forward LoadProperty();
forward SaveProperty(h);
forward LoadBizz();
forward SaveBizz(h);
forward LoadConfig();
forward PortaoPredio();
forward HeliportaoFbi();
forward PortaoforaFbi();
forward Portaspref();
forward Portaspref2();
forward PortaoCassino();
forward PortaoLoterica();
forward LoadBoxer();
forward SaveBoxer();
forward OnPropUpdate();
forward GivePlayerCash(playerid, cash);
forward GetPlayerCash(playerid);
forward ExtortionBiz(bizid, money);
forward JoinChannel(playerid, number, line[]);
forward JoinChannelNr(playerid, number);
forward IsAtClothShop(playerid);
forward IsAtGasStation(playerid);
forward IsAtFishPlace(playerid);
forward IsAtCookPlace(playerid);
forward IsAtBar(playerid);
forward IsAtLoja(playerid);
forward IsAtNeonShop(playerid);
forward ScoreUpdate();
forward Licenses();
forward SetPlayerSpawn(playerid);
forward SetPlayerTeamFromClass(playerid,classid);
forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
forward CrimInRange(Float:radi, playerid,id);
//forward SendEnemyMessage(color, string[]);
forward LerSMS(color,const string[]);
forward LerMP(color,const string[]);
forward LerCW(color,const string[]);
forward ABroadCast(color,const string[],level);
forward DateProp(playerid);
forward IsPlayerInTurf(playerid, turfid);
forward ResetBiz(Biz);
forward PrintBizInfo(playerid, targetid);
forward SetPlayerUnjail();
forward RingTonerRev();
forward RingToner();
forward Sms(string[]);
forward IsACop(playerid);
forward IsACrime(playerid);
forward IsAGang(playerid);
forward IsACivil(playerid);
forward IsAMember(playerid);
forward Encrypt(string[]);
forward KartingEnded();
forward StartKarting();
forward PrepareKarting();
forward PaintballEnded();
forward StartPaintball();
forward PreparePaintball();
forward SyncClock();
forward SetPlayerCriminal(playerid,declare,reason[],local[]);
forward SetPlayerFree(playerid,declare,reason[]);
forward SetPlayerWeapons(playerid);
forward ShowStats(playerid,targetid,status);
//forward SetPlayerToTeamColor(playerid);
forward GameModeInitExitFunc();
forward split(const strsrc[], strdest[][], delimiter);
forward OnPlayerLogin(playerid,password[], cleanpw[]);
forward OnPlayerSave(playerid);
forward OnPlayerRegister(playerid, password[], cleanpw[]);
forward BroadCast(color,const string[]);
forward OOCNews(color,const string[]);
forward SendPointMessage(color, string[]);
forward SendJobMessage(job, color, string[]);
forward SendTeamMessage(member, color, string[]);
forward SendCopMessage(color, string[]);
forward SendDoadorMessage(color, string[]);
forward SendAdminMessage(color, string[]);
//forward AddCar(carcoords);
forward ProxDetector(Float:radi, playerid, string[], col1, col2, col3, col4, col5);
forward ProxDetectorS(Float:radi, playerid, targetid);
forward ProxDetectorEx(Float:radi, playerid, string[], col1);
forward ClearMarriage(playerid);
forward ClearPaper(paper);
forward ClearCrime(playerid);
forward ClearCrimeTempo(id);
forward FishCost(playerid, fish);
forward ClearFishes(playerid);
forward ClearFishID(playerid, fish);
forward ClearCooking(playerid);
forward ClearCookingID(playerid, cook);
forward ClearGroceries(playerid);
forward CarCheck();
forward CarTow(carid);
forward LockCar(carid);
forward UnLockCar(carid);
//forward InitLockDoors(playerid);
forward CheckGas();
forward Fillup(playerid, correctvid);
forward SyncTime();
forward OnVehicleUpdate(playerid);
forward SaveServer();
forward CurarDorga(i);
forward Production();
forward Checkprop();
forward PayDay();
forward PlayerPlayMusic(playerid);
forward StopMusic(id);
forward HouseLevel(playerid);
forward CHouseLevel(houseid);
forward CheckWeaponHack();
forward ResetSafeBan(playerid);
forward CheckMH();
forward Adminmsg();
forward BackupClear(playerid, calledbytimer);
forward BackupClearGang(playerid, calledbytimer);
forward SprayProcurado(playerid);
//forward Clock();
//forward DelayDestroyCar(playerid);
//forward ResetAutohausSpawns();
//forward Sequestrar(playerid);
forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
//forward Sairdocarro();
//forward FardaCOP();
//forward Starting(playerid);
forward Mensagens();
forward MensagensGuerra();

// Territorios
new Recorde;
new Record[34];
new BotID;
new Anuncio = 0;
new LiberarAnuncio[MAX_PLAYERS];
new LiberarVipAn[MAX_PLAYERS];
new LiberarAnOrg[MAX_PLAYERS];
new LiberarGov[MAX_PLAYERS];
new LiberarChatN[MAX_PLAYERS];
new Hospital[MAX_PLAYERS];
new NoHospital[MAX_PLAYERS];
new Float:MortePos[MAX_PLAYERS][3];
new Morrendo[MAX_PLAYERS];
new MorteInt[MAX_PLAYERS];
new Congelado[MAX_PLAYERS];
new GettingJob[MAX_PLAYERS];
new Pescando[MAX_PLAYERS];
new AntiFlood[MAX_PLAYERS][18];
new InGZ[MAX_PLAYERS];
new bool:DarNota[MAX_PLAYERS];
new AdmNota[MAX_PLAYERS];

forward GranaTerritorios();

//new MapObject[32]; //Should be deleted if unloaded
new escondendo[MAX_PLAYERS];

//===================TEXTDRAWS BLS=====================//
new Text:TDPlacar = Text:INVALID_TEXT_DRAW;
new Text:TDVersus = Text:INVALID_TEXT_DRAW;
new Text:TDPontos = Text:INVALID_TEXT_DRAW;
new Text:TD_AP = Text:INVALID_TEXT_DRAW;
new Text:TD_HP = Text:INVALID_TEXT_DRAW;
new Text:TDKills = Text:INVALID_TEXT_DRAW;
new Text:TD_AK = Text:INVALID_TEXT_DRAW;
new Text:TD_FK = Text:INVALID_TEXT_DRAW;
new Text:TD_HK = Text:INVALID_TEXT_DRAW;
new Text:TD_FP = Text:INVALID_TEXT_DRAW;
new Text:TDBox1 = Text:INVALID_TEXT_DRAW;
new Text:TDBox2 = Text:INVALID_TEXT_DRAW;
new Text:TDTempo = Text:INVALID_TEXT_DRAW;
new Text:CountdownTD[2];

forward IniciarGuerra(Team);
public IniciarGuerra(Team)
{
    GangZoneShowForAll(GuerraGZ, 0xAFAFAF30);
    if(Team == 3) GangZoneFlashForAll(GuerraGZ, WarColor[0]);
    else if(Team == 11) GangZoneFlashForAll(GuerraGZ, WarColor[1]);
    else if(Team == 22) GangZoneFlashForAll(GuerraGZ, WarColor[2]);
    GuerraMostrar();

    AllowExplosions = true;
    TempoGuerra = 1800;
    InGuerra = 1;

    Guerra[GuerraPontos][0] = 0;
    Guerra[GuerraPontos][1] = 0;
    Guerra[GuerraKills][0] = 0;
    Guerra[GuerraKills][1] = 0;

    SetTimer("guerrat", 30*60*1000, false); //20 Min

    PodeGuerraOrg[GetGuerraIDEx(Team)] = false;

    SaveGuerra();
    return 1;
}

forward AtualizarGuerra();
public AtualizarGuerra()
{
	new string[128];

	//FA

	format(string, 128, "%d", Guerra[GuerraPontos][0]);
	TextDrawSetString(TD_FP, string);

	format(string, 128, "%d", Guerra[GuerraKills][0]);
	TextDrawSetString(TD_FK, string);

	//AlQaeda

	format(string, 128, "%d", Guerra[GuerraPontos][1]);
	TextDrawSetString(TD_AP, string);

	format(string, 128, "%d", Guerra[GuerraKills][1]);
	TextDrawSetString(TD_AK, string);

	//Tempo

	format(string, 128 ,"Tempo Restante: %s", ConvertSecondsToMins(TempoGuerra));
	TextDrawSetString(TDTempo, string);
	TempoGuerra--;

	GuerraMostrar();
    return 1;
}

forward GuerraMostrar();
public GuerraMostrar()
{
/*    foreach(Player, playerid)
    {
        if(GetPlayerOrg(playerid) != 3 || GetPlayerOrg(playerid) != 11 || GetPlayerOrg(playerid) != 22)
            continue;

        TextDrawShowForPlayer(playerid, TDBox1);
    	TextDrawShowForPlayer(playerid, TDBox2);
    	//
    	TextDrawShowForPlayer(playerid, TDPlacar);
    	TextDrawShowForPlayer(playerid, TDVersus);
    	TextDrawShowForPlayer(playerid, TDPontos);
    	TextDrawShowForPlayer(playerid, TDKills);
    	//
    	TextDrawShowForPlayer(playerid, TDTempo);
    	//
    	TextDrawShowForPlayer(playerid, TD_FP);
    	TextDrawShowForPlayer(playerid, TD_FK);
    	//
    	TextDrawShowForPlayer(playerid, TD_HP);
    	TextDrawShowForPlayer(playerid, TD_HK);
    	//
    	TextDrawShowForPlayer(playerid, TD_AP);
    	TextDrawShowForPlayer(playerid, TD_AK);
    }   */
    TextDrawShowForAll(TDBox1);
	TextDrawShowForAll(TDBox2);
	//
	TextDrawShowForAll(TDPlacar);
	TextDrawShowForAll(TDVersus);
	TextDrawShowForAll(TDPontos);
	TextDrawShowForAll(TDKills);
	//
	TextDrawShowForAll(TDTempo);
	//
	TextDrawShowForAll(TD_FP);
	TextDrawShowForAll(TD_FK);
	//
	TextDrawShowForAll(TD_HP);
	TextDrawShowForAll(TD_HK);
	//
	TextDrawShowForAll(TD_AP);
	TextDrawShowForAll(TD_AK);
    return 1;
}

stock GuerraEsconder()
{
	TextDrawHideForAll(TDBox1);
	TextDrawHideForAll(TDBox2);
	//
	TextDrawHideForAll(TDPlacar);
	TextDrawHideForAll(TDVersus);
	TextDrawHideForAll(TDPontos);
	TextDrawHideForAll(TDKills);
	//
	TextDrawHideForAll(TDTempo);
	//
	TextDrawHideForAll(TD_FP);
	TextDrawHideForAll(TD_FK);
	//
	TextDrawHideForAll(TD_HP);
	TextDrawHideForAll(TD_HK);
	//
	TextDrawHideForAll(TD_AP);
	TextDrawHideForAll(TD_AK);
}

forward TDGuerra();
public TDGuerra()
{
	//Box

	/*TDBox1 = TextDrawCreate(132.000000, 118.000000, "_");
	TextDrawBackgroundColor(TDBox1, 255);
	TextDrawFont(TDBox1, 1);
	TextDrawLetterSize(TDBox1, 0.500000, 6.599997);
	TextDrawColor(TDBox1, -1);
	TextDrawSetOutline(TDBox1, 0);
	TextDrawSetProportional(TDBox1, 1);
	TextDrawSetShadow(TDBox1, 1);
	TextDrawUseBox(TDBox1, 1);
	TextDrawBoxColor(TDBox1, 50);
	TextDrawTextSize(TDBox1, 0.000000, 0.000000);

	TDBox2 = TextDrawCreate(132.000000, 118.000000, "_");
	TextDrawBackgroundColor(TDBox2, 255);
	TextDrawFont(TDBox2, 1);
	TextDrawLetterSize(TDBox2, 0.500000, 0.899999);
	TextDrawColor(TDBox2, -1);
	TextDrawSetOutline(TDBox2, 0);
	TextDrawSetProportional(TDBox2, 1);
	TextDrawSetShadow(TDBox2, 1);
	TextDrawUseBox(TDBox2, 1);
	TextDrawBoxColor(TDBox2, 50);
	TextDrawTextSize(TDBox2, 0.000000, 0.000000);*/

	//Estaticas

	TDPlacar = TextDrawCreate(21.000000, 117.000000, "Placar da Guerra");
	TextDrawBackgroundColor(TDPlacar, 255);
	TextDrawFont(TDPlacar, 1);
	TextDrawLetterSize(TDPlacar, 0.300000, 1.000000);
	TextDrawColor(TDPlacar, 8716543);
	TextDrawSetOutline(TDPlacar, 0);
	TextDrawSetProportional(TDPlacar, 1);

	TDVersus = TextDrawCreate(5.000000, 130.000000, "~n~FA:~n~AlQaeda:");
	TextDrawBackgroundColor(TDVersus, 255);
	TextDrawFont(TDVersus, 1);
	TextDrawLetterSize(TDVersus, 0.300000, 1.000000);
	TextDrawColor(TDVersus, -1);
	TextDrawSetOutline(TDVersus, 0);
	TextDrawSetProportional(TDVersus, 1);

	TDKills = TextDrawCreate(101.000000, 128.000000, "Kills");
	TextDrawBackgroundColor(TDKills, 255);
	TextDrawFont(TDKills, 1);
	TextDrawLetterSize(TDKills, 0.300000, 1.000000);
	TextDrawColor(TDKills, -1);
	TextDrawSetOutline(TDKills, 0);
	TextDrawSetProportional(TDKills, 1);

	TDPontos = TextDrawCreate(60.000000, 128.000000, "Pontos");
	TextDrawBackgroundColor(TDPontos, 255);
	TextDrawFont(TDPontos, 1);
	TextDrawLetterSize(TDPontos, 0.300000, 1.000000);
	TextDrawColor(TDPontos, -1);
	TextDrawSetOutline(TDPontos, 0);
	TextDrawSetProportional(TDPontos, 1);

	//Tempo

	TDTempo = TextDrawCreate(18.000000, 167.000000, "Tempo Restante: ~r~30:00");
	TextDrawBackgroundColor(TDTempo, 255);
	TextDrawFont(TDTempo, 1);
	TextDrawLetterSize(TDTempo, 0.210000, 1.000000);
	TextDrawColor(TDTempo, -1);
	TextDrawSetOutline(TDTempo, 0);
	TextDrawSetProportional(TDTempo, 1);

	//FA

	TD_FP = TextDrawCreate(59.000000, 139.000000, "FP");
	TextDrawBackgroundColor(TD_FP, 255);
	TextDrawFont(TD_FP, 1);
	TextDrawLetterSize(TD_FP, 0.300000, 1.000000);
	TextDrawColor(TD_FP, -1);
	TextDrawSetOutline(TD_FP, 1);
	TextDrawSetProportional(TD_FP, 1);

	TD_FK = TextDrawCreate(102.000000, 139.000000, "FK");
	TextDrawBackgroundColor(TD_FK, 255);
	TextDrawFont(TD_FK, 1);
	TextDrawLetterSize(TD_FK, 0.300000, 1.000000);
	TextDrawColor(TD_FK, -1);
	TextDrawSetOutline(TD_FK, 1);
	TextDrawSetProportional(TD_FK, 1);

	//Hamas

	/*TD_HP = TextDrawCreate(59.000000, 148.000000, "HP");
	TextDrawBackgroundColor(TD_HP, 255);
	TextDrawFont(TD_HP, 1);
	TextDrawLetterSize(TD_HP, 0.300000, 1.000000);
	TextDrawColor(TD_HP, -1);
	TextDrawSetOutline(TD_HP, 1);
	TextDrawSetProportional(TD_HP, 1);

	TD_HK = TextDrawCreate(102.000000, 148.000000, "HK");
	TextDrawBackgroundColor(TD_HK, 255);
	TextDrawFont(TD_HK, 1);
	TextDrawLetterSize(TD_HK, 0.300000, 1.000000);
	TextDrawColor(TD_HK, -1);
	TextDrawSetOutline(TD_HK, 1);
	TextDrawSetProportional(TD_HK, 1);*/

	//AlQaeda

	TD_AP = TextDrawCreate(59.000000, 157.000000, "AP");
	TextDrawBackgroundColor(TD_AP, 255);
	TextDrawFont(TD_AP, 1);
	TextDrawLetterSize(TD_AP, 0.300000, 1.000000);
	TextDrawColor(TD_AP, -1);
	TextDrawSetOutline(TD_AP, 1);
	TextDrawSetProportional(TD_AP, 1);

	TD_AK = TextDrawCreate(102.000000, 157.000000, "AK");
	TextDrawBackgroundColor(TD_AK, 255);
	TextDrawFont(TD_AK, 1);
	TextDrawLetterSize(TD_AK, 0.300000, 1.000000);
	TextDrawColor(TD_AK, -1);
	TextDrawSetOutline(TD_AK, 1);
	TextDrawSetProportional(TD_AK, 1);
	return 1;
}
//==================TEXTDRAWS BLS======================//
new dista = 50;

//CheckGod
new Float:NewGod[MAX_PLAYERS][6];
new Float:OldGod[MAX_PLAYERS][6];
new Float:GodCarPos[MAX_PLAYERS][3];
new GodCarID[MAX_PLAYERS];
new GodTime[MAX_PLAYERS];
new GodTime2[MAX_PLAYERS];
//outros
new Incasa[MAX_PLAYERS];//casa
new Float:LastPos[3];
//new Float:Colete[MAX_PLAYERS];//colete
//new dinheirobatercarteira=500;
new Cone1;
new Cone2;
new Cone3;
new Cone4;
new Cone5;
new Gastos[MAX_PLAYERS];
new AdminDuty[MAX_PLAYERS];
new AdminAfk[MAX_PLAYERS];
new Float:AdminAfkStatus[MAX_PLAYERS][2];
new Doador[MAX_PLAYERS];
new DoadorChat[MAX_PLAYERS];
new vertodos[MAX_PLAYERS];
new TookSprunk[MAX_PLAYERS];
new TookColor[MAX_PLAYERS];
new bPizza[MAX_PLAYERS];
new PaynSprayTimer[MAX_PLAYERS];
new LimparNivelSpray[MAX_PLAYERS];
new sPizza[MAX_PLAYERS];
new Conce[MAX_PLAYERS];
new weapons[13][2][MAX_PLAYERS];

//new Random;
new Menu:burgermenu;
new Menu:chickenmenu;
new Menu:pizzamenu;

new Menu:donutshop;
new InAFoodPlace[MAX_PLAYERS];

enum time_data
{
	dDay,
	dYear,
	dMonth,
	tSecond,
	tMinute,
	tHour,
}
new ClockTime[time_data];

new Text:AttackersTextDraw = Text:INVALID_TEXT_DRAW;
new Text:DefendersTextDraw = Text:INVALID_TEXT_DRAW;
new Text:WinnerTextDraw = Text:INVALID_TEXT_DRAW;
new Text:LoserTextDraw = Text:INVALID_TEXT_DRAW;

new Text: ServerLogo1 = Text:INVALID_TEXT_DRAW;
new Text: ServerLogo2 = Text:INVALID_TEXT_DRAW;
new Text: ChecksBar[MAX_PLAYERS + 3];
new Text: WarPointsTD[MAX_PLAYERS];
new Text: ZoneName[MAX_PLAYERS];
new Text: MoneyTD = Text:INVALID_TEXT_DRAW;
new Text: HUDTexts[MAX_PLAYERS];
new Text: SpeedBar[MAX_PLAYERS];
new Text: HealthBar[MAX_PLAYERS];
new Text: LowHealthLine = Text:INVALID_TEXT_DRAW;
new Text: Background = Text:INVALID_TEXT_DRAW;
new Text: Topbar = Text:INVALID_TEXT_DRAW;
new Text: Leftbar = Text:INVALID_TEXT_DRAW;
new Text: Bottombar = Text:INVALID_TEXT_DRAW;
new Text: Rightbar = Text:INVALID_TEXT_DRAW;
new Text: SpeedBarBackground = Text:INVALID_TEXT_DRAW;
new Text: HealthBarBackground = Text:INVALID_TEXT_DRAW;

#define SPEEDO_MIN 535.0
#define SPEEDO_MAX 602.0

new Float: KMH;
new Float: Xa;
new Float: Ya;
new Float: Za;
new Float: Xb[MAX_PLAYERS];
new Float: Yb[MAX_PLAYERS];
new Float: Zb[MAX_PLAYERS];

new pedagio[MAX_PLAYERS];
new pedagyo[MAX_PLAYERS];
new bool:PedagioAberto = true;
//new Portadrift1;
//new Portalow;
new PortaoCofre;
new PortaoLote;
//new PortaoHamas;
new Portao;
new PortaoC;
new PortaoD;
new PortaoE;
new PortaoF;
new PortaoG;
new PortaoJ;
new PortaoK;
new PortaoL;
new PortaoM;
new PortaoN;
new PortaoO;
new PortaReporter;
new PortaoBOPE[3];
//new PortaHitmanBLS;
//new PortaKings;
new PortaBarco;
new Objeto_Detran;
//new PortaPF;
//new PortaPF2;
//new PortaoCV;
//new PortaoCV1;
//new PortaAlq;
//new PortaAlq2;
new PortaTrein;
new PortaSF;
new PortaSF2;
new PortaPM;
new PortaPM2;
//new PortaGuarda[2];
//new PortaFbi;
new PortaPref1;
new PortaPref2;
new PortaPref3;
new PortaPF[4],
    PortaBOPE[4],
    PortaPC[3];
new PortaoPedagio[2];

new PortaCofre[4],
    bool:PortaExplodida[2];

new TruckMission[MAX_PLAYERS];
new FuneMission[MAX_PLAYERS];
new GasMission[MAX_PLAYERS];
new BusMission[MAX_PLAYERS];
new PaperMission[MAX_PLAYERS];
new LixoMission[MAX_PLAYERS];

new CP_donutshop;
new	CP_pizzamenu;
new	CP_burgermenu;
new	CP_chickenmenu;
new Jackpot = 0;
new Tax = 0;
new StartingPaintballRound = 0;
new AnnouncedPaintballRound = 0;
new PaintballPlayers = 0;
new PaintballRound = 0;
new PaintballWinner = 999;
new PaintballWinnerKills = 0;
new StartingKartRound = 0;
new EndingKartRound = 0;
new AnnouncedKartRound = 0;
new KartingPlayers = 0;
new KartingRound = 0;
new FirstKartWinner = 999;
new SecondKartWinner = 999;
new ThirdKartWinner = 999;
new InRing = 0;
new RoundStarted = 0;
new BoxDelay = 0;
new Boxer1 = 255;
new Boxer2 = 255;
new TBoxer = 255;
new PlayerBoxing[MAX_PLAYERS];

//empregos
new bool:Solicitando[MAX_PLAYERS][MAX_JOBS];
new TempoPedido[MAX_PLAYERS];
new PedidoAceito[MAX_PLAYERS];
new Medics = 0;
new Mechanics = 0;
new PizzaBoys = 0;
new TaxistaNum = 0;

new TempoEncontrar[MAX_PLAYERS];
new Encontrando[MAX_PLAYERS];
new Procurado[MAX_PLAYERS];

new FixCamera[MAX_PLAYERS];
new Menu:Zip;
new Menu:Remedios;

new bool:TaxistaIn[MAX_PLAYERS];
new TaxistaPreco[MAX_PLAYERS];
new NoTaxi[MAX_PLAYERS][3];

new TimeTest[MAX_PLAYERS];
new CPorder[MAX_PLAYERS];
new JobDuty[MAX_PLAYERS];
new OnCK[MAX_PLAYERS];
new GettingCK[MAX_PLAYERS];
new ReduceTime[MAX_PLAYERS];
new ReduceTimeArmas[MAX_PLAYERS];
new UsinaTime[MAX_PLAYERS];
new UsarDrogaTime[MAX_PLAYERS];
new SairTime[MAX_PLAYERS];
new PuxarTime[MAX_PLAYERS];
new batercarteiratime[MAX_PLAYERS];
new MaterialTime[MAX_PLAYERS];
new JornalTime[MAX_PLAYERS];
new CarroBombaTime[MAX_PLAYERS];
new BombTime[MAX_PLAYERS];
new AtentadoTime[MAX_PLAYERS];
new DrunkTime[MAX_PLAYERS];
new cVehicle[MAX_PLAYERS];
new PlayerPaintballing[MAX_PLAYERS];
new PlayerPaintballKills[MAX_PLAYERS];
new Acertos[MAX_PLAYERS];
new PlayerKarting[MAX_PLAYERS];
new PlayerInKart[MAX_PLAYERS];
new TakingLesson[MAX_PLAYERS];
new PlayerOnMission[MAX_PLAYERS];
new jatocol[MAX_PLAYERS];
new fogo[50];
new fogoobj[50];
new barreira[10];
new barreiraobj[10];
new corrente[10];
new correnteobj[10];
new Float:fogoposX[50];
new Float:fogoposY[50];
new Float:fogoposZ[50];
new senha = 1;
new evento = 0;
new irteste = 0;
new testelvl = 0;
new dentro = 0;
new antiab = 0;
new eventoint;
new eventovw;
new testeint;
//Anti-Cheat
new nomh[MAX_PLAYERS];
new nowh[MAX_PLAYERS];
new Float:noab[MAX_PLAYERS][4];
new bool:noab2[MAX_PLAYERS];
//--------------------
new bool:nobangu[MAX_PLAYERS];
new bool:noteste[MAX_PLAYERS];
new bool:noevento[MAX_PLAYERS];

new LOL[MAX_PLAYERS];
new bool:AntiCheaterColete[MAX_PLAYERS];

new pegar1[MAX_PLAYERS];

new bool:allowRain = false;

//Sistema de Multas
new multa[MAX_PLAYERS];
new multas[MAX_PLAYERS];
//Sistema de Multas
new bool:InModShop[MAX_PLAYERS];
new MatsHolding[MAX_PLAYERS];
new DivorceOffer[MAX_PLAYERS];
new MarriageCeremoney[MAX_PLAYERS];
new Teste[MAX_PLAYERS];
new ProposeOffer[MAX_PLAYERS];
new ProposedTo[MAX_PLAYERS];
new GotProposedBy[MAX_PLAYERS];
new MarryWitness[MAX_PLAYERS];
new MarryWitnessOffer[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new PlayerStoned[MAX_PLAYERS];
new ConsumingMoney[MAX_PLAYERS];
new BringingPaper[MAX_PLAYERS];
new GotPaper[MAX_PLAYERS];
new WritingPaper[MAX_PLAYERS];
new WritingPaperNumber[MAX_PLAYERS];
new WritingLine[MAX_PLAYERS];
new FishCount[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];
new PlayerTazeTime[MAX_PLAYERS];
new BoxWaitTime[MAX_PLAYERS];
new PaperOffer[MAX_PLAYERS];
new BoxOffer[MAX_PLAYERS];
new CarOffer[MAX_PLAYERS];
new CarPrice[MAX_PLAYERS];
new CarID[MAX_PLAYERS];
new CarCalls[MAX_PLAYERS];
new Vitima[MAX_PLAYERS];
new bool:Procurando[MAX_PLAYERS];
new bool:SendoProcurado[MAX_PLAYERS];
new bool:ConnectedToLaptop[MAX_PLAYERS];
new MedicTime[MAX_PLAYERS];
new NeedMedicTime[MAX_PLAYERS];
new PlayerTied[MAX_PLAYERS];
new Sequestrador[MAX_PLAYERS];
new PlayerCuffed[MAX_PLAYERS];
new PlayerCuffedTime[MAX_PLAYERS];
new bool:Camburao[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new Invite[MAX_PLAYERS];
new InviteJob[MAX_PLAYERS];
new InviteOffer[MAX_PLAYERS];
new CuraAcc[MAX_PLAYERS];
new AdvOffer[MAX_PLAYERS];
new AdvPrice[MAX_PLAYERS];
//new ApprovedLawyer[MAX_PLAYERS];
new CallLawyer[MAX_PLAYERS];
new WantLawyer[MAX_PLAYERS];
new CurrentMoney[MAX_PLAYERS];
new CP[MAX_PLAYERS];
new MoneyMessage[MAX_PLAYERS];
new Condom[MAX_PLAYERS];
new DSTPlayer[MAX_PLAYERS];
new SexOffer[MAX_PLAYERS];
new SexPrice[MAX_PLAYERS];
new RepairOffer[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
new RefillOffer[MAX_PLAYERS];
new RefillPrice[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new DrugOffer[MAX_PLAYERS];
new DrugPrice[MAX_PLAYERS];
new DrugGram[MAX_PLAYERS];
new JailPrice[MAX_PLAYERS];
new WantedPoints[MAX_PLAYERS];
new OnDuty[MAX_PLAYERS];
new gPlayerCheckpointStatus[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS];
new gPlayerLogTries[MAX_PLAYERS];
new BigEar[MAX_PLAYERS];
new BigSms[MAX_PLAYERS];
new BigCW[MAX_PLAYERS];
new BigMp[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new BlindFold[MAX_PLAYERS];
new HireCar[MAX_PLAYERS];
new bool:HireCarLocked[MAX_PLAYERS];
new SafeTime[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new gDice[MAX_PLAYERS];
new gSpentCash[MAX_PLAYERS];
new SwitchKey[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new RingTone[MAX_PLAYERS];
new detranexit[MAX_PLAYERS];
new pizzaexit[MAX_PLAYERS];
new cluckinexit[MAX_PLAYERS];
new burgerexit[MAX_PLAYERS];
new cherifeexit[MAX_PLAYERS];
new gPlayerAccount[MAX_PLAYERS];
//new gCarLock[265];
new objstore[155];
new cbjstore[155];

new bool:EmergencyCall[MAX_PLAYERS];
new EmergencyPlayer[MAX_PLAYERS];
new EmergencyPart[MAX_PLAYERS];
new EmergencyTimer[MAX_PLAYERS];

//CARROS POLICIAIS
new HeliFBI[1];
new HeliPM[1];
//new HeliPC[1];
new PMcars[18];
new FBICar[19];
new BOPECar[11];
new FaCars[39];
new BombeiroCars[9];
//new PCcars[17];
//new PCcarsD[8];
//CARROS POLICIAIS

//CARROS GANGUES
new NewsCar[7];
//new Lowriders[5];
new HitmanCar[17];
new GroveCars[9];
new BallasCars[9];
//new Drifters[5];
//new Kings[8];
//new Cmver[8];
new TerrorCar[31];
//new HamasCar[20];
new AutoEscolaCars[4];
new prefeitocars[5];
new VagosCars[6];
new AztecasCars[6];
new PierCars[15];
new RussaCar[9];
//new Pcccars[7];
new YakuzaCars[9];
new GuerraCars[24];
new BPCars[8];
new HACars[8];
//new ROCAM_FTCars[18];
//CARROS GANGUES


//CARROS NORMAIS
new Reboque[9];
new LixoCar[3];
new Caminhao[15];
new Funecars[6];
new Onibus[11];
new Ambucars[6];
new Taxi[15];
new CaminhaoCarga[15];
new MotoJornal[2];
new AluguelCarro[7];
new AluguelMoto[3];
new AluguelAero[10];
//CARROS NORMAIS

new realchat = 1;
new levelexp = 7;
//new CIV[] = {7,19,20,23,0,101,122};
new DST1[] = {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3};
new DST2[] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
new DST3[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3};
new DST4[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 3};
new SELLCAR1[] = { 1200, 1290, 1350 };
new SELLCAR2[] = { 1500, 1590, 1650 };
new SELLCAR3[] = { 1830, 2040, 2100 };
new SELLCAR4[] = { 2160, 2250, 2370 };
new SELLCAR5[] = { 2430, 2490, 2550 };
new Float:EventoDest[3];
new Float:TesteDest[3];
new Float:TelePos[MAX_PLAYERS][3];

//new Float:LastVehicleDamageStatus[MAX_VEHICLES];

new mensagens[18][128] = {
"{FF0000}[BLS]: {FFFF00}Você pode ligar o seu motor utilizando também a tecla {FF0000}'Y'{FFFF00}.",
"{FF0000}[BLS]: {FFFF00}Confira os benefícios VIP através do comando /lojabls. Selecione a aba 'Pacotes VIP'.",
"{FF0000}[BLS]: {FFFF00}Jogadores VIP Ouro podem ter até 5 veículos.",
"{FF0000}[BLS]: {FFFF00}Visite o nosso fórum. www.blsrpg.com.br",
"{FF0000}[BLS]: {FFFF00}Necessita de ajuda? Digite /senha.",
"{FF0000}[BLS]: {FFFF00}Confira o status dos territórios através do comando /territorios.",
"{FF0000}[BLS]: {FFFF00}Use o comando /relato para relatar algo ou pedir ajuda a um administrador.",
"{FF0000}[BLS]: {FFFF00}Use o comando /senha para entrar na fila de atendimento.",
"{FF0000}[BLS]: {FFFF00}Use o comando /lideres para para ver quem são os líderes online.",
"{FF0000}[BLS]: {FFFF00}Veja as novidades do servidor através do comando /novidades.",
"{FF0000}[BLS]: {FFFF00}Compre BLS Cash e ajude o servidor a crescer! /lojabls.",
"{FF0000}[BLS]: {FFFF00}Novo sistema de animações implantado. Use /animlist ou /anims.",
"{FF0000}[BLS]: {FFFF00}Seu carro continua gastando gasolina quando ligado e parado. /motor",
"{FF0000}[BLS]: {FFFF00}Achou o servidor na aba INTERNET e gostou? Adicione aos favoritos: server.blsrpg.com.br:7777",
"{FF0000}[BLS]: {FFFF00}Adquira já sua Boombox nas lojas 24/7!!!.",
"{FF0000}[BLS]: {FFFF00}Quer adicionar uma música que você gosta ao nosso iPod? /forum",
"{FF0000}[BLS]: {FFFF00}O nosso iPod está funcional, com as melhores músicas de 2017! /iPod",
"{FF0000}[BLS]: {FFFF00}Você agora pode colocar neon no seu carro próprio! Vá até uma Neon Shop"
//"[Mensagem]: Se um dia a vida lhe der as costas, passe a mão na bunda dela!",
//"[Mensagem]: Quem inventou a seriedade, só podia estar de brincadeira."
};

//new Sequestrartime[MAX_PLAYERS];
enum e_pergunta
{
	bool:iniciada,
	sim,
	nao,
	Terminio,
}
new pergunta[e_pergunta];
new votou[MAX_PLAYERS];

new FicarRoco[MAX_PLAYERS];
new RouboPos[MAX_PLAYERS];

new vehName[][] ={
"Landstalker","Bravura","Buffalo","Linerunner","Pereniel","Sentinel","Dumper","Firetruck","Trashmaster",
"Stretch","Manana","Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto",
"Taxi","Washington","Bobcat","Mr Whoopee","BF Injection","Hunter","Premier","Enforcer","Securicar","Banshee",
"Predator","Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie","Stallion","Rumpo",
"RC Bandit","Romero","Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer",
"Turismo","Speeder","Reefer","Tropic","Flatbed","Yankee","Caddy","Solair","Berkley's RC Van","Skimmer",
"PCJ-600","Faggio","Freeway","RC Baron","RC Raider","Glendale","Oceanic","Sanchez","Sparrow","Patriot",
"Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler","ZR3 50","Walton","Regina","Comet","BMX",
"Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper","Rancher","FBI Rancher","Virgo",
"Greenwood","Jetmax","Hotring","Sandking","Blista Compact","Police Maverick","Boxville","Benson","Mesa",
"RC Goblin","Hotring Racer A","Hotring Racer B","Bloodring Banger","Rancher","Super GT","Elegant",
"Journey","Bike","Mountain Bike","Beagle","Cropdust","Stunt","Tanker","RoadTrain","Nebula","Majestic",
"Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV1000","Cement Truck","Tow Truck","Fortune","Cadrona",
"FBI Truck","Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight",
"Streak","Vortex","Vincent","Bullet","Clover","Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob",
"Tampa","Sunrise","Merit","Utility","Nevada","Yosemite","Windsor","Monster A","Monster B","Uranus",
"Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger","Flash","Tahoma","Savanna","Bandito","Freight",
"Trailer","Kart","Mower","Duneride","Sweeper","Broadway","Tornado","AT-400","DFT-30","Huntley","Stafford",
"BF-400","Newsvan","Tug","Trailer A","Emperor","Wayfarer","Euros","Hotdog","Club","Trailer B","Trailer C",
"Andromada","Dodo","RC Cam","Launch","Police Car (LSPD)","Police Car (SFPD)","Police Car (LVPD)","Police Ranger",
"Picador","S.W.A.T. Van","Alpha","Phoenix","Glendale","Sadler","Luggage Trailer A","Luggage Trailer B",
"Stair Trailer","Boxville","Farm Plow","Utility Trailer" };

//------------------------------------------------------------------------------
//Dropped Guns Pro
new Float:WpModelDrop[52][3] = {
{0.0000000, 90.00000000, 0.000000000}, //321
{0.0000000, 90.00000000, 0.000000000}, //322
{0.0000000, 90.00000000, 0.000000000}, //323
{0.0000000, 90.00000000, 0.000000000}, //324
{0.0350000, 74.00000000, 0.000000000}, //325
{0.0000000, 87.00000000, 0.000000000}, //326
{0.0000000, 0.000000000, 0.000000000}, //327 -
{0.0000000, 0.000000000, 0.000000000}, //328 -
{0.0000000, 0.000000000, 0.000000000}, //329 -
{0.0000000, 0.000000000, 0.000000000}, //330 -
{0.0000000, 72.00000000, 270.0000000}, //331
{0.0000000, 0.000000000, 0.000000000}, //332 -
{-0.020000, 88.00000000, 0.000000000}, //333
{0.0000000, 90.00000000, 0.000000000}, //334
{0.0000000, 90.00000000, 0.000000000}, //335
{0.0000000, 0.000000000, 270.0000000}, //336
{0.0850000, 11.00000000, 90.00000000}, //337
{0.0000000, 86.00000000, 0.000000000}, //338
{0.0000000, 88.00000000, 0.000000000}, //339
{0.0000000, 0.000000000, 0.000000000}, //340 -
{0.0850000, 85.52900000, 116.5230000}, //341
{0.1000000, 350.0000000, 80.00000000}, //342
{0.0000000, 90.00000000, 0.000000000}, //343
{0.0000000, 90.00000000, 0.000000000}, //344
{0.0000000, 0.000000000, 0.000000000}, //345 -
{0.0000000, 86.00000000, 90.00000000}, //346
{0.0000000, 85.99500000, 90.00000000}, //347
{0.0250000, 88.00500000, 270.0000000}, //348
{-0.015000, 82.00000000, 270.0000000}, //349
{0.0500000, 90.00000000, 0.000000000}, //350
{0.0000000, 82.75000000, 270.0000000}, //351
{0.0250000, 85.00000000, 283.9460000}, //352
{0.0000000, 82.00000000, 270.0000000}, //353
{0.0000000, 0.000000000, 0.000000000}, //354 -
{0.0000000, 84.00000000, 270.0000000}, //355
{0.0000000, 83.99600000, 270.0000000}, //356
{0.0000000, 83.99600000, 270.0000000}, //357
{0.0000000, 83.99600000, 270.0000000}, //358
{0.0000000, 90.00000000, 0.000000000}, //359
{0.0250000, 90.00000000, 0.000000000}, //360
{0.0000000, 67.73100000, 332.7270000}, //361
{0.3500000, 344.4770000, 31.26000000}, //362
{0.1000000, 270.0000000, 0.000000000}, //363
{0.0000000, 0.000000000, 0.000000000}, //364
{0.0000000, 90.00000000, 0.000000000}, //365
{0.0750000, 79.23700000, 111.5840000}, //366
{0.0150000, 0.000000000, 0.000000000}, //367
{0.0000000, 90.00000000, 0.000000000}, //368
{0.0000000, 90.00000000, 0.000000000}, //369
{0.0000000, 0.000000000, 0.000000000}, //370 -
{0.1600000, 90.00000000, 0.000000000}, //371
{0.0150000, 90.00000000, 0.000000000}  //372
};

new PickupID[47][2] =
{
	{-1,    0},
	{331,   1},
	{333,   1},
	{334,   1},
	{335,   1},
	{336,   1},
	{337,   1},
	{338,   1},
	{339,   1},
	{341,   1},
	{321,   1},
	{322,   1},
	{323,   1},
	{324,   1},
	{325,   1},
	{326,   1},
	{-1,    0}, //Granada: 342,
	{-1,    0}, //Granada de Gas: 343,
	{-1,    0}, //Molotov: 344,
	{-1,    0},
	{-1,    0},
	{-1,    0},
	{346,  68},
	{347,  34},
	{348,  14},
	{349,  14},
	{-1,    0}, //Sawn Off: 350,
	{-1,    0}, //Combat: 351,
	{-1,    0}, //Uzi: 352,
	{353,  60},
	{355,  60},
	{356, 100},
	{-1,    0}, //Tec9: 372
	{357,  25},
	{358,  25},
	{-1,    0}, //RPG: 359,
	{-1,    0}, //HS Rocket: 360,
	{-1,    0}, //Flamethrower: 361,
	{-1,    0}, //Minigun: 362,
	{-1,    0}, //Satchel Charge: 363,
	{-1,    0}, //Detonator
	{365, 500},
	{366, 500},
	{367,  72},
	{-1,    0},
	{-1,    0},
	{371,   1}
};

new Iterator:DroppedGun<500>;
new DroppedGuns[500][3];
new LastDropID = -1;
new bool:dw = true;
//--------------------------------[Veiculos]------------------------------------
new KuddyCar[8];

enum vehInfo
{
	vColor1,
	vColor2,
	vPaintjob,
	vMod[MAX_MODS],
	/*vPRFLock,
    vPRFDeposit,*/
	vPlaca[32],
//    bool:vSpawnTunning,
    vEngine,
    bool:vCustom,
    vRadio[80],
    bool:vUseGas,
    vGasTemp,
    vGas,
    vWindows
}
new VehicleInfo[MAX_VEHICLES][vehInfo];

enum cInfo
{
	cModel,
	cName[32],
	cOwner[MAX_PLAYER_NAME],
	Float:cX,
	Float:cY,
	Float:cZ,
	Float:cA,
	cColor1,
	cColor2,
	cPaintjob,
	cMod[MAX_MODS],
	cNeon[2], // Neon
	cHasNeon, // Neon
	bool:cLock,
	/*cPRFLock,
    cPRFDeposit,*/
	cPlaca[32],
    bool:cEstacionou,
    cID,
    cTrunkID
}
new CarInfo[MAX_BOUGHT_VEHICLES][cInfo];

new Timer_VehAlarm[MAX_VEHICLES];
stock SetVehicleParamsFixed(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective)
{
	SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(alarm)
    {
        KillTimer(Timer_VehAlarm[vehicleid]);
    	Timer_VehAlarm[vehicleid] = SetTimerEx("DisableVehicleAlarm", 20000, false, "d", vehicleid);
    }
    return 1;
}

forward DisableVehicleAlarm(vehicleid);
public DisableVehicleAlarm(vehicleid)
{
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(vehicleid, engine, lights, false, doors, bonnet, boot, objective);
}

#define SetVehicleParamsEx SetVehicleParamsFixed

//new MAX_VEH_SPAWNED = 0;
new ShopCar[MAX_PLAYERS];
new bool:CarShopping[MAX_PLAYERS];
new carbrowse[MAX_PLAYERS];
new CarColor[MAX_PLAYERS][2];
//------------------------------------------------------------------------------
new Refueling[MAX_PLAYERS];

forward SetVehicleNumberPlateEx(vehicleid, numberplate[]);
public SetVehicleNumberPlateEx(vehicleid, numberplate[])
{
    new cV = GetOwnedVehicleID(vehicleid);
    if(cV != INVALID_VEHICLE_ID)
        format(CarInfo[cV][cPlaca], 32, "%s", numberplate);
    else
        format(VehicleInfo[vehicleid][vPlaca], 32, "%s", numberplate);

    SetVehicleNumberPlate(vehicleid, numberplate);
}

stock GetVehicleNumberPlate(vehicleid)
{
    new str[32];

    new cV = GetOwnedVehicleID(vehicleid);
    if(cV != INVALID_VEHICLE_ID)
        format(str, 32, "%s", CarInfo[cV][cPlaca]);
    else
        format(str, 32, "%s", VehicleInfo[vehicleid][vPlaca]);

    return str;
}

stock GetVehicleNumberPlateFix(vehicleid)
{
    new str[32];

    new cV = GetOwnedVehicleID(vehicleid);
    if(cV != INVALID_VEHICLE_ID)
        format(str, 32, "%s", CarInfo[cV][cPlaca]);
    else
        format(str, 32, "%s", VehicleInfo[vehicleid][vPlaca]);

    strdel(str, strlen("{FF0000}BLS "), strlen("{FF0000}BLS {000000}"));
    strdel(str, 0, strlen("{FF0000}"));
    return str;
}

forward EndSuCount(playerid);
public EndSuCount(playerid)
{
    if(!IsPlayerConnected(playerid)) return false;
    g@PlayerSu[playerid] = false;
    return true;
}

forward UpdateTextLabelCarro();
public UpdateTextLabelCarro() {
	new I=0;
	do {
	    Attach3DTextLabelToVehicle(TextCarro[I],MotoSpawn[I],0.0,0.0,0.5000);
	    I++;
	}
	while(I<=19);
}

forward UpdateTextLabelCarroVIP();
public UpdateTextLabelCarroVIP() {
	new J=0;
	do {
	    Attach3DTextLabelToVehicle(TextVIP[J],CarroVIP[J],0.0,0.0,0.5000);
	    J++;
	}
	while(J<=5);
}

public SpeakAnim(playerid)
{
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
    return true;
}

public OnVehicleUpdate(playerid)
{
	RepairVehicle(GetPlayerVehicleID(playerid));
	return true;
}

enum radar_enum
{
	rModel,
	Float:rCoordX,
	Float:rCoordY,
	Float:rCoordZ,
	rSize,
	rMaxSpeed,
    rNome[32],
}
#define MAX_RADARS  20

new Radars[MAX_RADARS][radar_enum] = {
{18880, 1521.90, -1724.91, 12.53, 30, 80, "DP"}, // DP
{18880, 1490.09, -1041.74, 22.78, 30, 100, "Banco"}, // BANCO
{18880, 1140.91, -1388.75, 12.79, 30, 100, "Hospital"}, // HOSPITAL
{18880, 1361.16, -1024.67, 25.65, 30, 100, "Avenida"}, // AVAMMU1
{18880, 1350.02, -1159.86, 22.77, 30, 100, "Avenida"}, // AVAMMU2 - 5
{18880, 1304.70, -1727.31, 12.52, 30, 100, "Avenida"}, // AVAMMU3
{18880, 1829.25, -1745.81, 12.54, 30, 100, "Alhambra"}, // ALHANMBRA
{18880, 1968.21, -1939.28, 12.54, 30, 100, "Aeroporto"}, // AERO
{18880, 2087.85, -1746.83, 12.55, 30, 100, "Pizzaria"}, // POSTO
{18880, 1840.04, -1453.81, 12.55, 30, 100, "Pista de Skate"}, //SKATE - 10
{18880, 1023.57, -961.40, 41.28, 30, 100, "Posto Norte"}, // POSTON
{18880, 1069.75, -1156.27, 22.72, 30, 100, "Cassino"}, // CASSINO
{18880, 924.67, -1412.95, 12.33, 30, 120, "Hospital"},// HOSP2
{18880, 604.82, -1733.88, 12.66, 30, 100, "Pier"},//PIER - 15
{18880, 369.81, -1826.23, 6.62, 30, 100, "Pier"},//PIER2
{18880, 1625.80, -1155.48, 22.08, 30, 100, "Lotérica"},//Lotérica
{18880, 1592.33, -1308.77, 15.48, 30, 100, "Prédio"},//Prédio
{18880, 1407.41, -2033.38, 51.78, 30, 60, "Prefeitura"},//Prefeitura
{18880, 1008.91, -1033.94, 29.47, 30, 100, "Paint n' Spray"},//Paint n' Spray
{18880, 632.3878, -1471.7686, 13.4017, 30, 100, "Radar BOPE"}//BOPE
};

new bool:Multado[MAX_PLAYERS][MAX_RADARS];

public CheckRadars()
{
	foreach(new i: Player)
	{
        if(!gPlayerLogged[i])
            continue;

        SetPlayerWantedLevel(i, floatround(WantedPoints[i] / 5.0, floatround_ceil));

	    if(IsPlayerInAnyVehicle(i))
		{
			for(new x = 0; x < MAX_RADARS; x ++)
			{
			    if(Multado[i][x] == false)
					AddFlitsPaal(i, x,Radars[x][rCoordX],Radars[x][rCoordY],Radars[x][rCoordZ],Radars[x][rSize],Radars[x][rMaxSpeed], Radars[x][rNome]);
				else
				    Multado[i][x] = false;
		    }
		}
	}
    return 1;
}

public LimparAnim(playerid)
{
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

public Viajar(playerid, local)
{
	if(local == 0)
	{
		SafeSetPlayerPos(playerid, 1634.9512,-2247.1423,13.4959);
		SetPlayerFacingAngle(playerid, 120.5);
		SetPlayerInterior(playerid,0);
		SetCameraBehindPlayer(playerid);
	}
	else if(local == 1)
	{
		SafeSetPlayerPos(playerid, -1429.5408,-288.9456,14.1484);
		SetPlayerFacingAngle(playerid, 108.5);
		SetPlayerInterior(playerid,0);
		SetCameraBehindPlayer(playerid);
	}
	else if(local == 2)
	{
		SafeSetPlayerPos(playerid, 1686.8909,1452.3741,10.7689);
		SetPlayerFacingAngle(playerid, 266.5);
		SetPlayerInterior(playerid,0);
		SetCameraBehindPlayer(playerid);
	}
	return true;
}

new FishNamesNumber = 22;
new FishNames[22][20] = {
{"Jaqueta"},
{"Traira"},
{"Stifler"},
{"Snapper vermelho"},
{"Calcas"},
{"Trout"},
{"Marlin azul"},
{"Can"},
{"Mackeral"},
{"Sea Bass"},
{"Tênis"},
{"Pike"},
{"Peixe sólido"},
{"Garbage"},
{"Tuna"},
{"Dourado"},
{"Golfinho"},
{"Tubarão"},
{"Tartaruga"},
{"Peixe-gato"},
{"Mochila Boa"},
{"Peixe espada"}
};

new Float:MacaSpawns[3][3] = {
{1247.5032,-1315.5708,747.5302},
{1244.0000,-1315.6886,747.5302},
{1251.4761,-1316.0134,747.5302}
};

new Float:HospSpawns[6][3] = {
{1178.1605,-1319.4860,14.1064},
{2039.6392,-1412.3247,17.1641},
{2034.5967,-1408.0800,17.1641},
{2026.8285,-1406.7856,17.1997},
{1178.5494,-1324.7423,14.1256},
{1178.9200,-1328.3419,14.1439}
};

new Float:PaintballSpawns[6][3] = {
{-1317.1432,2526.5583,87.5537},
{-1319.3352,2542.0811,87.5907},
{-1305.0356,2525.8201,87.5246},
{-1287.4983,2516.3545,87.1522},
{-1310.6573,2513.1047,87.0420},
{-1286.5500,2513.2385,87.0407}
};

#define MAXCPS_BOATTEST 17
new Float:BoatTestCP[MAXCPS_BOATTEST][3] = {
{692.9651,-1970.5638,-0.5444},
{309.3667,-1980.7640,-0.4199},
{87.3689,-1880.3497,-0.4534},
{61.4832,-1587.3802,-0.4665},
{57.3684,-1295.4673,-0.5044},
{69.0648,-1046.8188,-0.5243},
{-24.8226,-917.9951,-0.4407},
{-72.7284,-644.0289,-0.4763},
{196.5481,-422.5445,-0.5187},
{422.1385,-277.4556,-0.4194},
{747.5889,-188.4847,-0.4567},
{962.2955,-117.8565,-0.4806},
{1210.0996,-143.5292,-0.4108},
{1433.5621,-248.9770,-0.3547},
{1611.5878,-56.1697,-0.2979},
{1797.8866,-45.0469,-0.3097},
{2122.1262,-99.3532,-0.1933}
};

#define MAXCPS_FLYTEST 38
new Float:FlyTestCP[MAXCPS_FLYTEST][3] = {
/* Original:
{965.0464,-1065.1567,100.5382},
{963.6418,-1428.5138,103.0279},
{470.4404,-1487.9891,129.6486},
{418.6905,-2072.2019,60.9438},
{57.8400,-1836.1703,56.8835},
{394.2709,-2233.4905,58.2942},
{1859.8767,-2411.6353,13.7424},
{397.4704,2507.5149,17.4079}    */
{1476.9991,1822.7257,11.2710}, // T
{1475.2963,1346.8773,28.4738},
{1423.3000,841.8978,101.4468},
{1134.7358,639.2313,112.2286},
{890.9456,597.7352,111.2097},
{477.6943,557.3601,113.4642},
{200.9128,542.2606,119.6075},
{-16.7066,568.5142,124.1782},
{-277.5881,583.3098,125.9554},
{-541.2809,609.4583,117.9185},
{-781.2667,603.0802,117.4996},
{-945.0834,520.5699,103.3242},
{-1574.4109,-79.1265,14.6355}, // T
{-1695.2039,-376.5865,14.6301}, // T
{-1444.1876,-602.4126,14.6347}, // T
{-1185.1404,-380.1933,14.6340}, // T
{-1280.9028,-102.8093,14.6145}, // T
{-1225.3461,-10.8064,14.6119}, // T // vehicle change
{-987.9170,-25.3229,58.3688},  // 487
{-389.7303,123.7011,80.9753},
{-132.8574,41.0421,81.6786},
{398.0409,-468.7558,128.1429},
{1052.7402,-960.9240,131.6052},
{1298.0509,-1081.4803,155.1542},
{1434.2501,-1129.9869,184.8479},
{1582.9989,-1140.7164,236.7525},
{1654.8945,-997.7073,270.5749},
{1605.7531,-863.5177,310.6036},
{1551.5685,-754.2943,259.4349},
{1498.4393,-642.2388,181.7239},
{1460.2024,-541.3481,136.1195},
{1375.6913,-325.2124,134.6627},
{1326.8079,-36.9150,123.2403},
{1267.4758,478.6764,132.6158},
{1340.3043,894.1500,157.6825},
{1462.4178,1396.0334,115.7404},
{1580.1622,1622.9423,10.9973},
{1580.1622,1622.9423,10.9973}
};

#define MAXCPS_DRIVETEST 11
new Float:DriverTestCP[MAXCPS_DRIVETEST][3] = {
{961.5031,-1133.0081,23.5504},
{1055.2715,-1160.9285,23.4955},
{1038.5721,-1551.4927,13.0969},
{833.7417,-1609.4537,13.1287},
{631.8911,-1596.3690,15.3020},
{614.2161,-1725.5762,13.6635},
{158.6646,-1559.9891,11.1087},
{580.2456,-1234.8270,17.2988},
{882.1153,-994.5864,35.5175},
{987.0454,-937.7714,41.7504},
{987.0454,-937.7714,41.7504}
};

new Float:cLixoPoints[20][3] = {
{1867.5664,-1884.1713,13.4524},
{1973.1025,-1991.8855,13.5539},
{1882.7950,-2021.5413,13.3906},
{2120.1213,-1937.0153,13.3828},
{2328.6960,-1980.2823,13.5538},
{2704.7417,-2150.9749,10.9025},
{2318.8513,-2322.5823,13.5469},
{2009.3618,-1731.7355,13.5469},
{2173.9609,-1673.0065,15.0851},
{1568.0717,-1878.8105,13.5469},
{1318.0509,-1794.9291,13.5469},
{1096.6329,-1383.6093,13.7878},
{958.6176,-1332.9087,13.5265},
{833.5989,-1549.9231,13.5107},
{757.8168,-1650.9823,4.9872},
{910.4758,-1247.7280,15.7055},
{1089.2473,-1061.9766,29.6671},
{1655.2554,-1060.6317,23.8984},
{1939.9207,-1087.1567,24.8597},
{2354.7175,-1052.3234,54.0795}
};

new Float:cPaperPoints[34][3] = {
{967.4884,-1112.2168,23.3689},
{1049.5774,-1044.6626,31.5494},
{1087.8516,-1078.0575,26.8580},
{1168.0457,-1095.2380,25.0456},
{1193.0183,-1025.6461,32.1097},
{861.2191,-1521.7723,13.1542},
{818.6918,-1492.4486,13.1716},
{757.7667,-1653.2195,4.3666},
{639.4219,-1704.9419,14.1038},
{689.9801,-1590.3615,13.5649},
{706.4379,-1639.9802,3.0354},
{706.9935,-1697.3369,3.0448},
{1567.4783,-1876.7881,12.9801},
{2006.0043,-1707.9957,12.9624},
{1997.8491,-1678.0245,12.9809},
{2005.5183,-1648.2424,12.9807},
{2077.2786,-1644.9803,12.9946},
{2078.4580,-1698.5576,12.9885},
{2317.0283,-1725.2175,13.1522},
{2337.8188,-1681.4915,12.9580},
{2370.3196,-1654.9622,12.9807},
{2442.6833,-1654.8268,12.9088},
{2502.7861,-1678.9219,12.9455},
{2861.1123,-1330.8590,10.4903},
{2800.8276,-1327.2139,32.5735},
{2491.6694,-1276.8781,31.9728},
{2447.7107,-1308.2224,23.4241},
{2454.5437,-1428.4326,23.4266},
{2484.8835,-1536.7572,23.5906},
{1888.0967,-2056.6904,12.9814},
{1864.8920,-2048.2305,12.9817},
{1805.2134,-2117.9016,13.1601},
{1767.5339,-2109.1799,12.9803},
{1725.8965,-2116.9756,12.9811}
};

new TitelName[128];
enum pBoxingStats
{
    //TitelName[128],
    TitelWins,
    TitelLoses,
};
new Titel[pBoxingStats];

new JailName[5][8] = {{"a PM"}, {"o BANGU"}, {"a PC"}, {"a PF"}, {"a BOPE"}};

#define MAX_PIX   		100
#define GRANA_PIX       4
new Text3D:PixLabel[MAX_PIX];
enum PixInfo
{
	Dono,
    Float:PixX,
    Float:PixY,
    Float:PixZ
};

new bool:Pixando[MAX_PLAYERS];
new bool:LimpandoPiche[MAX_PLAYERS];

new Float:Pixacao[MAX_PIX][PixInfo] = {
{0, 2101.8997,-1648.6208,13.3725}, //00
{0, 2066.7412,-1652.5665,13.5469}, //01
{0, 2046.0721,-1635.9379,13.5469}, //02
{0, 2353.3003,-1508.2350,24.0000}, //03
{0, 2394.1829,-1468.5999,24.0117}, //04
{0, 2399.2993,-1551.6932,28.0000}, //05
{0, 2422.5659,-1682.1787,13.8024}, //06
{0, 2272.9998,-1687.7777,13.6513}, //07
{0, 2073.8396,-1579.1943,13.4554}, //08
{0, 1959.1429,-1577.5194,13.5883}, //09
{0, 1767.3453,-1617.2103,14.4710}, //10
{0, 1837.3754,-1640.5139,13.3125}, //11
{0, 1799.4607,-1708.6892,13.5275}, //12
{0, 572.1152,-1353.8538,14.8151},  //13 -> Old: 1724.7206,-1741.1578,13.5469
{0, 1837.4474,-1813.8838,3.9844},  //14
{0, 1910.1727,-1779.3429,17.9766}, //15
{0, 2034.4106,-1801.9783,14.4844}, //16
{0, 2162.8105,-1786.4110,13.5190}, //17
{0, 2065.3198,-1897.5531,13.5538}, //18
{0, 1850.0338,-1877.1703,13.5603}, //19
{0, 1888.9274,-1982.4363,15.8744}, //20
{0, 1950.9641,-2034.4360,13.5469}, //21
{0, 1808.6780,-2092.4297,13.5469}, //22
{0, 1784.0397,-2156.9214,13.5469}, //23
{0, 1936.7638,-2135.3010,13.6953}, //24
{0, 2173.7625,-2165.5139,15.2171}, //25
{0, 2134.4856,-2011.5219,9.2939},  //26
{0, 2274.1365,-2266.1008,13.5469}, //27
{0, 2379.1689,-2166.4189,24.3050}, //28
{0, 2273.5107,-2529.0403,8.2896},  //29
{0, 1574.5131,-2691.9121,13.1596}, //30
{0, 1624.6973,-2296.5679,13.5387}, //31
{0, 1119.1764,-2008.4498,74.4297}, //32
{0, 1070.8408,-1863.8458,13.5469}, //33
{0, 810.8320,-1797.3727,13.0234},  //34
{0, 482.7039,-1761.9603,5.5388},   //35
{0, 399.3598,-2066.8975,10.7472},  //36
{0, 583.7939,-1502.0382,15.2971},  //37
{0, 730.4956,-1482.4688,1.9688},   //38
{0, 947.8683,-1466.8226,17.1484},  //39
{0, 466.6426,-1283.1222,15.4343},  //40
{0, 1073.1974,-1012.6358,34.9017}, //41
{0, 944.2350,-985.4811,38.6843},   //42
{0, 1206.5846,-1161.9666,23.4949}, //43
{0, 1098.5052,-1292.5448,17.0469}, //44
{0, 1295.1667,-1464.8701,10.0469}, //45
{0, 1490.5581,-1514.5555,23.5480}, //46 -> Old: 1271.4329,-1662.6163,19.7344
{0, 1332.1658,-1722.6425,13.5469}, //47
{0, 1817.4832,-1543.7419,17.0468}, //48 -> Old: 1448.2087,-1755.5513,13.5469
{0, 1549.8146,-1714.8585,13.5469}, //49
{0, 1746.7198,-1359.3901,15.7673}, //50
{0, 1687.2382,-1238.7872,14.9844}, //51
{0, 1498.6434,-1207.0150,23.5967}, //52
{0, 1519.7635,-1010.8885,23.8559}, //53
{0, 1732.3914,-963.1514,40.9532},  //54
{0, 1912.2139,-1064.4200,24.1247}, //55
{0, 2062.3904,-996.3725,47.9766},  //56
{0, 2122.3999,-1060.7532,25.0996}, //57
{0, 2240.0542,-999.5577,59.5762},  //58
{0, 2076.4111,-1070.9664,27.1003}, //59
{0, 2281.8040,-1118.9077,26.8984}, //60
{0, 2224.6914,-1193.3823,25.6688}, //61
{0, 2119.2183,-1196.2710,23.8169}, //62
{0, 1966.9803,-1175.0684,20.0307}, //63
{0, 1969.2760,-1289.7344,23.9844}, //64
{0, 1974.1326,-1351.8368,23.8461}, //65
{0, 2093.6663,-1413.8011,23.9821}, //66
{0, 2182.2083,-1467.5427,25.5391}, //67
{0, 2234.2969,-1367.6244,24.5313}, //68
{0, 1340.9315,-1681.9128,22.8617}, //69 -> Old: 2132.1907,-1258.4297,23.9922
{0, 2322.7449,-1254.3627,22.5000}, //70
{0, 2132.2808,-1258.4302,23.9922}, //71 -> Conflito com o 69
{0, 2346.5903,-1351.0975,24.0177}, //72
{0, 2462.2954,-1541.7015,24.3438}, //73
{0, 2522.1257,-1478.5363,23.9912}, //74
{0, 2542.6572,-1363.3373,31.3865}, //75
{0, 2536.5662,-1352.8354,30.7648}, //76
{0, 2580.6204,-1274.0150,46.1438}, //77
{0, 2603.1079,-1197.5342,60.8492}, //78
{0, 2576.9163,-1143.6112,47.8655}, //79
{0, 2621.5559,-1092.5341,69.6085}, //80
{0, 2797.8384,-1097.3741,30.7188}, //81
{0, 2820.3391,-1190.6528,25.2146}, //82
{0, 2766.3811,-1197.2747,68.8755}, //83
{0, 2841.3525,-1313.3173,18.5467}, //84
{0, 2755.7019,-1388.0579,39.3797}, //85
{0, 2668.2092,-1469.1488,30.5609}, //86
{0, 2612.7661,-1391.1266,34.7286}, //87
{0, 2768.1172,-1621.1292,10.9272}, //88
{0, 2767.8540,-1820.2546,11.8468}, //89
{0, 2874.8459,-1909.3337,8.1396},  //90
{0, 2794.4885,-1906.4790,13.5394}, //91
{0, 2813.3381,-1942.0298,11.1094}, //92
{0, 2763.3875,-2012.0569,13.5547}, //93
{0, 2704.5322,-1966.6729,13.5469}, //94
{0, 2489.2600,-1958.7419,13.5811}, //95
{0, 2392.3398,-1914.8918,13.5469}, //96
{0, 2430.2019,-1998.2240,13.5469}, //97
{0, 2587.6523,-2063.6067,4.5265},  //98
{0, 2704.5264,-2144.3408,11.0719}  //99
};

new Float:CofreOrgCoords[MAX_ORGS][3] = {
{0.00000000, 0.00000000, 0.0000000},
{0.00000000, 0.00000000, 0.0000000},
{0.00000000, 0.00000000, 0.0000000},
{0.00000000, 0.00000000, 0.0000000},
{0.00000000, 0.00000000, 0.0000000},
{305.793600, 1124.13360, 1083.8828}, //Ballas
{2495.63330, -1700.5917, 1018.3437}, //Grove
{0.00000000, 0.00000000, 0.0000000},
{0.00000000, 0.00000000, 0.0000000},
{0.00000000, 0.00000000, 0.0000000},
//{1142.63290, 2.95910000, 1000.6718}, //Lowriders
//{1087.96760, 1285.86580, 11.396300}, //Hamas
{2814.81460, -1169.8322, 1029.1718}, //Vagos
{494.633800, -80.674100, 998.76500}, //Black Pistons
{494.633800, -80.674100, 998.76500}, //Hell Angels
{2814.81460, -1169.8322, 1029.1718}, //Aztecas
{1230.70230, -807.17360, 1084.0078}, //Mafia Russa
{-2158.3708, 646.133230, 1057.5937}, //Mafia Yakuza
//{-221.28330, 1406.73370, 27.773400}, //Drifters
//{421.407700, 2542.61980, 10.000000}, //Bloods
//{2546.80490, -1281.0843, 1060.9843}, //PCC
{0.00000000, 0.00000000, 0.0000000},
{154.821600, 2552.58880, 17.919100} //Alqaeda
//{0.00000000, 0.00000000, 0.0000000}
//{439.365700, -15.493100, 1000.7343}  //Drifters
};

new CofreOrgVW[MAX_ORGS] =
{-1, -1, -1, -1, -1, 0, 1, -1, -1, -1, 1, 0,  1, 0, 0, 0, 0, 0};
//0   1   2   3   4  5  6   7   8   9 12 13  14 15 16 17  21 22

new Float:EntradaHQCoords[MAX_ORGS][3] = {
{0.0000000, 0.00000000, 0.00000},
{0.0000000, 0.00000000, 0.00000},
{0.0000000, 0.00000000, 0.00000},
{0.0000000, 0.00000000, 0.00000},
{0.0000000, 0.00000000, 0.00000},
{2095.0688, -1145.1999, 26.5929}, //Ballas
{2495.3259, -1691.1142, 14.7665}, //Grove
{0.0000000, 0.00000000, 0.00000},
{0.0000000, 0.00000000, 0.00000},
{0.0000000, 0.00000000, 0.00000},
//{2794.0783, -2025.7493, 13.5619}, //Lowriders
//{1087.6584, 1286.24840, 10.8203}, //Hamas
{2808.0278, -1176.4579, 25.3777}, //Vagos
{2310.0471, -1643.4968, 14.8270}, //Black Pistons
{681.64590, -473.34580, 16.5362}, //Hell Anjels
{1831.8649, -1996.0015, 13.5468}, //Aztecas
{915.83430, -917.70400, 42.6015}, //Mafia Russa
{690.35260, -1276.0281, 13.5598}, //Mafia Yakuza
//{970.06280, -1520.6289, 13.5503}, //Drifters
//{2552.7019, -958.22800, 82.6374}, //Bloods
//{2770.6276, -1627.9957, 12.1774}, //PCC
{0.0000000, 0.00000000, 0.00000},
{146.15490, 2545.50780, 17.9191} //Alqaeda
//{0.0000000, 0.00000000, 0.00000}
//{2140.9440, -1802.1223, 16.1474}  //Drifters
};

new Float:EntregaHQ[MAX_ORGS][3] = {
{0.0000000, 0.00000000, 0.00000},
{0.0000000, 0.00000000, 0.00000},
{0.0000000, 0.00000000, 0.00000},
{0.0000000, 0.00000000, 0.00000},
{0.0000000, 0.00000000, 0.00000},
{2178.3599, -1668.1287, 14.8693}, //Ballas
{2505.4594, -1690.5612, 13.5566}, //Grove
{0.0000000, 0.00000000, 0.00000},
{0.0000000, 0.00000000, 0.00000},
{0.0000000, 0.00000000, 0.00000},
//{2791.3974, -2012.1735, 13.5546}, //Lowriders
//{1059.5949, 1247.34030, 11.4424}, //Hamas
{2827.9448, -1198.6293, 24.8066}, //Vagos
{2304.7138, -1638.6988, 14.4994}, //Black Pistons
{681.33920, -441.62640, 16.3359}, //Hell Angels
{1822.4583, -2002.3003, 13.5544}, //Aztecas
{899.19470, -912.12700, 43.7371}, //Mafia Russa
{731.97850, -1265.5552, 13.5534}, //Mafia Yakuza
//{1003.4996, -1542.5493, 13.5875}, //Drifters
//{2521.6162, -960.74701, 82.9597}, //Bloods
//{2793.5588, -1618.2248, 11.5451}, //PCC
{0.0000000, 0.00000000, 0.00000},
{150.7010, 2533.539500, 17.2046} //Alqaeda
//{0.0000000, 0.00000000, 0.00000}
//{2189.3076, -1800.8295, 13.3760}  //Drifters
};

new bool:Equipou[MAX_PLAYERS];
new bool:EquipouColete[MAX_PLAYERS];
new ObjetosVeiculosCaminhao[7][9];
new VeiculosMateriais[4];
new VeiculoMaterialAlugado[4][2];

#define TEMPO_ALUGUEL   (30*60)

new MaxVehMaterial[212] = {
1000,																			//Landstalker	400
500,																			//Bravura		401
300,																			//Buffalo		402
2000,																			//Linerunner	403
1500,																			//Perennial     404
500,																			//Sentinel		405
10000,																			//Dumper		406
2000,																			//Firetruck		407
4000,																			//Trashmaster	408
1500,																			//Strech		409
300,																			//Manana		410
300,																			//Infernus      411
500,																			//Voodoo		412
2500,																			//Pony			413
3500,																			//Mule			414
300,																			//Cheetah		415
2500,																			//Ambulance		416
7500,																			//Leviathan		417
2000,																			//Moonbeam		418
300,																			//Esperanto		419
300,																			//Taxi			420
500,																			//Washington    421
1000,																			//Bobcat		422
2000,																			//Mr Whoopee	423
200,																			//BF Injection  424
50,																				//Hunter		425
300,																			//Premier		426
-1,																				//Enforcer		427
2000,																			//Securiar		428
300,																			//Banshee		429
-1,																				//Predator		430
5000,																			//Bus			431
-1,																				//Rhino			432
5000,																			//Barracks		433
300,																			//Hotknife		434
-1,																				//Trailer		435
300,																			//Previon		436
5000,																			//Coach			437
300,																			//Cabbie		438
500,																			//Stallion		439
2500,																			//Rumpo			440
-1,																				//RC			441
2000,																			//Romero		442
1000,																			//Packer		443
1500,																			//Monster
500,																			//Admiral
1500,																			//Squallo
100,																			//Seasperrow
10,																				//Pizzaboy
-1,																				//Tram
-1,																				//Trailer
100,																			//Turismo
1500,																			//Speeder
2000,																			//Reefer
2000,																			//Tropic
5000,																			//Flatbed
3500,																			//Yankee
10,																				//Caddy
750,																			//Solair
1500,																			//Topfun Van
-1,																				//Skimmer
-1,																				//PCJ-600
-1,																				//Faggio
-1,																				//Freeway
-1,																				//RC
-1,																				//RC
300,																			//Glendale
300,																			//Oceanic
-1,																				//Sanchez
50,																				//Sparrow
750,																			//Patriot
-1,																				//Quad
1500,																			//Coastguard
500,																			//Dinguy
500,																			//Hermes
300,																			//Sabre
-1,																				//Rustler
150,																			//ZR-350
1000,																			//Walton
1000,																			//Regina
300,																			//Comet
-1,																				//BMX
2500,																			//Burrito
2500,																			//Camper
2000,																			//Marquis
-1,																				//Baggage
-1,																				//Dozer
2000,																			//Maverick
1000,																			//SN Maverick
1500,																			//Rancher
-1,																				//FBI Rancher
300,																			//Virgo
300,																			//Greenwood
1500,																			//Jetmax
300,																			//Hotring Racer
750,																			//Sandking
500,																			//Blista Compact
-1,																				//
3000,																			//
2500,																			//
1000,																			//
-1,																				//
750,																			//
750,																			//
100,																			//
1500,																			//
300,																			//
300,																			//
3000,																			//
-1,																				//
-1,																				//
5000,																			//
-1,																				//
-1,																				//
1000,																			//
1000,																			//
300,																			//Nebula		516
300,																			//Magestic		517
500,																			//
2000,																			//
-1,																				//
-1,																				//
-1,																				//
-1,																				//
3000,																			//
1000,																			//
300,																			//
300,																			//
-1,																				//
300,																			//
-1,																				//
-1,																				//
-1,																				//
500,																			//
300,																			//
1000,																			//
500,																			//
-1,																				//
-1,																				//
-1,																				//
300,																			//
500,																			//
1500,																			//
1500,																			//
300,																			//
500,																			//
300,																			//
5000,																			//
500,																			//
300,																			//
300,																			//
1000,																			//
7500,																			//
2000,																			//
400,																			//
1500,																			//
1500,																			//
500,																			//
300,																			//
300,																			//
750,																			//
300,																			//
7500,																			//
-1,																				//
2000,																			//
300,																			//
300,																			//
500,																			//
-1,																				//
-1,																				//
-1,																				//
-1,																				//
-1,																				//
5000,																			//
-1,																				//
500,																			//
500,																			//
10000,																			//
5000,																			//
1500,																			//
300,																			//
-1,																				//
2500,																			//
-1,																				//
-1,																				//
300,																			//
-1,																				//
300,																			//
2000,																			//
1500,																			//
-1,																				//
-1,																				//
10000,																			//
500,																			//
-1,																				//
1500,																			//
-1,																				//
-1,																				//
-1,																				//
-1,																				//
1500,																			//
-1,																				//
500,																			//
300,																			//
50,																				//
150,																			//
-1,																				//
-1,																				//
-1,																				//
3500,																			//
-1,																				//
-1																				//Utility Trailer       611
};

//Areas Azuis
#define MAX_AREASAZUIS                            3

enum azInfo
{
    Float:azMaxPosX,
    Float:azMaxPosY,
    Float:azMinPosX,
    Float:azMinPosY,
    azGangZoneID
}
new AreasAzuis[MAX_AREASAZUIS][azInfo] = {
{1811.7307, -1842.2335, 1687.6790, -1947.3018}, //Spawn Novato
{1687.6790, -1862.5963, 1415.4536, -1882.3587}, //Rua p/ Pref
{1436.0460, -1882.1707, 1072.0460, -2078.1708}  //Pref
};

new bool:IsPlayerCivil[MAX_PLAYERS];

#define AreaAzulText                             "Civil"
#define AreaAzulColor                            0x00E5FFFF

//Cofre Org
enum cf_Info
{
	cfDrogas,
	cfMat,
	cfDinheiro
}
new CofreOrg[MAX_ORGS][cf_Info];

#define MAX_TURFS   17
#define TURF_PAYOUT 80

enum zInfo
{
	zName[24],
    Float:zMinX,
    Float:zMinY,
    Float:zMaxX,
    Float:zMaxY,
    bool:zCanAttack
};

new TurfsCoords[MAX_TURFS][zInfo] = {
{"Morro",               2117.3330, -1069.9620, 2261.8410, -959.42520, true}, //1
{"Skate",               1861.9410, -1450.6462, 1976.5867, -1351.4069, true}, //2
{"Cemitério",           806.9796, -1130.1113, 952.4546, -1055.7621, true}, //3
{"Aero",                1395.7454, -2368.6396, 1566.4358, -2204.4346, true}, //4
{"Farol",               133.12680, -1968.3923, 178.06020, -1880.1589, true}, //5
{"Usina Eletrica",      111.78990, 1336.29690, 286.96810, 1484.30160, true}, //6
{"Usina Hidroeletrica", -907.0000, 1365.00000, -480.0000, 2148.00000, true}, //7
{"Fabrica",             -447.7593, -1535.4790, -316.0000, -1334.6340, true}, //8
{"Bar",                 2843.0141, -2059.3864, 2869.7529, -1880.7812, true}, //9
{"Deposito Abandonado", -622.7695, -562.34520, -466.2568, -468.55330, true}, //10
{"Refinaria",           -1126.165, -758.41740, -973.2374, -589.65320, true}, //11
{"Pedreira",            397.0478, 770.7397, 969.2637, 1097.72, true}, //12
{"Glen Park",        	1857.630615, -1253.156738, 2061.943603, -1140.627929, true}, //13
{"Fazenda de Drogas 1", 1518.5002, -37.506800, 1583.2821, 70.6889000, true}, //14
{"Fazenda de Drogas 2", -1442.738, -972.16500, -1411.030, -940.10480, true}, //15
{"Fazenda de Drogas 3", -2832.054, -1544.8629, -2768.514, -1498.9173, true}, //16
{"Docas do Oceano",     2645.927, -2570.104, 2810.8435, -2329.8726, true} //17
};

new AllowedOrgs[MAX_TURFS][MAX_TURFS] = {
{0, 0, 0,  0,  0,  0,  16,  5,  6, 10, 11, 12, 13},//Morro0 1 5 6 10 11 12 13
{0, 0, 0,  0,  0,  0,  1,  5,  6, 10, 11, 12, 13},//Skate1
{0, 0, 0,  0,  0,  0,  1,  5,  6, 10, 11, 12, 13},//Shop2
{0, 0, 0,  0,  0,  0,  1,  5,  6, 10, 11, 12, 13},//Aero3
{0, 0, 0,  0,  0,  0,  1,  5,  6, 10, 11, 12, 13},//Farol4
{0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 17},//Usina Eletrica7
{0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 17},//Usina Hidroeletronica8
{0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  2, 14, 15},//Fabrica9
{0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0, 11, 12},//Bar10
{0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  2, 14, 15},//Deposito Abandonado11
{0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  2, 14, 15},//Refinaria12
{0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  3, 17},//Pedreira13
{0, 0, 0,  0,  0,  0,  1,  5,  6, 10, 11, 12, 13},//Parque Gleen16
{0, 0, 0,  0,  0,  0,  1,  5,  6, 10, 11, 12, 13},//Fazenda de Drogas 1
{0, 0, 0,  0,  0,  0,  1,  5,  6, 10, 11, 12, 13},//Fazenda de Drogas 2
{0, 0, 0,  0,  0,  0,  1,  5,  6, 10, 11, 12, 13}, //Fazenda de Drogas 3
{0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  2, 14, 15} //Docas do Oceano18
};

enum GangZonesEx
{
	ZoneOwner,      					//Zone owner
	bool:ZoneInWar,     				//Whether or not zone is in war
	bool:ZoneIsSpawn,
	bool:IsZoneGZ,
	bool:IsZoneVillage,

	ZoneWarPoints[MAX_ORGS],
	ZoneAttacker,   					//Gang who started war
	ZonePlayerCount[MAX_ORGS],
	ZonePlayerCountEx[MAX_ORGS],    	//Players in zone
	ZoneWarKillCount[MAX_ORGS],   		//Kill tracker for in war zone count
	ZoneKillCount[MAX_ORGS],       	//Kill counter (for not in war)
	ZoneWarTimeLeft,     				//Time left before war ends
	ZonePlayerReqMet[MAX_ORGS],    	//Number of times zone check passed the player requirement (gang-based)
	ZoneWarPlayers[MAX_ORGS],       	//Players from each gang that participated in war (gang-based)
	ZoneWarCount,          				//Number of wars fought

}
new gZonesData[MAX_TURFS][GangZonesEx];


new Turfs[MAX_TURFS];

enum pFishing
{
	pFish1[20],
	pFish2[20],
	pFish3[20],
	pFish4[20],
	pFish5[20],
	pFish6[20],
	pWeight1,
	pWeight2,
	pWeight3,
	pWeight4,
	pWeight5,
	pWeight6,
	pFid1,
	pFid2,
	pFid3,
	pFid4,
	pFid5,
	pFid6,
	pLastFish,
	pFishID,
	pLastWeight,
};
new Fishes[MAX_PLAYERS][pFishing];

enum pCooking
{
	pCook1[20],
	pCook2[20],
	pCook3[20],
	pCook4[20],
	pCook5[20],
	pCWeight1,
	pCWeight2,
	pCWeight3,
	pCWeight4,
	pCWeight5,
	pCookID1,
	pCookID2,
	pCookID3,
	pCookID4,
	pCookID5,
};
new Cooking[MAX_PLAYERS][pCooking];

enum pGroceries
{
	pChickens,
	pChicken,
	pHamburgers,
	pHamburger,
	pPizzas,
	pPizza,
};
new Groceries[MAX_PLAYERS][pGroceries];

enum pSpec
{
	Float:Coords[3],
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sPint,
    sPvw,
	sLocal,
    sNum,
    sArea
};

new Unspec[MAX_PLAYERS][pSpec];

enum eCars
{
	model_id,
	Float:pos_x,
	Float:pos_y,
	Float:pos_z,
	Float:z_angle,
};

new pMarriedTo[MAX_PLAYERS][128];

#define STATUS_RG   0
#define STATUS_INV  1
#define STATUS_ACC  2
#define STATUS_ADM  3

enum pInfo
{
	// Milestones
	pCompletedNonRepTask[5],

	// Boombox
	pDynamicBB,
	Text3D:pDynamicBBLabel,
	pDynamicBBArea,
	bool:pBoombox,
	Float:pDynamicBBX,
	Float:pDynamicBBY,
	Float:pDynamicBBZ,
	pDynamicBBInt,
	pDynamicBBVW,
	pDynamicBBStation[128],

	//pReferral[MAX_PLAYER_NAME],
	//Referral
    gSpectateID,
    gSpectateType,
	TurfKills,
	TurfDeaths,
	WarPoints,
	SenhaFila,
	MuteTime,
	bool:Spawned,
    bool:AllowGod,
	pMorto,
	bool:FirstSpawn,
	bool:SeePoints,
	bool:SeeName,
	bool:SeeChecksBar,
	JailReason[128],
   	pName[MAX_PLAYER_NAME],
	pKey[128],
	pPass[128],
	pSeatBelt,
	bool:pAutoBelt,
	pCapacete,
	pLevel,
	pAdmin,
	pAdminWork,
	pEnigma,
	pDonateRank,
	gPupgrade,
	pConnectTime,
	pReg,
	pSex,
	pAge,
	pOrigin,
	pExp,
	pMoney,
	pBLSCash,
	pHoraVIP,
	pVIP,
	pBank,
	pCrimes,
	pCar[5],
	pKills,
	pDeaths,
	pArrested,
	pWantedDeaths,
	pPhoneBook,
	pPhone,
	pLottoNr,
 	pFishes,
	pBiggestFish,
	pJob,
	pHeadValue,
	pJailed,
	pJailTime,
	pJailTimetotal,
	pMats,
	pDrugs,
	pLuta,
	pCigarro,
	pPC,
	pNBook,
	p3G,
	pCorda,
	pPlano,
	pVotou,
	pBan,
	pLeader,
	pMember,
	pFMember,
	pRank,
	pChar,
	pContractTime,
	pDetSkill,
	pSexSkill,
	pBoxSkill,
	pLawSkill,
	pMechSkill,
	pJackSkill,
	pCarSkill,
	pNewsSkill,
	pDrugsSkill,
	pCookSkill,
	pFishSkill,
	Float:pHealth,
	Float:pSHealth,
	Float:pLocalX,
    Float:pLocalY,
    Float:pLocalZ,
	pInt,
	pLocal,
	pModel,
	pPnumber,
	pHouseKey,
	pPaluguelkey,
	pBizKey,
	pAtend,
	pNota,
    pLocalSpawn,
    pBonusExp,

	Float:LastSpeed,

	pCarLic,
	pCarLicPoints,
	pFlyLic,
	pBoatLic,
	pFishLic,
	pGunLic,

	pPacoteArmas,
	pGun1,
	pGun2,
	pGun3,
	pGun4,
	pAmmo1,
	pAmmo2,
	pAmmo3,
	pAmmo4,
	pCarTime,
	pPayDayHad,
	pCDPlayer,
	pWins,
	pLoses,
	pAlcoholPerk,
	pDrugPerk,
	pMiserPerk,
	pPainPerk,
	pTraderPerk,
	pTut,
	pWarns,
	pAdjustable,
	pFuel,
	pRoadblock,
	pCone,
	pCorrente,
	pRequestingBackup,
	pMarried,
	pLastLogin[24],
	pLastSave,
	pLogedTime,
	pCreditos,
	pDest[32],
	pAviso1[32],
	pAviso2[32],
	CMD,
//	pInvWeapon,
//	pInvAmmo,
	pSpeaker,
	LastZone,
	TransferID,
	LastVeh,
    pIP[16],

	pDrogasGuardadas,
	pPastilhas,
	pIrcId,
	pDoenca,
	bool:pTemMascara,
	bool:pMascarado,
	bool:pCapaChuva,

    bool:pExplosivo,

	bool:pDesbugou,

    pRG[32],
    pVoto
};

new Player[MAX_PLAYERS][pInfo];

new hOwner[MAX_HOUSES][MAX_PLAYER_NAME];
new hDiscription[MAX_HOUSES][MAX_PLAYER_NAME];

enum hInfo
{
	Float:hEntrancex,
	Float:hEntrancey,
	Float:hEntrancez,
	Float:hExitx,
	Float:hExity,
	Float:hExitz,
	hValue,
	hHel,
	hArm,
	hInt,
	hLock,
	hOwned,
	hRooms,
	hRent,
	hRentabil,
	hTakings,
	hVec,
	hVcol1,
	hVcol2,
	Float:hVpos[4],
	hDate,
	hArrombada,
	hIcon,
	hLevel,
    hWorld,
    Text3D:HouseLabel
};

new HouseInfo[MAX_HOUSES][hInfo];

//Empresas

/*#define Biz_Ammu1           0
#define Biz_Ammu2           1
#define Biz_Restaurante     2
//#define Biz_Arsenal         3
  */
#define Biz_Motos          0
#define Biz_Carros         1
#define Biz_Telefonica     2
#define Biz_Posto          3
#define Biz_Eletrica       4
#define Biz_Produtos       5
#define Biz_Atualizacao    6
#define Biz_Anuncios       7
#define Biz_Mecanica       8
#define Biz_247            9
#define Biz_PaintBall      10
#define Biz_Ammu1          11
#define Biz_Agua           12
#define Biz_Conce          13
#define Biz_Hosp           14
#define Biz_PaySpray       15
#define Biz_Alimentos      16
#define Biz_AutoEscola     17
#define Biz_Bebidas        18
#define Biz_Aero           19
#define Biz_Binco          20
#define Biz_Pedagio        21
#define Biz_Loterica       22
#define Biz_Ammu2          23
#define Biz_Tunning        24
#define Biz_Imobiliaria    25

new bOwner[MAX_BIZ][MAX_PLAYER_NAME];
new bMessage[MAX_BIZ][128];
new bExtortion[MAX_BIZ][MAX_PLAYER_NAME];
enum bInfo
{
    //bOwner[MAX_PLAYER_NAME],
	bOwned,

	Float:bEntranceX,
	Float:bEntranceY,
	Float:bEntranceZ,

	bBuyPrice,
	bLevelNeeded,

	bTill,

	bProducts,
	bMaxProducts,
	bPriceProd,
    bBizPriceProd,

	Text3D:BizzLabel,
    BizzIcon,

    bool:bCustomSell,
    bCustomPrice
};
new BizzInfo[MAX_BIZ][bInfo];

new BizCarrosPrice[sizeof(AluguelCarro)];
new BizMotosPrice[sizeof(AluguelMoto)];
new BizAeroPrice[sizeof(AluguelAero)];
new Float:BizPostoPrice;
new BizProdutosPrice;
new BizAnunciosPrice;
new BizPedagioPrice;
new BizLotericaPrice;
new Float:BizTelefonicaPrice;
new BizPaintBallPrice;
new BizAmmu1Price;
new BizAmmu2Price;
new BizBincoPrice;

new bool:BizPaintBallLock;
new bool:BizAmmu1Lock;
new bool:BizAmmu2Lock;

enum pHaul
{
	pCapasity,
	pLoad,
};

new PlayerHaul[MAX_VEHICLES][pHaul];

enum pCrime
{
	pBplayer[32],
	pAccusing[32],
	pAccusedof[64],
	pVictim[32],
};
new PlayerCrime[MAX_PLAYERS][pCrime];

new bool:Equipe[MAX_PLAYERS];

stock DuasEquipes(t1,t2)
{
    static bool:loop;
    foreach (new i : Player)
	{
	    if(noevento[i] == true)
	    {
			if(loop == true)
			{
			    Equipe[i] = true;
		   		loop = false;
		   		SendClientMessage(i,-1,"Você foi para a Equipe 1.");
		   		//SetPlayerTeam(i,t1);
			}
			else
			{
			    Equipe[i] = false;
			    loop = true;
			    SendClientMessage(i,-1,"Você foi para a Equipe 2.");
			    //SetPlayerTeam(i,t2);
			}
		}
	}
}

stock IsPlayerInZone(playerid, zoneid) {
	if(zoneid == -1){ return false; }
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(x >= zones[zoneid][zone_minx] && x < zones[zoneid][zone_maxx] && y >= zones[zoneid][zone_miny] && y < zones[zoneid][zone_maxy] && z >= zones[zoneid][zone_minz] && z < zones[zoneid][zone_maxz] && z < 900.0){ return true; }
	else { return false; }
}

stock ReturnWeaponID(WeaponName[])
{
	if(strfind("molotov",WeaponName,true)!=-1) return 18;
	for(new i = 0; i <= 46; i++)
	{
		switch(i)
		{
			case 0,19,20,21,44,45:
				continue;
			default:
			{
				new name[24];
				GetWeaponName(i,name,24);
				if(strfind(name,WeaponName,true)!=-1)
					return i;
			}
		}
	}
	return -1;
}

stock GetWeaponNameEx(weaponid)
{
	new name[32];
    GetWeaponName(weaponid, name, 32);
    return name;
}

stock ReturnUser(PlayerName[])
{
	if(IsNumeric(PlayerName))
	    return strval(PlayerName);
	else
	{
		new found=0, id;
        foreach (new i : Player)
		{
		    new foundname[MAX_PLAYER_NAME];
		  	GetPlayerName(i, foundname, MAX_PLAYER_NAME);
			new namelen = strlen(foundname);
			new bool:searched=false;
		    for(new pos=0; pos <= namelen; pos++)
			{
				if(searched != true)
				{
					if(strfind(foundname,PlayerName,true) == pos)
					{
				        found++;
						id = i;
					}
				}
			}
		}
		if(found == 1)
			return id;
		else
			return INVALID_PLAYER_ID;
	}
}

stock bigstr(const string[], &idx)
{
    new length = strlen(string);
	while ((idx < length) && (string[idx] <= ' '))
	{
		idx++;
	}
	new offset = idx;
	new result[128];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
		result[idx - offset] = string[idx];
		idx++;
	}
	result[idx - offset] = EOS;
	return result;
}

stock ReturnPlayerZone(playerid)
{
	new playerzone[24] = "Desconhecido";
	for(new j; j < sizeof(zones); j++)
	{
		if(IsPlayerInZone(playerid,j))
		{
			memcpy(playerzone, zones[j][zone_name], 0, 108);
			return playerzone;
		}
	}
    return playerzone;
}

stock LoadPlayerToys(playerid) {
    // -- File -- //
    new file[128], temp[45];
    format(file, sizeof file, "/RPG/Toys/%s.ini", Player[playerid][pName]);
    if(DOF2_FileExists(file)) {
	    for(new i; i < MAX_VIP_TOYS; i++) {
		    // -- Identification -- //
		    format(temp, sizeof temp, "Model_%d", i);
		    PlayerToys[playerid][i][ptModelID] = DOF2_GetInt(file, temp);
		    format(temp, sizeof temp, "Bone_%d", i);
		    PlayerToys[playerid][i][ptBoneID] = DOF2_GetInt(file, temp);
		    // -- Position -- //
		    format(temp, sizeof temp, "OffSetX_%d", i);
		    PlayerToys[playerid][i][ptOffsetX] = DOF2_GetFloat(file, temp);
	  	    format(temp, sizeof temp, "OffSetY_%d", i);
		    PlayerToys[playerid][i][ptOffsetY] = DOF2_GetFloat(file, temp);
		    format(temp, sizeof temp, "OffSetZ_%d", i);
		    PlayerToys[playerid][i][ptOffsetZ] = DOF2_GetFloat(file, temp);
		    // -- BOPEtion -- //
		    format(temp, sizeof temp, "RotX_%d", i);
		    PlayerToys[playerid][i][ptRotX] = DOF2_GetFloat(file, temp);
		    format(temp, sizeof temp, "RotY_%d", i);
		    PlayerToys[playerid][i][ptRotY] = DOF2_GetFloat(file, temp);
		    format(temp, sizeof temp, "RotZ_%d", i);
		    PlayerToys[playerid][i][ptRotZ] = DOF2_GetFloat(file, temp);
		    // -- Wearing -- //
		    format(temp, sizeof temp, "Wearing_%d", i);
		    PlayerToys[playerid][i][ptWearing] = bool:DOF2_GetInt(file, temp);
		}
	} else {
	    for(new i; i < MAX_VIP_TOYS; i++) {
            PlayerToys[playerid][i][ptModelID] = 0;
            PlayerToys[playerid][i][ptBoneID] = 0;
            PlayerToys[playerid][i][ptOffsetX] = 0;
            PlayerToys[playerid][i][ptOffsetY] = 0;
            PlayerToys[playerid][i][ptOffsetZ] = 0;
            PlayerToys[playerid][i][ptRotX] = 0;
            PlayerToys[playerid][i][ptRotY] = 0;
            PlayerToys[playerid][i][ptRotZ] = 0;
            PlayerToys[playerid][i][ptWearing] = false;
		}
	}
}

stock SavePlayerToys(playerid) {
    // -- File -- //
    new file[128], temp[45];
    format(file, sizeof file, "/RPG/Toys/%s.ini", Player[playerid][pName]);

    if(!DOF2_FileExists(file))
        DOF2_CreateFile(file);

	for(new i; i < MAX_VIP_TOYS; i++) {
		// -- Identification -- //
		format(temp, sizeof temp, "Model_%d", i);
		DOF2_SetInt(file, temp, PlayerToys[playerid][i][ptModelID]);
		format(temp, sizeof temp, "Bone_%d", i);
		DOF2_SetInt(file, temp, PlayerToys[playerid][i][ptBoneID]);
		// -- Position -- //
		format(temp, sizeof temp, "OffSetX_%d", i);
		DOF2_SetFloat(file, temp, PlayerToys[playerid][i][ptOffsetX]);
		format(temp, sizeof temp, "OffSetY_%d", i);
		DOF2_SetFloat(file, temp, PlayerToys[playerid][i][ptOffsetY]);
		format(temp, sizeof temp, "OffSetZ_%d", i);
		DOF2_SetFloat(file, temp, PlayerToys[playerid][i][ptOffsetZ]);
		// -- BOPEtion -- //
		format(temp, sizeof temp, "RotX_%d", i);
		DOF2_SetFloat(file, temp, PlayerToys[playerid][i][ptRotX]);
		format(temp, sizeof temp, "RotY_%d", i);
		DOF2_SetFloat(file, temp, PlayerToys[playerid][i][ptRotY]);
		format(temp, sizeof temp, "RotZ_%d", i);
		DOF2_SetFloat(file, temp, PlayerToys[playerid][i][ptRotZ]);
		// -- Wearing -- //
		format(temp, sizeof temp, "Wearing_%d", i);
		DOF2_SetInt(file, temp, _:PlayerToys[playerid][i][ptWearing]);
	}
}

stock SetPlayerToys(playerid) {
	// -- Boundries -- //
	new slots;
	if(IsAVip(playerid))
		slots = MAX_VIP_TOYS;
	else
		slots = MAX_FREE_TOYS;
	for(new i; i < slots; i++) {
        // -- Init -- //
        if(PlayerToys[playerid][i][ptWearing])
            SetPlayerAttachedObject(playerid,i,PlayerToys[playerid][i][ptModelID],PlayerToys[playerid][i][ptBoneID],PlayerToys[playerid][i][ptOffsetX],PlayerToys[playerid][i][ptOffsetY],
            PlayerToys[playerid][i][ptOffsetZ],PlayerToys[playerid][i][ptRotX],PlayerToys[playerid][i][ptRotY],PlayerToys[playerid][i][ptRotZ],1,1,1);
        else if(IsPlayerAttachedObjectSlotUsed(playerid, i))
            RemovePlayerAttachedObject(playerid, i);
	}
	for(new r = slots; r < MAX_PLAYER_ATTACHED_OBJECTS; r++)
	    // -- If the slot is maybe in use -- //
	    if(IsPlayerAttachedObjectSlotUsed(playerid, r))
            RemovePlayerAttachedObject(playerid, r);
}

stock LimparChat(playerid)
{
	for(new limpar = 0; limpar <= 16; limpar++)
		SendClientMessage(playerid,COLOR_WHITE," ");
}

stock MeuEmail(playerid,numero)
{
    new email[32],email2[256];
    format(email,32,"/RPG/emails/%s.ini",Player[playerid][pName]);

    format(email2,256,"{C2A2DA}%d - %s\n",strval(Emails[numero]),DOF2_GetString(email,Emails[numero]));

    ShowPlayerDialog(playerid, 30, DIALOG_STYLE_MSGBOX, "Caixa de entrada", email2, "Voltar", "Sair");
}

stock EnviarEmail(playerid,const string[])
{
	new email[128],str[256];
    format(email,128,"/RPG/emails/%s.ini",Player[playerid][pDest]);
    if(!DOF2_FileExists(email))
    {
	    for(new i=0;i<sizeof(Emails);i++)
	    {
     		DOF2_SetString(email,Emails[i],"Vazio");
     		DOF2_SaveFile();
		}
    }
    else
    {
        format(str,256,"%s - Remetente : %s",string,ReturnPlayer(playerid));
		for(new i=0;i<sizeof(Emails);i++)
		{
   	    	if(strcmp(DOF2_GetString(email,Emails[i]),"Vazio",true)==0)
   	    	{
   	    	    new giveid = ReturnUser(Player[playerid][pDest]);
   	    	    if(IsPlayerConnected(giveid))
   	    	        GameTextForPlayer(giveid, "Voce recebeu um novo e-mail.", 4000, 5);
    			DOF2_SetString(email,Emails[i],str);
    			DOF2_SaveFile();
    			return true;
   			}
		}
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} A caixa de entrada está lotada.");
	}
	return true;
}

stock MinhaOrg(playerid)
{
    new org[128], org2[128], string[2048], Org[32], tmp[32], giveid;
    format(org,128,"/RPG/orgs/%s.ini",OrgsNamesSmall[Player[playerid][pMember]]);
    Org = OrgsNames[GetPlayerOrg(playerid)];
    format(string, sizeof(string), "{FFFFFF}");
    for(new i=0;i<sizeof(OrgsCargos);i++)
    {
		format(tmp,32,"%s",DOF2_GetString(org,OrgsCargos[i]));
		if(isnull(tmp)) tmp = "Nenhum";
        giveid = IsPlayerConnectedEx(tmp);
        if(giveid != INVALID_PLAYER_ID)
            format(org2, 128, "%s - %s - {00D900}Online{FFFFFF}\n", OrgsCargosEx[i], DOF2_GetString(org, OrgsCargos[i]));
        else if(strcmp(DOF2_GetString(org,OrgsCargos[i]),"Nenhum",true)==0)
            format(org2,128,"%s - Nenhum\n",OrgsCargosEx[i]);
		else
		    format(org2,128,"%s - %s - {AA3333}Offline{FFFFFF}\n",OrgsCargosEx[i],DOF2_GetString(org,OrgsCargos[i])); //Cor Antiga: AA3333

		format(string, 2048,"%s %s", string, org2);
    }
    ShowPlayerDialog(playerid, 24, DIALOG_STYLE_MSGBOX, Org, string, "Fechar", "");
}

stock AddMembro(giveid)
{
	new org[128];
    format(org,128,"/RPG/orgs/%s.ini",OrgsNamesSmall[Player[giveid][pMember]]);
    if(!DOF2_FileExists(org))
    {
	    DOF2_CreateFile(org);
	    for(new i = 0; i < sizeof(OrgsCargos); i++)
	    {
	        if(i == 0 && Player[giveid][pLeader] != 0)
	           	DOF2_SetString(org, OrgsCargos[i], Player[giveid][pName]);
			else
  				DOF2_SetString(org, OrgsCargos[i], "Nenhum");
	    }
	    DOF2_SaveFile();
    }
    else
    {
/*		new l;
        if(Player[giveid][pRank] == 6)
            l=0;
        else if(Player[giveid][pRank] < 4)
            l=3;*/
        if(Player[giveid][pLeader] != 0)
		{
			DOF2_SetString(org, OrgsCargos[0], Player[giveid][pName]);
			DOF2_SaveFile();
			return 1;
		}
		for(new i = 3; i < sizeof(OrgsCargos); i++)
		{
   	    	if(!strcmp(DOF2_GetString(org, OrgsCargos[i]), "Nenhum", true))
   	    	{
    			DOF2_SetString(org, OrgsCargos[i], Player[giveid][pName]);
    			DOF2_SaveFile();
    			return 1;
			}
		}
        return SendClientMessage(giveid,COLOR_RED, "[ERRO]:{FFFFFF} Esta organização já atingiu o limite de membros.");
	}
	return true;
}

stock DelMembro(giveid)
{
    new org[128];
    format(org,128,"/RPG/orgs/%s.ini", OrgsNamesSmall[Player[giveid][pMember]]);

 	for(new i = 0; i < sizeof(OrgsCargos); i++)
 	{
   	    if(!strcmp(DOF2_GetString(org, OrgsCargos[i]), Player[giveid][pName], true))
   	    {
   	        DOF2_SetString(org, OrgsCargos[i], "Nenhum");
   	        DOF2_SaveFile();
   	        return 1;
		}
	}
	return true;
}

stock DelApreendido(carid)
{
    new newstring[128];
    for(new i=0;i<sizeof(Apreendido);i++)
    {
    	format(newstring,128,"%s - %s",GetVehicleNumberPlate(carid),VehicleInfo[carid][vOwner]);
   	    if(strcmp(DOF2_GetString(APRE_FILE,Apreendido[i]),newstring,true)==0)
   	        DOF2_SetString(APRE_FILE,Apreendido[i],"******");
	}
	DOF2_SaveFile();
	return true;
}

stock AddApreendido(playerid,carid)
{
    if(!DOF2_FileExists(APRE_FILE))
    {
	    DOF2_CreateFile(APRE_FILE);
	    for(new i=0;i<sizeof(Apreendido);i++)
           	DOF2_SetString(APRE_FILE,Apreendido[i],"******");
    }
    else
    {
        new newstring[128];
   	    format(newstring,128,"%s - %s",GetVehicleNumberPlate(carid),VehicleInfo[carid][vOwner]);
	    for(new i=0;i<sizeof(Apreendido);i++)
	    {
	        if(strcmp(DOF2_GetString(APRE_FILE,Apreendido[i]),newstring,true)==0)
	            return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Este veículo já está apreendido.");

   	    	if(strcmp(DOF2_GetString(APRE_FILE,Apreendido[i]),"******",true)==0)
   	    	{
    			DOF2_SetString(APRE_FILE,Apreendido[i],newstring);
				return DOF2_SaveFile();
			}
		}

        return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O pátio já está cheio.");
	}
	return true;
}


// Milestones
public CompletarNonRepMilestone(playerid, id)
{
	if(Player[playerid][pCompletedNonRepTask][id] == 1)
	    return true;

	new sstring[320];
	GivePlayerGP(playerid, MilNonRepGrana);
	Player[playerid][pExp] += MilNonRepResp;
	Player[playerid][pCompletedNonRepTask][id] = 1;
	GivePlayerCash(playerid, MilNonRepCash);
	format(sstring, 320, "[BLS]: {FFFFFF}Você completou a missão: \"{00FFFF}%s{FFFFFF}\", por isso recebeu R$%d, %d respeitos e BLS$%d.", MilNonRepeatTasks[id][milTask], Mil1Grana, Mil1Resp, Mil1Cash);
	SendClientMessage(playerid, 0x1E90FFFF, sstring);

	new nxtlevel = Player[playerid][pLevel] + 1;
    new expamount = nxtlevel * levelexp;
   	if(Player[playerid][pExp] >= expamount)
   	{
   	    format(sstring, sizeof(sstring), "~g~Level Up: ~w~%d", nxtlevel);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		PlayerPlayMusic(playerid);
		Player[playerid][pLevel] ++;
	    Player[playerid][pExp] -= expamount;
		Player[playerid][gPupgrade] += 2;
		GameTextForPlayer(playerid, sstring, 5000, 1);
		format(sstring, 128, "{FF0000}[Info]:{FFFFFF} Você passou para o nível %d.", nxtlevel);
		SendClientMessage(playerid, SERVER_INFO, sstring);
		format(sstring, 128, "{FF0000}[Info]:{FFFFFF} Você tem %d pontos de atualização.", Player[playerid][gPupgrade]);
		SendClientMessage(playerid, SERVER_INFO, sstring);

        if(Player[playerid][pLevel] == 10 || Player[playerid][pLevel] == 15 || Player[playerid][pLevel] == 20)
		{
	        format(sstring, sizeof(sstring), "{FF0000}[Info]:{FFFFFF} Parabéns a %s, pois agora ele é nível %d!", Player[playerid][pName], Player[playerid][pLevel]);
    	    SendClientMessageToAll(SERVER_INFO, sstring);
        }
	}
	return true;
}

forward AtualizarTextDraws(playerid);
public AtualizarTextDraws(playerid)
{
	new String[64];
	if(IsPlayerConnected(playerid) && playerid != INVALID_PLAYER_ID)
	{
	    TextDrawHideForPlayer(playerid, TextCash[playerid]);
		format(String, sizeof(String), "BLS Cash: %d", Player[playerid][pBLSCash]);
		TextDrawSetString(TextCash[playerid], String);
		TextDrawShowForPlayer(playerid, TextCash[playerid]);
	}
}

forward Pedindo(playerid,jobid);
public Pedindo(playerid,jobid)
{
	if(Solicitando[playerid][jobid] == true)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já solicitou este serviço. Aguarde.");

	new string[128];
	format(string, sizeof(string), "%s está solicitando os serviços de um %s.", ReturnPlayer(playerid),JobsNames[jobid]);
   	SendJobMessage(jobid, COLOR_AZTECAS, string);
   	format(string, sizeof(string), "Você solicitou os serviços de um %s. Aguarde...", JobsNames[jobid]);
   	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
   	Solicitando[playerid][jobid] = true;
   	return true;
}

forward Aceitando(playerid, giveid, jobid);
public Aceitando(playerid, giveid, jobid)
{
    if(Solicitando[giveid][jobid] == false)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este jogador não solicitou seus serviços.");
    if(PedidoAceito[playerid] < 900)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já aceitou um serviço. Aguarde.");
    if(playerid == giveid)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode aceitar seu próprio pedido.");

    PedidoAceito[playerid] = giveid;
    TempoPedido[playerid] = 0;

    new string[128];

    format(string, sizeof(string), "%s aceitou o pedido de %s.", ReturnPlayer(playerid), ReturnPlayer(giveid));
   	SendJobMessage(jobid, COLOR_LIGHTBLUE, string);

	format(string, sizeof(string), "%s aceitou seu pedido de %s. Aguarde no local.", ReturnPlayer(playerid), JobsNames[jobid]);
   	SendClientMessage(giveid, COLOR_LIGHTBLUE, string);

    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} O Jogador foi {FF0000}marcado{FFFFFF} e sumirá em 15 segundos. É recomendado que você marque-o no seu Mapa.");

    new Float:posX,
        Float:posY,
        Float:posZ;

    GetPlayerPos(giveid, posX, posY, posZ);
    RemovePlayerMapIcon(playerid, 99);
    SetPlayerMapIcon(playerid, 99, posX, posY, posZ, 0, COLOR_YELLOW, MAPICON_GLOBAL);

    SetTimerEx("RemoverMarker", 15000, false, "d", playerid);
    return true;
}

public:do RemoverMarker(playerid)
{
    RemovePlayerMapIcon(playerid, 99);
    return true;
}

forward Cancelando(playerid,jobid);
public Cancelando(playerid,jobid)
{
    if(Solicitando[playerid][jobid] == false && Player[playerid][pJob] != jobid)
	    return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não solicitou este serviço.");

    Solicitando[playerid][jobid] = false;
    foreach (new i : Player)
	{
	    if(Player[i][pJob] == jobid)
        {
            if(PedidoAceito[i] == playerid)
            {
                if(Player[playerid][pJob] != DESEMPREGADO)
			    {
		    		new string[60];
				    format(string, sizeof(string), "%s cancelou o pedido.", ReturnPlayer(playerid));
			   		SendJobMessage(jobid,COLOR_AZTECAS,string);
			   	}
	            PedidoAceito[i] = 900;
			    TempoPedido[i] = 0;
	            SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
	            SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
	            SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
	            return true;
            }
        }
	}
    return true;
}

forward PedidoConcluido(playerid, jobid);
public PedidoConcluido(playerid, jobid)
{
    Solicitando[playerid][jobid] = false;
    foreach (new i : Player)
	{
	    if(Player[i][pJob] == jobid)
        {
            if(PedidoAceito[i] == playerid)
            {
	            PedidoAceito[i] = 900;
			    TempoPedido[i] = 0;
	            SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
	            SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
	            SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
	            return true;
            }
        }
	}
	return true;
}

forward Encontrar(playerid,giveid,erro);
public Encontrar(playerid,giveid,erro)
{
	new Float:PosP[3],Float:PosG[3];
	new Float:dist,Float:y,Float:x,string[128],pc[9];
	GetPlayerPos(playerid,PosG[0],PosG[1],PosG[2]);
	GetPlayerPos(giveid,PosP[0],PosP[1],PosP[2]);

	new rand = random(4);

	if(rand < 3)
	{
	    x = floatabs(floatsub(PosP[0]+erro+random(5),PosG[0]));
    	y = floatabs(floatsub(PosP[1]+erro+random(5),PosG[1]));
	}
	else
	{
	    x = floatabs(floatsub(PosP[0],PosG[0]+erro+random(5)));
    	y = floatabs(floatsub(PosP[1],PosG[1]+erro+random(5)));
	}

    dist = floatsqroot(floatadd(floatpower(x,2), floatpower(y,2)));

    if(PosP[0] > PosG[0] && PosP[1] > PosG[1])
		pc = "Nordeste";
	else if(PosP[0] > PosG[0] && PosP[1] < PosG[1])
	    pc = "Sudeste";
    else if(PosP[0] < PosG[0] && PosP[1] > PosG[1])
	    pc = "Noroeste";
    else if(PosP[0] < PosG[0] && PosP[1] < PosG[1])
	    pc = "Sudoeste";

	if(GetPlayerInterior(giveid) > 0)
	    format(string, sizeof(string), "%s está à aproximadamente %.1f metros à %s. (Em interior)", ReturnPlayer(giveid),dist,pc);
	else
	    format(string, sizeof(string), "%s está à aproximadamente %.1f metros à %s.", ReturnPlayer(giveid),dist,pc);

   	SendClientMessage(playerid,COLOR_AZTECAS,string);
}

forward Punir(playerid, adm, motivo[]);
public Punir(playerid, adm, motivo[])
{
	new string[128];
	new motivo2[64];
	format(motivo2, 64, motivo);

	if(!strcmp(motivo, "dm", true)) motivo2 = "DM";
	else if(!strcmp(motivo, "cheat", true)) motivo2 = "Uso de Cheat";
	else if(!strcmp(motivo, "surf", true)) motivo2 = "Surf";
	else if(!strcmp(motivo, "db", true)) motivo2 = "DB";
	else if(!strcmp(motivo, "abuso", true)) motivo2 = "Abuso de Bugs";
	else if(!strcmp(motivo, "acsm", true)) motivo2 = "Atirar em Carro sem Motorista";
	else if(!strcmp(motivo, "rk", true)) motivo2 = "Revenge Kill";
	else if(!strcmp(motivo, "an", true)) motivo2 = "AN Indevido";
	else if(!strcmp(motivo, "antirp", true)) motivo2 = "Anti-RP";
	else if(!strcmp(motivo, "joy", true)) motivo2 = "JoyPad";
	else if(!strcmp(motivo, "ofensa", true)) motivo2 = "Ofensa";
	else if(!strcmp(motivo, "evento", true)) motivo2 = "Matar em Evento";
	else if(!strcmp(motivo, "flood", true)) motivo2 = "Flood";
	else if(!strcmp(motivo, "trote", true)) motivo2 = "Trote";

    if(strcmp(motivo,"dm", true) == 0)
    {
		Bangu(playerid, adm, 45, motivo2);
	}
	else if(strcmp(motivo,"cheat", true) == 0)
	{
		SendClientMessage(playerid, -1, "Cheat aqui não. Porra.");
		BanEx(playerid, motivo2);
	}
	else if(strcmp(motivo,"rk", true) == 0)
	{
        Bangu(playerid, adm, 105, motivo2);
	}
	else if(strcmp(motivo,"surf", true) == 0)
	{
		Bangu(playerid, adm, 30, motivo2);
	}
	else if(strcmp(motivo,"db", true) == 0)
	{
		Bangu(playerid, adm, 20, motivo2);
	}
	else if(strcmp(motivo,"acsm", true) == 0)
	{
		Bangu(playerid, adm, 15, motivo2);
	}
	else if(strcmp(motivo,"antirp", true) == 0)
	{
		Bangu(playerid, adm, 60, motivo2);
	}
	else if(strcmp(motivo,"abuso", true) == 0)
	{
		Bangu(playerid, adm, 60, motivo2);
	}
	else if(strcmp(motivo,"an", true) == 0)
	{
		Bangu(playerid, adm, 30, motivo2);
	}
	else if(strcmp(motivo,"ofensa", true) == 0)
	{
		Player[playerid][MuteTime] = (30*60);
	}
	else if(strcmp(motivo,"joy", true) == 0)
	{
		Bangu(playerid, adm, 20, motivo2);
	}
	else if(strcmp(motivo,"evento", true) == 0)
	{
		Bangu(playerid, adm, 20, motivo2);
	}
	else if(strcmp(motivo,"flood", true) == 0)
	{
		Bangu(playerid, adm, 10, motivo2);
	}
	else if(strcmp(motivo,"trote", true) == 0)
	{
		Bangu(playerid, adm, 5, motivo2);
		GivePlayerGP(playerid, -5000);
	}

    format(string, sizeof(string), "[ATENÇÃO]: O jogador %s foi punido por %s. Motivo: %s", ReturnPlayer(playerid), ReturnPlayer(adm),motivo2);
   	SendClientMessageToAll(COLOR_OOC,string);
   	Kick(playerid);
   	return true;
}

forward Bangu(playerid,adm,tempo,motivo[]);
public Bangu(playerid,adm,tempo,motivo[])
{
    new string[128];
    WantedPoints[playerid] = 0;
	SetPlayerInterior(playerid, 0);
	Player[playerid][pInt] = 0;
	Player[playerid][pJailed] = 2;
    Player[playerid][pJailTime] += tempo*60;
    ResetPlayerWeapons(playerid);
    nobangu[playerid] = true;
    format(Player[playerid][JailReason],92,"%s - %s", motivo,Player[adm][pName]);
    SafeSetPlayerPos(playerid, 107.2300,1920.6311,18.5208);
    SetPlayerWorldBounds(playerid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
	GameTextForPlayer(playerid, "~w~bem vindo ao ~n~~r~bangu, repense suas atitudes", 4000, 6);
	format(string, 128, "[BANGU]: %s foi para o bangu por %s |Motivo: %s|", Player[playerid][pName], Player[adm][pName], motivo);
	BroadCast(COLOR_OOC,string);
	return true;
}

forward BanguBot(playerid,tempo,motivo[]);
public BanguBot(playerid,tempo,motivo[])
{
    new string[160];
    WantedPoints[playerid] = 0;
	SetPlayerInterior(playerid, 0);
	Player[playerid][pInt] = 0;
	Player[playerid][pJailed] = 2;
    Player[playerid][pJailTime] += tempo*60;
    ResetPlayerWeapons(playerid);
    nobangu[playerid] = true;
    format(Player[playerid][JailReason],92,"%s - Bot_BLS", motivo);
    SafeSetPlayerPos(playerid, 107.2300,1920.6311,18.5208);
    SetPlayerWorldBounds(playerid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
	GameTextForPlayer(playerid, "~w~bem vindo ao ~n~~r~bangu, repense suas atitudes", 4000, 6);
	format(string, 160, "[BANGU]: %s foi para o bangu por Bot_BLS |Motivo: %s|", Player[playerid][pName], motivo);
	BroadCast(COLOR_OOC,string);
	return true;
}

forward Aviso(playerid,adm,motivo[]);
public Aviso(playerid,adm,motivo[])
{
    new string[160];
    Player[playerid][pWarns] += 1;
	if(Player[playerid][pWarns] == 1)
        format(Player[playerid][pAviso1],32,"%s - %s", motivo,Player[adm][pName]);
	else if(Player[playerid][pWarns] == 2)
        format(Player[playerid][pAviso2],32,"%s - %s", motivo,Player[adm][pName]);
	if(Player[playerid][pWarns] > 2)
	{
		format(Player[playerid][pAviso1],2," ");
		format(Player[playerid][pAviso2],2," ");
		format(string, sizeof(string), "[ATENÇÃO]: %s foi banido por %s, razão: %s (3 avisos) - Banimento temporário de 10 dias", Player[playerid][pName], Player[adm][pName], motivo);
		Player[playerid][pWarns] = 0;
		BanExtend(adm, playerid, "3 avisos", 10);
		return true;
	}
	format(string, sizeof(string), "-OperServ-: Você executou uma advertência sobre %s, razão: %s", Player[playerid][pName], motivo);
	SendClientMessage(adm, COLOR_BARRAS, string);
	format(string, sizeof(string), "[ATENÇÃO]: O jogador %s foi advertido por %s, razão: %s",  Player[playerid][pName], Player[adm][pName], motivo);
	SendClientMessageToAll(COLOR_OOC, string);
	return true;
}

new GunPrice[33] = { 25, 20, 15, 10, 35, 15, 5, 20, 35, 25, 25, 10, 30, 25, 50, 100, 100, 100, 100, 60, 60, 200, 200, 200, 100, 1, 1, 1, 2, 2, 1, 50, 50 };

new Float:HouseCarSpawns[MAX_HOUSES][4] = {
{477.5979, -1088.1473, 82.3705, 0.0000},										//House 00
{2064.4,-1694.4,13.1,271.1561},													//House 01
{1137.0111,-1079.0636,29.1111,269.7175},										//House 02
{763.5253,-1015.1754,23.7785,179.3042},											//House 03
{2196.2200,-1276.4509,24.3363,180.0000},										//House 04
{2645.2434, -1986.0338, 13.2787, 180.0},										//House 05
{2642.2905, -2004.3227, 13.3379, 180.0},										//House 06
{2516.6657, -1324.4312, 33.2683, 0.0000},										//House 07
{322.3892,-1766.2344,4.1871,180.8791},											//House 08
{2149.6,-1610.9,14.0,90.7904},													//House 09
{760.1,-1687.8,4.3,180.6},														//House 10
{2003.2151,-1121.0724,26.4106,178.1974},										//House 11
{2135.8093,-1317.5515,24.4651,359.2135},										//House 12
{1330.5758,-1058.9640,28.2987,270.1230},										//House 13
{422.9023,-1264.4869,51.2882,21.3016},											//House 14
{2580.3488, -1061.2193, 69.2732, 90.0},										    //House 15 - Antigo 1588.7230, -2160.8554, 13.4354, 270.0
{2558.6545,-1192.6938,61.3360,1.6157},											//House 16
{2516.6657, -1343.4312, 30.2683, 0.0000},										//House 17
{1536.9073,-841.2004,64.3597,90.0108},											//House 18
{711.9797,-1421.8719,13.2364,359.5531},											//House 19
{1514.8206,-695.4568,94.4548,90.3060},											//House 20
{1246.7,-1107.6,25.5,266.4},													//House 21
{170.1722,-1770.4891,4.0037,89.1740},											//House 22
{1011.8955, -660.4599, 121.0152, 33.0744},										//House 23
{250.9039,-1359.7059,52.8143,304.3794},											//House 24
{259.7,-1221.0,74.7,202.0011},													//House 25
{1088.1820,-640.8816,112.8738,272.1728},										//House 26
{283.0606,-1160.2352,80.6181,226.1456},											//House 27
{171.9407,-1340.5460,69.4803,177.6759},											//House 28
{872.5610,-1505.3683,12.7620,90.1264},											//House 29
{785.9954,-489.2944,17.0595,179.2733},											//House 30
{2385.7722,-1351.5635,24.1273,50.7125},											//House 31
{2456.5896,-1281.9517,23.6197,179.3207},										//House 32
{2855.3516,-1355.3148,10.8119,272.1531},										//House 33
{2746.9607,-1176.0646,69.1099,88.7490},											//House 34
{1773.1859,-2099.0200,13.2631,180.6702},										//House 35
{1354.6211,-629.8350,108.8482,17.0082},											//House 36
{2142.1787,-1423.1500,24.3546,89.7868},											//House 37
{302.4102,-1329.3671,53.1494,77.5091},											//House 38
{1187.3793,-1085.3103,28.8387,89.7992},											//House 39
//{496.1763,-1600.1426,17.6133,270.6084},										//House 40
{275.3126,-1266.2265,73.8723,303.5000},											//House 40
{844.3105,-1418.2499,12.6641,358.3064},											//House 41
{1772.3842,-2126.3975,13.2630,358.7906},										//House 42
{1747.4833,-2099.0205,13.2627,180.9940},										//House 43
{2452.4004,-1099.5651,42.7658,357.4063},										//House 44
{2541.9365,-1035.6682,69.2870,178.8041},										//House 45
{2393.1614,-1674.2039,13.7219,359.8077},										//House 46
{2271.4641,-1645.7638,15.0787,180.2324},										//House 47
{2012.1320,-1737.8585,13.2556,89.9789},											//House 48
{1890.2825,-2058.1057,13.1667,268.4086},										//House 49
{2015.1564, -1707.8551, 13.4218, 90.0}, 										//House 50
{2197.1121,-1480.1968,24.3032,269.0272},										//House 51
{1855.4738,-1927.1461,13.1687,88.0756},											//House 52
{2274.2598,-1887.9034,13.2577,89.3230},											//House 53
{804.7111, -1710.6622, 13.1890, 180.0},		   								    //House 54
{1232.2526,-1025.0231,32.1664,186.5785},										//House 55
{2684.7671,-2016.7664,13.2543,359.2259},										//House 56
{686.8347,-1073.4536,49.2490,60.4443},											//House 57
{2020.1968, -1648.9979, 13.4296, 270.0},										//House 58
{1108.5285, -1078.6772, 29.2719, 270.0},										//House 59
{694.01380, -1592.2473, 13.9061, 270.0},										//House 60
{779.43460, -1513.6820, 13.3377, 162.6},										//House 61
{785.04860, -1762.9956, 13.0598, 86.25},										//House 62
{2456.5793, -1243.3374, 24.2143, 0.000},                                        //House 63
{2472.3193, -1754.2525, 13.4218, 270.0},										//House 64
{1650.3900,-1229.0000,14.5547,90.0000},											//House 65
{1650.3900,-1237.5000,14.5547,90.0000},											//House 66
{1650.3900,-1246.5939,14.5547,90.0000},											//House 67
{1650.3900,-1255.2184,14.5547,90.0000},											//House 68
{1650.3900,-1264.1022,14.5547,90.0000},											//House 69
{1647.4127,-1272.2310,14.6898,90.0000},											//House 70
{1638.6395,-1284.2233,14.6828,270.0000},										//House 71
{1659.1716,-1275.7932,14.6738,180.0000},										//House 72
{1666.6692,-1275.8999,14.6734,180.0000},										//House 73
{1673.7704,-1276.0010,14.6729,180.0000},										//House 74
{1681.3615,-1276.1089,14.6724,180.0000},										//House 75
{1687.2919,-1276.1932,14.6721,180.0000},										//House 76
{1688.4628,-1267.0057,14.6890,270.0000},										//House 77
{1688.1600,-1255.6332,14.6875,270.0000},										//House 78
{1687.8560,-1244.2122,14.6860,270.0000},										//House 79
{1683.1648,-1236.1090,14.8477,270.0000},										//House 80
{1683.1925,-1227.4922,14.8477,270.0000},										//House 81
{1830.1473,-1274.9596,131.9097,90.0000},										//House 82
{1812.5961,-1279.6672,13.5245,94.0622},											//House 83
{1830.4493,-1287.6519,131.9106,90.0000},										//House 84
{1813.0542,-1286.9679,13.4765,96.7881},											//House 85
{1829.7229,-1299.7971,131.9933,90.0000},										//House 86
{1800.0782,-1292.2775,13.3488,349.9091},										//House 87
{1816.0127,-1313.7408,131.8998,270.0000},										//House 88
{1771.1050,-1302.6812,13.5407,91.1431},											//House 89
{1829.2441,-1314.2227,131.9174,90.0000},										//House 90
{1040.6593, -1055.3150, 31.5780, 0.0000},										//House 91
{1429.1242, -882.6838, 50.6126, 40.900},										//House 92
{779.0603, 348.8259, 19.5170, 0.0000},											//House 93
{767.7712, 344.7557, 19.8745, 0.0000},											//House 94
{760.3531, 378.6195, 23.0492, 280.0000},										//House 95
{782.2872, 380.8299, 21.1656, 338.7000},										//House 96
{809.0103, 378.6556, 19.2524, 113.9153},										//House 97
{810.1272, 361.3376, 19.2203, 53.2000},											//House 98
{747.9011, 346.7379, 20.3706, 298.7500},										//House 99
{749.1404, 382.1945, 23.0467, 280.0000},										//House 100
{790.6864, 377.5559, 21.1203, 335.0000},										//House 101
{654.0275, -1657.1468, 14.4638, 88.6500},										//House 102
{643.9727, -1614.5725, 14.961566, 0.0},						       				//House 103
{2148.3339, -1240.7655, 24.4637, 0.0000},										//House 104
{2191.2000, -1360.7995, 25.5241, 180.0000},										//House 105
{2196.3000, -1360.7995, 25.5241, 180.0000},										//House 106
{2189.2128, -1414.6711, 25.4140, 280.0000},										//House 107
{2422.8530, -1129.5820, 34.2869, 182.6346},										//House 108
{1934.0158, -1121.2890, 26.1942, 180.0000},										//House 109
{2457.6423, -1407.7385, 23.7053, 90.0000},										//House 110
{2042.9246, -1061.3280, 24.7840, 155.2},                                        //House 111
{259.2206, -1746.3208, 4.3040, 0.00000},                                        //House 112
{223.3372, -1747.4639, 4.5866, 0.00000},                                        //House 113
{1248.854, -805.272, 84.01560, 180.000},                                        //House 114
{830.1213, -852.322, 69.79920, 198.783},                                        //House 115
{845.7777, -899.1200, 68.7734, 54.6023},                                        //House 116
{2358.278076, -60.918636, 27.343692, 359.36218},                                //House 117
{277.715637, -1771.129394, 4.442116, 90.39515},                                 //House 118
{1894.057495, -1928.058837, 13.386666, 87.65466},                               //House 119
{1921.136718, -1927.806762, 13.387035, 92.57951},                               //House 120
{1934.138671, -1928.283081, 13.386337, 89.79232},                               //House 121
{1944.120971, -1928.251708, 13.382812, 89.44670},                               //House 122
{1872.875976, -1928.221801, 13.386426, 89.52627},                               //House 123
{2133.455322, -1479.646362, 23.824686, 357.79833},                              //House 124
{2148.701660, -1454.328247, 25.184331, 89.03533},                               //House 125
{2137.519775, -1364.602539, 25.239259, 179.91842},                              //House 126
{2129.012939, -1372.619140, 25.539062, 271.28073},                              //House 127
{2137.507812, -1283.020019, 24.863235, 178.64562},                              //House 128
{2102.135742, -1283.132202, 24.982078, 180.26834},                              //House 129
{2095.143066, -1282.051025, 25.390373, 182.20460},                              //House 130
{2256.539794, -1389.268920, 23.989952, 87.39965},                               //House 131
{2244.580078, -1389.338623, 23.990154, 91.47302},                               //House 132
{2230.414794, -1389.374023, 23.990255, 85.26250},                               //House 133
{2453.301269, -1017.465759, 59.722885, 175.05928},                              //House 134
{2452.344238, -1049.874877, 59.628170, 356.53717},                              //House 135
{2502.411132, -1030.312622, 69.993041, 174.28790},                              //House 136
{2062.228271, -1739.302001, 13.546875, 270.56170},                              //House 137
{2077.644531, -1714.275634, 13.390607, 179.75054},                              //House 138
{209.649383, -1389.022827, 50.782138, 71.72901},                                //House 139
{976.495117, -824.505065, 96.536651, 28.48920},                                 //House 140
{405.534027, -1262.227783, 50.876113, 25.41200},                                //House 141
{1050.769775, -639.635986, 120.117187, 50.92800},                               //House 142
{659.636291, -1065.525512, 48.873722, 230.50239},                               //House 143
{904.378906, -776.738586, 101.394989, 16.00279},                                //House 144
{684.546264, -1024.629150, 51.406650, 242.26441},                               //House 145
{1452.697387, -922.846557, 37.609375, 179.36355},                               //House 146
{1422.074829, -917.265258, 36.046875, 170.95954},                               //House 147
{1123.737060, -959.900146, 42.533229, 90.56792},                                //House 148
{1099.356079, -1101.330322, 25.609292, 90.62422},                               //House 149
{1004.375549, -1050.275390, 31.433567, 0.83251},                                //House 150
{904.872558, -1455.175903, 13.180607, 267.51464},                               //House 151
{2810.949218, -1288.134643, 42.323055, 90.35837},                               //House 152
{2811.006103, -1332.078979, 32.287807, 89.16120},                               //House 153
{2810.892578, -1310.338500, 37.350471, 88.02035},                               //House 154
{2781.014892, -1288.704101, 42.641994, 271.69161},                              //House 155
{2780.805664, -1313.812255, 37.080303, 270.77569},                              //House 156
{2779.876953, -1340.906250, 30.649835, 273.10485},                              //House 157
{2780.519531, -1365.935302, 24.628898, 271.02398},                              //House 158
{2783.234619, -1243.148681, 47.876167, 176.84556},                              //House 159
{2804.925537, -1243.363281, 45.830467, 177.03771},                              //House 160
{2407.479736, -1719.270385, 13.659672, 179.39025},                              //House 161
{2390.257324, -1713.956542, 13.617209, 178.50654},                              //House 162
{2328.625000, -1677.651733, 14.424567, 272.32971},                              //House 163
{2383.570556, -1641.854736, 13.511185, 181.96762},                              //House 164
{2077.981201, -1628.877563, 13.382812, 179.20425},                              //House 165
{2077.585937, -1642.852294, 13.390607, 179.26007},                              //House 166
{806.217590, -1734.806274, 13.382812, 180.36851},                               //House 167
{787.411193, -1670.398193, 13.296298, 88.64075},                                //House 168
{151.945678, -1469.332153, 25.375000, 47.41613},                                //House 169
{-1443.692749, -1540.019165, 101.757812, 0.18022},                              //House 170
{1182.770385, -1262.205078, 15.179687, 177.07221},                              //House 171
{1201.729370, -1250.317382, 14.950433, 330.46215},                              //House 172
{1108.140625, -1024.587890, 31.885690, 170.56275},                              //House 173
{1137.851440, -1024.344116, 31.890625, 177.33853},                              //House 174
{1323.294555, -1081.489746, 25.599338, 271.17144},                              //House 175
{2570.631835, -1027.905029, 69.581588, 176.96965},                              //House 176
{1910.777587, -1117.671997, 25.664100, 174.88879},                              //House 177
{1920.047363, -1131.470336, 24.817586, 265.16235},                              //House 178
{2782.781250, -1924.361206, 13.546875, 93.64615}                                //House 179
};
/*new bool:HousePortao[MAX_HOUSES] = {
false, false, false, false, false, false, false, false, false, false,// 0 - 9
false, false, false, false, false, false, false, false, false, false,// 10 - 19
false, false, false,  true, false, false, false, true,  false, false,// 20 - 29: 23, 27 = True
false, false, false, false, false, false, false, false, false, false,// 30 - 39
false, false, false, false, false, false, false, false, false, false,// 40 - 49
false, false, false, false, false, false, false, false, false, false,// 50 - 59
false, false, false, false, false, false, false, false, false, false,// 60 - 69
false, false, false, false, false, false, false, false, false, false,// 70 - 79
false, false, false, false, false, false, false, false, false, false,// 80 - 89
false, false, false, false, false, false, false, false, false, false,// 90 - 99
false, false, false, false, false, false, false, false, false, false,//100 - 109
false, false, false, true};// 110 - 112

new HousePortaoID[MAX_HOUSES]; */

//------------------------------------------------------------------------------
forward OnLogin(playerid);
public OnLogin(playerid) {
	new VIP[24],string[300];
	format(Player[playerid][pName],MAX_PLAYER_NAME,ReturnPlayer(playerid));

	format(string, sizeof(string), "/RPG/users/%s.ini", Player[playerid][pName]);
	PlaySoundForPlayer(playerid, 1183);

	new Donate, Admin;
	Donate = DOF2_GetInt(string, "DonateRank");
	Admin = DOF2_GetInt(string, "AdminLevel");

	if(Donate==0) {
	    VIP="{FF0000}Não.";
	}
	else if(Donate==1) {
	    VIP="{B03060}VIP Bronze.";
	}
	else if(Donate==2) {
	    VIP="{BEBEBE}VIP Prata.";
	}
	else if(Donate==3) {
	    VIP="{FFD700}VIP Ouro.";
	}

	SeeHUD[playerid] = false;

 	if(fexist(string))
	{
		gPlayerAccount[playerid] = 1;
		format(string,sizeof(string),"{FFFFFF}Nome: {00FF00}%s\n{FFFFFF}Status: {00FF00}Registrado.\n{FFFFFF}VIP: %s\n{FFFFFF}ADM: {00FF00}%s\n{FFFFFF}Data: {00FF00}%d de %s\n{FFFFFF}Horário: {00FF00}%02d:%02d\n\n{FFFFFF}Digite sua senha:",Player[playerid][pName],VIP,AccountNameEx(Admin),ClockTime[dDay],MonthNames[ClockTime[dMonth]-1],ClockTime[tHour], ClockTime[tMinute]);
		ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,"{FFFFFF}B{FF0000}L{FFFFFF}S - Login:",string,"Logar","Sair");
	}
	else
	{
	    new UL = 0;
		for(new x=0; x < strlen(Player[playerid][pName]); x++)
		{
		    if(Player[playerid][pName][x] == 95)
		    {
		        UL++;
		        if(UL > 1)
		        {
		            SendClientMessage(playerid, 0xFFFFFFFF, "Seu nick deve conter apenas um '_' (Underline)");
					SetTimerEx("OnKick",500,false, "i", playerid);
		        }
		    }
 		    if((Player[playerid][pName][x] < 65 || Player[playerid][pName][x] > 90) && (Player[playerid][pName][x] < 97 || Player[playerid][pName][x] > 122) && Player[playerid][pName][x] != 95)
			{
		    	format(string, sizeof(string), "O caracter %c contido em seu nick não é permitido neste servidor.", Player[playerid][pName][x]);
				SendClientMessage(playerid, 0xFFFFFFFF, string);
				SetTimerEx("OnKick",500,false, "i", playerid);
			}
    	}
		gPlayerAccount[playerid] = 0;
		format(string,sizeof(string),"{FFFFFF}Nome: {00FF00}%s\n{FFFFFF}Status: {FF0000}Não registrado.\n{FFFFFF}VIP: %s\n{FFFFFF}Data: {00FF00}%d/%s\n{FFFFFF}Horário: {00FF00}%d:%d\n\n{FFFFFF}Digite sua senha:",Player[playerid][pName],VIP,ClockTime[dDay],MonthNames[ClockTime[dMonth]-1],ClockTime[tHour], ClockTime[tMinute]);
		ShowPlayerDialog(playerid,DIALOG_REGISTER,DIALOG_STYLE_PASSWORD,"{FFFFFF}B{FF0000}L{FFFFFF}S - Registro:",string,"Registrar","Sair");
	}
}

forward SendMensagemIP(playerid);
public SendMensagemIP(playerid)
{
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "");
}

stock CheckJoy(playerid) //Bugado
{
	if(Joynado[playerid]) return 1;
    new keys, ud, lr;
	GetPlayerKeys(playerid, keys, ud, lr);
	if((ud != 128 && ud != 0 && ud != -128) || (lr != 128 && lr != 0 && lr != -128))
	{
	    new string[128];
	    format(string, 128, "[Joy]: {FFFFFF}%s esta de JoyPad.", Player[playerid][pName]);
	    SendAdminMessage(COLOR_RED, string);
	    Joynado[playerid] = true;
	    JoyTimer[playerid] = SetTimerEx("Joyer", 30000, false, "i", playerid);
	    return 1;
	}
	return 1;
}

//Concessionária
public LoadConceCars()
{
	new sttr[256], str[64];
	ConceCars[0][vID] = CreateVehicle(422,-2086.0000000,-138.5000000,1138.9000244,142.0000000,31,37,15); //Bobcat - 60000
	ConceCars[0][vPreco] = 60000;
    ConceCars[1][vID] = CreateVehicle(543,-2085.3999023,-145.6999969,1138.6999512,142.0000000,30,46,15); //Sadler - 40000
    ConceCars[1][vPreco] = 40000;
    ConceCars[2][vID] = CreateVehicle(554,-2077.3000488,-169.0000000,1139.0000000,142.0000000,95,10,15); //Yosemite - 120000
    ConceCars[2][vPreco] = 120000;
    ConceCars[3][vID] = CreateVehicle(600,-2076.8999023,-174.3000031,1138.5999756,141.9982910,101,106,15); //Picador - 50000
    ConceCars[3][vPreco] = 50000;
    ConceCars[4][vID] = CreateVehicle(402,-2076.6999512,-180.3999939,1138.6999512,141.9982910,175,177,15); //Buffalo - 200000
    ConceCars[4][vPreco] = 200000;
    ConceCars[5][vID] = CreateVehicle(411,-2084.6999512,-137.3999939,1144.1999512,142.0000000,164,167,15); //Infernus - 1000000
    ConceCars[5][vPreco] = 1000000;
    ConceCars[6][vID] = CreateVehicle(415,-2084.8000488,-142.5000000,1144.1999512,142.0000000,37,37,15); //Cheetah - 300000
    ConceCars[6][vPreco] = 300000;
    ConceCars[7][vID] = CreateVehicle(429,-2084.8999023,-147.3999939,1144.0999756,142.0000000,245,245,15); //Banshee - 600000
    ConceCars[7][vPreco] = 600000;
    ConceCars[8][vID] = CreateVehicle(451,-2084.6000977,-151.6999969,1144.0999756,142.0000000,157,152,15); //Turismo - 1250000
    ConceCars[8][vPreco] = 1250000;
    ConceCars[9][vID] = CreateVehicle(477,-2076.3999023,-167.5000000,1144.1999512,142.0000000,98,11,15); //ZR-350 - 400000
    ConceCars[9][vPreco] = 400000;
    ConceCars[10][vID] = CreateVehicle(480,-2076.1000977,-172.6999969,1144.1999512,142.0000000,154,167,15); //Comet - 400000
    ConceCars[10][vPreco] = 400000;
    ConceCars[11][vID] = CreateVehicle(506,-2076.1999512,-178.0000000,1144.1999512,142.0000000,132,4,15); //Super GT - 350000
    ConceCars[11][vPreco] = 350000;
    ConceCars[12][vID] = CreateVehicle(541,-2076.1000977,-183.1000061,1144.0999756,142.0000000,109,24,15); //Bullet - 800000
    ConceCars[12][vPreco] = 800000;
    ConceCars[13][vID] = CreateVehicle(555,-2089.3999023,-185.8000031,1144.1999512,322.0000000,105,30,15); //Windsor - 200000
    ConceCars[13][vPreco] = 200000;
    ConceCars[14][vID] = CreateVehicle(558,-2089.1000977,-180.8999939,1144.0999756,322.0000000,100,13,15); //Uranus - 150000
    ConceCars[14][vPreco] = 150000;
    ConceCars[15][vID] = CreateVehicle(559,-2089.1000977,-175.6999969,1144.0999756,322.0000000,48,79,15); //Jester - 300000
    ConceCars[15][vPreco] = 300000;
    ConceCars[16][vID] = CreateVehicle(560,-2089.0000000,-170.1999969,1144.1999512,322.0000000,94,112,15); //Sultan - 500000
    ConceCars[16][vPreco] = 500000;
    ConceCars[17][vID] = CreateVehicle(562,-2094.8000488,-183.0000000,1138.5999756,322.0000000,37,37,15); //Elegy - 600000
    ConceCars[17][vPreco] = 600000;
    ConceCars[18][vID] = CreateVehicle(565,-2094.8000488,-175.8999939,1138.5000000,322.0000000,156,161,15); //Flash - 250000
    ConceCars[18][vPreco] = 250000;
    ConceCars[19][vID] = CreateVehicle(587,-2094.5000000,-168.1000061,1138.5999756,324.0000000,43,62,15); //Euros - 550000
    ConceCars[19][vPreco] = 550000;
    ConceCars[20][vID] = CreateVehicle(603,-2094.5000000,-160.6999969,1138.8000488,322.0000000,93,27,15); //Phoenix - 600000
    ConceCars[20][vPreco] = 600000;
    ConceCars[21][vID] = CreateVehicle(401,-2094.6000977,-154.1000061,1138.6999512,322.0000000,54,65,15); //Bravura - 60000
    ConceCars[21][vPreco] = 60000;
    /////// 2 MUNDO //////////
    ConceCars[22][vID] = CreateVehicle(410,-2084.8000488,-137.0000000,1138.5000000,142.0000000,38,55,15); //Manana - 40000
    ConceCars[22][vPreco] = 40000;
    ConceCars[23][vID] = CreateVehicle(436,-2084.8999023,-143.1000061,1138.6999512,142.0000000,43,62,15); //Previon - 50000
    ConceCars[23][vPreco] = 50000;
    ConceCars[24][vID] = CreateVehicle(474,-2085.3000488,-163.0000000,1138.6999512,142.0000000,127,105,15); //Hermes - 90000
    ConceCars[24][vPreco] = 90000;
    ConceCars[25][vID] = CreateVehicle(491,-2076.8999023,-168.0000000,1138.6999512,142.0000000,34,25,15); //Virgo - 40000
    ConceCars[25][vPreco] = 40000;
    ConceCars[26][vID] = CreateVehicle(496,-2076.8000488,-173.6999969,1138.5999756,142.0000000,22,34,15); //Blista Compact - 100000
    ConceCars[26][vPreco] = 100000;
    ConceCars[27][vID] = CreateVehicle(517,-2076.8000488,-179.6999969,1138.6999512,142.0000000,125,98,15); //Majestic - 50000
    ConceCars[27][vPreco] = 50000;
    ConceCars[28][vID] = CreateVehicle(526,-2076.8000488,-184.8999939,1138.5999756,142.0000000,94,112,15); //Fortune - 80000
    ConceCars[28][vPreco] = 80000;
    ConceCars[29][vID] = CreateVehicle(527,-2076.1000977,-173.0000000,1144.1999512,142.0000000,22,34,15); //Cadrona - 80000
    ConceCars[29][vPreco] = 80000;
    ConceCars[30][vID] = CreateVehicle(533,-2076.3000488,-168.1999969,1144.1999512,142.0000000,96,26,15); //Feltzer - 50000
    ConceCars[30][vPreco] = 50000;
    ConceCars[31][vID] = CreateVehicle(545,-2076.8999023,-179.1999969,1144.3000488,142.0000000,61,74,15); //Hustler - 200000
    ConceCars[31][vPreco] = 200000;
    ConceCars[32][vID] = CreateVehicle(549,-2077.3000488,-184.5000000,1144.1999512,142.0000000,14,49,15); //Tampa - 40000
    ConceCars[32][vPreco] = 40000;
    ConceCars[33][vID] = CreateVehicle(439,-2088.8999023,-184.6000061,1144.4000244,322.0000000,45,58,15); //Stallion - 60000
    ConceCars[33][vPreco] = 60000;
    ConceCars[34][vID] = CreateVehicle(475,-2088.8000488,-178.5000000,1144.3000488,322.0000000,115,14,15); //Sabre - 150000
    ConceCars[34][vPreco] = 150000;
    ConceCars[35][vID] = CreateVehicle(542,-2088.8000488,-172.5000000,1144.1999512,322.0000000,71,53,15); //Clover - 50000
    ConceCars[35][vPreco] = 50000;
    ConceCars[36][vID] = CreateVehicle(412,-2094.3999023,-184.5000000,1138.8000488,322.0000000,70,89,15); //Voodoo - 80000
    ConceCars[36][vPreco] = 80000;
    ConceCars[37][vID] = CreateVehicle(419,-2094.8000488,-179.1999969,1138.6999512,322.0000000,88,89,15); //Esperanto - 70000
    ConceCars[37][vPreco] = 70000;
    ConceCars[38][vID] = CreateVehicle(518,-2094.6999512,-173.3000031,1138.5999756,322.0000000,115,14,15); //Buccaneer - 90000
    ConceCars[38][vPreco] = 90000;
    ConceCars[39][vID] = CreateVehicle(534,-2094.6999512,-168.1999969,1138.5999756,322.0000000,22,34,15); //Remington - 150000
    ConceCars[39][vPreco] = 150000;
    ConceCars[40][vID] = CreateVehicle(535,-2094.5000000,-159.8000031,1138.5999756,322.0000000,108,132,15); //Slamvan - 200000
    ConceCars[40][vPreco] = 200000;
    ConceCars[41][vID] = CreateVehicle(536,-2086.1999512,-140.1000061,1144.1999512,142.0000000,165,169,15); //Blade - 110000
    ConceCars[41][vPreco] = 110000;
    ConceCars[42][vID] = CreateVehicle(567,-2086.0000000,-148.3000031,1144.4000244,142.0000000,68,98,15); //Savanna - 130000
    ConceCars[42][vPreco] = 130000;
    ConceCars[43][vID] = CreateVehicle(575,-2094.5000000,-153.6000061,1138.5000000,322.0000000,52,26,15); //Broadway - 180000
    ConceCars[43][vPreco] = 180000;
    ConceCars[44][vID] = CreateVehicle(576,1709.19995117,-1060.69995117,23.70000076,0.00000000,14,49,-1); //Tornado - 100000
    ConceCars[44][vPreco] = 100000;
    /////// 3 MUNDO /////
    ConceCars[45][vID] = CreateVehicle(409,-2077.5000000,-169.6999969,1144.3000488,122.0000000,245,245,15); //Stretch - 900000
    ConceCars[45][vPreco] = 900000;
    ConceCars[46][vID] = CreateVehicle(421,-2076.6000977,-174.8000031,1144.4000244,122.0000000,66,31,15); //Washington - 90000
    ConceCars[46][vPreco] = 90000;
    ConceCars[47][vID] = CreateVehicle(426,-2076.5000000,-179.8999939,1144.1999512,122.0000000,101,106,15); //Premier - 100000
    ConceCars[47][vPreco] = 100000;
    ConceCars[48][vID] = CreateVehicle(445,-2076.5000000,-183.6000061,1144.4000244,122.0000000,100,100,15); //Admiral - 70000
    ConceCars[48][vPreco] = 70000;
    ConceCars[49][vID] = CreateVehicle(492,-2085.6999512,-139.0000000,1144.3000488,122.0000000,123,113,15); //Greenwood - 80000
    ConceCars[49][vPreco] = 80000;
    ConceCars[50][vID] = CreateVehicle(507,-2085.8000488,-144.1000061,1144.3000488,122.0000000,102,28,15); //Elegant - 100000
    ConceCars[50][vPreco] = 100000;
    ConceCars[51][vID] = CreateVehicle(516,-2085.5000000,-149.5000000,1144.3000488,122.0000000,105,88,15); //Nebula - 90000
    ConceCars[51][vPreco] = 90000;
    ConceCars[52][vID] = CreateVehicle(529,-2077.1999512,-167.6000061,1138.5000000,122.0000000,70,89,15); //Willard - 100000
    ConceCars[52][vPreco] = 100000;
    ConceCars[53][vID] = CreateVehicle(540,-2077.3999023,-172.5000000,1138.8000488,122.0000000,101,106,15); //Vincent - 110000
    ConceCars[53][vPreco] = 110000;
    ConceCars[54][vID] = CreateVehicle(546,-2077.3999023,-177.1000061,1138.5999756,122.0000000,120,34,15); //Intruder - 90000
    ConceCars[54][vPreco] = 90000;
    ConceCars[55][vID] = CreateVehicle(547,-2077.0000000,-181.1000061,1138.5999756,122.0000000,81,84,15); //Primo - 90000
    ConceCars[55][vPreco] = 90000;
    ConceCars[56][vID] = CreateVehicle(550,-2077.3000488,-185.1999969,1138.6999512,122.0000000,156,161,15); //Sunrise - 120000
    ConceCars[56][vPreco] = 120000;
    ConceCars[57][vID] = CreateVehicle(551,-2094.3999023,-185.3000031,1138.6999512,302.0000000,59,78,15); //Merit - 80000
    ConceCars[57][vPreco] = 80000;
    ConceCars[58][vID] = CreateVehicle(566,-2094.3000488,-178.6999969,1138.6999512,302.0000000,88,88,15); //Tahoma - 80000
    ConceCars[58][vPreco] = 80000;
    ConceCars[59][vID] = CreateVehicle(580,-2094.3000488,-172.6999969,1138.6999512,302.0000000,52,26,15); //Stafford - 110000
    ConceCars[59][vPreco] = 110000;
    ConceCars[60][vID] = CreateVehicle(585,-2094.3999023,-166.8000031,1138.5000000,302.0000000,76,117,15); //Emperor - 90000
    ConceCars[60][vPreco] = 90000;
    ConceCars[61][vID] = CreateVehicle(400,-2094.8000488,-160.8000031,1138.9000244,302.0000000,34,25,15); //Landstalker - 240000
    ConceCars[61][vPreco] = 240000;
    ConceCars[62][vID] = CreateVehicle(458,-2094.3999023,-155.3999939,1138.8000488,302.0000000,63,62,15); //Solair - 120000
    ConceCars[62][vPreco] = 120000;
    ConceCars[63][vID] = CreateVehicle(500,-2088.8999023,-184.8000031,1144.5999756,302.0000000,32,32,15); //Mesa - 200000
    ConceCars[63][vPreco] = 200000;
    ConceCars[64][vID] = CreateVehicle(561,-2088.6000977,-178.8999939,1144.3000488,302.0000000,95,10,15); //Stratum - 180000
    ConceCars[64][vPreco] = 180000;
    ConceCars[65][vID] = CreateVehicle(579,-2088.6999512,-173.8999939,1144.5000000,302.0000000,45,58,15); //Huntley - 160000
    ConceCars[65][vPreco] = 160000;
    ConceCars[66][vID] = CreateVehicle(589,-2088.6000977,-168.8000031,1144.0999756,302.0000000,68,98,15); //Club - 60000
    ConceCars[66][vPreco] = 60000;
    ConceCars[67][vID] = CreateVehicle(434,-2086.1999512,-137.6000061,1138.9000244,222.0000000,38,55,15); //Hotknife - 1100000
    ConceCars[67][vPreco] = 1100000;
    //////// OUT ////////
    ConceCars[68][vID] = CreateVehicle(468,1753.7192,-1086.1183,23.6293,357.4570,0,0,-1); //Sanchez - 40000
    ConceCars[68][vPreco] = 40000;
	ConceCars[69][vID] = CreateVehicle(463,1758.2605,-1085.7141,23.5017,359.9717,1,1,-1); //Freeway - 150000
	ConceCars[69][vPreco] = 150000;
	ConceCars[70][vID] = CreateVehicle(522,1762.6224,-1085.8619,23.5290,357.4000,3,3,-1); //NRG-500 - 400000
	ConceCars[70][vPreco] = 400000;
	ConceCars[71][vID] = CreateVehicle(521,1767.2983,-1085.6063,23.5307,358.5454,2,2,-1); //FCR-900 - 250000
	ConceCars[71][vPreco] = 250000;
    //////// CASH /////////
    ConceCars[72][vID] = CreateVehicle(469, 1792.9000000, -1108.2000000, 85.1000000, 30.00000000, 6, 1, 15); //Sparrow     C$35000
    ConceCars[72][vCash] = 35000;
    ConceCars[73][vID] = CreateVehicle(487, 1766.9000000, -1107.5000000, 85.2000000, 320.0000000, 6, 1, 15); //Maverick    C$45000
    ConceCars[73][vCash] = 45000;
    ConceCars[74][vID] = CreateVehicle(593, 1767.8000000, -1120.4000000, 85.5000000, 320.0000000, 6, 1, 15); //Dodo        C$25000
    ConceCars[74][vCash] = 25000;
    ConceCars[75][vID] = CreateVehicle(513, 1768.9000000, -1130.7000000, 85.8000000, 320.0000000, 6, 1, 15); //Stuntplane  C$20000
    ConceCars[75][vCash] = 20000;
    ConceCars[76][vID] = CreateVehicle(519, 1789.7002000, -1124.5000000, 86.0000000, 29.99800000, 6, 1, 15); //Shamal      C$75000
    ConceCars[76][vCash] = 75000;

    for(new i = 0; i < sizeof(ConceCars); i++)
	{
		if(i <= 21) SetVehicleVirtualWorld(ConceCars[i][vID], 1);
		else if(i <= 44) SetVehicleVirtualWorld(ConceCars[i][vID], 2);
		else if(i <= 67) SetVehicleVirtualWorld(ConceCars[i][vID], 3);
        ConceCars[i][vModel] = GetVehicleModel(ConceCars[i][vID]);

        format(sttr, sizeof(sttr), "{FFFFFF}Modelo:{00FFFF} %s\n", vehName[ConceCars[i][vModel] - 400]);
        if(ConceCars[i][vPreco] != 0)
        {
            format(str, 64, "{FFFFFF}Preço:{008800} R$%d\n", ConceCars[i][vPreco]);
            strcat(sttr, str, 256);
        }
        if(ConceCars[i][vCash] != 0)
        {
            format(str, 64, "{FFFFFF}Preço:{00FF00} BLS$%d\n", ConceCars[i][vCash]);
            strcat(sttr, str, 256);
        }
        strcat(sttr, "{FFFFFF}Para comprar, digite{00FFFF} /comprarveiculo", 256);

        ConceCars[i][vText] = Create3DTextLabel(sttr, 0xFFFFFFFF, 0, 0, 0, 15, 0, 1);
		Attach3DTextLabelToVehicle(ConceCars[i][vText], ConceCars[i][vID], 0, 0, 1);
        SetEngine(ConceCars[i][vID], false);
	}
	return true;
}

public ResetPlayerCars(playerid)
{
	new sttr[128];
	for(new vehicleid = 0; vehicleid < MAX_BOUGHT_VEHICLES; vehicleid++)
	{
	    if(CarInfo[vehicleid][cID] != INVALID_VEHICLE_ID)
	    {
		    if(!strcmp(CarInfo[vehicleid][cOwner], Player[playerid][pName]))
		    {
				for(new c = 0; c < sizeof(ConceCars); c++)
				{
				    if(ConceCars[c][vModel] == CarInfo[vehicleid][cModel])
				    {
						format(sttr, sizeof(sttr), "{FF0000}[Info]:{FFFFFF} Seu %s foi vendido devido ao conserto dos bugs da concessionária. O valor foi reembolsado.", vehName[ConceCars[c][vModel] - 400]);
						SendClientMessage(playerid, SERVER_INFO, sttr);
						//Vendendo
						CarInfo[vehicleid][cModel] = 0;
						CarInfo[vehicleid][cX] = 0;
						CarInfo[vehicleid][cY] = 0;
						CarInfo[vehicleid][cZ] = 0;
						CarInfo[vehicleid][cA] = 0;
						CarInfo[vehicleid][cColor1] = -1;
						CarInfo[vehicleid][cColor2] = -1;
						CarInfo[vehicleid][cPaintjob] = 3;
						format(CarInfo[vehicleid][cName], 32, "Nenhum");
						format(CarInfo[vehicleid][cOwner], MAX_PLAYER_NAME, "Nenhum");
						//CarInfo[vehicleid][cPRFLock] = 0;
						CarInfo[vehicleid][cLock] = false;
						VehicleInfo[CarInfo[vehicleid][cID]][vCustom] = false;
						for(new m = 0; m < MAX_MODS; m++)
							CarInfo[vehicleid][cMod][m] = 0;

						format(sttr, sizeof(sttr), "%s%d.ini", PastaConce, vehicleid);
						if(DOF2_FileExists(sttr))
						    DOF2_RemoveFile(sttr);

						GivePlayerGP(playerid, ConceCars[c][vPreco]);
	                    DestroyVehicle(CarInfo[vehicleid][cID]);
	                    CarInfo[vehicleid][cID] = INVALID_VEHICLE_ID;
	                    break;
				    }
				}
		    }
		}
	}
	for(new i = 0; i < 5; i++)
	    Player[playerid][pCar][i] = INVALID_VEHICLE_ID;

	format(sttr, sizeof(sttr), "/RPG/users/%s.ini", Player[playerid][pName]);
	DOF2_SetInt(sttr, "ResetadoCarro", 1);
	DOF2_SaveFile();
	return true;
}

public LoadPlayerCars()
{
	new sttr[64];
	for(new vh = 0; vh < MAX_BOUGHT_VEHICLES; vh++)
	    CarInfo[vh][cID] = INVALID_VEHICLE_ID;

    for(new vh = 0; vh < MAX_BOUGHT_VEHICLES; vh++)
	{
	    format(sttr, sizeof(sttr), "%s%d.ini", PastaConce, vh);
	    if(!DOF2_FileExists(sttr))
		{
	        continue;
	    }
	    else
	    {
            if(DOF2_GetInt(sttr, "Modelo") < 400)
            {
                DOF2_RemoveFile(sttr);
                printf("[PlayersCars] %d foi identificado como bugado e foi removido.");
                continue;
            }

	        CarInfo[vh][cID] = CreateVehicle(DOF2_GetInt(sttr, "Modelo"), DOF2_GetFloat(sttr, "PosX"), DOF2_GetFloat(sttr, "PosY"), DOF2_GetFloat(sttr, "PosZ"), DOF2_GetFloat(sttr, "PosA"), DOF2_GetInt(sttr, "Cor1"), DOF2_GetInt(sttr, "Cor2"), -1);
			CarInfo[vh][cModel] = DOF2_GetInt(sttr, "Modelo");
			CarInfo[vh][cX] = DOF2_GetFloat(sttr, "PosX");
			CarInfo[vh][cY] = DOF2_GetFloat(sttr, "PosY");
			CarInfo[vh][cZ] = DOF2_GetFloat(sttr, "PosZ");
			CarInfo[vh][cA] = DOF2_GetFloat(sttr, "PosA");
		    CarInfo[vh][cColor1] = DOF2_GetInt(sttr, "Cor1");
		  	CarInfo[vh][cColor2] = DOF2_GetInt(sttr, "Cor2");
		   	CarInfo[vh][cPaintjob] = DOF2_GetInt(sttr, "Pintura");
		   	format(CarInfo[vh][cOwner], MAX_PLAYER_NAME, "%s", DOF2_GetString(sttr, "Dono"));
            CarInfo[vh][cLock] = DOF2_GetBool(sttr, "Trancado");

            //new Text3D:tx3did=Create3DTextLabel(CarInfo[vh][cOwner], -1, 0,0,0, 30.0, 0);
            //Attach3DTextLabelToVehicle(tx3did, CarInfo[vh][cID], 0, 0, 2);

		   	format(CarInfo[vh][cName], 32, vehName[CarInfo[vh][cModel]-400]);
		    //CarInfo[vh][cPRFLock] = DOF2_GetInt(sttr, "Apreendido");
		    CarInfo[vh][cMod][0] = DOF2_GetInt(sttr, "Mod0");
		    CarInfo[vh][cMod][1] = DOF2_GetInt(sttr, "Mod1");
		    CarInfo[vh][cMod][2] = DOF2_GetInt(sttr, "Mod2");
		    CarInfo[vh][cMod][3] = DOF2_GetInt(sttr, "Mod3");
		    CarInfo[vh][cMod][4] = DOF2_GetInt(sttr, "Mod4");
		    CarInfo[vh][cMod][5] = DOF2_GetInt(sttr, "Mod5");
		    CarInfo[vh][cMod][6] = DOF2_GetInt(sttr, "Mod6");
		    CarInfo[vh][cMod][7] = DOF2_GetInt(sttr, "Mod7");
		    CarInfo[vh][cMod][8] = DOF2_GetInt(sttr, "Mod8");
		    CarInfo[vh][cMod][9] = DOF2_GetInt(sttr, "Mod9");
		    CarInfo[vh][cMod][10] = DOF2_GetInt(sttr, "Mod10");
		    CarInfo[vh][cMod][11] = DOF2_GetInt(sttr, "Mod11");

			// Neon
			CarInfo[vh][cHasNeon] = DOF2_GetInt(sttr, "HasNeon");
			if(CarInfo[vh][cHasNeon] != 0)
			{
				CarInfo[vh][cNeon][0] = CreateObject(CarInfo[vh][cHasNeon], 0, 0, 0, 0, 0, 0);
				CarInfo[vh][cNeon][1] = CreateObject(CarInfo[vh][cHasNeon], 0, 0, 0, 0, 0, 0);
            	AttachObjectToVehicle(CarInfo[vh][cNeon][0], CarInfo[vh][cID], -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	AttachObjectToVehicle(CarInfo[vh][cNeon][1], CarInfo[vh][cID], 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			}

		    format(CarInfo[vh][cPlaca], 32, "%s", DOF2_GetString(sttr, "Placa"));
			SetVehicleNumberPlateEx(CarInfo[vh][cID],CarInfo[vh][cPlaca]);

            CarInfo[vh][cTrunkID] = DOF2_GetInt(sttr, "TrunkID");

            /*if(CarInfo[vh][cPRFLock] == 1)
                CarInfo[vh][cPRFLock] = 0;
                if(!SetVehiclePRFLocked(CarInfo[vh][cID]))*/

			SetVehicleToRespawn(CarInfo[vh][cID]);

			for(new m = 0; m < MAX_MODS; m++)
			    if(CarInfo[vh][cMod][m] > 0)
			        AddVehicleComponent(CarInfo[vh][cID],CarInfo[vh][cMod][m]);

			if(CarInfo[vh][cPaintjob] != 3)
			    ChangeVehiclePaintjob(CarInfo[vh][cID],CarInfo[vh][cPaintjob]);

		    if(CarInfo[vh][cColor1] > -1 || CarInfo[vh][cColor2] > -1)
		        ChangeVehicleColor(CarInfo[vh][cID],CarInfo[vh][cColor1],CarInfo[vh][cColor2]);

			LoadTrunkEx(CarInfo[vh][cOwner], CarInfo[vh][cID], CarInfo[vh][cTrunkID]);

            new engine, lights, alarm, doors, bonnet, boot, objective;
            GetVehicleParamsEx(CarInfo[vh][cID], engine, lights, alarm, doors,              bonnet, boot, objective);
            SetVehicleParamsEx(CarInfo[vh][cID], false, lights, alarm, CarInfo[vh][cLock], bonnet, boot, objective);
            VehicleInfo[CarInfo[vh][cID]][vEngine] = false;
            VehicleInfo[CarInfo[vh][cID]][vUseGas] = true;
   		}
	}
	printf("Todos os veículos foram carregados.");
	return true;
}

public SavePlayerCars()
{
	//new Float:X, Float:Y, Float:Z;
	new sttr[64];
	for(new vh = 0; vh < MAX_BOUGHT_VEHICLES; vh++)
	{
	    if(CarInfo[vh][cID] != INVALID_VEHICLE_ID)
	    {
		    format(sttr, sizeof(sttr), "%s%d.ini", PastaConce, vh);
		    if(!DOF2_FileExists(sttr))
		        DOF2_CreateFile(sttr);

		    //GetVehiclePos(CarInfo[vh][cID], X, Y, Z);
			DOF2_SetInt(sttr, "Modelo", CarInfo[vh][cModel]);
			DOF2_SetFloat(sttr, "PosX", CarInfo[vh][cX]);
			DOF2_SetFloat(sttr, "PosY", CarInfo[vh][cY]);
			DOF2_SetFloat(sttr, "PosZ", CarInfo[vh][cZ]);
			DOF2_SetFloat(sttr, "PosA", CarInfo[vh][cA]);
			DOF2_SetInt(sttr, "Cor1", CarInfo[vh][cColor1]);
			DOF2_SetInt(sttr, "Cor2", CarInfo[vh][cColor2]);
		 	DOF2_SetInt(sttr, "Pintura", CarInfo[vh][cPaintjob]);
		 	DOF2_SetString(sttr, "Dono", CarInfo[vh][cOwner]);
		 	DOF2_SetString(sttr, "Nome", CarInfo[vh][cName]);
		    DOF2_SetBool(sttr, "Trancado", CarInfo[vh][cLock]);
		    //DOF2_SetInt(sttr, "Apreendido", CarInfo[vh][cPRFLock]);
		    DOF2_SetInt(sttr, "Mod0", CarInfo[vh][cMod][0]);
		    DOF2_SetInt(sttr, "Mod1", CarInfo[vh][cMod][1]);
		    DOF2_SetInt(sttr, "Mod2", CarInfo[vh][cMod][2]);
		    DOF2_SetInt(sttr, "Mod3", CarInfo[vh][cMod][3]);
		    DOF2_SetInt(sttr, "Mod4", CarInfo[vh][cMod][4]);
		    DOF2_SetInt(sttr, "Mod5", CarInfo[vh][cMod][5]);
		    DOF2_SetInt(sttr, "Mod6", CarInfo[vh][cMod][6]);
		    DOF2_SetInt(sttr, "Mod7", CarInfo[vh][cMod][7]);
		    DOF2_SetInt(sttr, "Mod8", CarInfo[vh][cMod][8]);
		    DOF2_SetInt(sttr, "Mod9", CarInfo[vh][cMod][9]);
		    DOF2_SetInt(sttr, "Mod10", CarInfo[vh][cMod][10]);
		    DOF2_SetInt(sttr, "Mod11", CarInfo[vh][cMod][11]);
		    // Neon
   			DOF2_SetInt(sttr, "HasNeon", CarInfo[vh][cHasNeon]);
		    DOF2_SetString(sttr, "Placa", CarInfo[vh][cPlaca]);
            DOF2_SetInt(sttr, "TrunkID", CarInfo[vh][cTrunkID]);
		}
		else
		{
		    format(sttr, sizeof(sttr), "%s%d.ini", PastaConce, vh);
		    if(DOF2_FileExists(sttr))
		        DOF2_RemoveFile(sttr);
		}
	}
	printf("Todos os veículos foram salvos.");

	foreach(new i: Player)
	{
   		for(new v = 0; v < 5; v++)
		{
		    if(Player[i][pCompletedNonRepTask][v] == 0)
		    {
				SendClientMessage(i, COLOR_LIGHTRED, "Você ainda não completou as missões iniciais! Use o comando /missoes para checar.");
				break;
		    }

		}
	}
	return true;
}

forward Joyer(playerid);
public Joyer(playerid)
{
    Joynado[playerid] = false;
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	// Só ouvir Boombox se não estiver ouvindo iPod e não estiver em um carro.
    new type = IsPlayerInAnyVehicle(playerid) ? GetVehicleType(GetPlayerVehicleID(playerid)) : 65535;
	if(!OuvindoIPod[playerid] && !(type == VTYPE_CAR || type == VTYPE_SPORT || type == VTYPE_MAV || type == VTYPE_HEAVY))
	{
		foreach(Player, i)
		{
		    if(IsValidDynamicArea(Player[i][pDynamicBBArea]))
		    {
		        if(areaid == Player[i][pDynamicBBArea])
		        {
		            new station[128];
		            format(station, 128, Player[i][pDynamicBBStation]);
		            if(!isnull(station))
		                PlayAudioStreamForPlayer(playerid, station, Player[i][pDynamicBBX], Player[i][pDynamicBBY], Player[i][pDynamicBBZ], 15, 1);

					return 1;
		        }
		    }
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    foreach(Player, i)
	    if(IsValidDynamicArea(Player[i][pDynamicBBArea]))
	        if(areaid == Player[i][pDynamicBBArea])
	            return StopAudioStreamForPlayer(playerid);
	return 1;
}

public OnPlayerUpdate(playerid)
{
/*    if(g_e@autorizado[playerid] == true)
    {
        if(g_e@b_checker)
        {
            if(IsPlayerInRangeOfPoint(playerid, 30, g_e@fc[0], g_e@fc[1], g_e@fc[2]))
            {
                g_e@autorizado[playerid] = false;
                SendClientMessage(playerid, SERVER_INFO, "[BLS Info] {FFFFFF}Você completou o desafio!");
                new l@str[128], l@str2[25];
                GetPlayerName(playerid, l@str2, 25);
                format(l@str, 128, "[Evento]:{FFFFFF} %s completou o desafio!", l@str2);
                SendClientMessageToAll(SERVER_INFO, l@str);
            }
        }
    }
    if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
        new Float:vec[3];
        GetPlayerCameraFrontVector(playerid, vec[0], vec[1], vec[2]);
        new bool:possible_crasher = false;
        for (new i = 0; !possible_crasher && i < sizeof(vec); i++)
            if (floatabs(vec[i]) > 10.0)
                possible_crasher = true;

        if (possible_crasher)
            return 0; //do not send fake data, prevents crash
    }*/
	GetPlayerArmour(playerid, colete2[playerid]);
	GetPlayerHealth(playerid, vida2[playerid]);

	if(colete2[playerid] > 0) PlayerTextDrawShow(playerid, colete[playerid]);
	else PlayerTextDrawHide(playerid, colete[playerid]);

	format(Total, sizeof(Total), "%.0f", vida2[playerid]);
	format(Total2, sizeof(Total2), "%.0f", colete2[playerid]);

	//Textdrawstrings
	PlayerTextDrawSetString(playerid, vida[playerid], Total);
	PlayerTextDrawSetString(playerid, colete[playerid], Total2);

    OnPlayerUpdateSpike(playerid);
	return 1;
}

new Text:TextDrawLogin0 = Text:INVALID_TEXT_DRAW;
new Text:TextDrawLogin1 = Text:INVALID_TEXT_DRAW;
new Text:TextDrawLogin2 = Text:INVALID_TEXT_DRAW;
new Text:TextDrawLogin3 = Text:INVALID_TEXT_DRAW;
new Text:TextDrawLogin4 = Text:INVALID_TEXT_DRAW;
new Text:TextDrawLogin5 = Text:INVALID_TEXT_DRAW;
new Text:TextDrawLogin6 = Text:INVALID_TEXT_DRAW;
new Text:TextDrawLogin7 = Text:INVALID_TEXT_DRAW;
new Text:TextDrawLogin8 = Text:INVALID_TEXT_DRAW;
new Text:TextDrawLogin9 = Text:INVALID_TEXT_DRAW;
new Text:TextDrawLogin10 = Text:INVALID_TEXT_DRAW;
new Text:TextDrawLogin11 = Text:INVALID_TEXT_DRAW;
new Text:TextDrawLogin12 = Text:INVALID_TEXT_DRAW;
new Text:TextDrawLogin13 = Text:INVALID_TEXT_DRAW;

public OnGameModeInit()
{
	#include "gamemodes/db/onGameModeInit.pwn"

	if(!DOF2_FileExists("/RPG/TopLevel.ini"))
	{
	    DOF2_CreateFile("/RPG/TopLevel.ini");
		DOF2_SetString("/RPG/TopLevel.ini", "Top", "Ninguém");
		DOF2_SaveFile();
		format(TopLevelName, 32, "Ninguém");
	}
	else
	{
		format(TopLevelName, 32, DOF2_GetString("/RPG/TopLevel.ini", "Top"));
	}

	Announce();

    // Create the textdraws:
    FundoLogin = TextDrawCreate(1.000000, -1.000000, "fronten2:back5");
    TextDrawBackgroundColor(FundoLogin, 255);
    TextDrawFont(FundoLogin, 4);
    TextDrawLetterSize(FundoLogin, 0.500000, 1.000000);
    TextDrawColor(FundoLogin, -1);
    TextDrawSetOutline(FundoLogin, 0);
    TextDrawSetProportional(FundoLogin, 1);
    TextDrawSetShadow(FundoLogin, 1);
    TextDrawUseBox(FundoLogin, 1);
    TextDrawBoxColor(FundoLogin, 255);
    TextDrawTextSize(FundoLogin, 645.000000, 450.000000);
    
    /*Milestone = TextDrawCreate(483.000000, 142.000000, "Missao:");
	TextDrawBackgroundColor(Milestone, 255);
	TextDrawFont(Milestone, 0);
	TextDrawLetterSize(Milestone, 0.319999, 1.299999);
	TextDrawColor(Milestone, 512819199);
	TextDrawSetOutline(Milestone, 1);
	TextDrawSetProportional(Milestone, 1);

	MilTask1 = TextDrawCreate(519.000000, 139.000000, "EM");
	TextDrawBackgroundColor(MilTask1, 255);
	TextDrawFont(MilTask1, 2);
	TextDrawLetterSize(MilTask1, 0.200000, 1.000000);
	TextDrawColor(MilTask1, -1);
	TextDrawSetOutline(MilTask1, 0);
	TextDrawSetProportional(MilTask1, 1);
	TextDrawSetShadow(MilTask1, 1);

	MilTask2 = TextDrawCreate(519.000000, 149.000000, "BREVE");
	TextDrawBackgroundColor(MilTask2, 255);
	TextDrawFont(MilTask2, 2);
	TextDrawLetterSize(MilTask2, 0.200000, 1.000000);
	TextDrawColor(MilTask2, -1);
	TextDrawSetOutline(MilTask2, 0);
	TextDrawSetProportional(MilTask2, 1);
	TextDrawSetShadow(MilTask2, 1);*/

	TextDrawLogin0 = TextDrawCreate(-21.000000, -6.000000, "_");
	TextDrawBackgroundColor(TextDrawLogin0, 255);
	TextDrawFont(TextDrawLogin0, 1);
	TextDrawLetterSize(TextDrawLogin0, 0.500000, 15.699997);
	TextDrawColor(TextDrawLogin0, -1);
	TextDrawSetOutline(TextDrawLogin0, 0);
	TextDrawSetProportional(TextDrawLogin0, 1);
	TextDrawSetShadow(TextDrawLogin0, 1);
	TextDrawUseBox(TextDrawLogin0, 1);
	TextDrawBoxColor(TextDrawLogin0, 120);
	TextDrawTextSize(TextDrawLogin0, 671.000000, 0.000000);

	TextDrawLogin1 = TextDrawCreate(-21.000000, 307.000000, "_");
	TextDrawBackgroundColor(TextDrawLogin1, 255);
	TextDrawFont(TextDrawLogin1, 1);
	TextDrawLetterSize(TextDrawLogin1, 0.500000, 15.699997);
	TextDrawColor(TextDrawLogin1, -1);
	TextDrawSetOutline(TextDrawLogin1, 0);
	TextDrawSetProportional(TextDrawLogin1, 1);
	TextDrawSetShadow(TextDrawLogin1, 1);
	TextDrawUseBox(TextDrawLogin1, 1);
	TextDrawBoxColor(TextDrawLogin1, 120);
	TextDrawTextSize(TextDrawLogin1, 671.000000, 0.000000);

	TextDrawLogin2 = TextDrawCreate(-21.000000, 306.000000, "_");
	TextDrawBackgroundColor(TextDrawLogin2, 255);
	TextDrawFont(TextDrawLogin2, 1);
	TextDrawLetterSize(TextDrawLogin2, 0.500000, 0.599997);
	TextDrawColor(TextDrawLogin2, -1);
	TextDrawSetOutline(TextDrawLogin2, 0);
	TextDrawSetProportional(TextDrawLogin2, 1);
	TextDrawSetShadow(TextDrawLogin2, 1);
	TextDrawUseBox(TextDrawLogin2, 1);
	TextDrawBoxColor(TextDrawLogin2, -16776961);
	TextDrawTextSize(TextDrawLogin2, 671.000000, 0.000000);

	TextDrawLogin3 = TextDrawCreate(-21.000000, 131.000000, "_");
	TextDrawBackgroundColor(TextDrawLogin3, 255);
	TextDrawFont(TextDrawLogin3, 1);
	TextDrawLetterSize(TextDrawLogin3, 0.500000, 0.599997);
	TextDrawColor(TextDrawLogin3, -1);
	TextDrawSetOutline(TextDrawLogin3, 0);
	TextDrawSetProportional(TextDrawLogin3, 1);
	TextDrawSetShadow(TextDrawLogin3, 1);
	TextDrawUseBox(TextDrawLogin3, 1);
	TextDrawBoxColor(TextDrawLogin3, -16776961);
	TextDrawTextSize(TextDrawLogin3, 671.000000, 0.000000);

	TextDrawLogin4 = TextDrawCreate(265.651275, 68.833320, "~r~L~w~ife  ~r~S~w~imulation");
	TextDrawLetterSize(TextDrawLogin4, 0.284610, 1.845000);
	TextDrawAlignment(TextDrawLogin4, 1);
	TextDrawColor(TextDrawLogin4, -1);
	TextDrawSetShadow(TextDrawLogin4, 0);
	TextDrawSetOutline(TextDrawLogin4, 0);
	TextDrawBackgroundColor(TextDrawLogin4, 51);
	TextDrawFont(TextDrawLogin4, 2);
	TextDrawSetProportional(TextDrawLogin4, 1);

	TextDrawLogin5 = TextDrawCreate(281.112274, 82.249977, "~r~roleplay");
	TextDrawLetterSize(TextDrawLogin5, 0.173103, 0.964164);
	TextDrawAlignment(TextDrawLogin5, 1);
	TextDrawColor(TextDrawLogin5, -16776961);
	TextDrawSetShadow(TextDrawLogin5, 0);
	TextDrawSetOutline(TextDrawLogin5, 0);
	TextDrawBackgroundColor(TextDrawLogin5, 51);
	TextDrawFont(TextDrawLogin5, 2);
	TextDrawSetProportional(TextDrawLogin5, 1);

	TextDrawLogin6 = TextDrawCreate(639.062927, 355.249908, "LD_SPAC:white");
	TextDrawLetterSize(TextDrawLogin6, 0.000000, 0.000000);
	TextDrawTextSize(TextDrawLogin6, -90.893127, 1.750000);
	TextDrawAlignment(TextDrawLogin6, 1);
	TextDrawColor(TextDrawLogin6, -2147483393);
	TextDrawSetShadow(TextDrawLogin6, 0);
	TextDrawSetOutline(TextDrawLogin6, 0);
	TextDrawFont(TextDrawLogin6, 4);

	TextDrawLogin7 = TextDrawCreate(555.197875, 340.083435, "~r~F~w~orum");
	TextDrawLetterSize(TextDrawLogin7, 0.449999, 1.600000);
	TextDrawAlignment(TextDrawLogin7, 1);
	TextDrawColor(TextDrawLogin7, -1);
	TextDrawSetShadow(TextDrawLogin7, 0);
	TextDrawSetOutline(TextDrawLogin7, 1);
	TextDrawBackgroundColor(TextDrawLogin7, 51);
	TextDrawFont(TextDrawLogin7, 2);
	TextDrawSetProportional(TextDrawLogin7, 1);

	TextDrawLogin8 = TextDrawCreate(551.449279, 356.416503, "www.blsrpg.com.br");
	TextDrawLetterSize(TextDrawLogin8, 0.157174, 1.121665);
	TextDrawAlignment(TextDrawLogin8, 1);
	TextDrawColor(TextDrawLogin8, -1);
	TextDrawSetShadow(TextDrawLogin8, 0);
	TextDrawSetOutline(TextDrawLogin8, 1);
	TextDrawBackgroundColor(TextDrawLogin8, 51);
	TextDrawFont(TextDrawLogin8, 2);
	TextDrawSetProportional(TextDrawLogin8, 1);

	TextDrawLogin9 = TextDrawCreate(0.000000, 356.416687, "LD_SPAC:white");
	TextDrawLetterSize(TextDrawLogin9, 0.000000, 0.000000);
	TextDrawTextSize(TextDrawLogin9, 106.354324, 1.750000);
	TextDrawAlignment(TextDrawLogin9, 1);
	TextDrawColor(TextDrawLogin9, -2147483393);
	TextDrawSetShadow(TextDrawLogin9, 0);
	TextDrawSetOutline(TextDrawLogin9, 0);
	TextDrawFont(TextDrawLogin9, 4);

	TextDrawLogin10 = TextDrawCreate(2.811172, 339.500152, "~r~g~w~amemode ~r~v~w~ersao");
	TextDrawLetterSize(TextDrawLogin10, 0.235881, 1.804159);
	TextDrawAlignment(TextDrawLogin10, 1);
	TextDrawColor(TextDrawLogin10, -1);
	TextDrawSetShadow(TextDrawLogin10, 0);
	TextDrawSetOutline(TextDrawLogin10, 1);
	TextDrawBackgroundColor(TextDrawLogin10, 51);
	TextDrawFont(TextDrawLogin10, 2);
	TextDrawSetProportional(TextDrawLogin10, 1);

	TextDrawLogin11 = TextDrawCreate(104.948760, 344.166595, ".");
	TextDrawLetterSize(TextDrawLogin11, 0.496852, 1.926666);
	TextDrawAlignment(TextDrawLogin11, 1);
	TextDrawColor(TextDrawLogin11, -2147483393);
	TextDrawSetShadow(TextDrawLogin11, 0);
	TextDrawSetOutline(TextDrawLogin11, 0);
	TextDrawBackgroundColor(TextDrawLogin11, 51);
	TextDrawFont(TextDrawLogin11, 1);
	TextDrawSetProportional(TextDrawLogin11, 1);

	TextDrawLogin12 = TextDrawCreate(543.547424, 342.833221, ".");
	TextDrawLetterSize(TextDrawLogin12, 0.496852, 1.926666);
	TextDrawAlignment(TextDrawLogin12, 1);
	TextDrawColor(TextDrawLogin12, -2147483393);
	TextDrawSetShadow(TextDrawLogin12, 0);
	TextDrawSetOutline(TextDrawLogin12, 0);
	TextDrawBackgroundColor(TextDrawLogin12, 51);
	TextDrawFont(TextDrawLogin12, 1);
	TextDrawSetProportional(TextDrawLogin12, 1);

	TextDrawLogin13 = TextDrawCreate(10.775993, 356.416534, "2.2.6");
	TextDrawLetterSize(TextDrawLogin13, 0.338023, 1.483332);
	TextDrawAlignment(TextDrawLogin13, 1);
	TextDrawColor(TextDrawLogin13, -1);
	TextDrawSetShadow(TextDrawLogin13, 0);
	TextDrawSetOutline(TextDrawLogin13, 1);
	TextDrawBackgroundColor(TextDrawLogin13, 51);
	TextDrawFont(TextDrawLogin13, 2);
	TextDrawSetProportional(TextDrawLogin13, 1);

    SetTimer("UpdateServer", 1000, true);

	ResetElevatorQueue();
	Elevator_Initialize();

	for(new x = 0; x < sizeof(CarInfo); x++)
	    CarInfo[x][cID] = INVALID_VEHICLE_ID;


    MapAndreas_Init(MAP_ANDREAS_MODE_FULL);

    printf ("\nSan Andreas Map by Srdjan loaded.\n");

	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 2000);
	Streamer_TickRate(100);
	LoadConfig();
	LoadProperty();
	//LoadBizz();
	LoadBizz();
	LoadBoxer();
	LoadTrunk();
    LoadGuerra();
	LoadZones();
	InitPixLoad();
	LoadGangDrugs();
	LoadIrc();
    LoadEleicao();
    LoadPlantacao();

    if(VotacaoAberta)
        CreateVotacaoPickup();

	//EleicoesFuncao(0);

	for(new x = 0; x < MAX_RADARS; x ++)
	{
	    new str[24];
	    format(str,24,"RADAR\n Limite: %d km/h", Radars[x][rMaxSpeed]);
		Create3DTextLabel(str, COLOR_YELLOW,Radars[x][rCoordX],Radars[x][rCoordY],Radars[x][rCoordZ]+4, 50, 0, 0);
	}

    #include <BLS/objetos.p>

    SendRconCommand("mapname [PT-BR] BLS v1 [PT-BR]");
	if(!DOF2_FileExists(RECORD_FILE))
	{
	    DOF2_CreateFile(RECORD_FILE);
	    DOF2_SetString(RECORD_FILE, "Data", "");
		DOF2_SetInt(RECORD_FILE, "Recorde", 0);
		DOF2_SaveFile();
	}

	Recorde = DOF2_GetInt(RECORD_FILE,"Recorde");

	CreateTextLabels();
	TDGuerra();

	//Conce
	LoadPlayerCars();

	WinnerTextDraw = TextDrawCreate(320.000000, 415.000000,"Your gang won the turf war against Drug Dealers.");
	TextDrawLetterSize(WinnerTextDraw,0.4,1.2);
	TextDrawFont(WinnerTextDraw,1);
	TextDrawColor(WinnerTextDraw, 0x00FFFFAA);
	TextDrawBackgroundColor(WinnerTextDraw,0x000000AA);
	TextDrawSetOutline(WinnerTextDraw, 1);
	TextDrawAlignment(WinnerTextDraw, 2);

	LoserTextDraw = TextDrawCreate(320.000000, 425.000000,"Your gang lost the turf war against Drug Dealers.");
	TextDrawLetterSize(LoserTextDraw, 0.4,1.2);
	TextDrawFont(LoserTextDraw, 1);
	TextDrawColor(LoserTextDraw , COLOR_YELLOW);
	TextDrawBackgroundColor(LoserTextDraw ,0x000000AA);
	TextDrawSetOutline(LoserTextDraw ,1);
	TextDrawAlignment(LoserTextDraw , 2);


	AttackersTextDraw = TextDrawCreate(320.000000, 415.000000,"Your gang has started a turf war with Drug Dealers");
	TextDrawLetterSize(AttackersTextDraw,0.4,1.2);
	TextDrawFont(AttackersTextDraw,1);
	TextDrawColor(AttackersTextDraw, 0x00FFFFAA);
	TextDrawBackgroundColor(AttackersTextDraw,0x000000AA);
	TextDrawSetOutline(AttackersTextDraw,1);
	TextDrawAlignment(AttackersTextDraw, 2);


	DefendersTextDraw = TextDrawCreate(320.000000, 425.000000,"Drug Dealers are attacking one of our turfs.");
	TextDrawLetterSize(DefendersTextDraw,0.4,1.2);
	TextDrawFont(DefendersTextDraw,1);
	TextDrawColor(DefendersTextDraw, COLOR_YELLOW);
	TextDrawBackgroundColor(DefendersTextDraw,0x000000AA);
	TextDrawSetOutline(DefendersTextDraw,1);
	TextDrawAlignment(DefendersTextDraw, 2);

	CountdownTD[0] = TextDrawCreate(320.000000, 320.000000, "It's the Final Countdawn!!");
	TextDrawAlignment(CountdownTD[0], 2);
	TextDrawBackgroundColor(CountdownTD[0], 255);
	TextDrawFont(CountdownTD[0], 3);
	TextDrawLetterSize(CountdownTD[0], 0.300000, 1.000000);
	TextDrawColor(CountdownTD[0], -1);
	TextDrawSetOutline(CountdownTD[0], 1);
	TextDrawSetProportional(CountdownTD[0], 1);
	TextDrawSetSelectable(CountdownTD[0], 0);

	CountdownTD[1] = TextDrawCreate(320.000000, 331.000000, "0");
	TextDrawAlignment(CountdownTD[1], 2);
	TextDrawBackgroundColor(CountdownTD[1], 255);
	TextDrawFont(CountdownTD[1], 3);
	TextDrawLetterSize(CountdownTD[1], 0.500000, 2.000000);
	TextDrawColor(CountdownTD[1], -1);
	TextDrawSetOutline(CountdownTD[1], 1);
	TextDrawSetProportional(CountdownTD[1], 1);
	TextDrawSetSelectable(CountdownTD[1], 0);

	ServerLogo1 = TextDrawCreate(550.0,405.0, "Life~w~ Simulation");
	TextDrawBackgroundColor(ServerLogo1, 255);
	TextDrawFont(ServerLogo1, 0);
	TextDrawColor(ServerLogo1, -16776961);
	TextDrawLetterSize(ServerLogo1, 0.5, 2.0);
 	TextDrawSetOutline(ServerLogo1, 0);
  	TextDrawSetProportional(ServerLogo1, 1);
  	TextDrawSetShadow(ServerLogo1, 1);
  	TextDrawAlignment(ServerLogo1, 2);

	GetTimeFix(ClockTime[tHour], ClockTime[tMinute], ClockTime[tSecond]);
	getdate(ClockTime[dYear], ClockTime[dMonth], ClockTime[dDay]);

	new tmphour, tmpminute, tmpsecond;
	GetTimeFix(tmphour, tmpminute, tmpsecond);

	SetWorldTime(tmphour);

	new str[128];
	format(str,128, "%s~n~%02d:%02d:%02d - %02d/%02d ~n~%d/%d",SITE_URL, ClockTime[tHour], ClockTime[tMinute], ClockTime[tSecond], ClockTime[dDay], ClockTime[dMonth], Online, GetMaxPlayers());

  	ServerLogo2 = TextDrawCreate(550.0,423.0, str);
	TextDrawFont(ServerLogo2, 2);
	TextDrawColor(ServerLogo2, 0xE5E5E5FF);
	TextDrawLetterSize(ServerLogo2, 0.2, 0.7);
 	TextDrawSetOutline(ServerLogo2, 0);
  	TextDrawSetProportional(ServerLogo2, 1);
  	TextDrawAlignment(ServerLogo2, 2);
  	TextDrawBackgroundColor(ServerLogo2, 0x000000FF);
  	TextDrawSetShadow(ServerLogo2, 1);

    new Float:txtbar = 36.0;

	ChecksBar[MAX_PLAYERS + 2] =  TextDrawCreate(20.0, 320.0, "		  Iniciando o ataque:");
	TextDrawFont(ChecksBar[MAX_PLAYERS + 2], 2);
	TextDrawColor(ChecksBar[MAX_PLAYERS + 2], 0xE5E5E5FF);
	TextDrawLetterSize(ChecksBar[MAX_PLAYERS + 2], 0.2, 0.7);
 	TextDrawSetOutline(ChecksBar[MAX_PLAYERS + 2], 0);
  	TextDrawSetProportional(ChecksBar[MAX_PLAYERS + 2], 1);
  	TextDrawBackgroundColor(ChecksBar[MAX_PLAYERS + 2], 0x000000FF);
  	TextDrawSetShadow(ChecksBar[MAX_PLAYERS + 2], 1);

	ChecksBar[MAX_PLAYERS] =  TextDrawCreate(35.5, 330.0, " ");
	TextDrawUseBox(ChecksBar[MAX_PLAYERS], true);
	TextDrawBoxColor(ChecksBar[MAX_PLAYERS], 0x000000FF);
	TextDrawSetShadow(ChecksBar[MAX_PLAYERS],0);
	TextDrawTextSize(ChecksBar[MAX_PLAYERS], 137.0, 0);

	ChecksBar[MAX_PLAYERS + 1] =  TextDrawCreate(35.5, 332.0, " ");
	TextDrawUseBox(ChecksBar[MAX_PLAYERS + 1], true);
	TextDrawBoxColor(ChecksBar[MAX_PLAYERS + 1], 0x000000FF);
	TextDrawSetShadow(ChecksBar[MAX_PLAYERS + 1],0);
	TextDrawTextSize(ChecksBar[MAX_PLAYERS + 1], 137, 0);
    // POSCAUSA12
	for(new i = 0; i != MAX_PLAYERS - 1; i++)
	{
		ChecksBar[i] = TextDrawCreate(36.0, 331.0, " ");
		TextDrawUseBox(ChecksBar[i], true);
		TextDrawBoxColor(ChecksBar[i], COLOR_DBLUE);
		TextDrawSetShadow(ChecksBar[i],0);
		TextDrawTextSize(ChecksBar[i], txtbar, 0);
		txtbar += 1.0;
	}

	for(new playerid = 0; playerid != MAX_PLAYERS; playerid++)
	{
		TextCash[playerid] = TextDrawCreate(483.000000, 127.000000, "BLS Cash: 0");
		TextDrawBackgroundColor(TextCash[playerid], 255);
		TextDrawFont(TextCash[playerid], 0);
		TextDrawLetterSize(TextCash[playerid], 0.289999, 1.000000);
		TextDrawColor(TextCash[playerid], 16711935);
		TextDrawSetShadow(TextCash[playerid], 1);
		TextDrawSetOutline(TextCash[playerid], 0);
		TextDrawSetProportional(TextCash[playerid], 1);
	}
	
	Background = TextDrawCreate(HUD_INDEX+111.000000,HUD_INDEX2+77.000000,"_");  // fundo
	TextDrawUseBox(Background,1);
	TextDrawBoxColor(Background,0x00000033);
	TextDrawTextSize(Background,529.000000,0.000000);
	TextDrawAlignment(Background,0);
	TextDrawBackgroundColor(Background,0x000000ff);
	TextDrawFont(Background,1);
	TextDrawLetterSize(Background,-3.700000,5.100007);
	TextDrawColor(Background,0xffffffff);
	TextDrawSetProportional(Background,1);
	TextDrawSetShadow(Background,1);

	Topbar = TextDrawCreate(HUD_INDEX+111.000000,HUD_INDEX2+75.000000,"_");  //borda de cima
	TextDrawUseBox(Topbar,1);
	TextDrawBoxColor(Topbar,0x00000ff);
	TextDrawTextSize(Topbar,530.000000,185.000000);
	TextDrawAlignment(Topbar,0);
	TextDrawBackgroundColor(Topbar,0x000000ff);
	TextDrawFont(Topbar,3);
	TextDrawLetterSize(Topbar,2.799999,-0.200000);
	TextDrawColor(Topbar,0xffffffff);
	TextDrawSetOutline(Topbar,1);
	TextDrawSetProportional(Topbar,1);
	TextDrawSetShadow(Topbar,1);

	Leftbar = TextDrawCreate(HUD_INDEX+32.000000,HUD_INDEX2+75.000000,"_");   // borda esquerda
	TextDrawUseBox(Leftbar,1);
	TextDrawBoxColor(Leftbar,0x000000ff);
	TextDrawTextSize(Leftbar,530.000000,32.000000);
	TextDrawAlignment(Leftbar,0);
	TextDrawBackgroundColor(Leftbar,0x000000ff);
	TextDrawFont(Leftbar,3);
	TextDrawLetterSize(Leftbar,1.000000,5.299999);
	TextDrawColor(Leftbar,0xffffffff);
	TextDrawSetOutline(Leftbar,1);
	TextDrawSetProportional(Leftbar,1);
	TextDrawSetShadow(Leftbar,1);

	Bottombar = TextDrawCreate(HUD_INDEX+32.000000,HUD_INDEX2+126.000000,"_");  // borda de baixo
	TextDrawUseBox(Bottombar,1);
	TextDrawBoxColor(Bottombar,0x000000ff);
	TextDrawTextSize(Bottombar,609.000000,82.000000);
	TextDrawAlignment(Bottombar,0);
	TextDrawBackgroundColor(Bottombar,0x000000ff);
	TextDrawFont(Bottombar,3);
	TextDrawLetterSize(Bottombar,1.500000,-0.200000);
	TextDrawColor(Bottombar,0xffffffff);
	TextDrawSetOutline(Bottombar,1);
	TextDrawSetProportional(Bottombar,1);
	TextDrawSetShadow(Bottombar,1);

	Rightbar = TextDrawCreate(HUD_INDEX+113.000000,HUD_INDEX2+75.000000,"_");  // borda direita
	TextDrawUseBox(Rightbar,1);
	TextDrawBoxColor(Rightbar,0x000000ff);
	TextDrawTextSize(Rightbar,607.000000,-1.000000);
	TextDrawAlignment(Rightbar,0);
	TextDrawBackgroundColor(Rightbar,0x000000ff);
	TextDrawLetterSize(Rightbar,0.199999,5.399997);
	TextDrawFont(Rightbar,3);
	TextDrawColor(Rightbar,0xffffffff);
	TextDrawSetOutline(Rightbar,1);
	TextDrawSetProportional(Rightbar,1);
	TextDrawSetShadow(Rightbar,1);

    //Alterado:
    //TextSize Old: X 603
    //TextSize New: X 602
	SpeedBarBackground = TextDrawCreate(HUD_INDEX+38.000000,HUD_INDEX2+97.000000,"_");   // fundo barra velocidade
	TextDrawUseBox(SpeedBarBackground,1);
	TextDrawBoxColor(SpeedBarBackground,0x00ff0033);
	TextDrawTextSize(SpeedBarBackground,602.000000,64.000000);
	TextDrawAlignment(SpeedBarBackground,0);
	TextDrawBackgroundColor(SpeedBarBackground,0x000000ff);
	TextDrawFont(SpeedBarBackground,3);
	TextDrawLetterSize(SpeedBarBackground,1.000000,-0.000000);
	TextDrawColor(SpeedBarBackground,0xffffffff);
	TextDrawSetOutline(SpeedBarBackground,1);
	TextDrawSetProportional(SpeedBarBackground,1);
	TextDrawSetShadow(SpeedBarBackground,1);

    /*Alterado:
    //Old: X +107
    //New: X +105
    //TextSize Old: X 534
    //TextSize New: X 535
	HealthBarBackground = TextDrawCreate(HUD_INDEX+105.000000,HUD_INDEX2+120.000000,"_"); // fundo barra vida
	TextDrawUseBox(HealthBarBackground,1);
	TextDrawBoxColor(HealthBarBackground,0xff000033);
	TextDrawTextSize(HealthBarBackground,535.000000,0.000000);
	TextDrawAlignment(HealthBarBackground,0);
	TextDrawBackgroundColor(HealthBarBackground,0x000000ff);
	TextDrawFont(HealthBarBackground,3);
	TextDrawLetterSize(HealthBarBackground,1.000000,-0.000000);
	TextDrawColor(HealthBarBackground,0xffffffff);
	TextDrawSetOutline(HealthBarBackground,1);
	TextDrawSetProportional(HealthBarBackground,1);
	TextDrawSetShadow(HealthBarBackground,1); */
	HealthBarBackground = TextDrawCreate(HUD_INDEX+38.000000,HUD_INDEX2+120.000000,"_");   // fundo barra velocidade
	TextDrawUseBox(HealthBarBackground,1);
	TextDrawBoxColor(HealthBarBackground,0xff000033);
	TextDrawTextSize(HealthBarBackground,602.000000,64.000000);
	TextDrawAlignment(HealthBarBackground,0);
	TextDrawBackgroundColor(HealthBarBackground,0x000000ff);
	TextDrawFont(HealthBarBackground,3);
	TextDrawLetterSize(HealthBarBackground,1.000000,-0.000000);
	TextDrawColor(HealthBarBackground,0xffffffff);
	TextDrawSetOutline(HealthBarBackground,1);
	TextDrawSetProportional(HealthBarBackground,1);
	TextDrawSetShadow(HealthBarBackground,1);

	LowHealthLine = TextDrawCreate(HUD_INDEX+56.000000,HUD_INDEX2+120.000000,"_");  // barra branca da vida
	TextDrawUseBox(LowHealthLine,1);
	TextDrawBoxColor(LowHealthLine,0xffffffff);
	TextDrawTextSize(LowHealthLine,551.000000,0.000000);
	TextDrawAlignment(LowHealthLine,0);
	TextDrawBackgroundColor(LowHealthLine,0x000000ff);
	TextDrawFont(LowHealthLine,3);
	TextDrawLetterSize(LowHealthLine,0.199999,-0.000000);
	TextDrawColor(LowHealthLine,0xffffffff);
	TextDrawSetOutline(LowHealthLine,1);
	TextDrawSetProportional(LowHealthLine,1);
	TextDrawSetShadow(LowHealthLine,1);

    MoneyTD = TextDrawCreate(486.500,77.5000,"~g~R");
	TextDrawColor(MoneyTD, 0xffffffff);
	TextDrawLetterSize(MoneyTD, 0.575, 2.1);
	TextDrawFont(MoneyTD, 3);
	TextDrawBackgroundColor(MoneyTD, 0x00000AA);
	TextDrawSetOutline(MoneyTD, 2);

    // POSCAUSA12
    for(new i; i != MAX_PLAYERS; i++)
	{
	    WarPointsTD[i] = TextDrawCreate(90.00,280.0,"00:00");
		TextDrawColor(WarPointsTD[i], COLOR_COCONUT);
		TextDrawFont(WarPointsTD[i], 1);
 		TextDrawSetOutline(WarPointsTD[i], 1);
  		TextDrawSetProportional(WarPointsTD[i], 1);
  	 	TextDrawAlignment(WarPointsTD[i], 2);
  	 	TextDrawLetterSize(WarPointsTD[i], 0.3, 1.0);

		format(str, 128, "-    -~n~~p~Territorio: ~w~Desocupado");
		ZoneName[i] = TextDrawCreate(87.0, 425.0, str);
		TextDrawColor(ZoneName[i], COLOR_ORANGE);
		TextDrawFont(ZoneName[i], 1);
		TextDrawSetOutline(ZoneName[i], 1);
		TextDrawSetProportional(ZoneName[i], 1);
	 	TextDrawAlignment(ZoneName[i], 2);
	 	TextDrawLetterSize(ZoneName[i], 0.3, 1.0);

 		HUDTexts[i] = TextDrawCreate(HUD_INDEX+35.000000,HUD_INDEX2+76.000000, " ");    // escritas
    	TextDrawAlignment(HUDTexts[i],0);
     	TextDrawBackgroundColor(HUDTexts[i],0x000000ff);
      	TextDrawFont(HUDTexts[i],1);
		TextDrawLetterSize(HUDTexts[i],0.199999,0.899999);
  		TextDrawSetProportional(HUDTexts[i],1);
    	TextDrawSetShadow(HUDTexts[i],1);
     	TextDrawColor(HUDTexts[i],0xffff00ff);

		SpeedBar[i] = TextDrawCreate(HUD_INDEX+38.000000,HUD_INDEX2+97.000000,"_"); // barra velocidade
		TextDrawUseBox(SpeedBar[i],1);
		TextDrawBoxColor(SpeedBar[i],0x00FF0066);
		TextDrawAlignment(SpeedBar[i],0);
		TextDrawBackgroundColor(SpeedBar[i],0x000000ff);
		TextDrawFont(SpeedBar[i],3);
		TextDrawLetterSize(SpeedBar[i],9.100000,-0.000000);
		TextDrawColor(SpeedBar[i],0xffffffff);
		TextDrawSetOutline(SpeedBar[i],1);
		TextDrawSetProportional(SpeedBar[i],1);
		TextDrawSetShadow(SpeedBar[i],1);

		HealthBar[i] = TextDrawCreate(HUD_INDEX+38.000000,HUD_INDEX2+120.000000,"_"); // barra vida
		TextDrawUseBox(HealthBar[i],1);
		TextDrawBoxColor(HealthBar[i],0xff000066);
		TextDrawAlignment(HealthBar[i],0);
		TextDrawBackgroundColor(HealthBar[i],0x000000ff);
		TextDrawFont(HealthBar[i],3);
		TextDrawLetterSize(HealthBar[i],1.000000,-0.000000);
		TextDrawColor(HealthBar[i],0xffffffff);
		TextDrawSetOutline(HealthBar[i],1);
		TextDrawSetProportional(HealthBar[i],1);
		TextDrawSetShadow(HealthBar[i],1);
	}

    //RaceTD
    RaceCountTD[1] = TextDrawCreate(295.000000, 224.000000, "~r~Vai");
    TextDrawAlignment(RaceCountTD[1], 2);
    TextDrawBackgroundColor(RaceCountTD[1], 255);
    TextDrawFont(RaceCountTD[1], 3);
    TextDrawLetterSize(RaceCountTD[1], 0.559999, 1.900000);
    TextDrawColor(RaceCountTD[1], 0xFFFFFFFF);
    TextDrawSetOutline(RaceCountTD[1], 1);
    TextDrawSetProportional(RaceCountTD[1], 1);
    TextDrawSetSelectable(RaceCountTD[1], 0);

    RaceCountTD[2] = TextDrawCreate(345.000000, 224.000000, "~b~Vai");
    TextDrawAlignment(RaceCountTD[2], 2);
    TextDrawBackgroundColor(RaceCountTD[2], 255);
    TextDrawFont(RaceCountTD[2], 3);
    TextDrawLetterSize(RaceCountTD[2], 0.559999, 1.900000);
    TextDrawColor(RaceCountTD[2], 0xFFFFFFFF);
    TextDrawSetOutline(RaceCountTD[2], 1);
    TextDrawSetProportional(RaceCountTD[2], 1);
    TextDrawSetSelectable(RaceCountTD[2], 0);

    RaceCountTD[0] = TextDrawCreate(320.000000, 210.000000, "_");
    TextDrawAlignment(RaceCountTD[0], 2);
    TextDrawBackgroundColor(RaceCountTD[0], 255);
    TextDrawFont(RaceCountTD[0], 3);
    TextDrawLetterSize(RaceCountTD[0], 0.759999, 2.900000);
    TextDrawColor(RaceCountTD[0], 0xFFFFFFFF);
    TextDrawSetOutline(RaceCountTD[0], 1);
    TextDrawSetProportional(RaceCountTD[0], 1);
    TextDrawSetSelectable(RaceCountTD[0], 0);

    RaceTime = TextDrawCreate(92.000000, 265.000000, "00:00");
    TextDrawBackgroundColor(RaceTime, 255);
    TextDrawFont(RaceTime, 3);
    TextDrawLetterSize(RaceTime, 0.300000, 1.000000);
    TextDrawColor(RaceTime, -1);
    TextDrawSetOutline(RaceTime, 1);
    TextDrawSetProportional(RaceTime, 1);
    TextDrawSetSelectable(RaceTime, 0);

    RaceVehPreview[0] = TextDrawCreate(68.000000, 267.000000, "Moto1");
    TextDrawBackgroundColor(RaceVehPreview[0], 0);
    TextDrawFont(RaceVehPreview[0], 5);
    TextDrawLetterSize(RaceVehPreview[0], 0.500000, 1.000000);
    TextDrawColor(RaceVehPreview[0], -1);
    TextDrawSetOutline(RaceVehPreview[0], 0);
    TextDrawSetProportional(RaceVehPreview[0], 1);
    TextDrawSetShadow(RaceVehPreview[0], 1);
    TextDrawUseBox(RaceVehPreview[0], 1);
    TextDrawBoxColor(RaceVehPreview[0], 255);
    TextDrawTextSize(RaceVehPreview[0], 70.000000, 81.000000);
    TextDrawSetPreviewModel(RaceVehPreview[0], 463);
    TextDrawSetPreviewRot(RaceVehPreview[0], 0.000000, -20.000000, 45.000000, 1.000000);
    TextDrawSetSelectable(RaceVehPreview[0], 0);

    RaceVehPreview[1] = TextDrawCreate(68.000000, 267.000000, "Moto2");
    TextDrawBackgroundColor(RaceVehPreview[1], 0);
    TextDrawFont(RaceVehPreview[1], 5);
    TextDrawLetterSize(RaceVehPreview[1], 0.500000, 1.000000);
    TextDrawColor(RaceVehPreview[1], -1);
    TextDrawSetOutline(RaceVehPreview[1], 0);
    TextDrawSetProportional(RaceVehPreview[1], 1);
    TextDrawSetShadow(RaceVehPreview[1], 1);
    TextDrawUseBox(RaceVehPreview[1], 1);
    TextDrawBoxColor(RaceVehPreview[1], 255);
    TextDrawTextSize(RaceVehPreview[1], 70.000000, 81.000000);
    TextDrawSetPreviewModel(RaceVehPreview[1], 463);
    TextDrawSetPreviewRot(RaceVehPreview[1], 0.000000, -20.000000, 45.000000, 1.000000);
    TextDrawSetSelectable(RaceVehPreview[1], 0);

    RaceSkinPreview[0] = TextDrawCreate(38.000000, 250.000000, "Skin1");
    TextDrawBackgroundColor(RaceSkinPreview[0], 0);
    TextDrawFont(RaceSkinPreview[0], 5);
    TextDrawLetterSize(RaceSkinPreview[0], 0.500000, 1.000000);
    TextDrawColor(RaceSkinPreview[0], -1);
    TextDrawSetOutline(RaceSkinPreview[0], 0);
    TextDrawSetProportional(RaceSkinPreview[0], 1);
    TextDrawSetShadow(RaceSkinPreview[0], 1);
    TextDrawUseBox(RaceSkinPreview[0], 1);
    TextDrawBoxColor(RaceSkinPreview[0], 255);
    TextDrawTextSize(RaceSkinPreview[0], 70.000000, 81.000000);
    TextDrawSetPreviewModel(RaceSkinPreview[0], 247);
    TextDrawSetPreviewRot(RaceSkinPreview[0], 0.000000, 0.000000, 0.000000, 1.000000);
    TextDrawSetSelectable(RaceSkinPreview[0], 0);

    RaceSkinPreview[1] = TextDrawCreate(38.000000, 250.000000, "Skin2");
    TextDrawBackgroundColor(RaceSkinPreview[1], 0);
    TextDrawFont(RaceSkinPreview[1], 5);
    TextDrawLetterSize(RaceSkinPreview[1], 0.500000, 1.000000);
    TextDrawColor(RaceSkinPreview[1], -1);
    TextDrawSetOutline(RaceSkinPreview[1], 0);
    TextDrawSetProportional(RaceSkinPreview[1], 1);
    TextDrawSetShadow(RaceSkinPreview[1], 1);
    TextDrawUseBox(RaceSkinPreview[1], 1);
    TextDrawBoxColor(RaceSkinPreview[1], 255);
    TextDrawTextSize(RaceSkinPreview[1], 70.000000, 81.000000);
    TextDrawSetPreviewModel(RaceSkinPreview[1], 247);
    TextDrawSetPreviewRot(RaceSkinPreview[1], 0.000000, 0.000000, 0.000000, 1.000000);
    TextDrawSetSelectable(RaceSkinPreview[1], 0);

    RaceRacerName[0] = TextDrawCreate(91.000000, 328.000000, "Nick1");
    TextDrawAlignment(RaceRacerName[0], 2);
    TextDrawBackgroundColor(RaceRacerName[0], 255);
    TextDrawFont(RaceRacerName[0], 1);
    TextDrawLetterSize(RaceRacerName[0], 0.300000, 1.000000);
    TextDrawColor(RaceRacerName[0], -1);
    TextDrawSetOutline(RaceRacerName[0], 1);
    TextDrawSetProportional(RaceRacerName[0], 1);
    TextDrawSetSelectable(RaceRacerName[0], 0);

    RaceRacerName[1] = TextDrawCreate(91.000000, 328.000000, "Nick2");
    TextDrawAlignment(RaceRacerName[1], 2);
    TextDrawBackgroundColor(RaceRacerName[1], 255);
    TextDrawFont(RaceRacerName[1], 1);
    TextDrawLetterSize(RaceRacerName[1], 0.300000, 1.000000);
    TextDrawColor(RaceRacerName[1], -1);
    TextDrawSetOutline(RaceRacerName[1], 1);
    TextDrawSetProportional(RaceRacerName[1], 1);
    TextDrawSetSelectable(RaceRacerName[1], 0);

    AddPlayerClass(26,-15.0451,-75.4585,1003.5542,90.0725,0,0,0,0,0,0);

	Zip = CreateMenu("Loja casual", 1,27.0,267.0,150,150);
	AddMenuItem(Zip, 0, "Trocar-se");
	AddMenuItem(Zip, 0, "Comprar (R$50)");
	AddMenuItem(Zip, 0, "Sair <");

	burgermenu = CreateMenu("Burger Shot", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(burgermenu,0,"Sanduiches");
	AddMenuItem(burgermenu,0,"X-SIMPLES");
	AddMenuItem(burgermenu,0,"X-TUDO");
	AddMenuItem(burgermenu,0,"X-ESPECIAL");
	AddMenuItem(burgermenu,0,"X-FRANGO");
	AddMenuItem(burgermenu,0," ");
	AddMenuItem(burgermenu,0,"Bebidas");
	AddMenuItem(burgermenu,0,"Agua");
	AddMenuItem(burgermenu,0,"Sprunk");
	AddMenuItem(burgermenu,0," ");
	AddMenuItem(burgermenu,0,"Sair");
	AddMenuItem(burgermenu,1," ");
	AddMenuItem(burgermenu,1,"$2"); // Sharp Shooter
	AddMenuItem(burgermenu,1,"$4"); // Cheeseburger
	AddMenuItem(burgermenu,1,"$5"); // DP Sandwich
	AddMenuItem(burgermenu,1,"$3"); // Beefy Salad
	AddMenuItem(burgermenu,1," ");
	AddMenuItem(burgermenu,1," ");
	AddMenuItem(burgermenu,1,"$1"); // Water
	AddMenuItem(burgermenu,1,"$1"); // Sprunk
	AddMenuItem(burgermenu,1," ");
	AddMenuItem(burgermenu,1," ");
	DisableMenuRow(burgermenu, 0);
	DisableMenuRow(burgermenu, 5);
	DisableMenuRow(burgermenu, 6);
	DisableMenuRow(burgermenu, 9);

	// Cluckin Bell
	chickenmenu = CreateMenu("Cluckin' Bell", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(chickenmenu,0,"Carnes");
	AddMenuItem(chickenmenu,0,"Coracão no espeto");
	AddMenuItem(chickenmenu,0,"Carne de vaca");
	AddMenuItem(chickenmenu,0,"Carne de jacaré");
	AddMenuItem(chickenmenu,0,"Carne de frango");
	AddMenuItem(chickenmenu,0," ");
	AddMenuItem(chickenmenu,0,"Bebidas");
	AddMenuItem(chickenmenu,0,"Água");
	AddMenuItem(chickenmenu,0,"Sprunk");
	AddMenuItem(chickenmenu,0," ");
	AddMenuItem(chickenmenu,0,"Sair");
	AddMenuItem(chickenmenu,1," ");
	AddMenuItem(chickenmenu,1,"$2"); // Little Clucker
	AddMenuItem(chickenmenu,1,"$4"); // Nuggets
	AddMenuItem(chickenmenu,1,"$5"); // C Sandwich
	AddMenuItem(chickenmenu,1,"$3"); // Salad
	AddMenuItem(chickenmenu,1," ");
	AddMenuItem(chickenmenu,1," ");
	AddMenuItem(chickenmenu,1,"$1"); // Water
	AddMenuItem(chickenmenu,1,"$1"); // Sprunk
	AddMenuItem(chickenmenu,1," ");
	AddMenuItem(chickenmenu,1," ");
	DisableMenuRow(chickenmenu, 0);
	DisableMenuRow(chickenmenu, 5);
	DisableMenuRow(chickenmenu, 6);
	DisableMenuRow(chickenmenu, 9);

	// Pizza Stack
	pizzamenu = CreateMenu("Well stacked pizza", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(pizzamenu,0,"Pizza's");
	AddMenuItem(pizzamenu,0,"Presunto e mussarela - Pequena");
	AddMenuItem(pizzamenu,0,"Presunto e mussarela - Grande");
	AddMenuItem(pizzamenu,0,"Frango e azeitona");
	AddMenuItem(pizzamenu,0,"Bacon e chocolate");
	AddMenuItem(pizzamenu,0," ");
	AddMenuItem(pizzamenu,0,"Bebidas");
	AddMenuItem(pizzamenu,0,"Água");
	AddMenuItem(pizzamenu,0,"Sprunk");
	AddMenuItem(pizzamenu,0," ");
	AddMenuItem(pizzamenu,0,"Sair");
	AddMenuItem(pizzamenu,1," ");
	AddMenuItem(pizzamenu,1,"$2"); // Sicilian
	AddMenuItem(pizzamenu,1,"$4"); // Personal Pan
	AddMenuItem(pizzamenu,1,"$5"); // Sheet
	AddMenuItem(pizzamenu,1,"$3"); // Salad
	AddMenuItem(pizzamenu,1," ");
	AddMenuItem(pizzamenu,1," ");
	AddMenuItem(pizzamenu,1,"$1"); // Water
	AddMenuItem(pizzamenu,1,"$1"); // Sprunk
	AddMenuItem(pizzamenu,1," ");
	AddMenuItem(pizzamenu,1," ");
	DisableMenuRow(pizzamenu, 0);
	DisableMenuRow(pizzamenu, 5);
	DisableMenuRow(pizzamenu, 6);
	DisableMenuRow(pizzamenu, 9);

	// Jim's sticky ring
	donutshop = CreateMenu("Jim's sticky ring", 2, 200.0, 100.0, 150.0, 150.0);
	AddMenuItem(donutshop,0,"Donuts");
	AddMenuItem(donutshop,0,"Little donut");
	AddMenuItem(donutshop,0,"Regular donut");
	AddMenuItem(donutshop,0,"Chief donut");
	AddMenuItem(donutshop,0,"Extra large donut");
	AddMenuItem(donutshop,0," ");
	AddMenuItem(donutshop,0,"Drinks");
	AddMenuItem(donutshop,0,"Bottle of water");
	AddMenuItem(donutshop,0,"Sprunk");
	AddMenuItem(donutshop,0," ");
	AddMenuItem(donutshop,0,"Leave");
	AddMenuItem(donutshop,1," ");
	AddMenuItem(donutshop,1,"$2"); // Little Donut
	AddMenuItem(donutshop,1,"$4"); // Regular Donut
	AddMenuItem(donutshop,1,"$5"); // Chief Donut
	AddMenuItem(donutshop,1,"$4"); // Extra large Donut
	AddMenuItem(donutshop,1," ");
	AddMenuItem(donutshop,1," ");
	AddMenuItem(donutshop,1,"$1"); // Water
	AddMenuItem(donutshop,1,"$1"); // Sprunk
	AddMenuItem(donutshop,1," ");
	AddMenuItem(donutshop,1," ");
	DisableMenuRow(donutshop, 0);
	DisableMenuRow(donutshop, 5);
	DisableMenuRow(donutshop, 6);
	DisableMenuRow(donutshop, 9);

	Remedios = CreateMenu("Medicamentos", 1,27.0,267.0,150,150);
	AddMenuItem(Remedios, 0, "Pastilha de Morango - R$10");
	AddMenuItem(Remedios, 0, "Pastilha de Abacaxi - R$10");
	AddMenuItem(Remedios, 0, "Pastilha de Pimenta - R$5");
	AddMenuItem(Remedios, 0, "Pacote de Pastilhas - R$100");
	AddMenuItem(Remedios, 0, "Sair");


//------------------------------------------------------------------------------

	for(new i = 0; i < sizeof(ObjetosVeiculosCaminhao); i++)
	{
		ObjetosVeiculosCaminhao[i][0] = CreateDynamicObject(970,-1.50000000,0.20000000,0.25000000,0.00000000,0.00000000,90.00000000);
		ObjetosVeiculosCaminhao[i][1] = CreateDynamicObject(970,-1.50000000,-3.53999996,0.25000000,0.00000000,0.00000000,90.00000000);
		ObjetosVeiculosCaminhao[i][2] = CreateDynamicObject(970,1.50000000,0.19921875,0.25000000,0.00000000,0.00000000,90.00000000);
		ObjetosVeiculosCaminhao[i][3] = CreateDynamicObject(970,1.50000000,-3.53906250,0.25000000,0.00000000,0.00000000,90.00000000);
		/*ObjetosVeiculosCaminhao[i][4] = CreateDynamicObject(944,0.00000000,1.50000000,0.60000002,0.00000000,0.00000000,0.00000000);
		ObjetosVeiculosCaminhao[i][5] = CreateDynamicObject(944,0.10000000,0.00000000,0.60000002,0.00000000,0.00000000,0.00000000);
		ObjetosVeiculosCaminhao[i][6] = CreateDynamicObject(944,0.10000000,-1.50000000,0.60000002,0.00000000,0.00000000,0.00000000);
		ObjetosVeiculosCaminhao[i][7] = CreateDynamicObject(944,0.10000000,-3.00000000,0.60000002,0.00000000,0.00000000,0.00000000);
		ObjetosVeiculosCaminhao[i][8] = CreateDynamicObject(944,0.10000000,-4.50000000,0.60000002,0.00000000,0.00000000,0.00000000);*/
	}

//--------------------------------[Conce]---------------------------------------
    // POSCAUSA12
    for(new i; i != MAX_PLAYERS;   i++)
	{
	    CarColor[i][0] = 1;
		CarColor[i][1] = 1;
	}

	CP_donutshop = CreateDynamicCP(379.0816,-184.1575,1000.6328,1.0);
	CP_pizzamenu = CreateDynamicCP(373.2310,-118.9228,1001.4922,1.0);
	CP_burgermenu = CreateDynamicCP(375.5965,-67.6347,1001.5151,1.0);
	CP_chickenmenu = CreateDynamicCP(369.0634,-6.1397,1001.8516,1.0);

	//PlayerHaul[456][pCapasity] = 200;
	//PlayerHaul[499][pCapasity] = 120;

	format(str,128,"%s %s", GM_NAME, GMVERSION);
	SetGameModeText(str);
	format(objstore, sizeof(objstore), "MOLE: Eu não recebi nada, volte a verificar-me mais tarde.");
	format(cbjstore, sizeof(cbjstore), "HQ: Não há nada nas proximidades (desligou)");

    //SetPDistance(10);
    SetNameTagDrawDistance(dista); //distancia do nick
    //ShowPlayerMarkers(0);
	AllowInteriorWeapons(1);
	UsePlayerPedAnims();
    DisableInteriorEnterExits();
	SetWeather(10);
	CurrentWeather = 10;
	EnableStuntBonusForAll(0);

	for(new i = 0; i < sizeof(TurfsCoords); i++)
	    Turfs[i] = GangZoneCreate(TurfsCoords[i][zMinX],TurfsCoords[i][zMinY],TurfsCoords[i][zMaxX],TurfsCoords[i][zMaxY]);
	for(new i = 0; i < MAX_RACEGZ; i++)
	    RaceGZID[i] = GangZoneCreate(RaceGZ[i][rPos][2], RaceGZ[i][rPos][3], RaceGZ[i][rPos][0], RaceGZ[i][rPos][1]);

    //GuerraGZ = GangZoneCreate(1439.0603,-1737.2926,1682.8645,-1584.8896);
	GuerraGZ = GangZoneCreate(95.0000, -2748.0000, 2920.0000, -855.0000);
	// GuerraGZ = GangZoneCreate(2667.1116, -2563.8274, 13.6279, 174.2266);

	// House Car Spawns
	for(new h = 0; h < 93; h++)
	{
	    if(HouseInfo[h][hVpos][0] == 0.0) CarroCasa[h] = AddStaticVehicleEx(HouseInfo[h][hVec], HouseCarSpawns[h][0], HouseCarSpawns[h][1], HouseCarSpawns[h][2], HouseCarSpawns[h][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);
	    else CarroCasa[h] = AddStaticVehicleEx(HouseInfo[h][hVec], HouseInfo[h][hVpos][0], HouseInfo[h][hVpos][1], HouseInfo[h][hVpos][2], HouseInfo[h][hVpos][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);
        //gCarLock[CarroCasa[h]] = 1;
	}

	AddStaticVehicleEx(423,377.948272,-1861.466918,7.873738,90.586448,-1,-1,-1); // Carro de Sorvete
	AddStaticVehicleEx(423,377.888458,-1858.107910,7.863733,90.391502,-1,-1,-1); // Carro de Sorvete
	AddStaticVehicleEx(481,393.245056,-2051.710693,7.351076,86.740051,-1,-1,-1); // BMX
	NewsCar[5] = AddStaticVehicleEx(582,881.4301, -1021.1821, 31.9908, 180.0, 111, 103, -1); // Carro de Reporter
	NewsCar[6] = AddStaticVehicleEx(582,887.7301, -1021.1821, 31.9908, 180.0, 111, 103, -1); // Carro de Reporter

	//CARROS PRODUTOS
    AddStaticVehicleEx(456,1770.0118,-2049.0852,13.8499,271.1727,-1,-1,999999999);
	AddStaticVehicleEx(456,1769.7986,-2031.1731,13.8230,270.4986,-1,-1,999999999);
	AddStaticVehicleEx(499,1768.4127,-2022.9679,14.1371,270.4728,-1,-1,999999999);
	AddStaticVehicleEx(499,1776.7191,-2022.9093,13.9409,269.6101,-1,-1,999999999);
	AddStaticVehicleEx(499,1803.4103,-2023.7441,13.5170,88.0744,33,1,999999999); //
	AddStaticVehicleEx(499,1803.3483,-2031.7216,13.5158,88.9184,34,1,999999999); //
	AddStaticVehicleEx(456,1802.0646,-2041.8818,13.7003,89.2407,3,1,999999999); //
	AddStaticVehicleEx(456,1802.1399,-2050.4609,13.7270,90.9617,3,1,999999999); //

	//MOTO SPAWN
    MotoSpawn[0]=CreateVehicle(462,1704.8584,-1931.1075,13.1680,269.0249,3,1, 300); //
    TextCarro[0]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1704.8584,-1931.1075,13.1680,15,0,0);
	MotoSpawn[1]=CreateVehicle(462,1704.9839,-1930.0493,13.1682,268.5326,1,3, 300); //
	TextCarro[1]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1704.9839,-1930.0493,13.1682,15,0,0);
	MotoSpawn[2]=CreateVehicle(462,1704.8584,-1928.9911,13.1680,269.0249,3,1, 300); //
	TextCarro[2]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1704.8584,-1928.9911,13.1680,15,0,0);
	MotoSpawn[3]=CreateVehicle(462,1704.9839,-1927.9329,13.1682,268.5326,1,3, 300); //
	TextCarro[3]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1704.9839,-1927.9329,13.1682,15,0,0);
	MotoSpawn[4]=CreateVehicle(462,1704.8584,-1926.8747,13.1680,269.0249,3,1, 300); //
	TextCarro[4]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1704.8584,-1926.8747,13.1680,15,0,0);
	MotoSpawn[5]=CreateVehicle(462,1704.9839,-1925.8165,13.1682,268.5326,1,3, 300); //
	TextCarro[5]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1704.9839,-1925.8165,13.1682,15,0,0);
	MotoSpawn[6]=CreateVehicle(462,1704.8584,-1924.7583,13.1680,269.0249,3,1, 300);
	TextCarro[6]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1704.8584,-1924.7583,13.1680,15,0,0);
	MotoSpawn[7]=CreateVehicle(462,1704.9839,-1923.7001,13.1682,268.5326,1,3, 300); //
	TextCarro[7]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1704.9839,-1923.7001,13.1682,15,0,0);
	MotoSpawn[8]=CreateVehicle(462,1704.8584,-1922.6419,13.1680,269.0249,3,1, 300); //
	TextCarro[8]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1704.8584,-1922.6419,13.1680,15,0,0);
	MotoSpawn[9]=CreateVehicle(462,1704.9839,-1921.5837,13.1682,268.5326,1,3, 300); //
	TextCarro[9]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1704.9839,-1921.5837,13.1682,15,0,0);
	MotoSpawn[10]=CreateVehicle(462,1704.8584,-1920.5255,13.1680,269.0249,3,1, 300); //
	TextCarro[10]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1704.8584,-1920.5255,13.1680,15,0,0);
	MotoSpawn[11]=CreateVehicle(462,1704.9839,-1919.4673,13.1682,268.5326,1,3, 300); //
	TextCarro[11]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1704.9839,-1919.4673,13.1682,15,0,0);
    MotoSpawn[12]=CreateVehicle(462,1181.8009,-1334.9395,13.1763,270.1091,1,2, 300); //
    TextCarro[12]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1181.8009,-1334.9395,13.1763,15,0,0);
	MotoSpawn[13]=CreateVehicle(462,1181.8009,-1333.0474,13.1812,269.4627,1,2, 300); //
	TextCarro[13]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1181.8009,-1333.0474,13.1812,15,0,0);
	MotoSpawn[14]=CreateVehicle(462,1181.8009,-1332.0500,13.1812,269.4627,1,2, 300); //
	TextCarro[14]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1181.8009,-1332.0500,13.1812,15,0,0);
	MotoSpawn[15]=CreateVehicle(462,1181.8009,-1331.0474,13.1812,269.4627,1,2, 300); //
	TextCarro[15]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1181.8009,-1331.0474,13.1812,15,0,0);
	MotoSpawn[16]=CreateVehicle(462,1181.8009,-1318.0709,13.1794,271.8535,1,2, 300); //
	TextCarro[16]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1181.8009,-1318.0709,13.1794,15,0,0);
	MotoSpawn[17]=CreateVehicle(462,1181.8009,-1316.3486,13.1759,271.0091,1,2, 300); //
	TextCarro[17]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1181.8009,-1316.3486,13.1759,15,0,0);
	MotoSpawn[18]=CreateVehicle(462,1181.8009,-1315.2700,13.1759,271.0091,1,2, 300); //
	TextCarro[18]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1181.8009,-1315.2700,13.1759,15,0,0);
	MotoSpawn[19]=CreateVehicle(462,1181.8009,-1314.2000,13.1759,271.0091,1,2, 300); //
	TextCarro[19]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{01FCFF}Veículo Público",0xFFFFFFF,1181.8009,-1314.2000,13.1759,15,0,0);

	//CARROS VIP
	CarroVIP[0]=CreateVehicle(411,1781.2001,-1932.3654,13.1136,359.8935,1,1,999999999); // //
	TextVIP[0]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{FFFF00}Veículo VIP",0xFFFFFFF,1805.0,-1933.7341,13.1631,15,0,0);
	CarroVIP[1]=CreateVehicle(451,1785.7389,-1931.9492,13.0926,359.6034,3,3,999999999);
	TextVIP[1]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{FFFF00}Veículo VIP",0xFFFFFFF,1800.0,-1933.1470,13.1104,15,0,0);
	CarroVIP[2]=CreateVehicle(434,1790.7731,-1932.4067,13.3548,0.2526,1,1,999999999); //
	TextVIP[2]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{FFFF00}Veículo VIP",0xFFFFFFF,1795.0,-1932.9484,13.0925,15,0,0);
	CarroVIP[3]=CreateVehicle(429,1795.4308,-1931.7678,13.0665,0.2373,3,3,999999999); //
	TextVIP[3]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{FFFF00}Veículo VIP",0xFFFFFFF,1790.0,-1933.1470,13.1104,15,0,0);
	CarroVIP[4]=CreateVehicle(419,1800.1832,-1932.0297,13.1841,359.6331,1,1,999999999); //
	TextVIP[4]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{FFFF00}Veículo VIP",0xFFFFFFF,1785.0,-1932.9484,13.0925,15,0,0);
	CarroVIP[5]=CreateVehicle(415,1803.9254,-1923.9425,13.1629,88.9326,3,3,999999999); //
	TextVIP[5]=Create3DTextLabel("{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{FFFF00}Veículo VIP",0xFFFFFFF,1780.0,-1933.1470,13.1104,15,0,0);

    //TREM
    AddStaticVehicleEx(537,1695.1025,-1953.6422,14.8756,89.9224,1,1,999999999);

	//PIZZABOY
    AddStaticVehicleEx(448,2097.9343,-1820.5526,12.9824,87.9441,3,3,999999999);
    AddStaticVehicleEx(448,2097.9177,-1817.8826,12.9828,88.4948,3,3,999999999);
    AddStaticVehicleEx(448,2097.8977,-1815.3229,12.9819,85.8323,3,3,999999999);

	//BARCO PRAIA
	AddStaticVehicleEx(452,720.1,-1694.0,-0.4,179.4,-1,-1,999999999);
	AddStaticVehicleEx(452,721.2,-1629.4,-0.4,180.9,-1,-1,999999999);
	AddStaticVehicleEx(452,739.5,-1670.5,-0.6,177.5,-1,-1,999999999);

    //CARROS AERO
	AluguelAero[0] = AddStaticVehicleEx(519,1678.3016,-2628.7173,14.4658,49.3289,1,1,999999999);
	AluguelAero[1] = AddStaticVehicleEx(593,1887.0736,-2627.6543,13.5394,52.6116,-1,-1,999999999);
	AluguelAero[2] = AddStaticVehicleEx(513,1835.3215,-2624.1938,13.5405,56.0569,-1,-1,999999999);
	AluguelAero[3] = AddStaticVehicleEx(513,1813.2893,-2625.6296,13.5394,53.2858,-1,-1,999999999);
	AluguelAero[4] = AddStaticVehicleEx(519,1745.8779,-2627.5608,14.4661,52.3235,1,1,999999999);
    AluguelAero[5] = CreateVehicle(487,1861.3000000,-2648.0000000,13.8000000,40.0000000,-1,-1,15);
    AluguelAero[6] = CreateVehicle(487,1860.8000000,-2680.7000000,13.8000000,39.9960000,-1,-1,15);
    AluguelAero[7] = CreateVehicle(487,1860.9000000,-2664.6001000,13.8000000,39.9960000,-1,-1,15);
    AluguelAero[8] = CreateVehicle(487,1919.3000000,-2663.3999000,13.8000000,309.9960000,-1,-1,15);
    AluguelAero[9] = CreateVehicle(487,1919.0000000,-2675.5000000,13.8000000,309.9960000,-1,-1,15);

	//KART
	/*AddStaticVehicleEx(571,2286.2141,-2354.5000,12.8306,225.8705,-1,-1,999999999);
	AddStaticVehicleEx(571,2279.9412,-2348.4141,12.8312,225.8585,-1,-1,999999999);
	AddStaticVehicleEx(571,2291.7932,-2345.5356,12.8305,227.3060,-1,-1,999999999);
	AddStaticVehicleEx(571,2287.5615,-2341.6433,12.8306,226.5350,-1,-1,999999999);
	AddStaticVehicleEx(571,2299.6785,-2338.3186,12.8307,224.3563,-1,-1,999999999);
	AddStaticVehicleEx(571,2295.3887,-2334.9448,12.8307,227.9102,-1,-1,999999999);*/


	// veiculos especiais

	//TAXI
    Taxi[0] = CreateVehicle(438,1283.6521,-1346.5459,13.4661,178.9249,6,6,999999999);
    Taxi[1] = CreateVehicle(438,1283.7627,-1334.3375,13.4633,179.3616,6,6,999999999);
    Taxi[2] = CreateVehicle(438,1283.9349,-1322.1501,13.4623,178.8945,6,6,999999999);
    Taxi[3] = CreateVehicle(438,1283.5856,-1358.5704,13.4528,179.7636,6,6,999999999);
    Taxi[4] = CreateVehicle(420,1778.2131,-1860.1453,13.2708,269.0264,6,6,999999999);
    Taxi[5] = CreateVehicle(420,1769.6450,-1860.1581,13.2748,269.5392,6,6,999999999);
    Taxi[6] = CreateVehicle(420,1759.8789,-1860.0267,13.2720,269.4789,6,6,999999999);
    Taxi[7] = CreateVehicle(586,1807.3807,-1864.8661,13.1013,358.9504,6,6,999999999); // mototaxi1
	Taxi[8] = CreateVehicle(586,1802.6227,-1864.7787,13.0979,358.9504,6,6,999999999); // mototaxi1
	Taxi[9] = CreateVehicle(586,1797.8608,-1864.6914,13.0945,358.9504,6,6,999999999); // mototaxi1
	Taxi[10] = CreateVehicle(586,1792.3903,-1864.5911,13.0906,358.9504,6,6,999999999); // mototaxi1
	Taxi[11] = CreateVehicle(586,1272.3739,-1377.1772,12.8817,269.6112,6,6,999999999); // mototaxi2
	Taxi[12] = CreateVehicle(586,1272.3739,-1373.1772,12.8817,269.6112,6,6,999999999); // mototaxi2
	Taxi[13] = CreateVehicle(586,1272.3739,-1369.1772,12.8817,269.6112,6,6,999999999); // mototaxi2
	Taxi[14] = CreateVehicle(586,1272.3739,-1365.1772,12.8817,269.6112,6,6,999999999); // mototaxi2

    //AMBULANCIA
	Ambucars[0] = CreateVehicle(416,1177.6060,-1338.8037,14.0330,269.6808,1,1,999999999);
    Ambucars[1] = CreateVehicle(416,1178.3479,-1309.2926,13.9229,271.0665,1,1,999999999);
    Ambucars[2] = CreateVehicle(416,2007.5313,-1412.5403,17.1415,178.0857,1,3,999999999);
	Ambucars[3] = CreateVehicle(416,2011.2073,-1412.5118,17.1415,179.5017,1,3,999999999);
	Ambucars[4] = CreateVehicle(416,2016.1810,-1412.4137,17.1415,179.1359,1,3,999999999);
	Ambucars[5] = CreateVehicle(487,2029.6572,-1419.1365,17.1689,130.4088,1,3,900000000);

    //ONIBUS
    Onibus[0] = CreateVehicle(437,1706.9634,-1898.5645,13.7308,0.4651,1,1,999999999);
    Onibus[1] = CreateVehicle(437,1714.8881,-1898.7686,13.7269,359.6778,1,1,999999999);
    Onibus[2] = CreateVehicle(437,1706.8353,-1879.7998,13.7019,359.7810,1,1,999999999);
    Onibus[3] = CreateVehicle(437,1722.9727,-1880.0128,13.6670,0.3097,1,1,999999999);
    Onibus[4] = CreateVehicle(437,1715.0496,-1880.0385,13.6708,359.7156,1,1,999999999);
    Onibus[5] = CreateVehicle(437,1723.8018,-1899.3127,13.7227,359.8417,1,1,999999999);

    //FUNERARIA
	Funecars[0] = CreateVehicle(442,939.4513,-1123.8505,23.8105,359.5648,0,0,999999999);
	Funecars[1] = CreateVehicle(442,932.3912,-1123.8672,23.8079,0.8957,0,0,999999999);
	Funecars[2] = CreateVehicle(442,936.0042,-1123.6740,23.8087,0.0130,0,0,999999999);
	Funecars[3] = CreateVehicle(442,921.7950,-1123.6764,23.8087,0.0130,0,0,999999999);
	Funecars[4] = CreateVehicle(442,929.0455,-1123.6752,23.8087,0.0130,0,0,999999999);
	Funecars[5] = CreateVehicle(442,925.2615,-1123.6757,23.8087,0.0130,0,0,999999999);

	//CARROS DO PIER LS
	PierCars[0] = CreateVehicle(481,393.5079,-2056.3369,7.3501,90.0651,-1,-1,999999999);
    PierCars[1] = CreateVehicle(481,393.4997,-2055.1953,7.3488,90.0129,-1,-1,999999999);
    PierCars[2] = CreateVehicle(481,393.4398,-2053.9944,7.3518,89.6062,-1,-1,999999999);
    PierCars[3] = CreateVehicle(481,393.5062,-2052.8513,7.3491,90.8429,-1,-1,999999999);
    PierCars[4] = CreateVehicle(481,393.4679,-2051.7219,7.3505,86.7383,-1,-1,999999999);
    PierCars[5] = CreateVehicle(473,461.4720,-2086.0730,-0.1408,269.8363,56,53,999999999);
    PierCars[6] = CreateVehicle(473,463.3431,-2079.2661,-0.4359,268.6142,56,15,999999999);
    PierCars[7] = CreateVehicle(473,450.2050,-2078.6580,-0.1321,266.2647,56,15,999999999);
    PierCars[8] = CreateVehicle(473,452.1678,-2086.4360,-0.3552,272.4464,56,15,999999999);
    //BARCOS DESERTO
	PierCars[9] = CreateVehicle(453,-537.7947,2032.7981,40.3047,44.4352,1,1,999999999); //
	PierCars[10] = CreateVehicle(453,-532.3051,2040.2784,40.2802,47.0291,1,1,999999999); //
	PierCars[11] = CreateVehicle(453,-526.2849,2044.2684,40.2553,47.1781,1,1,999999999); //
	PierCars[12] = CreateVehicle(453,-521.8433,2048.9417,40.2557,46.0027,1,1,999999999); //
	PierCars[13] = CreateVehicle(453,-517.3040,2053.2383,40.2376,44.3725,1,1,999999999); //

    //REBOQUE
	Reboque[0] = CreateVehicle(525,2535.2002,-1472.8771,23.8848,310.6650,19,93,999999999);
    Reboque[1] = CreateVehicle(525,2535.0840,-1458.3409,23.8627,227.7659,19,93,999999999);
    Reboque[2] = CreateVehicle(525,2528.9512,-1460.5179,23.8197,221.2199,0,0,999999999);
	Reboque[3] = CreateVehicle(525,2521.7068,-1460.5538,23.8400,219.2514,6,6,999999999);
	Reboque[4] = CreateVehicle(525,2511.7546,-1458.5820,23.8628,180.5519,6,6,999999999);
	Reboque[5] = CreateVehicle(525,2516.0732,-1458.7186,23.8539,180.4091,0,0,999999999);
	Reboque[6] = CreateVehicle(525,2520.1992,-1478.7562,23.8714,356.6023,6,6,999999999);
	Reboque[7] = CreateVehicle(525,2519.9199,-1490.6274,23.8719,179.3438,19,93,999999999);
	Reboque[8] = CreateVehicle(525,2543.8896,-1455.9932,23.8951,182.7043,0,0,999999999);

	//JORNALEIRO
	MotoJornal[0] = CreateVehicle(462, 924.9293, -1002.9128, 37.6446, 35.0000, 19, 19, -1);
	MotoJornal[1] = CreateVehicle(462, 926.9293, -1002.9128, 37.6446, 35.0000, 19, 19, -1);

    //AUTOESCOLA
	AutoEscolaCars[0] = CreateVehicle(593,1402.5402,1771.1747,11.2796,181.1865,2,1,999999999); // Aerea
	AutoEscolaCars[1] = CreateVehicle(487,1991.5427,-2379.9536,14.9226,90.4981,2,0,999999999);
	AutoEscolaCars[2] = CreateVehicle(452,727.4453,-1494.2966,-0.5684,181.3097,2,0,999999999);
	AutoEscolaCars[3] = CreateVehicle(565,961.4447,-935.1567,41.4075,182.1464,2,2,999999999);

    //LIXEIRO
    LixoCar[0]=CreateVehicle(408,1652.6023,-1891.4585,14.0539,359.6366,1,1,999999999);
    LixoCar[1]=CreateVehicle(408,1658.4563,-1891.5300,14.0859,0.3657,1,1,999999999);
    LixoCar[2]=CreateVehicle(408,1664.2563,-1891.3685,14.0499,0.0000,1,1,999999999);

    //ALUGUEL
	AluguelMoto[0] = CreateVehicle(522, 2134.5273, -1141.0148, 24.7865, 357.7130, -1, -1, 999999999);
	AluguelMoto[1] = CreateVehicle(468, 2129.8567, -1139.9231, 24.8383, 355.4016, -1, -1, 999999999);
	AluguelMoto[2] = CreateVehicle(521, 2124.1174, -1138.9146, 24.7561, 354.7087, -1, -1, 999999999);

	AluguelCarro[0] = CreateVehicle(560, 1099.3361, -1772.7250, 13.0513, 89.52480, -1, -1, 999999999);
	AluguelCarro[1] = CreateVehicle(541, 1098.9132, -1763.7777, 13.0587, 270.9571, -1, -1, 999999999);
	AluguelCarro[2] = CreateVehicle(451, 1062.4010, -1757.7256, 13.1244, 91.23270, 18, 18, 999999999); //
	AluguelCarro[3] = CreateVehicle(411, 1098.2827, -1754.9005, 13.0787, 88.62210, 12,  1, 999999999); //
	AluguelCarro[4] = CreateVehicle(429, 1062.5319, -1748.9683, 13.1295, 269.2033,  3,  1, 999999999); //
	AluguelCarro[5] = CreateVehicle(480, 1061.7388, -1766.7123, 13.0865, 270.2267, -1, -1, 999999999);
	AluguelCarro[6] = CreateVehicle(494, 1062.3199, -1775.6952, 13.0489, 89.79580, -1, -1, 999999999);

	//CARGAS CAMINHOES
	CaminhaoCarga[0] = CreateVehicle(584,-31.271,-273.547,5.994,270.0,-1,-1,999999999);
	CaminhaoCarga[1] = CreateVehicle(591,-31.775,-283.415,5.994,270.0,-1,-1,999999999);
	CaminhaoCarga[2] = CreateVehicle(435,-31.775,-293.415,5.994,270.0,-1,-1,999999999);
	CaminhaoCarga[3] = CreateVehicle(584,-0.384,-364.430,6.000,90.0,-1,-1,999999999);
	CaminhaoCarga[4] = CreateVehicle(450,-1.064,-354.122,6.000,90.0,-1,-1,999999999);
	CaminhaoCarga[5] = CreateVehicle(591,-0.576,-343.237,6.000,90.0,-1,-1,999999999);
	CaminhaoCarga[6] = CreateVehicle(584,-26.3447,-377.1222,6.5662,0.0,0,0,999999999);
    CaminhaoCarga[7] = CreateVehicle(584,-32.7920,-377.1626,6.5662,0.0,0,0,999999999);
    CaminhaoCarga[8] = CreateVehicle(584,-0.7975,-329.6024,6.5542,90.0,0,0,999999999);
    CaminhaoCarga[9] = CreateVehicle(584,-31.2448,-288.7538,6.5687,270.0,1,1,999999999);
	CaminhaoCarga[10] = CreateVehicle(591,-31.5978,-278.1114,6.0417,270.0,1,1,999999999);
	CaminhaoCarga[11] = CreateVehicle(435,-0.6165,-336.2728,6.0604,90.0,1,1,999999999);
	CaminhaoCarga[12] = CreateVehicle(450,-0.2536,-348.4604,6.0184,90.0,0,0,999999999);
	CaminhaoCarga[13] = CreateVehicle(584,-10.9486,-377.7846,6.0458,0.0,0,0,999999999);
	CaminhaoCarga[14] = CreateVehicle(591,-18.2756,-377.5608,6.0507,0.0,0,0,999999999);

	//CAMINHAO
	Caminhao[0] = CreateVehicle(515,12.3157,-261.4530,6.4492,90.5928,-1,-1,999999999);
	Caminhao[1] = CreateVehicle(514,12.1916,-253.2386,6.4261,89.9418,-1,-1,999999999);
	Caminhao[2] = CreateVehicle(403,11.7162,-244.8567,6.4472,90.7114,-1,-1,999999999);
	Caminhao[3] = CreateVehicle(514,11.6735,-236.5745,6.4873,89.8028,-1,-1,999999999);
	Caminhao[4] = CreateVehicle(403,12.1559,-228.1335,6.4497,89.9016,-1,-1,999999999);
	Caminhao[5] = CreateVehicle(515,12.4148,-220.4234,6.4502,88.6152,-1,-1,999999999);
	Caminhao[6] = CreateVehicle(515,-61.8209,-339.4611,6.4500,269.8938,63,78,999999999);
	Caminhao[7] = CreateVehicle(514,-61.8128,-332.1478,6.0154,271.5972,25,1,999999999);
	Caminhao[8] = CreateVehicle(514,-61.7213,-303.8103,6.0335,271.6735,28,1,999999999);
	Caminhao[9] = CreateVehicle(514,-61.7473,-324.8668,6.0112,271.0111,28,1,999999999);
	Caminhao[10] = CreateVehicle(514,-61.7492,-317.9115,6.0106,271.1630,25,1,999999999);
	Caminhao[11] = CreateVehicle(515,-61.8810,-309.1674,6.4444,270.1548,63,78,999999999);
	Caminhao[12] = CreateVehicle(403,-68.0199,-364.0667,6.4454,270.0,0,0,999999999);
    Caminhao[13] = CreateVehicle(403,-68.6000,-372.0000,11.1760,270.0,0,0,999999999);
    Caminhao[14] = CreateVehicle(403,-69.3677,-380.0089,6.4454,270.0,0,0,999999999);

	//HELIS
    HeliPM[0]  = CreateVehicle(497, 1561.8408000, -1647.322200, 28.6671000, 91.99950000, -1, 1, -1);
    //HeliPR[0]  = CreateVehicle(497, -511.1000100, -524.2000100, 25.8000000, 150.0000000, 53, 6, -1);

    //Cmver[7] = CreateVehicle(478, 2526.5627000, -955.1080000, 82.1888000, 97.00000000, 3, 3, -1);

    HeliFBI[0] = CreateVehicle(497, 351.45050000, -1476.861400, 76.7407000, 209.9728000,  0, 0, -1);
    //HeliPC[0]  = CreateVehicle(497, 2283.7476, 2438.0732, 47.1542, 179.0428, 93, 1, -1);

    //PM
    PMcars[0] = CreateVehicle(596,1583.7310,-1711.0839,5.6121,358.8266,0,1,999999999);
    PMcars[1] = CreateVehicle(596,1574.3438,-1710.9773,5.6115,358.0470,0,1,999999999);
	PMcars[2] = CreateVehicle(599,1591.8984,-1711.0039,5.6120,0.9427,0,1,999999999);
	PMcars[3] = CreateVehicle(596,1569.9487,-1710.9144,5.6119,358.0,0,1,999999999);
	PMcars[4] = CreateVehicle(596,1578.4396,-1711.3341,5.6115,1.1168,0,1,999999999);
	PMcars[5] = CreateVehicle(427,1558.5815,-1712.0134,5.6507,358.6990,0,1,999999999);
	PMcars[6] = CreateVehicle(599,1587.5361,-1711.1074,5.6110,359.9323,0,1,999999999);
	PMcars[7] = CreateVehicle(523,1603.9171,-1709.7253,5.4530,29.7879,0,1,999999999);
	PMcars[8] = CreateVehicle(523,1600.6285,-1709.9080,5.4596,34.8141,0,1,999999999);
	PMcars[9] = CreateVehicle(523,1599.3773,-1712.5681,5.4577,28.6742,0,1,999999999);
	PMcars[10] = CreateVehicle(596,1546.587768,-1680.320922,6.082784,91.397872,0,1,999999999); //  carro hq pm (Tiririca_BFH)
	PMcars[11] = CreateVehicle(596,1546.026489,-1676.093139,6.083121,91.540084,0,1,999999999); //  carro hq pm (Max_BFH)
	PMcars[12] = CreateVehicle(596,1545.957519,-1671.760742,6.083563,88.825866,0,1,999999999); //  carro hq pm (Boob_BFH)
   	PMcars[13] = CreateVehicle(596,1530.407714,-1644.433227,6.015007,180.169616,0,1,999999999); // ÐXàhðx
	PMcars[14] = CreateVehicle(596,1534.545288,-1644.474853,6.015298,179.610565,0,1,999999999); // Xàhðx
	PMcars[15] = CreateVehicle(523,1586.4288,-1679.7891,5.8970,311.4327,0,1,999999999);
	PMcars[16] = CreateVehicle(523,1584.4417,-1678.8243,5.8970,315.1927,0,1,999999999);
	PMcars[17] = CreateVehicle(523,1582.9436,-1676.1450,5.8941,319.5795,0,1,999999999);

	//PCIVIL BLS
	/*PCcars[0] = CreateVehicle(598, 2282.1829, 2442.4216, 10.6341, 359.4482, 93, 1, 999999999);
	PCcars[1] = CreateVehicle(598, 2277.9424, 2441.9609, 10.5935, 357.9189, 93, 1, 999999999);
	PCcars[2] = CreateVehicle(598, 2273.4385, 2442.7795, 10.5950, 359.9475, 93, 1, 999999999);
	PCcars[3] = CreateVehicle(598, 2269.1372, 2442.9216, 10.5923, 0.0411, 93, 1, 999999999);
	PCcars[4] = CreateVehicle(598, 2260.2783, 2442.0676, 10.5935, 0.2095, 93, 1, 999999999);
	PCcars[5] = CreateVehicle(598, 2256.1665, 2442.5435, 10.5942, 359.6723, 93, 1, 999999999);
	PCcars[6] = CreateVehicle(599, 2251.8186, 2442.5273, 10.5941, 1.0156, 93, 1, 999999999);
	PCcars[7] = CreateVehicle(599, 2251.4468, 2478.0637, 10.5926, 181.2650, 93, 1, 999999999);
	PCcars[8] = CreateVehicle(523, 2256.1448, 2478.3228, 10.5936, 179.7742, 93, 1, 999999999);
	PCcars[9] = CreateVehicle(523, 2260.2710, 2477.8191, 10.5944, 179.6821, 93, 1, 999999999);
	PCcars[10] = CreateVehicle(523, 2268.9893, 2478.2002, 10.5940, 179.4955, 93, 1, 999999999);
	PCcars[11] = CreateVehicle(523, 2273.5200, 2478.0889, 10.5942, 179.1025, 93, 1, 999999999);
	PCcars[12] = CreateVehicle(581, 2277.7332, 2478.3872, 10.5942, 180.1033, 93, 1, 999999999);
	PCcars[13] = CreateVehicle(581, 2282.0391, 2476.9604, 10.5927, 178.1004, 93, 1, 999999999);
	PCcars[14] = CreateVehicle(581, 2282.3391, 2459.5498, 10.5937, 178.2964, 93, 1, 999999999);
	PCcars[15] = CreateVehicle(581, 2278.0657, 2458.8069, 10.5926, 180.4694, 93, 1, 999999999);
	PCcars[16] = CreateVehicle(427, 2273.1672, 2460.1880, 10.5927, 179.3834, 93, 1, 999999999);
	//Disfarce
	PCcarsD[0] = CreateVehicle(474, 2269.1899, 2459.8945, 10.5928, 178.3817, 6, 6, 999999999);
	PCcarsD[1] = CreateVehicle(545, 2260.6851, 2459.4919, 10.5936, 181.2261, 0, 0, 999999999);
	PCcarsD[2] = CreateVehicle(600, 2256.0674, 2459.7698, 10.5933, 179.0173, 86, 86, 999999999);
	PCcarsD[3] = CreateVehicle(420, 2251.8833, 2459.6128, 10.5928, 177.4892, 6, 6, 999999999);
	PCcarsD[4] = CreateVehicle(579, 2295.0405, 2478.1396, 10.5925, 178.7596, 1, 1, 999999999);
	PCcarsD[5] = CreateVehicle(575, 2290.8347, 2476.7954, 10.5913, 178.4946, 2, 2, 999999999);
	PCcarsD[6] = CreateVehicle(525, 2291.1575, 2442.7852, 10.5933, 359.9625, 1, 0, 999999999);
	PCcarsD[7] = CreateVehicle(554, 2295.5378, 2442.6016, 10.5946, 1.0363, 0, 0, 999999999);*/

	//TAXI AEREO
	Aereo[0] = CreateVehicle(487,1669.9739,-1710.4868,20.6561,360.0,6,6,999999999);
	Aereo[1] = CreateVehicle(487,1660.9739,-1710.4868,20.6561,360.0,6,6,999999999);

	//FBI
    FBICar[0] = CreateVehicle(521,301.3639,-1498.0658,24.1892,273.8516,0,6,999999999);
    FBICar[1] = CreateVehicle(521,302.4716,-1495.9731,24.1973,274.1258,0,6,999999999);
    FBICar[2] = CreateVehicle(490,299.0349,-1536.2606,24.3372,54.9247,0,6,999999999);
    FBICar[3] = CreateVehicle(596,277.8394,-1535.1483,24.3377,234.8024,0,6,999999999);
    FBICar[4] = CreateVehicle(490,285.4297,-1527.0751,24.7212,235.0116,0,6,999999999);
    FBICar[5] = CreateVehicle(596,295.1109,-1540.5813,24.7301,55.1656,0,6,999999999);
    FBICar[6] = CreateVehicle(596,293.5963,-1513.2078,24.7473,236.2690,0,6,999999999);
    FBICar[7] = CreateVehicle(490,1585.5809,-1672.0166,6.0211,270.0711,0,6,999999999);
	FBICar[8] = CreateVehicle(490,1585.662597,-1667.574340,6.026945,273.453491,0,6,999999999);
	FBICar[9] = CreateVehicle(497,359.842651,-1465.502319,36.250118,222.251678,0,6,999999999); //  Heli PF (Max_BFH)
	FBICar[10] = CreateVehicle(521,302.030670,-1499.794799,24.167264,272.035339,0,6,999999999); //  moto hq fbi (Bobo_BFh)
	FBICar[11] = CreateVehicle(521,303.569122,-1501.595092,24.161899,265.844482,0,6,999999999); //  moto hq fbi (Tiririca_BFH)
	FBICar[12] = CreateVehicle(427,291.060607,-1544.343017,24.725465,55.677886,0,6,999999999); //  carro hq fbi (Boob_BFH)

	//Black Pistons
    BPCars[0] = CreateVehicle(459,2297.0000000,-1646.5000000,14.8000000,270.0000000,211,211,-1);
    BPCars[1] = CreateVehicle(463,2295.3999000,-1640.6000000,14.4000000,272.0000000,211,211,-1);
    BPCars[2] = CreateVehicle(463,2295.3999000,-1639.2000000,14.4000000,272.0000000,211,211,-1);
    BPCars[3] = CreateVehicle(463,2295.3999000,-1637.9000000,14.4000000,272.0000000,211,211,-1);
    BPCars[4] = CreateVehicle(463,2295.3999000,-1636.7000000,14.4000000,272.0000000,211,211,-1);
    BPCars[5] = CreateVehicle(463,2295.3999000,-1635.5000000,14.4000000,272.0000000,211,211,-1);
    BPCars[6] = CreateVehicle(586,2305.3999000,-1633.2000000,14.1000000,88.0000000,211,211,-1);
    BPCars[7] = CreateVehicle(586,2305.3999000,-1634.9000000,14.1000000,87.9950000,211,211,-1);
    HACars[0] = CreateVehicle(586,709.2000100,-464.6000100,15.9000000,88.0000000,228,228,-1);
    HACars[1] = CreateVehicle(586,709.2999900,-461.5000000,15.9000000,87.9950000,228,228,-1);

    BOPECar[0] = CreateVehicle(490,678.3553,-1368.7920,13.9671,317.3094,-1,-1,999999999);  // vtrfix2
    BOPECar[1] = CreateVehicle(490,682.3786,-1369.8956,13.9355,315.5585,-1,-1,999999999);  // vtrfix2
    BOPECar[2] = CreateVehicle(490,687.1498,-1370.0708,13.9888,317.8704,-1,-1,999999999);  // vtrfix2
    BOPECar[3] = CreateVehicle(490,691.3460,-1370.9962,13.9662,317.7581,-1,-1,999999999);  // vtrfix2
    BOPECar[4] = CreateVehicle(490,685.7715,-1375.7710,13.9808,315.7723,-1,-1,999999999);  // vtrfix2
    BOPECar[5] = CreateVehicle(490,681.4413,-1375.1060,13.9684,311.8121,-1,-1,999999999);  // vtrfix2
    BOPECar[6] = CreateVehicle(490,676.9813,-1375.1606,13.9611,316.6627,-1,-1,999999999);  // vtrfix2
    BOPECar[7] = CreateVehicle(490,672.8931,-1374.1218,13.8940,313.3560,-1,-1,999999999);  // vtrfix2
    BOPECar[8] = CreateVehicle(497,768.1562,-1345.3033,13.9854,90.0054,-1,-1,999999999);  // vtrfix3
    BOPECar[9] = CreateVehicle(497,768.6178,-1358.3580,14.0438,90.3829,-1,-1,999999999);  // vtrfix3
    BOPECar[10] = CreateVehicle(437,666.8906,-1373.4381,13.9811,326.6801,-1,-1,999999999);  // BUZUM

	FaCars[0] = CreateVehicle(430,-1445.4507,492.8669,-0.1268,94.3106,0,57,999999999); //
	FaCars[1] = CreateVehicle(430,-1444.3831,497.7631,-0.2333,84.1889,0,57,999999999); //
	FaCars[2] = CreateVehicle(430,-1445.8215,508.2056,-0.1094,92.0727,0,57,999999999); //
	FaCars[3] = CreateVehicle(472,-1460.2061,493.4540,0.1117,86.8114,57,0,999999999); //
	FaCars[4] = CreateVehicle(472,-1459.4207,498.5757,0.1404,76.2842,57,0,999999999); //
	FaCars[5] = CreateVehicle(425,-1306.2888,462.0149,7.9512,0.4546,0,0,999999999); //
	FaCars[6] = CreateVehicle(425,-1277.3835,461.7521,7.9777,3.5315,0,0,999999999); //
	FaCars[7] = CreateVehicle(425,-1244.2604,462.4437,8.0282,359.3910,0,0,999999999); //
	FaCars[8] = CreateVehicle(417,-1275.4310,499.9422,18.4269,0.1236,57,57,999999999); //
	FaCars[9] = CreateVehicle(417,-1291.2886,499.9984,18.3940,355.5454,0,0,999999999); //
	FaCars[10] = CreateVehicle(520,-1341.0737,508.1082,19.0304,267.0504,0,0,999999999); //
	FaCars[11] = CreateVehicle(520,-1399.1190,507.7935,19.0202,270.0328,0,0,999999999); //
	FaCars[12] = CreateVehicle(520,-1421.7230,507.9317,19.0306,270.5060,0,0,999999999); //
	FaCars[13] = CreateVehicle(470,-1568.0574,365.7814,7.1213,1.3116,0,0,999999999); //
	FaCars[14] = CreateVehicle(470,-1572.8193,365.6852,7.1215,2.3033,53,93,999999999); //
	FaCars[15] = CreateVehicle(470,-1577.4437,365.3671,7.1360,3.1437,2,0,999999999); //
	FaCars[16] = CreateVehicle(470,-1581.9556,365.8019,7.1323,1.3733,0,0,999999999); //
	FaCars[17] = CreateVehicle(470,-1586.8158,365.0385,7.1214,1.5854,57,57,999999999); //
	FaCars[18] = CreateVehicle(470,-1535.2490,420.2753,7.1211,358.9086,57,57,999999999); //
	FaCars[19] = CreateVehicle(461,-1565.6635,378.8286,6.7767,88.9190,57,57,999999999); //
	FaCars[20] = CreateVehicle(461,-1565.7852,376.1177,6.7649,92.1805,77,77,999999999); //
	FaCars[21] = CreateVehicle(471,-1565.5905,373.6867,6.6697,91.5012,0,57,999999999); //
	FaCars[22] = CreateVehicle(471,-1565.4899,371.3871,6.6687,95.7171,0,57,999999999); //
	FaCars[23] = CreateVehicle(487,-1602.2471,285.5683,7.3988,0.6702,57,0,999999999); //
	FaCars[24] = CreateVehicle(487,-1615.0095,285.5257,7.4103,359.8501,57,0,999999999); //
	FaCars[25] = CreateVehicle(470,-1559.8594,418.9404,7.1137,2.7705,0,0,999999999); //
	FaCars[26] = CreateVehicle(432,-1686.7320,292.8982,7.3000,270.0000,57,0,999999999); //
	FaCars[27] = CreateVehicle(432,-1686.7320,302.8982,7.3000,270.0000,57,0,999999999); //
	FaCars[28] = CreateVehicle(548,-1544.9626,335.1148,58.3605,0.9055,0,0,999999999); //
	FaCars[29] = CreateVehicle(563,-1497.0145,312.8397,56.9096,359.1646,57,57,999999999); //
	FaCars[30] = CreateVehicle(433,-1572.2120,303.2224,7.7086,89.9546,0,0,999999999); //
	FaCars[31] = CreateVehicle(433,-1572.0846,298.6690,7.7085,90.5289,57,57,999999999); //

    //BOMBEIROS
	BombeiroCars[0] = CreateVehicle(490,1025.6838,-2302.0808,13.2212,27.5755,3,1,9999999);
	BombeiroCars[1] = CreateVehicle(490,1022.1076,-2303.9004,13.2211,27.3276,3,1,9999999);
	BombeiroCars[2] = CreateVehicle(544,1041.7141,-2334.4387,13.2469,26.6653,3,1,9999999);
	BombeiroCars[3] = CreateVehicle(490,1018.6198,-2306.3938,13.2213,28.7387,3,1,9999999);
	BombeiroCars[4] = CreateVehicle(490,1015.0483,-2308.1484,13.2380,27.6563,3,1,9999999);
	BombeiroCars[5] = CreateVehicle(407,1010.6810,-2310.1199,13.3305,27.7317,3,3,9999999);
	BombeiroCars[6] = CreateVehicle(407,1033.3868,-2337.0237,13.2798,210.5685,3,3,9999999);
	BombeiroCars[7] = CreateVehicle(473,977.1804,-2310.5486,-0.4274,20.6999,1,3,9999999);
	BombeiroCars[8] = CreateVehicle(473,980.2797,-2318.9314,-0.4757,18.9733,1,3,9999999);
	//BombeiroCars[9] = CreateVehicle(487,1005.5937,-2289.2153,13.2696,28.1788,3,1,9999999);

	//BALLAS
	BallasCars[0] = CreateVehicle(517,2157.0811,-1701.2653,14.9430,284.3272,5,0,999999999);
    BallasCars[1] = CreateVehicle(517,2164.9102,-1704.1527,14.9750,334.7481,5,0,999999999);
	BallasCars[2] = CreateVehicle(566,2164.0854,-1683.9093,14.8596,222.9016,5,5,999999999);
	BallasCars[3] = CreateVehicle(468,2171.7932,-1686.5004,14.5846,266.9360,5,5,999999999);
	BallasCars[5] = CreateVehicle(468,2172.0977,-1683.9235,14.4514,257.8736,5,5,999999999);
	BallasCars[4] = CreateVehicle(566,2163.0393,-1693.7386,14.9103,267.5104,5,5,999999999);

	//GROVE
	GroveCars[0] = CreateVehicle(492,2508.2234,-1666.0660,13.1821,11.7775,86,1,999999999);
	GroveCars[1] = CreateVehicle(600,2472.8267,-1693.8020,13.2289,358.8534,86,1,999999999);
    GroveCars[2] = CreateVehicle(567,2497.8435,-1682.4742,13.2356,284.4342,86,1,999999999);
    GroveCars[3] = CreateVehicle(468,2524.3743,-1655.5942,15.0063,3.5523,86,1,999999999);
    GroveCars[4] = CreateVehicle(468,2506.6541,-1650.6331,13.2025,138.9091,86,1,999999999);
    GroveCars[5] = CreateVehicle(466,2484.4897,-1655.0470,13.0643,89.3283,86,1,999999999);

    //PREFEITURA
    prefeitocars[0] = CreateVehicle(579, 1247.1089,-2010.1917,59.7178,179.0,2,2,999999999);
    prefeitocars[1] = CreateVehicle(579, 1254.3326,-2010.1317,59.5144,180.0,2,2,999999999);
    prefeitocars[2] = CreateVehicle(409, 1259.6951,-2011.3340,59.2290,179.0,2,2,999999999);
    prefeitocars[3] = CreateVehicle(579, 1265.8789,-2010.3385,59.1841,180.0,2,2,999999999);
    prefeitocars[4] = CreateVehicle(487, 1117.2563,-2015.1643,74.6064,268.0,2,2,999999999);

    //HITMAN
/*	HitmanCar[0] = CreateVehicle(560,-39.5,-2498.7998046875,36.5,213.99169921875,0,1,999999999);
	HitmanCar[1] = CreateVehicle(560,-36.599609375,-2496.8994140625,36.5,213.99169921875,0,1,999999999);
	HitmanCar[2] = CreateVehicle(560,-34,-2494.8994140625,36.5,215.99670410156,0,1,999999999);
	HitmanCar[3] = CreateVehicle(402,-31.60000038147,-2492.8999023438,36.599998474121,217.03454589844,0,1,999999999);
	HitmanCar[4] = CreateVehicle(402,-20.60000038147,-2498.3000488281,36.599998474121,121.34729003906,0,1,999999999);
	HitmanCar[5] = CreateVehicle(429,-15.19921875,-2506.7998046875,36.400001525879,121.99768066406,0,0,999999999);
	HitmanCar[6] = CreateVehicle(411,-13.19921875,-2509.5,36.5,121.99768066406,0,0,999999999);
	HitmanCar[7] = CreateVehicle(411,-11.39999961853,-2512.3000488281,36.5,121.99768066406,0,0,999999999);
	HitmanCar[8] = CreateVehicle(487,-2,-2515,36.900001525879,91.95556640625,0,0,999999999); //HELICOPTERO
	HitmanCar[9] = CreateVehicle(429,-19.799999237061,-2522.8000488281,36.400001525879,29.998168945313,0,0,999999999);
	HitmanCar[10] = CreateVehicle(429,-22.799999237061,-2524.3999023438,36.400001525879,29.998168945313,0,0,999999999);
	HitmanCar[11] = CreateVehicle(521,-27.60000038147,-2518.5,36.299999237061,318.7646484375,0,1,999999999);
	HitmanCar[12] = CreateVehicle(521,-28.89999961853,-2516.8999023438,36.299999237061,316.14416503906,0,1,999999999);
	HitmanCar[13] = CreateVehicle(521,-36,-2506.3000488281,36.299999237061,311.8896484375,0,1,999999999);
	HitmanCar[14] = CreateVehicle(521,-37.200000762939,-2504.6000976563,36.299999237061,324.11767578125,0,1,999999999); */
    HitmanCar[0] = CreateVehicle(411, -669.0999800, 945.7000100 ,11.9000000, 0.0000000, 0 ,0, -1);
    HitmanCar[1] = CreateVehicle(411, -672.2000100, 945.7000100 ,11.9000000, 0.0000000, 0 ,0, -1);
    HitmanCar[2] = CreateVehicle(411, -675.2999900, 945.5999800 ,11.9000000, 0.0000000, 0 ,0, -1);
    HitmanCar[3] = CreateVehicle(560, -700.2000100, 945.4000200 ,12.1000000, 0.0000000, 0 ,0, -1);
    HitmanCar[4] = CreateVehicle(560, -703.7999900, 945.4000200 ,12.1000000, 0.0000000, 0 ,0, -1);
    HitmanCar[5] = CreateVehicle(409, -684.0999800, 968.5999800 ,12.1000000, 90.7500000, 0 ,0, -1);
    HitmanCar[6] = CreateVehicle(409, -684.2000100, 964.9000200 ,12.1000000, 90.7470000, 0 ,0, -1);
    HitmanCar[7] = CreateVehicle(451, -674.7000100, 956.7000100 ,11.9000000, 180.0000000, 0 ,0, -1);
    HitmanCar[8] = CreateVehicle(541, -691.0000000, 957.0000000 ,11.8000000, 180.7500000, 0 ,0, -1);
    HitmanCar[9] = CreateVehicle(541, -687.7999900, 957.0000000 ,11.8000000, 180.7470000, 0 ,0, -1);
    HitmanCar[10] = CreateVehicle(451, -671.7999900, 956.7000100 ,11.9000000, 180.0000000, 0 ,0, -1);
    HitmanCar[11] = CreateVehicle(415, -681.4000200, 956.7999900 ,12.0000000, 180.0000000, 0 ,0, -1);
    HitmanCar[12] = CreateVehicle(522, -706.7000100, 941.7000100 ,12.1000000, 60.0000000, 0 ,0, -1);
    HitmanCar[13] = CreateVehicle(522, -706.7000100, 940.4000200 ,12.1000000, 59.9960000, 0 ,0, -1);
    HitmanCar[14] = CreateVehicle(487, -653.7999900, 960.2000100 ,14.2000000, 90.0000000, 0 ,0, -1);

    //SAN NEWS
 	/*NewsCar[0] = AddStaticVehicleEx(582,783.2055,-1358.9709,13.5996,89.6965,-1,-1,999999999);
	NewsCar[1] = AddStaticVehicleEx(582,783.0294,-1352.2163,13.6007,88.3876,-1,-1,999999999);
	NewsCar[2] = AddStaticVehicleEx(582,782.8034,-1345.4120,13.5754,89.5560,-1,-1,999999999);
	NewsCar[3] = AddStaticVehicleEx(582,783.2316,-1365.9542,13.5948,89.1599,-1,-1,999999999);
	NewsCar[4] = AddStaticVehicleEx(488,740.5057,-1370.7836,25.8695,268.5099,2,29,999999999);       */
    NewsCar[0] = AddStaticVehicleEx(582,939.5999756,-1050.5999756,31.7999992,0.0000000,111,103,999999999); //Newsvan
	NewsCar[1] = AddStaticVehicleEx(582,933.4000244,-1050.9000244,31.7999992,0.0000000,111,103,999999999); //Newsvan
	NewsCar[2] = AddStaticVehicleEx(582,927.2000122,-1050.6999512,31.7999992,0.0000000,111,103,999999999); //Newsvan
	NewsCar[3] = AddStaticVehicleEx(582,921.5000000,-1050.6992188,31.7999992,0.0000000,111,103,999999999); //Newsvan
	NewsCar[4] = AddStaticVehicleEx(488,888.4000244,-1047.6999512,31.8999996,0.0000000,111,103,999999999); //News Chopper

	//LOWRIDERS
    /*Lowriders[0]= CreateVehicle(534,2790.0007,-2031.7328,13.3596,35.6441,-1,-1,999999999);
    Lowriders[1]= CreateVehicle(567,2784.9578,-2031.7086,13.3538,32.7967,-1,-1,999999999);
    Lowriders[2]= CreateVehicle(536,2779.7256,-2031.5833,13.3566,33.5326,-1,-1,999999999);
	Lowriders[3]= CreateVehicle(535,2774.6252,-2031.8083,13.3604,37.5518,158,1,999999999);
    Lowriders[4]= CreateVehicle(576,2769.2634,-2031.7079,13.3568,37.4963,1,1,999999999);

    ChangeVehiclePaintjob(Lowriders[0], 2);
    ChangeVehicleColor(Lowriders[1], 77, 77);
    ChangeVehiclePaintjob(Lowriders[2] ,2);
	ChangeVehiclePaintjob(Lowriders[3], 0);
    ChangeVehicleColor(Lowriders[4], 11, 11);

    for(new i = 0; i < sizeof(Lowriders); i++)
    {
	    AddVehicleComponent(Lowriders[i], 1134);
	    AddVehicleComponent(Lowriders[i], 1135);
	    AddVehicleComponent(Lowriders[i], 1190);
	    AddVehicleComponent(Lowriders[i], 1193);
	    AddVehicleComponent(Lowriders[i], 1010);
	    AddVehicleComponent(Lowriders[i], 1087);
	    AddVehicleComponent(Lowriders[i], 1077);

        VehicleInfo[Lowriders[i]][vSpawnTunning] = true;
	}*/

    //DRIFTERS

	/*Drifters[0] = CreateVehicle(558,994.1757,-1522.1250,13.1486,89.3436,1,1,999999999); //
	Drifters[1] = CreateVehicle(559,994.2698,-1525.7705,13.1835,88.0593,1,6,999999999); //
	Drifters[2] = CreateVehicle(562,994.2496,-1529.1857,13.2031,90.9593,1,1,999999999); //
	Drifters[3] = CreateVehicle(562,994.2371,-1532.5446,13.2034,90.1854,1,1,999999999); //
	Drifters[4] = CreateVehicle(560,994.2225,-1536.2695,13.2856,90.7381,6,6,999999999); //
    for(new i = 0; i < sizeof(Drifters); i++)
    {
	    ChangeVehiclePaintjob(Drifters[i], random(3));
	    AddVehicleComponent(Drifters[i], 1088);
	    AddVehicleComponent(Drifters[i], 1093);
	    AddVehicleComponent(Drifters[i], 1094);
	    AddVehicleComponent(Drifters[i], 1075);
	    AddVehicleComponent(Drifters[i], 1164);
	    AddVehicleComponent(Drifters[i], 1165);
	    AddVehicleComponent(Drifters[i], 1168);
	    AddVehicleComponent(Drifters[i], 1163);
	    AddVehicleComponent(Drifters[i], 1087);
	    AddVehicleComponent(Drifters[i], 1010);

        VehicleInfo[Drifters[i]][vSpawnTunning] = true;
	}*/

    /*//KING'S
    Kings[0] = CreateVehicle(562, 2156.8500, -1793.5210, 13.0212, 180.0000, 6, 6, 999999999);
    Kings[1] = CreateVehicle(560, 2161.5500, -1793.5210, 13.0212, 180.0000, 6, 6, 999999999);
    Kings[2] = CreateVehicle(562, 2166.5500, -1793.5210, 13.0212, 180.0000, 6, 6, 999999999);
	Kings[3] = CreateVehicle(559, 2171.5500, -1793.5210, 13.0212, 180.0000, 6, 6, 999999999);
    Kings[4] = CreateVehicle(558, 2176.5500, -1793.5210, 13.0212, 180.0000, 6, 6, 999999999);
    Kings[5] = CreateVehicle(565, 2161.5500, -1808.2012, 13.0054, 0.0000, 6, 6, -1);
    Kings[6] = CreateVehicle(560, 2166.5500, -1808.2012, 13.0212, 0.0000, 6, 6, -1);
    Kings[7] = CreateVehicle(559, 2171.5500, -1808.2012, 13.0212, 0.0000, 6, 6, -1);

    for(new i = 0; i < sizeof(Kings); i++)
    {
	    ChangeVehiclePaintjob(Kings[i], random(3));
	    AddVehicleComponent(Kings[i], 1088);
	    AddVehicleComponent(Kings[i], 1093);
	    AddVehicleComponent(Kings[i], 1094);
	    AddVehicleComponent(Kings[i], 1075);
	    AddVehicleComponent(Kings[i], 1164);
	    AddVehicleComponent(Kings[i], 1165);
	    AddVehicleComponent(Kings[i], 1168);
	    AddVehicleComponent(Kings[i], 1163);
	    AddVehicleComponent(Kings[i], 1087);
	    AddVehicleComponent(Kings[i], 1010);

        VehicleInfo[Kings[i]][vSpawnTunning] = true;
	}*/

    //VAGOS
    VagosCars[0] = CreateVehicle(467,2819.1001000,-1179.4000200,25.1000000,240.0000000,6,6,-1);
    VagosCars[1] = CreateVehicle(467,2824.4000000,-1179.4000000,25.1000000,240.0000000,6,6,-1);
    VagosCars[2] = CreateVehicle(474,2813.4000000,-1179.4000000,25.2000000,240.0000000,6,6,-1);
    VagosCars[3] = CreateVehicle(482,2802.6000000,-1171.7000000,25.8000000,180.0000000,6,6,-1);
    VagosCars[4] = CreateVehicle(468,2804.9000000,-1178.9000000,25.2000000,240.0000000,6,6,-1);
    VagosCars[5] = CreateVehicle(468,2804.9000000,-1177.5000000,25.2000000,240.0000000,6,6,-1);

    HACars[2] = CreateVehicle(463,694.7000100,-460.7999900,16.0000000,270.0000000,228,228,-1);
    HACars[3] = CreateVehicle(459,708.5999800,-458.2000100,16.5000000,90.0000000,228,228,-1);

	// House Car Spawns
	for(new h = 114; h < 118; h++)
	{
	    if(HouseInfo[h][hVpos][0] == 0.0) CarroCasa[h] = AddStaticVehicleEx(HouseInfo[h][hVec], HouseCarSpawns[h][0], HouseCarSpawns[h][1], HouseCarSpawns[h][2], HouseCarSpawns[h][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);
	    else CarroCasa[h] = AddStaticVehicleEx(HouseInfo[h][hVec], HouseInfo[h][hVpos][0], HouseInfo[h][hVpos][1], HouseInfo[h][hVpos][2], HouseInfo[h][hVpos][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);
        //gCarLock[CarroCasa[h]] = 1;
	}

    //AZTECAS
    AztecasCars[0] = CreateVehicle(474,1828.8759,-2006.3538,13.4543,179.9999,2,2,999999999);
	AztecasCars[1] = CreateVehicle(468,1821.8759,-2019.0322,13.0217,180.0000,2,2,999999999);
	AztecasCars[2] = CreateVehicle(468,1825.8759,-2020.0849,13.0217,180.0000,2,2,999999999);
	AztecasCars[3] = CreateVehicle(466,1818.1418,-2030.4918,13.3028,180.0000,2,2,999999999);
	AztecasCars[4] = CreateVehicle(534,1828.0975,-2030.1571,13.3697,179.9999,2,1,999999999);
	AztecasCars[5] = CreateVehicle(575,1817.9638,-2022.7041,13.1228,179.9945,2,2,999999999);

    //RUSSA
    RussaCar[0] = CreateVehicle(521,931.3000000,-924.1000000,42.3000000,110.0000000,1,1,-1);
    RussaCar[1] = CreateVehicle(521,931.5000000,-925.8000000,42.3000000,109.9950000,1,1,-1);
    RussaCar[2] = CreateVehicle(421,922.3825070,-920.1000970,42.7195660,161.7500000,1,1,-1);
    RussaCar[3] = CreateVehicle(409,920.0000000,-940.9000000,42.7000000,2.0000000,1,1,-1);
    RussaCar[4] = CreateVehicle(579,929.9000000,-929.9000000,42.7000000,94.0000000,1,1,-1);
    RussaCar[5] = CreateVehicle(579,927.9000000,-940.7000000,42.8000000,1.9990000,1,1,-1);
    RussaCar[6] = CreateVehicle(500,912.2000000,-942.3000000,43.0000000,4.0000000,1,1,-1);
    RussaCar[7] = CreateVehicle(487,889.7000000,-932.9000000,42.3000000,244.0000000,1,1,-1);

    //Yakuza
    YakuzaCars[0] = CreateVehicle(545,660.1184,-1265.8466,13.3414,2.0319,17,0,999999999); // CarroYakuza
	YakuzaCars[1] = CreateVehicle(545,669.8715,-1265.3818,13.4043,0.8854,17,0,999999999); // CarroYakuza
	YakuzaCars[2] = CreateVehicle(551,668.4181,-1275.7802,13.3263,0.4772,17,0,999999999); // CarroYakuza
	YakuzaCars[3] = CreateVehicle(409,660.4878,-1275.7413,13.6388,2.1067,17,17,999999999); // CarroYakuza
	YakuzaCars[4] = CreateVehicle(521,688.1014,-1269.5151,13.1308,91.1801,17,0,999999999); // MotoYakuza
	YakuzaCars[5] = CreateVehicle(521,688.5881,-1281.5942,13.1335,84.2854,17,0,999999999); // MotoYakuza
	YakuzaCars[6] = CreateVehicle(551,670.0149,-1286.6030,13.4040,357.8504,17,0,999999999); // CarroYakuza
	YakuzaCars[7] = CreateVehicle(487,746.5508,-1259.3569,13.7371,90.0000,17,17,-1); // Elicoptero

    //Bloods
    /*Cmver[0] = CreateVehicle(466,2539.2036,-962.5817,81.8121,186.1889,3,3,999999999);
    Cmver[1] = CreateVehicle(412,2562.5913,-958.3218,82.4594,190.2192,3,3,999999999);
	Cmver[2] = CreateVehicle(468,2503.9766,-961.9250,81.8524,180.7724,3,3,999999999);
    Cmver[3] = CreateVehicle(468,2501.8069,-962.1008,81.8349,181.2978,3,3,999999999);
    Cmver[4] = CreateVehicle(466,2523.3604,-976.0807,81.6167,273.3653,3,3,999999999);
	Cmver[5] = CreateVehicle(482,2539.738525,-978.057067,81.811203,271.814025,3,3,999999999); //  Carro hq cv (Boob_BFH)
	Cmver[6] = CreateVehicle(468,2502.843261,-961.776428,81.947357,181.194763,3,3,999999999); //  moto CV (Max_BFH)*/

	/*//PCC
	Pcccars[0] = CreateVehicle(482,2769.8726,-1606.3984,11.0429,271.8491,79,79,999999999);
    Pcccars[1] = CreateVehicle(492,2770.0759,-1615.5480,10.5800,269.6836,79,79,999999999);
	Pcccars[2] = CreateVehicle(567,2781.3638,-1603.9725,10.7464,182.8631,79,79,999999999);
	Pcccars[3] = CreateVehicle(468,2787.3979,-1602.2291,10.4919,182.2707,79,79,999999999);
	Pcccars[4] = CreateVehicle(468,2789.7539,-1601.9976,10.4910,179.8173,79,79,999999999);
	Pcccars[5] = CreateVehicle(467,2780.947265,-1624.068847,10.659667,359.456085,79,79,999999999); //  Carro PCC (Max_BFH)
	Pcccars[6] = CreateVehicle(468,2785.876708,-1602.190551,10.585679,187.560485,79,79,999999999); //  moto pcc (Max_BFH)*/

    //ALQAEDA

    TerrorCar[0]=CreateVehicle(432,420.0421,2442.5952,16.5105,90.2622,61,61,900000); //
    TerrorCar[1]=CreateVehicle(432,420.0421,2451.8342,16.5150,89.0617,61,61,900000); //
    TerrorCar[2]=CreateVehicle(578,150.6400,2533.7648,17.2039,90.0000,61,61,900000); //Veiculo de Transporte de Material
    TerrorCar[3]=CreateVehicle(432,420.0421,2461.0734,17.1325,88.8482,61,61,900000); //
    TerrorCar[4]=CreateVehicle(519,-63.9947,2483.6443,17.4032,290.4348,61,61,900000); //
    TerrorCar[5]=CreateVehicle(519,-66.3000,2513.2778,17.7001,237.8284,61,61,900000); //
    TerrorCar[6]=CreateVehicle(520,325.6263,2537.5771,17.5307,178.3454,61,61,900000); //
    TerrorCar[7]=CreateVehicle(520,290.7281,2538.5725,17.5477,178.3661,61,61,900000); //
    TerrorCar[8]=CreateVehicle(447,365.5007,2536.4763,16.6889,181.4774,61,61,900000); //
    TerrorCar[9]=CreateVehicle(447,353.8734,2536.0984,16.7087,181.9592,61,61,900000); //
    TerrorCar[10]=CreateVehicle(520,344.1229,2537.4583,17.4917,176.8895,61,61,900000); //
    TerrorCar[11]=CreateVehicle(487,391.0959,2533.5503,16.7465,180.3242,61,61,900000); //
    TerrorCar[12]=CreateVehicle(487,380.2745,2533.3960,16.7184,184.3837,61,61,900000); //
    TerrorCar[13]=CreateVehicle(568,161.8594,2536.0527,16.5054,177.3771,61,61,900000); //
    TerrorCar[14]=CreateVehicle(568,165.3441,2536.0088,16.5307,179.8087,61,61,900000); //
    TerrorCar[15]=CreateVehicle(554,170.8436,2534.4512,16.7188,178.3219,61,61,900000); //
    TerrorCar[16]=CreateVehicle(554,177.6277,2534.2517,16.7240,178.3219,61,61,900000); //
    TerrorCar[17]=CreateVehicle(505,183.3752,2534.1360,16.7976,178.8084,61,61,900000); //
    TerrorCar[18]=CreateVehicle(505,188.4490,2533.9373,16.8173,179.7571,61,61,900000); //
    TerrorCar[19]=CreateVehicle(579,197.4490,2533.6816,16.5449,182.1741,61,61,900000); //
    TerrorCar[20]=CreateVehicle(579,202.4490,2533.9036,16.5326,182.1741,61,61,900000); //
    TerrorCar[21]=CreateVehicle(560,207.4490,2534.3933,16.3353,179.2350,61,61,900000); //
    TerrorCar[22]=CreateVehicle(560,212.4490,2534.3267,16.3351,179.2350,61,61,900000); //
    TerrorCar[23]=CreateVehicle(560,217.4490,2534.2468,16.3348,179.2350,61,61,900000); //
    TerrorCar[24]=CreateVehicle(560,222.4490,2534.1750,16.3346,179.2350,61,61,900000); //
    TerrorCar[25]=CreateVehicle(468,226.4284,2534.1750,16.3114,184.3522,61,61,900000); //
    TerrorCar[26]=CreateVehicle(468,228.3984,2534.1750,16.3114,184.3522,61,61,900000); //
    TerrorCar[27]=CreateVehicle(468,230.3684,2534.1750,16.3114,184.3522,61,61,900000); //
    TerrorCar[28]=CreateVehicle(468,232.3384,2534.1750,16.3114,184.3522,61,61,900000); //
    TerrorCar[29]=CreateVehicle(471,235.3084,2534.1750,16.3114,184.3522,61,61,900000); //
    TerrorCar[30]=CreateVehicle(471,238.2784,2534.1750,16.3114,184.3522,61,61,900000); //

    //FBI 2
	FBICar[13] = CreateVehicle(596, 288.1500, -1522.0000, 24.3000, 55.0000, 0, 6, -1);
	FBICar[14] = CreateVehicle(596, 291.5000, -1517.8500, 24.3000, 55.0000, 0, 6, -1);
	FBICar[15] = CreateVehicle(596, 299.4500, -1489.7500, 24.3000, 55.0000, 0, 6, -1);
	FBICar[16] = CreateVehicle(596, 302.7500, -1485.7500, 24.3000, 55.0000, 0, 6, -1);
	FBICar[17] = CreateVehicle(596, 301.0000, -1504.7500, 24.7500, 55.0000, 0, 6, -1);
	FBICar[18] = CreateVehicle(596, 298.1500, -1509.0000, 24.3000, 55.0000, 0, 6, -1);

	//Caminhoes com Objeto
	VeiculosMateriais[0] = CreateVehicle(578,830.20001221,-608.09997559,17.10000038,0.00000000,6,0,-1);
	VeiculosMateriais[1] = CreateVehicle(578,820.00000000,-608.40002441,17.10000038,0.00000000,158,0,-1);
	VeiculosMateriais[2] = CreateVehicle(578,790.09997559,-608.40002441,17.10000038,0.00000000,252,0,-1);

	for(new i = 0; i < sizeof(VeiculosMateriais); i++)
	{
		AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[i][0], VeiculosMateriais[i], -1.50000000,0.20000000,0.25000000, 0.00000000,0.00000000,90.00000000);
		AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[i][1], VeiculosMateriais[i], -1.50000000,-3.53999996,0.25000000, 0.00000000,0.00000000,90.00000000);
		AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[i][2], VeiculosMateriais[i], 1.50000000,0.20000000,0.25000000, 0.00000000,0.00000000,90.00000000);
		AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[i][3], VeiculosMateriais[i], 1.50000000,-3.53999996,0.25000000, 0.00000000,0.00000000,90.00000000);
	}
	//Heli dos Materiais
	VeiculosMateriais[3] = CreateVehicle(417, -2227.7126, 2327.6140, 7.6365, 0.0000, 0, 0, -1);

	//Veiculos das Mafias
    RussaCar[8]  =  CreateVehicle(578, 899.8873, -922.21890, 43.2254, 180.00, 1, 1, -1);
	YakuzaCars[8] = CreateVehicle(578, 730.6120, -1275.5744, 14.1865, 0.0000, 0, 0, -1);

	AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[3][0], RussaCar[8], -1.50000000,0.20000000,0.25000000, 0.00000000,0.00000000,90.00000000);
	AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[3][1], RussaCar[8], -1.50000000,-3.53999996,0.25000000, 0.00000000,0.00000000,90.00000000);
	AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[3][2], RussaCar[8], 1.50000000,0.20000000,0.25000000, 0.00000000,0.00000000,90.00000000);
	AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[3][3], RussaCar[8], 1.50000000,-3.53999996,0.25000000, 0.00000000,0.00000000,90.00000000);

	AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[4][0], YakuzaCars[8], -1.50000000,0.20000000,0.25000000, 0.00000000,0.00000000,90.00000000);
	AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[4][1], YakuzaCars[8], -1.50000000,-3.53999996,0.25000000, 0.00000000,0.00000000,90.00000000);
	AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[4][2], YakuzaCars[8], 1.50000000,0.20000000,0.25000000, 0.00000000,0.00000000,90.00000000);
	AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[4][3], YakuzaCars[8], 1.50000000,-3.53999996,0.25000000, 0.00000000,0.00000000,90.00000000);

	// House Car Spawns
	for(new h = 93; h < 114; h++)
	{
	    if(HouseInfo[h][hVpos][0] == 0.0) CarroCasa[h] = AddStaticVehicleEx(HouseInfo[h][hVec], HouseCarSpawns[h][0], HouseCarSpawns[h][1], HouseCarSpawns[h][2], HouseCarSpawns[h][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);
	    else CarroCasa[h] = AddStaticVehicleEx(HouseInfo[h][hVec], HouseInfo[h][hVpos][0], HouseInfo[h][hVpos][1], HouseInfo[h][hVpos][2], HouseInfo[h][hVpos][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);
        //gCarLock[CarroCasa[h]] = 1;
	}

	//Hamas
	/*HamasCar[0] = CreateVehicle(432,1087.80004883,1277.00000000,10.89999962,90.00000000,95,10,-1);
	HamasCar[1] = CreateVehicle(432,1087.80004883,1258.69995117,10.89999962,90.00000000,95,10,-1);
	HamasCar[2] = CreateVehicle(432,1087.80004883,1268.00000000,10.89999962,90.00000000,95,10,-1);
	HamasCar[3] = CreateVehicle(520,1086.09997559,1337.90002441,11.69999981,90.00000000,-1,-1,-1);
	HamasCar[4] = CreateVehicle(520,1086.09997559,1325.80004883,11.69999981,90.00000000,-1,-1,-1);
	HamasCar[5] = CreateVehicle(522,1077.40002441,1311.59997559,10.50000000,180.00000000,0,245,-1);
	HamasCar[6] = CreateVehicle(522,1078.80004883,1311.59997559,10.50000000,180.00000000,0,245,-1);
	HamasCar[7] = CreateVehicle(522,1080.40002441,1311.59997559,10.50000000,180.00000000,0,245,-1);
	HamasCar[8] = CreateVehicle(522,1082.00000000,1311.59997559,10.50000000,180.00000000,0,245,-1);
	HamasCar[9] = CreateVehicle(418,1078.09997559,1290.80004883,11.00000000,0.00000000,245,17,-1);
	HamasCar[10] = CreateVehicle(425,1045.80004883,1239.50000000,21.20000076,90.00000000,95,10,-1);
	HamasCar[11] = CreateVehicle(425,1046.59997559,1258.69995117,21.20000076,90.00000000,95,10,-1);
	HamasCar[12] = CreateVehicle(511,1044.00000000,1291.40002441,21.89999962,88.00000000,45,58,-1);
	HamasCar[13] = CreateVehicle(593,1049.30004883,1272.40002441,20.89999962,90.00000000,109,24,-1);
	HamasCar[14] = CreateVehicle(400,1071.19995117,1230.59997559,11.00000000,0.00000000,102,28,-1);
	HamasCar[15] = CreateVehicle(470,1064.90002441,1229.09997559,10.89999962,0.00000000,95,10,-1);
	HamasCar[16] = CreateVehicle(470,1060.40002441,1229.09997559,10.89999962,0.00000000,95,10,-1);
	HamasCar[17] = CreateVehicle(470,1077.19995117,1228.80004883,10.89999962,0.00000000,95,10,-1);
	HamasCar[18] = CreateVehicle(470,1081.19995117,1228.80004883,10.89999962,0.00000000,95,10,-1);
	HamasCar[19] = CreateVehicle(578,1050.80004883,1315.00000000,11.60000038,266.00000000,245,245,-1);*/

/*    //ROCAM & FT
    ROCAM_FTCars[0] = CreateVehicle(596,1551.4000200,-1606.1999500,13.2000000,180.0000000,-1,-1,15); //Police Car (LSPD)
    ROCAM_FTCars[1] = CreateVehicle(596,1558.5000000,-1606.3000500,13.2000000,180.0000000,-1,-1,15); //Police Car (LSPD)
    ROCAM_FTCars[2] = CreateVehicle(596,1562.0000000,-1606.3000500,13.2000000,180.0000000,-1,-1,15); //Police Car (LSPD)
    ROCAM_FTCars[3] = CreateVehicle(596,1565.4000200,-1606.4000200,13.2000000,180.0000000,-1,-1,15); //Police Car (LSPD)
    ROCAM_FTCars[4] = CreateVehicle(596,1568.5999800,-1606.5000000,13.2000000,180.0000000,-1,-1,15); //Police Car (LSPD)
    ROCAM_FTCars[5] = CreateVehicle(596,1571.6999500,-1606.5000000,13.2000000,180.0000000,-1,-1,15); //Police Car (LSPD)
    ROCAM_FTCars[6] = CreateVehicle(596,1574.9000200,-1606.5999800,13.2000000,180.0000000,-1,-1,15); //Police Car (LSPD)
    ROCAM_FTCars[7] = CreateVehicle(596,1548.0000000,-1606.1999500,13.2000000,180.0000000,-1,-1,15); //Police Car (LSPD)
    ROCAM_FTCars[8] = CreateVehicle(596,1544.9000200,-1606.1999500,13.2000000,180.0000000,-1,-1,15); //Police Car (LSPD)
    ROCAM_FTCars[9] = CreateVehicle(596,1554.8994100,-1606.2998000,13.2000000,180.0000000,-1,-1,15); //Police Car (LSPD)
    ROCAM_FTCars[10] = CreateVehicle(523,1580.0000000,-1604.5000000,13.0000000,180.0000000,-1,-1,15); //HPV1000
    ROCAM_FTCars[11] = CreateVehicle(523,1581.6999500,-1604.4000200,13.0000000,180.0000000,-1,-1,15); //HPV1000
    ROCAM_FTCars[12] = CreateVehicle(523,1583.3000500,-1604.4000200,13.0000000,180.0000000,-1,-1,15); //HPV1000
    ROCAM_FTCars[13] = CreateVehicle(523,1584.8000500,-1604.4000200,13.0000000,180.0000000,-1,-1,15); //HPV1000
    ROCAM_FTCars[14] = CreateVehicle(523,1586.1999500,-1604.4000200,13.0000000,180.0000000,-1,-1,15); //HPV1000
    ROCAM_FTCars[15] = CreateVehicle(523,1587.5999800,-1604.4000200,13.0000000,180.0000000,-1,-1,15); //HPV1000
    ROCAM_FTCars[16] = CreateVehicle(523,1589.0000000,-1604.4000200,13.0000000,180.0000000,-1,-1,15); //HPV1000
    ROCAM_FTCars[17] = CreateVehicle(523,1590.5000000,-1604.4000200,13.0000000,180.0000000,-1,-1,15); //HPV1000    */

    HACars[4] = CreateVehicle(463,694.7000100,-473.2000100,16.0000000,270.0000000,228,228,-1);
    HACars[5] = CreateVehicle(463,694.7000100,-470.0000000,16.0000000,270.0000000,228,228,-1);
    HACars[6] = CreateVehicle(463,694.7000100,-467.0000000,16.0000000,270.0000000,228,228,-1);
    HACars[7] = CreateVehicle(463,694.7000100,-464.0000000,16.0000000,270.0000000,228,228,-1);


	/*AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[5][0], HamasCar[19], -1.50000000,0.20000000,0.25000000, 0.00000000,0.00000000,90.00000000);
	AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[5][1], HamasCar[19], -1.50000000,-3.53999996,0.25000000, 0.00000000,0.00000000,90.00000000);
	AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[5][2], HamasCar[19], 1.50000000,0.20000000,0.25000000, 0.00000000,0.00000000,90.00000000);
	AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[5][3], HamasCar[19], 1.50000000,-3.53999996,0.25000000, 0.00000000,0.00000000,90.00000000);*/

	AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[6][0], TerrorCar[2], -1.50000000,0.20000000,0.25000000, 0.00000000,0.00000000,90.00000000);
	AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[6][1], TerrorCar[2], -1.50000000,-3.53999996,0.25000000, 0.00000000,0.00000000,90.00000000);
	AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[6][2], TerrorCar[2], 1.50000000,0.20000000,0.25000000, 0.00000000,0.00000000,90.00000000);
	AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[6][3], TerrorCar[2], 1.50000000,-3.53999996,0.25000000, 0.00000000,0.00000000,90.00000000);

    FaCars[32] = CreateVehicle(471,-1590.4838,371.6835,6.6694,274.6858,0,57,-1); // FA Quad
    FaCars[33] = CreateVehicle(471,-1590.3838,369.5300,6.6685,272.5952,0,57,-1); // FA Quad2
    FaCars[34] = CreateVehicle(471,-1590.5983,373.7544,6.6683,277.5347,0,57,-1); // FA Quad2
    FaCars[35] = CreateVehicle(471,-1590.8248,378.0695,6.6691,270.0501,0,57,-1); // FA Quad4
    FaCars[36] = CreateVehicle(476,-1429.3973,492.1828,18.9480,269.5778,225,6,-1); // Tucano
    FaCars[37] = CreateVehicle(563,-1488.5507,309.1830,56.8985,2.3792,60,3,-1); // Randance FA
    FaCars[38] = CreateVehicle(563,-1500.8497,309.3882,56.9156,356.1162,225,225,-1); // Randance FA

    /*prefeitocars[5] = CreateVehicle(525, 1451.6188, -1770.2241, 13.4170, 270.0, 0, 0, -1); //Guincho
    prefeitocars[6] = CreateVehicle(525, 1451.7856, -1765.2977, 13.4100, 270.0, 0, 0, -1); //Guincho
    prefeitocars[7] = CreateVehicle(525, 1451.8792, -1760.4856, 13.4160, 270.0, 0, 0, -1); //Guincho*/

    HitmanCar[15] = CreateVehicle(446, -647.7000000, 866.3000000, 0.0000000, 226.0000000, 0, 0, -1); //Squalo
    HitmanCar[16] = CreateVehicle(473, -661.0000000, 875.7000000, 0.0000000, 226.0000000, 0, 0, -1); //Dinghy

	for(new h = 118; h < 180; h++)
	{
	    if(HouseInfo[h][hVpos][0] == 0.0) CarroCasa[h] = AddStaticVehicleEx(HouseInfo[h][hVec], HouseCarSpawns[h][0], HouseCarSpawns[h][1], HouseCarSpawns[h][2], HouseCarSpawns[h][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);
	    else CarroCasa[h] = AddStaticVehicleEx(HouseInfo[h][hVec], HouseInfo[h][hVpos][0], HouseInfo[h][hVpos][1], HouseInfo[h][hVpos][2], HouseInfo[h][hVpos][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);
        //gCarLock[CarroCasa[h]] = 1;
	}

    LoadConceCars();

    new numPlate[32], guerraVar;
    for(new car = 0; car < MAX_VEHICLES; car++)
	{
		format(numPlate, 32, "{FF0000}BLS {000000}%04d", car);
		SetVehicleNumberPlateEx(car, numPlate);
		VehicleInfo[car][vColor1] = -1;
		VehicleInfo[car][vColor2] = -1;
		VehicleInfo[car][vPaintjob] = 3;
		VehicleInfo[car][vCustom] = false;

		SetVehicleParamsEx(car, false, false, false, false, false, false, false);
        VehicleInfo[car][vEngine] = false;
        VehicleInfo[car][vUseGas] = true;
		VehicleInfo[car][vGas] = GasMax;
		VehicleInfo[car][vWindows] = 1;

		for(new m = 0; m < MAX_MODS; m++)
			VehicleInfo[car][vMod][m] = 0;

        format(VehicleInfo[car][vRadio], 128, "http://live.hunterfm.com/live");

		SetVehicleToRespawn(car);

        // Restrições
        new model = GetVehicleModel(car);
        if(model == 509
        || model == 481
        || model == 510)
        {
            SetVehicleParamsEx(car, true, false, false, false, false, false, false);
            VehicleInfo[car][vEngine] = true;
            VehicleInfo[car][vUseGas] = false;
        }
        if(model == 425
        || model == 432
        || model == 447
        || model == 520)
        {
            if(guerraVar < sizeof(GuerraCars))
            {
                GuerraCars[guerraVar] = car;
                guerraVar++;
            }
        }
	}

    for(new i = 0; i < sizeof(AutoEscolaCars); i++)
    {
        SetVehicleParamsEx(AutoEscolaCars[i], true, false, false, false, false, false, false);
        VehicleInfo[AutoEscolaCars[i]][vEngine] = true;
        VehicleInfo[AutoEscolaCars[i]][vUseGas] = false;
    }

    for(new i = 0; i < sizeof(VeiculosMateriais); i++)
        VehicleInfo[VeiculosMateriais[i]][vUseGas] = false;

	//#include <BLS/objetos.pwn>
	//#include <BLS/pickups.pwn>

    //Icones em Lugares
    //AddStaticPickup(1239, 1, 1393.4606,-1896.8706,13.53);		//BARZINHO
    //AddStaticPickup(1239, 1, 1297.4987,-1877.6282,13.58);		//BARZIM
    //AddStaticPickup(1239, 1, 1230.0214,-1422.6290,13.37);			//Barzinho
    AddStaticPickup(1239, 1, 696.0831, -1185.4281, 15.6033);//  Neon Shop
    AddStaticPickup(1239, 1, 1554.4722, -2167.9980, 13.7061);//  Neon Shop
    AddStaticPickup(1239, 1, 1563.4127, -2167.9980, 13.7061);//  Neon Shop
    AddStaticPickup(1239, 1, 1572.9111, -2167.9980, 13.7061);//  Neon Shop
    AddStaticPickup(1239, 1, 1581.8969, -2167.9980, 13.7061);//  Neon Shop
    AddStaticPickup(1239, 1, 204.1569,-101.3153,1005.2578);// 	ACESSORIO
    AddStaticPickup(1239, 1, 2628.5437,-2107.5991,16.9531);      //Point
    AddStaticPickup(1239, 2, 379.5602,-116.5544,1001.4922);      //pegar pizza
    AddStaticPickup(1239, 1, 356.0493,203.9216,1008.3828);       //NewsReporter Registration & /jornal
    AddStaticPickup(1239, 1, 362.1023,201.5996,1008.3828);       //PaperBoy Registration
    AddStaticPickup(1239, 1, 1615.3705,-1502.8062,14.2257);      //CarJacker Registration
    AddStaticPickup(1279, 1, 2548.3142,-1293.8187,1044.1250);    //Getting Drugs for DrugDealers
    AddStaticPickup(1279, 1, 2230.0110,-2286.5144,14.3751);      //Cimitério entrega de pacotes.
    AddStaticPickup(371 , 1, 1544.2,-1353.4,329.4);              //LS towertop
    AddStaticPickup(371 , 1, 1536.0, -1360.0, 1150.0);           //LS towertop
    AddStaticPickup(1242, 1, 1527.5,-12.1,1002.0);               //binco armor
    AddStaticPickup(1314, 1, 756.5177,5.5925,1000.6992);         //Luta
    AddStaticPickup(1318, 1, 2232.9275,-1333.3976,23.9816);      //Igreja
    AddStaticPickup(1274, 1, 2631.9336,-1265.4479,49.9428);      // CAIXA1
    AddStaticPickup(1274, 1, 1929.3555,-1769.6917,13.5469);      //CAIXA2
    AddStaticPickup(1274, 1, 1506.4263,-1792.7622,13.5328);		//CAIXA3
    AddStaticPickup(1274, 1, 1103.0015,-1448.9043,15.7969);      // CAIXA4
    AddStaticPickup(1274, 1, 1134.9240,-923.2976,43.3906);       //CAIXA5
    AddStaticPickup(1274, 1, 360.7372,-1762.7653,5.4928);      // caixa bar praia1
    AddStaticPickup(1274, 1, 2866.5391,-1912.8894,11.1094);      // caixa bar praia2
    AddStaticPickup(1274, 1, 1285.1527,-1646.3215,13.5839);     //Caixa Banco
    AddStaticPickup(1318, 1, 1642.3903,-2238.2710,13.4977);      //ViajarLS
    AddStaticPickup(1318, 1, -1422.5396,-286.6204,14.1484);      //ViajarSF
    AddStaticPickup(1318, 1, 1673.0880,1447.8702,10.7865);       //ViajarLV
    AddStaticPickup(1318, 1, 2140.9441,-1802.1223,16.1475);      //bcc
    AddStaticPickup(1318, 1, 1489.0901,-1720.5302,8.1772);       //Drogas
    AddStaticPickup(1239, 1, -50.5683,-232.3341,6.7646);         //
    AddStaticPickup(1318, 1, 2244.4446,-1665.2186,15.4766);      //binco
    AddStaticPickup(1318, 1, 1830.4603,-1768.1846,13.5469);      //binco
    AddStaticPickup(1318, 1, 1858.5580,-1792.8334,17.7473);      //binco
    AddStaticPickup(1239, 1, 555.9089,-1289.4904,17.2482);       //Conce Pickup
    AddStaticPickup(1239, 1, 2568.6938,-1296.7518,1044.1250);    //vendedor de drogas
    AddStaticPickup(1210, 1, 362.1283,173.5610,1008.3828);       //empregos
    AddStaticPickup(1275, 1, 207.5716,-100.8610,1005.2578);      //Binco icone azul
    AddStaticPickup(1318, 1, 1652.9908,-1272.3403,14.8132);        //Condomínio entrada
    AddStaticPickup(1318, 1, 1673.5195,-1219.6373,14.8980);        //Condomínio entrada

    //Hospitais
    AddStaticPickup(1240, 1, 1173.2563,-1323.3102,15.3943);      //Hospital 1 near Ammu
    AddStaticPickup(1240, 1, 2029.5945,-1404.6426,17.2512);      //Hospital 2 near speedway

    //Entradas
    AddStaticPickup(1318, 1, 1127.0536, -2036.8794, 69.8837);      // Entrada Prefeitura
    AddStaticPickup(1318, 1, 1831.8425,-1996.0016,13.5469);      // Entrada HQ aztecas
    //AddStaticPickup(1318, 1, 1257.6265,-785.2055,92.0302);       // Entrada Russa Hq
    AddStaticPickup(1318, 1, 1524.630249,-1677.800781,6.218750); // Entrada Departamento2
    AddStaticPickup(1318, 1, 1564.748657,-1666.576538,28.395606);// Entrada Subida
    AddStaticPickup(1318, 1, 1022.4554,-1121.7389,23.8718);      // Entrada PIMP entrada
    //AddStaticPickup(1318, 1, 1073.0619,-344.5148,73.9922);       // Entrada Hitman Agency entrance
    AddStaticPickup(1240, 1, 279.3000,1853.5619,8.7649);         // Entrada area51 health
    AddStaticPickup(1247, 1, 1554.6616,-1675.8470,16.1953);      // Entrada DP LS
    //AddStaticPickup(1318, 1, 2770.6277,-1627.9957,12.1775);      // Entrada hq pcc
    //AddStaticPickup(1318, 1, 2552.7019,-958.2281,82.6375);       // Entrada hq cv
    AddStaticPickup(1318, 1, 1836.1659,-1682.4061,13.3593);      // Entrada Alhambra
    AddStaticPickup(1318, 1, 2264.4968,1675.8313,1090.4453);     // Entrada b
    AddStaticPickup(1318, 1, 1548.6365,-1363.7911,326.2183);     // Entrada a
    AddStaticPickup(1318, 1, 1382.1472,-1088.7833,28.2106);     //  Entada advogados
    AddStaticPickup(1318, 1, 2266.3604,1647.5522,1084.2344);     // Entrada elevador
    AddStaticPickup(1318, 1, 1571.0620,-1336.6965,16.4844);      // Entrada entradaroubo
    AddStaticPickup(1318, 1, 2104.7605,-1806.4418,13.5547);      // Entrada well
    AddStaticPickup(1318, 1, 928.3212,-1352.9554,13.3438);       // Entrada chuck
    AddStaticPickup(1318, 1, 1038.2190,-1340.5662,13.7431);      // Entrada rosca
    AddStaticPickup(1318, 1, 2196.2703,1677.0828,12.3672);      // Entrada entrada cassino
    //AddStaticPickup(1318, 1, 2794.0159,-2025.8346,13.5620);      // Lowrides HQ
    AddStaticPickup(1318, 1, 2495.3159,-1691.0486,14.7656);      // Entrada Grove Street HQ
    AddStaticPickup(1318, 1, 2229.4399,-1721.6360,13.5647);      // Entrada gym enter
    AddStaticPickup(1318, 1, 1940.4210,-2115.9280,13.6953);      // Entrada put enter
    AddStaticPickup(1318, 1, 1199.2856,-918.5673,43.1198);       // Entrada burger shot 1 enter
    AddStaticPickup(1318, 1, 810.4879,-1616.1256,13.5469);       // Entrada burger shot 2 enter
    AddStaticPickup(1318, 1, 1631.7124,-1172.2827,24.0843);      // Entrada Loteria
    AddStaticPickup(1239, 1, 2166.3228,-1671.6299,15.0740);      // Entrada Enter HQ ballas
    AddStaticPickup(1318, 1, 2421.4075,-1219.6160,25.5380);      // Entrada Putero LS
    AddStaticPickup(1318, 1, 690.3526,-1276.0282,13.5598);       // Entrada Da Nang Boys Enter
    AddStaticPickup(1318, 1, 648.8079,-1353.8242,13.5471);       // Entrada a nuncio entrar
    AddStaticPickup(1318, 1, 611.0873,-583.5005,18.2109);        // Entrada pr subir
    AddStaticPickup(1318, 1, -1541.6155,415.0150,7.1875);      // Entrada FA entrar
    //AddStaticPickup(1318, 1, 970.0628,-1520.6289,13.5503);      // Entrada drifters


    new label[128];

    for(new i = 0; i < MAX_PIX; i ++)
    {
        format(label, sizeof(label), "Pixação\n\nGang : %s",GetPixacaoOwner(i));
		PixLabel[i] = Create3DTextLabel(label ,PixColors[Pixacao[i][Dono]], Pixacao[i][PixX], Pixacao[i][PixY], Pixacao[i][PixZ]+1.3, 12.5, 0, true);
	}

	for(new h = 0; h < MAX_HOUSES; h++)
	{
		if(HouseInfo[h][hOwned] == 1)
		{
			HouseInfo[h][hIcon] = CreatePickup(1239, 1, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
		  	if(HouseInfo[h][hRentabil] == 0)
				format(label, sizeof(label), "Proprietário da casa: %s \nNível : %d",hOwner[h],HouseInfo[h][hLevel]);
			else
				format(label, sizeof(label), "Proprietário da casa: %s \nAluguel: R$ %d - Nível : %d \nDigite /alugarcasa para alugar um quarto",hOwner[h],HouseInfo[h][hRent],HouseInfo[h][hLevel]);

			HouseInfo[h][HouseLabel] = Create3DTextLabel(label ,COLOR_WHITE, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+1.0,30.0, 0, true);
		}
		if(HouseInfo[h][hOwned] == 0)
		{
			HouseInfo[h][hIcon] = CreatePickup(1273, 1, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
 			format(label, sizeof(label), "A casa está a venda \n Descricão: %s \n Preco: R$ %d - Nível : %d\n Para comprar digite /comprarcasa",hDiscription[h],HouseInfo[h][hValue],HouseInfo[h][hLevel]);
			HouseInfo[h][HouseLabel] = Create3DTextLabel(label ,COLOR_WHITE, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+1.0,30.0, 0, true);
		}
	}

	for(new h = 0; h < MAX_BIZ; h++)
    {
        BizzInfo[h][BizzIcon] = CreatePickup(GetBizPickupModel(h), 1, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]);
        BizzInfo[h][BizzLabel] = Create3DTextLabel(GetBizString(h), 0xFFFFFFFF, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ] + 0.5, 20.0, 0, 1);
	}

/*    for(new b = 0; b < MAX_AREASAZUIS; b++)
        AreasAzuis[b][azGangZoneID] = GangZoneCreate(AreasAzuis[b][azMinPosX], AreasAzuis[b][azMinPosY], AreasAzuis[b][azMaxPosX], AreasAzuis[b][azMaxPosY]);  */

	#include "gamemodes/neon/onGameModeInit.pwn"

	Create3DTextLabel("Armazem de Drogas Pessoal\n\n{FF0000}/PegarDrogas\n{FF0000}/GuardarDrogas", 0xFFFFFFFF, 1857.2000, -1870.5500, 14.0000, 30.0, 0, true); //Armazem de Drogas Pessoal
//	Create3DTextLabel("Armazem de Drogas da Gang\n\n{FF0000}/PegarDrogas\n{FF0000}/GuardarDrogas", 0xFFFFFFFF, 1941.0000, -1984.5000, 13.5500, 30.0, 0, true); //Armazem de Drogas da Gang
	//Create3DTextLabel("Mini-Pizzaria da Praça\n\n{FF0000}/Pizzaria", 0xFFFFFFFF, 1477.2084,-1605.0364,13.7969, 30.0, 0, true); //Mini-Pizzaria da Praça
	Create3DTextLabel("Aperte {FFFF00}'F'{FFFFFF} para Equipar.", 0xFFFFFFFF, 375.5500, 180.8200, 1014.1875, 30.0, 0, true); //Equipar Prefeito
	//Create3DTextLabel("{FFC801}Digite {FF0000}/compraracessorios {FFC801}para comprar um acessorio.", 0xFFFFFFFF, 503.2003,-1862.4745,3.6517, 15, 0, 1);

	SetTimer("GlobalTimer", 1000, true);
	SetTimer("GangZonesCheck", 1000, true); // default = 500
    SetTimer("CheckAreasAzuis", 3000, true);
    SetTimer("Prever", 120*60*1000, true);
	SetTimer("StealingTimer", 10000, true);
    SetTimer("SyncClock",1000,true);
	SetTimer("CheckRadars", 1000, true);
	SetTimer("Licenses", 1000, true);
	SetTimer("SetPlayerUnjail", 1000, true);
	SetTimer("CarCheck", 30000, true);
	SetTimer("CheckAFK", 180000, true);
	SetTimer("GranaTerritorios", (10*60*1000), true); //Dez minutos
	SetTimer("CheckMH",1000,true);
	SetTimer("CheckGas", 500, true);
	SetTimer("Mensagens",10*60*1000,true);
	SetTimer("MensagensGuerra",6*60*1000,true);
    SetTimer("Checkpedagio",500, true);
    SetTimer("CheckWeaponHack",1000,true);
    SetTimer("CheckPayDay", (1*1000), true);
    SetTimer("ScoreUpdate", (60*1000), true);
    SetTimer("SavePlayerCars", (5*60*1000), true);
    SetTimer("SaveServer", (10*60*1000), true);
    if(USE_MASK) SetTimer("TimerNome", (5*1000), true);
    UpdateTextLabelCarroVIP();
    UpdateTextLabelCarro();
    OnPropUpdate();

    SetAllowedJobs();

	//Debug("Bot_BLS Conectado");

    //ReadLockedCars();
    for(new i = 0; i < sizeof(VeiculosApreendidos); i++)
    {
        if(VeiculosApreendidos[i] != -1)
            SetVehicleToRespawn(VeiculosApreendidos[i]);
        else
            break;
    }

    for(new i = 0; i < MAX_ULTIMOS_IPS; i++)
    {
        format(UltimosIPs[i], 16, "255.255.255.255");
        format(UltimosIPsNome[i], MAX_PLAYER_NAME, "Ninguem");
    }

	for(new i = 0; i < sizeof(PlantacaoObj); i++)
    {
        GetDynamicObjectPos(PlantacaoObj[i], PlantacaoObjFinalPos[i][0], PlantacaoObjFinalPos[i][1], PlantacaoObjFinalPos[i][2]);
        SetDynamicObjectPos(PlantacaoObj[i], PlantacaoObjFinalPos[i][0], PlantacaoObjFinalPos[i][1], PlantacaoObjFinalPos[i][2] - 2.0);
    }
    for(new i = 0; i < sizeof(Plantacao); i++)
        PlantacaoText[i] = Create3DTextLabel(GetPlantacaoString(i), 0x3C7035FF, Plantacao[i][plantPos][0], Plantacao[i][plantPos][1], Plantacao[i][plantPos][2], 30.0, 0, true);

    Debug("OnGameModeInit Completo");
	return true;
}

public OnGameModeExit()
{
	//Text Draws Login
	TextDrawHideForAll(TextDrawLogin0);
	TextDrawDestroy(TextDrawLogin0);
	TextDrawHideForAll(TextDrawLogin1);
	TextDrawDestroy(TextDrawLogin1);
	TextDrawHideForAll(TextDrawLogin2);
	TextDrawDestroy(TextDrawLogin2);
	TextDrawHideForAll(TextDrawLogin3);
	TextDrawDestroy(TextDrawLogin3);
	TextDrawHideForAll(TextDrawLogin4);
	TextDrawDestroy(TextDrawLogin4);
	TextDrawHideForAll(TextDrawLogin5);
	TextDrawDestroy(TextDrawLogin5);
	TextDrawHideForAll(TextDrawLogin6);
	TextDrawDestroy(TextDrawLogin6);
	TextDrawHideForAll(TextDrawLogin7);
	TextDrawDestroy(TextDrawLogin7);
	TextDrawHideForAll(TextDrawLogin8);
	TextDrawDestroy(TextDrawLogin8);
	TextDrawHideForAll(TextDrawLogin9);
	TextDrawDestroy(TextDrawLogin9);
	TextDrawHideForAll(TextDrawLogin10);
	TextDrawDestroy(TextDrawLogin10);
	TextDrawHideForAll(TextDrawLogin11);
	TextDrawDestroy(TextDrawLogin11);
	TextDrawHideForAll(TextDrawLogin12);
	TextDrawDestroy(TextDrawLogin12);
	TextDrawHideForAll(TextDrawLogin13);
	TextDrawDestroy(TextDrawLogin13);
	
	Elevator_Destroy();

    SaveServer();
	SavePlayerCars();

    //WriteLockedCars();
	//EleicoesFuncao(5);

	DOF2_Exit();
	#include "gamemodes/db/onGameModeExit.pwn"
	return true;
}

public OnDynamicObjectMoved(objectid)
{
    new Float:x, Float:y, Float:z;
	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
		if(objectid == Obj_FloorDoors[i][0])
		{
		    GetDynamicObjectPos(Obj_FloorDoors[i][0], x, y, z);

		    if(x < X_DOOR_L_OPENED - 0.5)   // Some floor doors have shut, move the elevator to next floor in queue:
		    {
				Elevator_MoveToFloor(ElevatorQueue[0]);
				RemoveFirstQueueFloor();
			}
		}
	}

	if(objectid == Obj_Elevator)   // The elevator reached the specified floor.
	{
	    KillTimer(ElevatorBoostTimer);  // Kills the timer, in case the elevator reached the floor before boost.

	    FloorRequestedBy[ElevatorFloor] = INVALID_PLAYER_ID;

	    Elevator_OpenDoors();
	    Floor_OpenDoors(ElevatorFloor);

	    GetDynamicObjectPos(Obj_Elevator, x, y, z);
	    Label_Elevator	= Create3DTextLabel("{CCCCCC}Pressione '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' para usar o elevador", 0xCCCCCCAA, 1784.9822, -1302.0426, z - 0.9, 4.0, 0, 1);

	    ElevatorState 	= ELEVATOR_STATE_WAITING;
	    SetTimer("Elevator_TurnToIdle", ELEVATOR_WAIT_TIME, 0);
	}

	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    Binco_OnPlayerClickTextDraw(playerid, clickedid);
    return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    Binco_OPCPTDraw(playerid, playertextid);
    return 1;
}

forward Reparar(playerid);
public Reparar(playerid)
{
	new car = GetPlayerVehicleID(playerid);
	RepairVehicle(car);
    SetVehicleHealth(car, 1000.0);
    GetVehicleParamsNew(car);
	SetVehicleParamsEx(car, VehicleInfo[car][vEngine], lights, alarm, doors, false, boot, objective);
//	CheckGas();
}

public Descongelar(playerid)
{
	Congelado[playerid] = 0;
	return TogglePlayerControllable(playerid,true);
}

public Congelar(playerid)
{
    Congelado[playerid] = 1;
	return TogglePlayerControllable(playerid,false);
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(IsPlayerNPC(playerid) || IsPlayerNPC(clickedplayerid)) return true;
	new message[128];
	if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) == 0)
	{
		if(Player[playerid][pPhoneBook] == 1)
		{
			format(message, 128, "[Agenda]: {FFFFFF}O número de {00FFFF}%s {FFFFFF}é %d", ReturnPlayer(clickedplayerid), Player[clickedplayerid][pPnumber]);
			SendClientMessage(playerid, 0x1E90FFFF, message);
		}
		else
		{
		    return 1;
		}
	}
	else
	{
	    ShowStats(playerid, clickedplayerid, STATUS_ADM);
	}
	return true;
}

public LoadFightStyle(playerid)
{
	if(Player[playerid][pLuta] == 1)
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);

	if(Player[playerid][pLuta] == 2)
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);

	if(Player[playerid][pLuta] == 3)
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);

	if(Player[playerid][pLuta] == 4)
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);

	if(Player[playerid][pLuta] == 5)
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);

	if(Player[playerid][pLuta] == 6)
		SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);

	return true;
}

public ReduceTimer(playerid)
{
	if(IsPlayerConnected(playerid))
	    if(ReduceTime[playerid] == 1)
			ReduceTime[playerid] = 0;
}

public ReduceTimerArmas(playerid)
{
	if(IsPlayerConnected(playerid))
	    if(ReduceTimeArmas[playerid] == 1)
			ReduceTimeArmas[playerid] = 0;
}

forward PoderGuerra();
public PoderGuerra()
{
    PodeGuerra = true;
    return 1;
}

stock GetGuerraID(playerid)
{
    if(GetPlayerOrg(playerid) == 3) return 0;
    else if(GetPlayerOrg(playerid) == 17) return 1;
    return 2;
}

stock GetGuerraIDEx(Team)
{
    if(Team == 3) return 0;
    else if(Team == 17) return 1;
    return 2;
}

public guerrat()
{
	if(InGuerra == 1)
		InGuerra = 0;

	new TotalPontos = Guerra[GuerraPontos][0], Controlador = 0;
	for(new i = 1; i < sizeof(Guerra[]); i++)
	{
	    if(Guerra[GuerraPontos][i] > TotalPontos)
	    {
	        Controlador = i;
	        TotalPontos = Guerra[GuerraPontos][i];
	    }
	}

	if(Controlador == 0) ControleLS = 3;
	else if(Controlador == 1) ControleLS = 17;

	GangZoneStopFlashForAll(GuerraGZ);
	GangZoneHideForAll(GuerraGZ);
	GuerraEsconder();
	AllowExplosions = false;
	PodeGuerra = false;

    SetTimer("PoderGuerra", 60*60*1000, false);

	new Premio = (100000/Membros(ControleLS));

	foreach(new I: Player)
	{
	    if(Player[I][pLeader] == ControleLS)
	    {
	        GivePlayerGP(I, Premio);
	        SendClientMessage(I,SERVER_INFO,"{FF0000}{FF0000}[Info]:{FFFFFF}{FFFFFF} Parabéns! Sua ORG venceu a guerra!");
		}
		if(Player[I][pMember] == ControleLS)
		{
		    GivePlayerGP(I, Premio);
		    SendClientMessage(I,SERVER_INFO,"{FF0000}{FF0000}[Info]:{FFFFFF}{FFFFFF} Parabéns! Sua ORG venceu a guerra!");
		}
	}
}

public UsinaTimer(playerid)
{
	if(IsPlayerConnected(playerid))
	    if(UsinaTime[playerid] == 1)
			UsinaTime[playerid] = 0;
}

public UsarDrogaTimer(playerid)
{
	if(IsPlayerConnected(playerid))
	    if(UsarDrogaTime[playerid] == 1)
			UsarDrogaTime[playerid] = 0;
}

public SairTimer(giveplayerid)
{
	if(IsPlayerConnected(giveplayerid))
	{
	    if(SairTime[giveplayerid] == 0)
	    {
	        new Float:Pos[3];
  			GetPlayerPos(giveplayerid, Pos[0], Pos[1], Pos[2]);
    		if(Pos[0] != LastPos[0] || Pos[1] != LastPos[1])
    		{
				SendClientMessage(giveplayerid, COLOR_ORANGE, "Você se moveu e o processo foi cancelado.");
				return 0;
			}
			SairTime[giveplayerid] = 1;
            if(AdminDuty[giveplayerid] != MODOSA_TRABALHANDO)
            {
                SendClientMessage(giveplayerid, COLOR_ORANGE,"- Você não se moveu e foi kickado por ficar inativo. -");
    			Kick(giveplayerid);
            }
	    }
	}
	return 0;
}

public PuxarTimer(giveplayerid, vehid)
{
	if(IsPlayerConnected(giveplayerid))
	{
	    if(PuxarTime[giveplayerid] == 0)
	    {
	        new Float:Pos[3];
  			GetPlayerPos(giveplayerid, Pos[0], Pos[1], Pos[2]);
    		if(Pos[0] != LastPos[0] || Pos[1] != LastPos[1])
				return 0;

           	new dist = CheckPlayerDistanceToVehicle(3.0, giveplayerid, vehid);
	       	if(dist)
			{
				PuxarTime[giveplayerid] = 1;
				SafePutPlayerInVehicle(giveplayerid, vehid, 1);
				SendClientMessage(giveplayerid, COLOR_RED,"Você foi puxado para dentro do carro!");
			}
	    }
	}
	return 0;
}

public batercarteiratimer(playerid)
{
	if(IsPlayerConnected(playerid))
	    if(batercarteiratime[playerid] == 1)
			batercarteiratime[playerid] = 0;
}
public MaterialTimer(playerid)
{
	if(IsPlayerConnected(playerid))
	    if(MaterialTime[playerid] == 1)
			MaterialTime[playerid] = 0;
}

public BombTimer(playerid)
{
	if(IsPlayerConnected(playerid))
	    if(BombTime[playerid] == 1)
			BombTime[playerid] = 0;
}

public AtentadoTimer(playerid)
{
	if(IsPlayerConnected(playerid))
	    if(AtentadoTime[playerid] == 1)
			AtentadoTime[playerid] = 0;
}

public CarroBombaTimer(playerid)
{
	if(IsPlayerConnected(playerid))
	    if(CarroBombaTime[playerid] == 1)
			CarroBombaTime[playerid] = 0;
}

public JornalTimer(playerid)
{
	if(IsPlayerConnected(playerid))
	    if(JornalTime[playerid] == 1)
			JornalTime[playerid] = 0;
}

stock strvalEx( const string[] ) // fix for strval-bug with > 50 letters.
{
	// written by mabako in less than a minute :X
	if( strlen( string ) >= 50 )
		return 0; // It will just return 0 if the string is too long
	return strval(string);
}

public OnPlayerEnterFood(playerid, foodid)
{
	switch (foodid)
	{
		case 1: // chicken
		{
            ShowMenuForPlayer(chickenmenu, playerid);
			SetPlayerInterior(playerid, 9);
			Player[playerid][pInt] = 9;
			SafeSetPlayerPos(playerid,365.7793,-9.1699,1001.8516);
			SetPlayerCheckpoint(playerid, 368.9714,-6.2486,1001.8516, 1.5);
			GameTextForPlayer(playerid, "~w~Cluckin Bell", 5000, 1);
			InAFoodPlace[playerid] = 1;
		}
		case 2: // burger
		{
            ShowMenuForPlayer(burgermenu, playerid);
			SetPlayerInterior(playerid, 10);
			Player[playerid][pInt] = 10;
			SafeSetPlayerPos(playerid,366.0324,-72.6400,1001.5078);
			SetPlayerCheckpoint(playerid, 376.8571,-67.6620,1001.5151, 1.5);
			GameTextForPlayer(playerid, "~w~Burger Shot", 5000, 1);
			InAFoodPlace[playerid] = 2;
		}
		case 3: // pizza
		{
            ShowMenuForPlayer(pizzamenu, playerid);
			SetPlayerInterior(playerid, 5);
			Player[playerid][pInt] = 5;
			SafeSetPlayerPos(playerid,372.4117,-130.4577,1001.4922);
			SetPlayerCheckpoint(playerid, 375.6895,-118.9683,1001.4995, 1.5);
			GameTextForPlayer(playerid, "~w~Well Stacked Pizza", 5000, 1);
			InAFoodPlace[playerid] = 3;
		}
		case 4: // donuts
		{
            ShowMenuForPlayer(donutshop, playerid);
			SetPlayerInterior(playerid, 17);
			Player[playerid][pInt] = 17;
			SafeSetPlayerPos(playerid,377.5237,-191.6597,1000.6328);
			SetPlayerCheckpoint(playerid, 379.0611,-186.6032,1000.6328, 0.8);
			GameTextForPlayer(playerid, "~w~Jim's sticky ring", 5000, 1);
			InAFoodPlace[playerid] = 4;
		}
	}
	return true;
}
public OnPlayerExitFood(playerid)
{
	DisablePlayerCheckpoint(playerid);

	InAFoodPlace[playerid] = 0;
	return true;
}

stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
	    new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
	    GetPlayerPos(playerid,PX,PY,PZ);
	    GetVehiclePos(vehicleid, X,Y,Z);
	    new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
	    if(Distance <= radi*radi)
	    {
	        return true;
	    }
	}
	return 0;
}

stock Float:GetPlayerDistanceToVehicle(playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
	    new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
	    GetPlayerPos(playerid,PX,PY,PZ);
	    GetVehiclePos(vehicleid, X,Y,Z);
	    new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
        return Distance;
	}
	return 99999.0;
}

stock PegarVeiculoMaisPerto(playerid, Float:Range, LastVehicle = INVALID_VEHICLE_ID)
{
	new Float:DistanciaMinima = 99999.0, Float:UltimaDistancia, VeiculoId = INVALID_VEHICLE_ID;
	for(new i = 0; i < MAX_VEHICLES; i++)
    {
	    if(IsVehicleSpawned(i) && LastVehicle != i)
	    {
            UltimaDistancia = GetPlayerDistanceToVehicle(playerid, i);
            if(UltimaDistancia < DistanciaMinima)
			{
			    DistanciaMinima = UltimaDistancia;
			    VeiculoId = i;
			}
	    }
	}
	if(DistanciaMinima > Range) return INVALID_VEHICLE_ID;
	return VeiculoId;
}

public SaveTrunk(idx)
{
    //printf("1. SaveTrunk(%d)", idx);
	new filename[64];
	format(filename, 64, "/RPG/veiculos/%d.txt", idx);
	print(filename);

	if(!fexist(filename)) DOF2_CreateFile(filename);

	DOF2_SetInt(filename, "Arma1", TrunkInfo[idx][TrunkArmas][0]);
	DOF2_SetInt(filename, "Arma2", TrunkInfo[idx][TrunkArmas][1]);
	DOF2_SetInt(filename, "Arma3", TrunkInfo[idx][TrunkArmas][2]);
	DOF2_SetInt(filename, "Arma4", TrunkInfo[idx][TrunkArmas][3]);
	DOF2_SetInt(filename, "Arma5", TrunkInfo[idx][TrunkArmas][4]);
	DOF2_SetInt(filename, "Bala1", TrunkInfo[idx][TrunkBalas][0]);
	DOF2_SetInt(filename, "Bala2", TrunkInfo[idx][TrunkBalas][1]);
	DOF2_SetInt(filename, "Bala3", TrunkInfo[idx][TrunkBalas][2]);
	DOF2_SetInt(filename, "Bala4", TrunkInfo[idx][TrunkBalas][3]);
	DOF2_SetInt(filename, "Bala5", TrunkInfo[idx][TrunkBalas][4]);
	DOF2_SetInt(filename, "Drogas", TrunkInfo[idx][TrunkDrogas]);
	DOF2_SetInt(filename, "Materiais", TrunkInfo[idx][TrunkMateriais]);
	DOF2_SetInt(filename, "Cordas", TrunkInfo[idx][TrunkCordas]);
    //printf("2. SaveTrunk(%d)", idx);
	DOF2_SaveFile();
	//printf("3. SaveTrunk(%d)", idx);
	return true;
}

public LoadTrunk()
{
	new filename[64];
	for(new idx = 0; idx < MAX_VEHICLES; idx++)
	{
	    format(filename, 64, "/RPG/veiculos/%d.txt", idx);
		if(fexist(filename))
		{
		    TrunkInfo[idx][TrunkArmas][0] = DOF2_GetInt(filename, "Arma1");
		    TrunkInfo[idx][TrunkArmas][1] = DOF2_GetInt(filename, "Arma2");
		    TrunkInfo[idx][TrunkArmas][2] = DOF2_GetInt(filename, "Arma3");
		    TrunkInfo[idx][TrunkArmas][3] = DOF2_GetInt(filename, "Arma4");
		    TrunkInfo[idx][TrunkArmas][4] = DOF2_GetInt(filename, "Arma5");
		    TrunkInfo[idx][TrunkBalas][0] = DOF2_GetInt(filename, "Bala1");
		    TrunkInfo[idx][TrunkBalas][1] = DOF2_GetInt(filename, "Bala2");
		    TrunkInfo[idx][TrunkBalas][2] = DOF2_GetInt(filename, "Bala3");
		    TrunkInfo[idx][TrunkBalas][3] = DOF2_GetInt(filename, "Bala4");
		    TrunkInfo[idx][TrunkBalas][4] = DOF2_GetInt(filename, "Bala5");
		    TrunkInfo[idx][TrunkDrogas] = DOF2_GetInt(filename, "Drogas");
		    TrunkInfo[idx][TrunkMateriais] = DOF2_GetInt(filename, "Materiais");
		    TrunkInfo[idx][TrunkCordas] = DOF2_GetInt(filename, "Cordas");
		}
	}
	return true;
}

stock LoadTrunkEx(Dono_[], idx, vNum)
{
	new filename[64];
    format(filename, 64, "/RPG/veiculos/%s_-1.txt", Dono_);
    if(fexist(filename))
    {
	    TrunkInfo[idx][TrunkArmas][0] = DOF2_GetInt(filename, "Arma1");
	    TrunkInfo[idx][TrunkArmas][1] = DOF2_GetInt(filename, "Arma2");
	    TrunkInfo[idx][TrunkArmas][2] = DOF2_GetInt(filename, "Arma3");
	    TrunkInfo[idx][TrunkArmas][3] = DOF2_GetInt(filename, "Arma4");
	    TrunkInfo[idx][TrunkArmas][4] = DOF2_GetInt(filename, "Arma5");
	    TrunkInfo[idx][TrunkBalas][0] = DOF2_GetInt(filename, "Bala1");
	    TrunkInfo[idx][TrunkBalas][1] = DOF2_GetInt(filename, "Bala2");
	    TrunkInfo[idx][TrunkBalas][2] = DOF2_GetInt(filename, "Bala3");
	    TrunkInfo[idx][TrunkBalas][3] = DOF2_GetInt(filename, "Bala4");
	    TrunkInfo[idx][TrunkBalas][4] = DOF2_GetInt(filename, "Bala5");
	    TrunkInfo[idx][TrunkDrogas] = DOF2_GetInt(filename, "Drogas");
	    TrunkInfo[idx][TrunkMateriais] = DOF2_GetInt(filename, "Materiais");
	    TrunkInfo[idx][TrunkCordas] = DOF2_GetInt(filename, "Cordas");

        format(filename, 64, "/RPG/veiculos/%s_0.txt", Dono_);
        DOF2_CreateFile(filename);

    	DOF2_SetInt(filename, "Arma1", TrunkInfo[idx][TrunkArmas][0]);
    	DOF2_SetInt(filename, "Arma2", TrunkInfo[idx][TrunkArmas][1]);
    	DOF2_SetInt(filename, "Arma3", TrunkInfo[idx][TrunkArmas][2]);
    	DOF2_SetInt(filename, "Arma4", TrunkInfo[idx][TrunkArmas][3]);
    	DOF2_SetInt(filename, "Arma5", TrunkInfo[idx][TrunkArmas][4]);
    	DOF2_SetInt(filename, "Bala1", TrunkInfo[idx][TrunkBalas][0]);
    	DOF2_SetInt(filename, "Bala2", TrunkInfo[idx][TrunkBalas][1]);
    	DOF2_SetInt(filename, "Bala3", TrunkInfo[idx][TrunkBalas][2]);
    	DOF2_SetInt(filename, "Bala4", TrunkInfo[idx][TrunkBalas][3]);
    	DOF2_SetInt(filename, "Bala5", TrunkInfo[idx][TrunkBalas][4]);
    	DOF2_SetInt(filename, "Drogas", TrunkInfo[idx][TrunkDrogas]);
    	DOF2_SetInt(filename, "Materiais", TrunkInfo[idx][TrunkMateriais]);
    	DOF2_SetInt(filename, "Cordas", TrunkInfo[idx][TrunkCordas]);
        DOF2_SaveFile();
        return 1;
    }

    format(filename, 64, "/RPG/veiculos/%s_%d.txt", Dono_, vNum);
	if(fexist(filename))
	{
	    TrunkInfo[idx][TrunkArmas][0] = DOF2_GetInt(filename, "Arma1");
	    TrunkInfo[idx][TrunkArmas][1] = DOF2_GetInt(filename, "Arma2");
	    TrunkInfo[idx][TrunkArmas][2] = DOF2_GetInt(filename, "Arma3");
	    TrunkInfo[idx][TrunkArmas][3] = DOF2_GetInt(filename, "Arma4");
	    TrunkInfo[idx][TrunkArmas][4] = DOF2_GetInt(filename, "Arma5");
	    TrunkInfo[idx][TrunkBalas][0] = DOF2_GetInt(filename, "Bala1");
	    TrunkInfo[idx][TrunkBalas][1] = DOF2_GetInt(filename, "Bala2");
	    TrunkInfo[idx][TrunkBalas][2] = DOF2_GetInt(filename, "Bala3");
	    TrunkInfo[idx][TrunkBalas][3] = DOF2_GetInt(filename, "Bala4");
	    TrunkInfo[idx][TrunkBalas][4] = DOF2_GetInt(filename, "Bala5");
	    TrunkInfo[idx][TrunkDrogas] = DOF2_GetInt(filename, "Drogas");
	    TrunkInfo[idx][TrunkMateriais] = DOF2_GetInt(filename, "Materiais");
	    TrunkInfo[idx][TrunkCordas] = DOF2_GetInt(filename, "Cordas");
	}
	return true;
}

stock SaveTrunkEx(Nome_[], idx, vNum)
{
	//printf("1. SaveTrunkEx(%s, %d)", Nome_, idx);
	new filename[64];
    format(filename, 64, "/RPG/veiculos/%s_%d.txt", Nome_, vNum);
    print(filename);
    if(!fexist(filename)) DOF2_CreateFile(filename);

	DOF2_SetInt(filename, "Arma1", TrunkInfo[idx][TrunkArmas][0]);
	DOF2_SetInt(filename, "Arma2", TrunkInfo[idx][TrunkArmas][1]);
	DOF2_SetInt(filename, "Arma3", TrunkInfo[idx][TrunkArmas][2]);
	DOF2_SetInt(filename, "Arma4", TrunkInfo[idx][TrunkArmas][3]);
	DOF2_SetInt(filename, "Arma5", TrunkInfo[idx][TrunkArmas][4]);
	DOF2_SetInt(filename, "Bala1", TrunkInfo[idx][TrunkBalas][0]);
	DOF2_SetInt(filename, "Bala2", TrunkInfo[idx][TrunkBalas][1]);
	DOF2_SetInt(filename, "Bala3", TrunkInfo[idx][TrunkBalas][2]);
	DOF2_SetInt(filename, "Bala4", TrunkInfo[idx][TrunkBalas][3]);
	DOF2_SetInt(filename, "Bala5", TrunkInfo[idx][TrunkBalas][4]);
	DOF2_SetInt(filename, "Drogas", TrunkInfo[idx][TrunkDrogas]);
	DOF2_SetInt(filename, "Materiais", TrunkInfo[idx][TrunkMateriais]);
	DOF2_SetInt(filename, "Cordas", TrunkInfo[idx][TrunkCordas]);
	//printf("2. SaveTrunkEx(%s, %d)", Nome_, idx);
	DOF2_SaveFile();
	//printf("3. SaveTrunkEx(%s, %d)", Nome_, idx);
	return true;
}

stock UnloadTrunk(idx)
{
    TrunkInfo[idx][TrunkArmas][0] = 0;
    TrunkInfo[idx][TrunkArmas][1] = 0;
    TrunkInfo[idx][TrunkArmas][2] = 0;
    TrunkInfo[idx][TrunkArmas][3] = 0;
    TrunkInfo[idx][TrunkArmas][4] = 0;
    TrunkInfo[idx][TrunkBalas][0] = 0;
    TrunkInfo[idx][TrunkBalas][1] = 0;
    TrunkInfo[idx][TrunkBalas][2] = 0;
    TrunkInfo[idx][TrunkBalas][3] = 0;
    TrunkInfo[idx][TrunkBalas][4] = 0;
    TrunkInfo[idx][TrunkDrogas] = 0;
    TrunkInfo[idx][TrunkMateriais] = 0;
    TrunkInfo[idx][TrunkCordas] = 0;
	return true;
}

stock SaveGuerra()
{
    DOF2_SetBool(GuerraFile, "0", PodeGuerraOrg[0]);
    DOF2_SetBool(GuerraFile, "1", PodeGuerraOrg[1]);
    DOF2_SetInt(GuerraFile, "ControleLS", ControleLS);
    DOF2_SaveFile();
    return 1;
}

stock LoadGuerra()
{
    if(!fexist(GuerraFile))
    {
        DOF2_CreateFile(GuerraFile);
        return 0;
    }

    PodeGuerraOrg[0] = DOF2_GetBool(GuerraFile, "0");
    PodeGuerraOrg[1] = DOF2_GetBool(GuerraFile, "1");
    ControleLS = DOF2_GetInt(GuerraFile, "ControleLS");
    return 1;
}

public SprayProcurado(playerid)
{
    if(IsPlayerConnected(playerid))
	{
         LimparNivelSpray[playerid] = 0;
	}
}

public BackupClearGang(playerid, calledbytimer)
{
	if(IsPlayerConnected(playerid))
	{
        new teamnumber;
	   	if(Player[playerid][pLeader] != 0) teamnumber = Player[playerid][pLeader];
	   	else if(Player[playerid][pMember] != 0) teamnumber = Player[playerid][pMember];
		if(Player[playerid][pRequestingBackup] == 1)
		{
			Player[playerid][pRequestingBackup] = 0;
			foreach (new i : Player)
			{
			    if(IsPlayerConnected(i))
				{
					if(Player[i][pMember] == teamnumber || Player[i][pLeader] == teamnumber)
					{
                            SetPlayerMarkerForPlayer(i, playerid, OrgsColors[GetPlayerOrg(i)]);
                            SetPlayerMarkerForPlayer(i, playerid, OrgsColors[GetPlayerOrg(i)]);
					}
				}
			}
			if(calledbytimer != 1)
			{
				SendClientMessage(playerid, COLOR_PM, "Seu pedido de reforço foi cancelado.");
			}
		}
		else
		{
			if(calledbytimer != 1)
			{
				SendClientMessage(playerid, COLOR_RED, "Você ainda não pediu reforço.");
			}
		}
	}
	return true;
}

public BackupClear(playerid, calledbytimer)
{
	if(IsPlayerConnected(playerid))
	{
		//if(Player[playerid][pMember] == TEAM_PM||Player[playerid][pLeader] == TEAM_PM||Player[playerid][pMember] == TEAM_PF||Player[playerid][pLeader] == TEAM_PF||Player[playerid][pMember] == TEAM_FA||Player[playerid][pLeader] == TEAM_FA||Player[playerid][pMember] == TEAM_MUNICIPAL||Player[playerid][pLeader] == TEAM_MUNICIPAL||Player[playerid][pMember] == TEAM_BOPE||Player[playerid][pLeader] == TEAM_BOPE)
        if(IsACopEx(playerid))
        {
			if(Player[playerid][pRequestingBackup] == 1)
			{
			    foreach (new i : Player)
				{
				    //if(Player[playerid][pMember] == TEAM_PM||Player[playerid][pLeader] == TEAM_PM||Player[playerid][pMember] == TEAM_PF||Player[playerid][pLeader] == TEAM_PF||Player[playerid][pMember] == TEAM_FA||Player[playerid][pLeader] == TEAM_FA||Player[playerid][pMember] == TEAM_MUNICIPAL||Player[playerid][pLeader] == TEAM_MUNICIPAL||Player[playerid][pMember] == TEAM_BOPE||Player[playerid][pLeader] == TEAM_BOPE||Player[playerid][pMember] == TEAM_PCIVIL||Player[playerid][pLeader] == TEAM_PCIVIL)
                    if(IsACopEx(i))
                    {
						SetPlayerMarkerForPlayer(i, playerid, OrgsColors[GetPlayerOrg(i)]);
						SetPlayerMarkerForPlayer(i, playerid, OrgsColors[GetPlayerOrg(i)]);
					}
				}
				if(calledbytimer != 1)
				{
					SendClientMessage(playerid, COLOR_PM, "Seu pedido de reforco foi cancelado.");
				}
				else
				{
					SendClientMessage(playerid, COLOR_PM, "Seu pedido de reforco foi cancelado automaticamente.");
				}
				Player[playerid][pRequestingBackup] = 0;
			}
			else
			{
				if(calledbytimer != 1)
				{
					SendClientMessage(playerid, COLOR_RED, "Você ainda não pediu reforco.");
				}
			}
		}
		else
		{
			if(calledbytimer != 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não é um oficial da L.S.P.D");
			}
		}
	}
	return true;
}

public:do Prever()
{
    new string[128], Number = random(sizeof(ClimaVar));
    format(string, 128, "", ClimaVar[Number][MSG]);
    SetWeather(ClimaVar[Number][WeatherID]);
    SetWorldTime(ClockTime[tHour]);
}

public Adminmsg()
{
    foreach (new i : Player)
	{
	    if(AdminDuty[i] == MODOSA_TRABALHANDO && Player[i][pAdmin] > 0)
		{
			//SetPlayerChatBubble(playerid, texto, cor, distância que aparece, tempo);
			new string[128];
			format(string, 128, "%s %s: Posso ajudar ?", AccountName(i), Player[i][pName]);
		    SetPlayerChatBubble( i, string, COLOR_YELLOW, 50.0, 9000);
		}
		else if(AdminAfk[i] == 1 && Player[i][pAdmin] > 0)
		{
			new string[128];
			format(string, 128, "%s %s: Estou ausente e não posso responder. Use /relato e chame outro admin", AccountName(i), Player[i][pName]);
		    SetPlayerChatBubble( i, string, COLOR_GREEN, 50.0, 9000);
		}
		else if(Player[i][pDonateRank] == 1 && Doador[i] == 1)
		{
		    new string[128];
			format(string, 128, "{8B4513}[VIP Bronze Life Simulation]", Player[i][pName]);
			SetPlayerChatBubble( i, string, COLOR_GREEN, 50.0, 9000);
		}
		else if(Player[i][pDonateRank] == 2 && Doador[i] == 1)
		{
		    new string[128];
			format(string, 128, "{2F4F4F}[VIP Prata Life Simulation]", Player[i][pName]);
			SetPlayerChatBubble( i, string, COLOR_GREEN, 50.0, 9000);
		}
		else if(Player[i][pDonateRank] == 3 && Doador[i] == 1)
		{
		    new string[128];
			format(string, 128, "{FFD700}[VIP Ouro Life Simulation]", Player[i][pName]);
			SetPlayerChatBubble( i, string, COLOR_GREEN, 50.0, 9000);
		}
	}
}

forward AdminMSGForPlayer(i);
public AdminMSGForPlayer(i)
{
    if(AdminDuty[i] == MODOSA_TRABALHANDO && Player[i][pAdmin] > 0)
	{
		new string[128];
		format(string, 128, "%s %s: Posso ajudar ?", AccountName(i), Player[i][pName]);
	    SetPlayerChatBubble( i, string, COLOR_YELLOW, 50.0, 9000);
	}
	else if(AdminAfk[i] == MODOSA_TRABALHANDO && Player[i][pAdmin] > 0)
	{
		new string[128];
		format(string, 128, "%s %s: Estou ausente e não posso responder. Use /relato e chame outro admin", AccountName(i), Player[i][pName]);
	    SetPlayerChatBubble( i, string, COLOR_GREEN, 50.0, 9000);
	}
	else if(Player[i][pDonateRank] == 1 && Doador[i] == 1)
	{
	    new string[128];
		format(string, 128, "{8B4513}[VIP Bronze Life Simulation]", Player[i][pName]);
		SetPlayerChatBubble( i, string, COLOR_GREEN, 50.0, 9000);
	}
	else if(Player[i][pDonateRank] == 2 && Doador[i] == 1)
	{
	    new string[128];
		format(string, 128, "{2F4F4F}[VIP Prata Life Simulation]", Player[i][pName]);
		SetPlayerChatBubble( i, string, COLOR_GREEN, 50.0, 9000);
	}
	else if(Player[i][pDonateRank] == 3 && Doador[i] == 1)
	{
	    new string[128];
		format(string, 128, "{FFD700}[VIP Ouro Life Simulation]", Player[i][pName]);
		SetPlayerChatBubble( i, string, COLOR_GREEN, 50.0, 9000);
	}
	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if(gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) && AdminDuty[playerid] == MODOSA_TRABALHANDO)
	{
	    new Float:posZ;
	    MapAndreas_FindZ_For2DCoord(fX, fY, posZ);
	    ModoSA_Info[playerid][SA_MarkPos][0] = fX;
	    ModoSA_Info[playerid][SA_MarkPos][1] = fY;
	    ModoSA_Info[playerid][SA_MarkPos][2] = posZ;
    	/*SafeSetPlayerPos(playerid, fX, fY, posZ);
    	SetPlayerInterior(playerid, 0);*/
	}
    return true;
}

forward GodExplo();
public GodExplo()
{
    CreateExplosion(155.1360,-1951.8768,47.8750,12,1);
}

stock CheckGod(giveid)
{
    OldGod[giveid][5] = GetPlayerInterior(giveid);
	GetPlayerHealth(giveid,OldGod[giveid][3]);
	GetPlayerArmour(giveid,OldGod[giveid][4]);
    GetPlayerPos(giveid, OldGod[giveid][0], OldGod[giveid][1], OldGod[giveid][2]);
    SetPlayerArmour(giveid,0);

	SafeSetPlayerPos(giveid, 1939.1821,1915.9207,122.0156+3);
    SetPlayerVelocity(giveid,0.0,0.0,-0.5);
	SetPlayerHealth(giveid,130);

    if(IsPlayerInAnyVehicle(giveid))
    {
        GodCarID[giveid] = GetPlayerVehicleID(giveid);
        GetVehicleVelocity(GodCarID[giveid], GodCarPos[giveid][0], GodCarPos[giveid][1], GodCarPos[giveid][2]);
    }
    SetTimerEx("CheckGod2",800,false, "i", giveid);
}

forward CheckGod2(giveid);
public CheckGod2(giveid)
{
    NewGod[giveid][5] = GetPlayerInterior(giveid);
    GetPlayerHealth(giveid,NewGod[giveid][3]);
    GetPlayerPos(giveid, NewGod[giveid][0], NewGod[giveid][1], NewGod[giveid][2]);

    SafeSetPlayerPos(giveid, OldGod[giveid][0], OldGod[giveid][1], OldGod[giveid][2]);
    SetPlayerHealth(giveid,OldGod[giveid][3]);
    SetPlayerArmour(giveid,OldGod[giveid][4]);
    SafePutPlayerInVehicle(giveid, GodCarID[giveid], 0);
    SetVehicleVelocity(GodCarID[giveid], GodCarPos[giveid][0], GodCarPos[giveid][1], GodCarPos[giveid][2]);

   	new string[128];

   	if(NewGod[giveid][5] != OldGod[giveid][5])
   	{
   	    format(string, sizeof(string), "%s[ID %d] foi teleportado durante o /god. Faça o teste novamente.", ReturnPlayer(giveid),giveid);
   	    ABroadCast(COLOR_LIGHTRED,string,1);
   	    return true;
	}
	if(NewGod[giveid][0] == OldGod[giveid][0] && NewGod[giveid][1] == OldGod[giveid][1])
	{
	    if(((NewGod[giveid][3] > 92 && NewGod[giveid][3] < 95) || (NewGod[giveid][3] > 103 && NewGod[giveid][3] < 109)) && NewGod[giveid][3] != OldGod[giveid][3])
			format(string, sizeof(string), "Bot_BLS :: %s[ID %d] está usando NOP(%.2f/%.2f) Interior: %.0f", ReturnPlayer(giveid),giveid,NewGod[giveid][3],OldGod[giveid][3],OldGod[giveid][5]);
		else
			format(string, sizeof(string), "%s[ID %d] foi kickado por ESC.", ReturnPlayer(giveid),giveid);

		if(AdminDuty[giveid] != MODOSA_TRABALHANDO)
        {
            SendClientMessageToAll(COLOR_RED, string);
			Kick(giveid);
        }
		return true;
	}
	if(Congelado[giveid] != 1 && NewGod[giveid][3] != 17 && NewGod[giveid][3] > 128)
	    format(string, sizeof(string), "Bot_BLS :: %s[ID %d] está usando God. (%.2f/%.2f) Interior: %.0f", ReturnPlayer(giveid),giveid,NewGod[giveid][3],OldGod[giveid][3],OldGod[giveid][5]);
	else
	{
	    if(((NewGod[giveid][3] > 92 && NewGod[giveid][3] < 95) || (NewGod[giveid][3] > 108)) && NewGod[giveid][3] != OldGod[giveid][3])
			format(string, sizeof(string), "Bot_BLS :: %s[ID %d] está usando NOP(%.2f/%.2f) Interior: %.0f", ReturnPlayer(giveid),giveid,NewGod[giveid][3],OldGod[giveid][3],OldGod[giveid][5]);
	    else if(NewGod[giveid][3] == OldGod[giveid][3])
	    {
	        if(Congelado[giveid] == 1)
	            format(string, sizeof(string), "%s[ID %d] está travado.", ReturnPlayer(giveid),giveid);
			else
			{
	        	format(string, sizeof(string), "%s[ID %d] foi kickado por RT.", ReturnPlayer(giveid),giveid);
	        	if(Player[giveid][pAdmin] < 1)
                {
                    SendClientMessageToAll(COLOR_RED, string);
					Kick(giveid);
                }
				return true;
			}
        }
		else
			format(string, sizeof(string), "Bot_BLS :: %s[ID %d] não está usando God. (%.2f/%.2f) Interior: %.0f", ReturnPlayer(giveid),giveid,NewGod[giveid][3],OldGod[giveid][3],OldGod[giveid][5]);
	}
    ABroadCast(COLOR_LIGHTRED,string,1);
	return true;
}

forward MiniTele(giveid);
public MiniTele(giveid)
{
    SafeSetPlayerPos(giveid, 1939.1821,1915.9207,122.0156);
    SetPlayerFacingAngle(giveid, 270);
	SetCameraBehindPlayer(giveid);
	SetPlayerHealth(giveid,100);
}

stock CheckMini(giveid)
{
    OldGod[giveid][5] = GetPlayerInterior(giveid);
	GetPlayerHealth(giveid,OldGod[giveid][3]);
	GetPlayerArmour(giveid,OldGod[giveid][4]);
    GetPlayerPos(giveid, OldGod[giveid][0], OldGod[giveid][1], OldGod[giveid][2]);
    SetPlayerArmour(giveid,0);

    if(IsPlayerInAnyVehicle(giveid))
    {
        GodCarID[giveid] = GetPlayerVehicleID(giveid);
        GetVehicleVelocity(GodCarID[giveid], GodCarPos[giveid][0], GodCarPos[giveid][1], GodCarPos[giveid][2]);
    }
    SetTimerEx("MiniTele",5200,false, "i", giveid);
	SetTimerEx("CheckMini2",6000,false, "i", giveid);
}

stock Membros(ORG)
{
	new C = 0;
	foreach (new i : Player)
	    if(Player[i][pLeader] == ORG || Player[i][pMember] == ORG)
			C++;

	return C;
}

forward CheckMini2(giveid);
public CheckMini2(giveid)
{
    BotID = ReturnUser("Pega_Mini");
    NewGod[giveid][5] = GetPlayerInterior(giveid);
    GetPlayerHealth(giveid,NewGod[giveid][3]);
    GetPlayerPos(giveid, NewGod[giveid][0], NewGod[giveid][1], NewGod[giveid][2]);

    SafeSetPlayerPos(giveid, OldGod[giveid][0], OldGod[giveid][1], OldGod[giveid][2]);
    SetPlayerHealth(giveid,OldGod[giveid][3]);
    SetPlayerArmour(giveid,OldGod[giveid][4]);
    SafePutPlayerInVehicle(giveid, GodCarID[giveid], 0);
    SetVehicleVelocity(GodCarID[giveid], GodCarPos[giveid][0], GodCarPos[giveid][1], GodCarPos[giveid][2]);

   	new string[128];

   	if(NewGod[giveid][5] != OldGod[giveid][5])
   	{
   	    format(string, sizeof(string), "%s[ID %d] foi teleportado durante o /mini. Faça o teste novamente.", ReturnPlayer(giveid),giveid);
   	    ABroadCast(COLOR_LIGHTRED,string,1);
   	    Kick(BotID);
   	    return true;
	}
	if(Congelado[giveid] != 1 && NewGod[giveid][3] > 98)
	{
	    format(string, sizeof(string), "Bot_BLS :: %s[ID %d] está usando MiniSkin / God-C. (%.2f/%.2f) Interior: %.0f", ReturnPlayer(giveid),giveid,NewGod[giveid][3],OldGod[giveid][3],OldGod[giveid][5]);
	    Kick(BotID);
    }
	else
	{
	    if(NewGod[giveid][3] == OldGod[giveid][3])
	    {
	        if(Congelado[giveid] == 1)
	            format(string, sizeof(string), "%s[ID %d] está travado.", ReturnPlayer(giveid),giveid);
			else
			{
	        	format(string, sizeof(string), "%s[ID %d] foi kickado por RT.", ReturnPlayer(giveid),giveid);
	        	if(Player[giveid][pAdmin] < 1)
                {
                    SendClientMessageToAll(COLOR_RED, string);
					Kick(giveid);
                }
			}
        }
		else
			format(string, sizeof(string), "Bot_BLS :: %s[ID %d] não está usando MiniSkin / God-C. (%.2f/%.2f) Interior: %.0f", ReturnPlayer(giveid),giveid,NewGod[giveid][3],OldGod[giveid][3],OldGod[giveid][5]);

		Kick(BotID);
		BotID = INVALID_PLAYER_ID;
	}
    ABroadCast(COLOR_LIGHTRED,string,1);
	return true;
}

new SafeBan[MAX_PLAYERS];
public ResetSafeBan(playerid)
{
	SafeBan[playerid] = 0;
}

forward AtenderEmergencia(playerid, emergencia);
public AtenderEmergencia(playerid, emergencia)
{
	if(emergencia == 0)
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "Telefonista (ao celular): Olá, Para fazer uma Denuncia fale o Nome/ID do Jogador.");
	    EmergencyTimer[playerid] = SetTimerEx("EmergenciaDesligar", 15000, false, "i", playerid);
	    EmergencyCall[playerid] = true;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "Telefonista (ao celular): Avisamos nossos Médicos sobre sua Emergencia.");
	    SendClientMessage(playerid,  COLOR_LIGHTBLUE, "** Desligaram");
	    if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}
	return 1;
}

forward EmergenciaDesligar(playerid);
public EmergenciaDesligar(playerid)
{
	EmergencyCall[playerid] = false;
	SendClientMessage(playerid,  COLOR_LIGHTBLUE, "** Desligaram");
	if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	return 1;
}

forward ChecarCreditos(playerid);
public ChecarCreditos(playerid)
{
	if (Mobile[playerid] != 255)
	{
		Player[playerid][pCreditos] -= 2;
		if(Player[playerid][pCreditos] < 2)
		{
		    KillTimer(LOL[playerid]);
	   	    new caller = Mobile[playerid];
		    KillTimer(LOL[caller]);
		    if(caller >= 255) return false;
			if(!IsPlayerConnected(caller) || caller == INVALID_PLAYER_ID) return false;

			SendClientMessage(caller,  COLOR_LIGHTBLUE, "** A Ligação Caiu...");
			SendClientMessage(playerid,  COLOR_LIGHTBLUE, "** Acabaram seus créditos.");

			CellTime[caller] = 0;
			CellTime[playerid] = 0;

			Mobile[caller] = 255;
			Mobile[playerid] = 255;

			CellTime[playerid] = 0;
			RingTone[playerid] = 0;

			SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);

	    	if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
	    	if(IsPlayerAttachedObjectSlotUsed(caller, 8)) RemovePlayerAttachedObject(caller, 8);
		}
	}
	return true;
}

stock GetToyNameByModel(modelid) {
	new toy[32] = "Nenhum";
	for (new i; i < sizeof AttachmentObjects; i++) {
		if (AttachmentObjects[i][attachmodel] == modelid) {
			format(toy, sizeof toy, AttachmentObjects[i][attachname]);
			break;
		}
	}
	return toy;
}

stock IsAVip(playerid)
{
    if(Player[playerid][pDonateRank] > 0)
    	return true;

	return false;
}

forward CheckAFK();
public CheckAFK()
{
    foreach(new i: Player)
    {
        if(TalkingLive[TalkingLive[i]!=255?TalkingLive[i]:0] != 255 || TalkingLive[i] != 255) continue;
        if(Player[i][Spawned] == true && Player[i][pAdmin] < 6 && Congelado[i] == 0 && noteste[i] == false)
        {
            //printf("1. i: %d", i);
            if(IsPlayerInAnyVehicle(i))
            {
                new vId = GetPlayerVehicleID(i);

                if(AFK[i][0] == 0)
                {
                    AFK[i][1] = 3;
                    AFK[i][2] = 183;
                    AFK[i][3] = 273;
                    GetVehicleZAngle(vId, AFK[i][1]);
                    AFK[i][0]++;
                }
                else if(AFK[i][0] == 1)
                {
                    GetVehicleZAngle(vId, AFK[i][2]);
                    AFK[i][0]++;
                }
                else if(AFK[i][0] == 2)
                {
                    GetVehicleZAngle(vId, AFK[i][3]);
                    AFK[i][0] = 0;
                }
            }
            else
            {
                if(AFK[i][0] == 0)
                {
                    AFK[i][1] = 3;
                    AFK[i][2] = 183;
                    AFK[i][3] = 273;
                    GetPlayerFacingAngle(i, AFK[i][1]);
                    AFK[i][0]++;
                }
                else if(AFK[i][0] == 1)
                {
                    GetPlayerFacingAngle(i, AFK[i][2]);
                    AFK[i][0]++;
                }
                else if(AFK[i][0] == 2)
                {
                    GetPlayerFacingAngle(i, AFK[i][3]);
                    AFK[i][0] = 0;
                }
            }
            //printf("2. i: %d", i);
            if(AFK[i][1] == AFK[i][2] && AFK[i][1] == AFK[i][3])
            {
                if(Player[i][pAdmin] < 6 && Player[i][pDonateRank] < 3)
                {
                    SendClientMessage(i, COLOR_RED, "Você foi kickado por ultrapassar o limite de tempo AFK.");
                    Kick(i);
                }
/*              if(Player[i][pAdmin] > 0)
                {
                    new thestringa[128];
                    format(thestringa, sizeof(thestringa), "[BLS]: %s foi kickado por ultrapassar o limite de tempo AFK.", ReturnPlayer(i));
                    WriteLog("Admins2",thestringa);
                }
                Kick(i);  */
            }
            //printf("3. i: %d", i);
        }
    }
    return true;
}

public CheckMH()
{
    new string[128];
	for(new i = 0; i <= HighestID; i++)
	{
	    if(IsPlayerConnected(i))
	   	{
		    if(Player[i][Spawned] == true)
			{
		    	new dife = (GetPlayerGP(i) - Player[i][pMoney]);
		    	if(GetPlayerGP(i) < Player[i][pMoney])
				{
				    if(InModShop[i] == true)
				        Player[i][pMoney] = GetPlayerGP(i);
				    else
				    {
				    	ResetPlayerMoney(i);
					    GivePlayerGP(i, Player[i][pMoney]);
				    }
				}
			    else if(GetPlayerGP(i) > Player[i][pMoney])
		   	    {
		   	        if(dife == 500 || dife == 1000 || dife == 10000 || dife == 20000 || dife == 99999999)
		   	        {
		   	        	if(nomh[i] != 1)
			   	        {
				   	        format(string, sizeof(string), "Bot_BLS :: %s[ID %d] está usando um MoneyHack. Dolar: %d  ;  RG: %d  ;  Banco: %d ; %d", ReturnPlayer(i),i,GetPlayerGP(i),Player[i][pMoney],Player[i][pBank],nomh[i]);
				   	        WriteLog("HackLog",string);
				   	        SendClientMessage(i, COLOR_YELLOW,"MoneyHack detectado. Em caso de bug aperte F8 para salvar esta imagem.");
							ResetPlayerMoney(i);
							GivePlayerGP(i, Player[i][pMoney]);
						}
					}
				}
				if(antiab && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
				{
				    if(noab2[i] == false)
				    {
				        noab[i][3]++;
				        if(noab[i][3] == 2 && noab[i][2] < 800)
				        {
							if(IsPlayerInAnyVehicle(i))
							{
			    		    	if(!IsPlayerInCircle(i, noab[i][0], noab[i][1], 100))
		    			    	{
		    		    		    format(string, sizeof(string), "Bot_BLS :: %s[ID %d] está usando AirBreak em um veículo.", ReturnPlayer(i),i);
				   		    	    WriteLog("HackLog",string);
				   	    	    	ABroadCast(COLOR_LIGHTRED,string,1);
			   	    	    	}
		    	    	    }
							else
							{
		    		    		if(!IsPlayerInCircle(i, noab[i][0], noab[i][1], 50))
			    		    	{
			    		    	    format(string, sizeof(string), "Bot_BLS :: %s[ID %d] está usando AirBreak.", ReturnPlayer(i),i);
					   		        WriteLog("HackLog",string);
					   	    	    ABroadCast(COLOR_LIGHTRED,string,1);
		    	    		    }
	    	    		    }
    	    		    }
    	    		    if(noab[i][3] >= 2)
	    	    		    noab[i][3] = 0;
   	    		    }
				}
				GetPlayerPos(i,noab[i][0],noab[i][1],noab[i][2]);
                if(GetPlayerTeam(i) != 0 && !noevento[i])
                    SetPlayerTeam(i, NO_TEAM);
			}
		}
	}
}

forward MensagemHackColete(playerid);
public MensagemHackColete(playerid)
{
	if(!AntiCheaterColete[playerid]) return 0;
	AntiCheaterColete[playerid] = false;
	return 1;
}

public CheckWeaponHack() // Anti Xiter de Armas e Jet Pack
{
	new string[128];
	new giveplayer[MAX_PLAYER_NAME];
	new Float:Colete;
	foreach (new i : Player)
	{
	    if(IsACop(i) && WantedPoints[i] >= 1) //BOPEsu
			WantedPoints[i] = 0;

		if(Player[i][Spawned] == true)
		{
		    GetPlayerArmour(i, Colete);
		    if(Colete > 90 && Player[i][pAdmin] < 1 && !AntiCheaterColete[i])
		    {
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando colete no máximo use /spec nele para ve-lo.", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
                AntiCheaterColete[i] = true;
                SetTimerEx("MensagemHackColete", 60000, true, "i", i);
		    }
			if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && Player[i][pAdmin] <= 4)
		   	{
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando um JetPack use /spec nele para ve-lo.", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(i, COLOR_RED, "ANTICHEAT: Weapon-hacks detectado. Não faça mais isso.");
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(i, slx, sly, slz);
				SafeSetPlayerPos(i, slx, sly, slz+10);
				SetTimerEx("OnKick",500,false, "i", i);
			}
			else if(GetPlayerWeapon(i) == 44 && Player[i][pAdmin] <= 0)
		    {
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando óculos especiais use /spec nele para ve-lo.", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(i, COLOR_RED, "ANTICHEAT: Weapon-hacks detectado. Não faça mais isso.");
				SetTimerEx("OnKick",500,false, "i", i);
			}
			// óculos especiais2
			else if(GetPlayerWeapon(i) == 45 && Player[i][pAdmin] <= 0)
		    {
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando óculos especiais use /spec nele para ve-lo.", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(i, COLOR_RED, "ANTICHEAT: Weapon-hacks detectado. Não faça mais isso.");
				SetTimerEx("OnKick",500,false, "i", i);
			}
			// Minigun
			else if(GetPlayerWeapon(i) == 38 && Player[i][pAdmin] <= 0)
		    {
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma Minigun use /spec nele para ve-lo.", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(i, COLOR_RED, "ANTICHEAT: Weapon-hacks detectado. Não faça mais isso.");
				SetTimerEx("OnKick",500,false, "i", i);
			}
			// Rocket Launcher
			else if(GetPlayerWeapon(i) == 35 && Player[i][pAdmin] <= 0 && GetPlayerOrg(i) != 17 && ComprouCash[i] == 0)
		    {
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando um Rocket Launcher /spec para ve-lo.", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(i, COLOR_RED, "ANTICHEAT: Weapon-hacks detectado. Não faça mais isso.");
				SetTimerEx("OnKick",500,false, "i", i);
			}
			// Missil Tele-guiado
			else if(GetPlayerWeapon(i) == 36 && Player[i][pAdmin] <= 0 && ComprouCash[i] == 0 && GetPlayerOrg(i) != 17)
		    {
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando um Míssil-Teleguiado /spec para ve-lo.", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(i, COLOR_RED, "ANTICHEAT: Weapon-hacks detectado. Não faça mais isso.");
				SetTimerEx("OnKick",500,false, "i", i);
			}
			// Lanca chamas
			else if(GetPlayerWeapon(i) == 37 && Player[i][pAdmin] <= 0)
		    {
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando um Lança-Chamas /spec para ve-lo.", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(i, COLOR_RED, "ANTICHEAT: Weapon-hacks detectado. Não faça mais isso.");
				SetTimerEx("OnKick",500,false, "i", i);
			}
			//Serra Eletrica
			else if(GetPlayerWeapon(i) == 9 && Player[i][pAdmin] <= 0 && ComprouCash[i]==0)
		    {
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma Serra-Elétrica /spec para ve-lo.", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(i, COLOR_RED, "ANTICHEAT: Weapon-hacks detectado. Não faça mais isso.");
				SetTimerEx("OnKick",500,false, "i", i);
			}
			//Granada
			else if(GetPlayerWeapon(i) == 16 && Player[i][pAdmin] <= 0 && ComprouCash[i]==0)
			{
                if(Player[i][pLeader] == 0 || (!IsAGang(i) && !IsAMafia(i)))
                {
    				GetPlayerName(i, giveplayer, sizeof(giveplayer));
    				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma Granada /spec para ve-lo.", giveplayer,i);
    				ABroadCast(COLOR_LIGHTRED,string,1);
    				SendClientMessage(i, COLOR_RED, "ANTICHEAT: Weapon-hacks detectado. Não faça mais isso.");
    				SetTimerEx("OnKick",500,false, "i", i);
                }
			}
			//Molotov
			else if(GetPlayerWeapon(i) == 18 && Player[i][pAdmin] <= 0 && ComprouCash[i]==0)
			{
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando um Molotov /spec para ve-lo.", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(i, COLOR_RED, "ANTICHEAT: Weapon-hacks detectado. Não faça mais isso.");
				SetTimerEx("OnKick",500,false, "i", i);
			}
			else if(GetPlayerWeapon(i) == 26 && Player[i][pAdmin] <= 0)
		    {
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma Sawn-off  /spec para ve-lo.", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(i, COLOR_RED, "ANTICHEAT: Weapon-hacks detectado. Não faça mais isso.");
				SetTimerEx("OnKick",500,false, "i", i);
			}
			//Combat shotgun
			else if(GetPlayerWeapon(i) == 27 && Player[i][pAdmin] <= 0)
		    {
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma Combat shotgun  /spec para ve-lo.", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(i, COLOR_RED, "ANTICHEAT: Weapon-hacks detectado. Não faça mais isso.");
				SetTimerEx("OnKick",500,false, "i", i);
			}
			//Micro Uzi
			else if(GetPlayerWeapon(i) == 28 && Player[i][pAdmin] <= 0)
		    {
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma Micro Uzi  /spec para ve-lo.", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(i, COLOR_RED, "ANTICHEAT: Weapon-hacks detectado. Não faça mais isso.");
				SetTimerEx("OnKick",500,false, "i", i);
			}
			//Tec 9
			else if(GetPlayerWeapon(i) == 32 && Player[i][pAdmin] <= 0)
		    {
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma TEC-9  /spec para ve-lo.", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(i, COLOR_RED, "ANTICHEAT: Weapon-hacks detectado. Não faça mais isso.");
				SetTimerEx("OnKick",500,false, "i", i);
			}
			//Satchel charges
			else if(GetPlayerWeapon(i) == 39 && Player[i][pAdmin] <= 0 && GetPlayerOrg(i) != 17 && ComprouCash[i]==0)
		    {
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma Satchel charges  /spec para ve-lo.", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(i, COLOR_RED, "ANTICHEAT: Weapon-hacks detectado. Não faça mais isso.");
				SetTimerEx("OnKick",500,false, "i", i);
			}
			//Detonador
			else if(GetPlayerWeapon(i) == 40 && Player[i][pAdmin] <= 0 && GetPlayerOrg(i) != 17 && ComprouCash[i]==0)
			{
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando um Detonador  /spec para ve-lo.", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SendClientMessage(i, COLOR_RED, "ANTICHEAT: Weapon-hacks detectado. Não faça mais isso.");
				SetTimerEx("OnKick",500,false, "i", i);
		   	}
		}
	}
	return true;
}

GetPlayerDistanceToPoint(playerid,Float:x,Float:y)
{
    new Float:x1,Float:y1,Float:z1; GetPlayerPos(playerid,x1,y1,z1);
    new Float:tmpdis = floatsqroot(floatpower(floatabs(floatsub(x,x1)),2)+
    floatpower(floatabs(floatsub(y,y1)),2));
    return floatround(tmpdis);
}

IsPlayerInCircle(playerid,Float:x,Float:y,radius)
{
    if(GetPlayerDistanceToPoint(playerid,Float:x,Float:y) < radius)
    {
    	return true;
    }
    return 0;
}
forward Resetpedagio(i);
public Resetpedagio(i)
{
    pedagio[i] = 0;
    pedagyo[i] = 0;
    return true;
}

public Checkpedagio()
{
	if(!PedagioAberto) return true;
    new string[155];
	foreach(new i: Player)
	{
	    if(GetPlayerState(i) != PLAYER_STATE_DRIVER)
            continue;
    	if(Player[i][pJob] == CAMINHONEIRO
        || IsACop(i)
        || Player[i][pMember] == TEAM_BOMBE
        || GetVehicleType(GetPlayerVehicleID(i)) == VTYPE_SEA
        || PlayerInRace[i]
        || noevento[i])
            continue;

	    if(Player[i][pBizKey] == Biz_Pedagio) continue;

		if(PlayerToPoint(8.0, i, -158.1350,404.9151,12.0781))//pegadio 1
	    {
			if(pedagio[i] == 0)
			{
				GivePlayerGP(i, -BizPedagioPrice);
				GameTextForPlayer(i,"~r~Pagando Pedagio",2000,6);
				Congelar(i);
				PlayerCuffed[i] = 1;
				PlayerCuffedTime[i] = 4;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 1;
			}
			if(pedagio[i] == 1)
	    	{
                GiveBizMoney(Biz_Pedagio, BizPedagioPrice);

                format(string, 155, "~r~Pedagio Pago R$%d", BizPedagioPrice);
				GameTextForPlayer(i, string, 2000, 6);
                format(string, 155, "Pedagio Pago R$%d", BizPedagioPrice);
				SendClientMessage(i, COLOR_YELLOW, string);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 2;
				SetTimerEx("Resetpedagio",8000,false, "i", i);
			}
		}
		if(PlayerToPoint(8.0, i, -1519.2513,-818.3087,58.3869))//pegadio 2
		{
			if(pedagio[i] == 0)
			{
				GivePlayerGP(i, -BizPedagioPrice);
				GameTextForPlayer(i,"~r~Pagando Pedagio",2000,6);
				Congelar(i);
				PlayerCuffed[i] = 1;
				PlayerCuffedTime[i] = 4;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 1;
			}
			if(pedagio[i] == 1)
		    {
                GiveBizMoney(Biz_Pedagio, BizPedagioPrice);

                format(string, 155, "~r~Pedagio Pago R$%d", BizPedagioPrice);
				GameTextForPlayer(i, string, 2000, 6);
                format(string, 155, "Pedagio Pago R$%d", BizPedagioPrice);
				SendClientMessage(i, COLOR_YELLOW, string);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 2;
				SetTimerEx("Resetpedagio",8000,false, "i", i);
			}
		}
		if(PlayerToPoint(8.0, i, 1760.3850,558.3580,25.4297))//pegadio 3
		{
			if(pedagio[i] == 0)
			{
				GivePlayerGP(i, -BizPedagioPrice);
				GameTextForPlayer(i,"~r~Pagando Pedagio",2000,6);
				Congelar(i);
				PlayerCuffed[i] = 1;
				PlayerCuffedTime[i] = 4;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 1;
			}
			if(pedagio[i] == 1)
		    {
                GiveBizMoney(Biz_Pedagio, BizPedagioPrice);

                format(string, 155, "~r~Pedagio Pago R$%d", BizPedagioPrice);
				GameTextForPlayer(i, string, 2000, 6);
                format(string, 155, "Pedagio Pago R$%d", BizPedagioPrice);
				SendClientMessage(i, COLOR_YELLOW, string);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 2;
				SetTimerEx("Resetpedagio",8000,false, "i", i);
			}
		}
		if(PlayerToPoint(10.0, i, 1742.8715,563.3571,25.4760)) //pegadio 3
		{
			if(pedagyo[i] == 0)
			{
				GivePlayerGP(i, -BizPedagioPrice);
				GameTextForPlayer(i,"~r~Pagando Pedagio",2000,6);
				Congelar(i);
				PlayerCuffed[i] = 1;
				PlayerCuffedTime[i] = 4;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagyo[i] = 1;
			}
			if(pedagyo[i] == 1)
		    {
                GiveBizMoney(Biz_Pedagio, BizPedagioPrice);

                format(string, 155, "~r~Pedagio Pago R$%d", BizPedagioPrice);
				GameTextForPlayer(i, string, 2000, 6);
                format(string, 155, "Pedagio Pago R$%d", BizPedagioPrice);
				SendClientMessage(i, COLOR_YELLOW, string);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagyo[i] = 2;
				SetTimerEx("Resetpedagio",8000,false, "i", i);
			}
		}
		if(PlayerToPoint(8.0, i, 517.7004,476.6090,18.9296))//pegadio 4
		{
			if(pedagio[i] == 0)
			{
				GivePlayerGP(i, -BizPedagioPrice);
				GameTextForPlayer(i,"~r~Pagando Pedagio",2000,6);
				Congelar(i);
				PlayerCuffed[i] = 1;
				PlayerCuffedTime[i] = 4;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 1;
			}
			if(pedagio[i] == 1)
		    {
                GiveBizMoney(Biz_Pedagio, BizPedagioPrice);

                format(string, 155, "~r~Pedagio Pago R$%d", BizPedagioPrice);
				GameTextForPlayer(i, string, 2000, 6);
                format(string, 155, "Pedagio Pago R$%d", BizPedagioPrice);
				SendClientMessage(i, COLOR_YELLOW, string);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 2;
				SetTimerEx("Resetpedagio",8000,false, "i", i);
			}
		}
		if(PlayerToPoint(14.0, i, -2874.1379,-947.7515,9.4921))//pegadio 5
		{
			if(pedagio[i] == 0)
			{
				GivePlayerGP(i, -BizPedagioPrice);
				GameTextForPlayer(i,"~r~Pagando Pedagio",2000,6);
				Congelar(i);
				PlayerCuffed[i] = 1;
				PlayerCuffedTime[i] = 4;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 1;
			}
			if(pedagio[i] == 1)
		    {
                GiveBizMoney(Biz_Pedagio, BizPedagioPrice);

                format(string, 155, "~r~Pedagio Pago R$%d", BizPedagioPrice);
				GameTextForPlayer(i, string, 2000, 6);
                format(string, 155, "Pedagio Pago R$%d", BizPedagioPrice);
				SendClientMessage(i, COLOR_YELLOW, string);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 2;
				SetTimerEx("Resetpedagio",8000,false, "i", i);
			}
		}
		if(PlayerToPoint(9.0, i, -2690.5278,1269.3605,55.9455))//pegadio 6
		{
			if(pedagio[i] == 0)
			{
				GivePlayerGP(i, -BizPedagioPrice);
				GameTextForPlayer(i,"~r~Pagando Pedagio",2000,6);
				Congelar(i);
				PlayerCuffed[i] = 1;
				PlayerCuffedTime[i] = 4;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 1;
			}
			if(pedagio[i] == 1)
	    	{
                GiveBizMoney(Biz_Pedagio, BizPedagioPrice);

                format(string, 155, "~r~Pedagio Pago R$%d", BizPedagioPrice);
				GameTextForPlayer(i, string, 2000, 6);
                format(string, 155, "Pedagio Pago R$%d", BizPedagioPrice);
				SendClientMessage(i, COLOR_YELLOW, string);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 2;
				SetTimerEx("Resetpedagio",8000,false, "i", i);
			}
		}
		if(PlayerToPoint(9.0, i, -2672.4221,1269.3739,55.9455))//pegadio 6
		{
			if(pedagyo[i] == 0)
			{
				GivePlayerGP(i, -BizPedagioPrice);
				GameTextForPlayer(i,"~r~Pagando Pedagio",2000,6);
				Congelar(i);
				PlayerCuffed[i] = 1;
				PlayerCuffedTime[i] = 4;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagyo[i] = 1;
			}
			if(pedagyo[i] == 1)
		    {
                GiveBizMoney(Biz_Pedagio, BizPedagioPrice);

                format(string, 155, "~r~Pedagio Pago R$%d", BizPedagioPrice);
				GameTextForPlayer(i, string, 2000, 6);
                format(string, 155, "Pedagio Pago R$%d", BizPedagioPrice);
				SendClientMessage(i, COLOR_YELLOW, string);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagyo[i] = 2;
				SetTimerEx("Resetpedagio",8000,false, "i", i);
			}
		}
		if(PlayerToPoint(7.0, i, -1419.8139,816.5017,47.2905))//pegadio 7
		{
			if(pedagio[i] == 0)
			{
				GivePlayerGP(i, -BizPedagioPrice);
				GameTextForPlayer(i,"~r~Pagando Pedagio",2000,6);
				Congelar(i);
				PlayerCuffed[i] = 1;
				PlayerCuffedTime[i] = 4;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 1;
			}
			if(pedagio[i] == 1)
		    {
                GiveBizMoney(Biz_Pedagio, BizPedagioPrice);

                format(string, 155, "~r~Pedagio Pago R$%d", BizPedagioPrice);
				GameTextForPlayer(i, string, 2000, 6);
                format(string, 155, "Pedagio Pago R$%d", BizPedagioPrice);
				SendClientMessage(i, COLOR_YELLOW, string);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 2;
				SetTimerEx("Resetpedagio",8000,false, "i", i);
			}
		}
		if(PlayerToPoint(7.0, i, -1498.0595,805.8170,47.2931))//pegadio 7
		{
			if(pedagyo[i] == 0)
			{
				GivePlayerGP(i, -BizPedagioPrice);
				GameTextForPlayer(i,"~r~Pagando Pedagio",2000,6);
				Congelar(i);
				PlayerCuffed[i] = 1;
				PlayerCuffedTime[i] = 4;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagyo[i] = 1;
			}
			if(pedagyo[i] == 1)
		    {
                GiveBizMoney(Biz_Pedagio, BizPedagioPrice);

                format(string, 155, "~r~Pedagio Pago R$%d", BizPedagioPrice);
				GameTextForPlayer(i, string, 2000, 6);
                format(string, 155, "Pedagio Pago R$%d", BizPedagioPrice);
				SendClientMessage(i, COLOR_YELLOW, string);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagyo[i] = 2;
				SetTimerEx("Resetpedagio",8000,false, "i", i);
			}
		}
		if(PlayerToPoint(5.0, i, 2767.1616,468.0519,8.2897))//pegadio 8
		{
			if(pedagio[i] == 0)
			{
				GivePlayerGP(i, -BizPedagioPrice);
				GameTextForPlayer(i,"~r~Pagando Pedagio",2000,6);
				Congelar(i);
				PlayerCuffed[i] = 1;
				PlayerCuffedTime[i] = 4;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 1;
			}
			if(pedagio[i] == 1)
	    	{
                GiveBizMoney(Biz_Pedagio, BizPedagioPrice);

                format(string, 155, "~r~Pedagio Pago R$%d", BizPedagioPrice);
				GameTextForPlayer(i, string, 2000, 6);
                format(string, 155, "Pedagio Pago R$%d", BizPedagioPrice);
				SendClientMessage(i, COLOR_YELLOW, string);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 2;
				SetTimerEx("Resetpedagio",8000,false, "i", i);
			}
		}
    	/*
		if(PlayerToPoint(8.0, i, 52.3699,-1525.1959,5.0452))//pegadio 9
		{
			if(pedagio[i] == 0)
			{
				GivePlayerGP(i, -50);
				GameTextForPlayer(i,"~r~Pagando Pedagio",2000,6);
				Congelar(i);
				PlayerCuffed[i] = 1;
				PlayerCuffedTime[i] = 4;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				pedagio[i] = 1;
			}
		}
        if(PlayerToPoint(8.0, i, 49.0865,-1537.6782,5.1550))//pegadio 9
    	{
    		if(pedagyo[i] == 0)
    		{
    			GivePlayerGP(i, -BizPedagioPrice);
    			GameTextForPlayer(i,"~r~Pagando Pedagio",2000,6);
    			Congelar(i);
    			PlayerCuffed[i] = 1;
    			PlayerCuffedTime[i] = 4;
    			PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
    			pedagyo[i] = 1;
    		}
    		if(pedagyo[i] == 1)
    	    {
                GiveBizMoney(Biz_Pedagio, BizPedagioPrice);

                format(string, 155, "~r~Pedagio Pago R$%d", BizPedagioPrice);
				GameTextForPlayer(i, string, 2000, 6);
                format(string, 155, "Pedagio Pago R$%d", BizPedagioPrice);
				SendClientMessage(i, COLOR_YELLOW, string);
    			PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
    			pedagyo[i] = 2;
    			SetTimerEx("Resetpedagio",8000,false, "i", i);
    		}
    	} */
		if(pedagio[i] == 1)
        {
            GiveBizMoney(Biz_Pedagio, BizPedagioPrice);

            format(string, 155, "~r~Pedagio Pago R$%d", BizPedagioPrice);
			GameTextForPlayer(i, string, 2000, 6);
            format(string, 155, "Pedagio Pago R$%d", BizPedagioPrice);
			SendClientMessage(i, COLOR_YELLOW, string);
			PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
			pedagio[i] = 2;
			SetTimerEx("Resetpedagio",8000,false, "i", i);
		}
	}
	return true;
}

//FUNÇÃO PARA PLANTAR BOMBA-----------------------------------------------------
public DestruirObjeto(objid) DestroyDynamicObject(objid);
public CriarExplosao(Float:X,Float:Y,Float:Z,tipo,Float:diam)
{
       CreateExplosion(X,Y,Z,tipo,diam);
       MoveDynamicObject(PortaoCofre, 2143.9621582031, 1632.4111328125, 1001.72033691406, 5.0);
}
public CriarExplosaod(Float:X,Float:Y,Float:Z,tipo,Float:diam)
{
       CreateExplosion(X,Y,Z,tipo,diam);
       MoveDynamicObject(PortaoLote,824.5576000000,10.0396000000,1004.1797000000,5.0);
}

public DestruirObjetos(objid) DestroyDynamicObject(objid);
public CriarExplosaos(Float:X,Float:Y,Float:Z,tipo,Float:diam)
{
       CreateExplosion(X,Y,Z,tipo,diam);
       CreateExplosion(X+2,Y+2,Z+2,tipo,diam);
       CreateExplosion(X+3,Y+3,Z+3,tipo,diam);
}

public CriarExplosaoss(Float:X,Float:Y,Float:Z,tipo,Float:diam)
{
       CreateExplosion(X,Y,Z,tipo,diam);
       CreateExplosion(X+4,Y+4,Z+4,tipo,diam);
       CreateExplosion(X+5,Y+5,Z+3,tipo,diam);
}

public CriarExplosaosss(Float:X,Float:Y,Float:Z,tipo,Float:diam)
{
       CreateExplosion(X,Y,Z,tipo,diam);
       CreateExplosion(X+6,Y+6,Z+6,tipo,diam);
       CreateExplosion(X+7,Y+7,Z+7,tipo,diam);
}

public CriarExplosaossss(Float:X,Float:Y,Float:Z,tipo,Float:diam)
{
       CreateExplosion(X,Y,Z,tipo,diam);
       CreateExplosion(X+8,Y+8,Z+8,tipo,diam);
       CreateExplosion(X+9,Y+9,Z+9,tipo,diam);
}

public:do CriarExplosaoEx(Float:X, Float:Y, Float:Z, tipo, Float:diam)
{
    CreateExplosion(X, Y, Z, tipo, diam);
    return 1;
}

public GivePlayerCash(playerid, cash)
{
	Player[playerid][pBLSCash] += cash;
	AtualizarTextDraws(playerid);
	return true;
}

public GetPlayerCash(playerid)
{
	return Player[playerid][pBLSCash];
}

forward ResetMH(playerid);
public ResetMH(playerid)
{
	nomh[playerid] = 0;
	return true;
}

public RemoveRoadblock(playerid)
{
	if(Player[playerid][pRoadblock] != -1)
	{
		DestroyDynamicObject(barreiraobj[Player[playerid][pRoadblock]]);
		Player[playerid][pRoadblock] = -1;
	}
	return true;
}

public RemoveCorrente(playerid)
{
	if(Player[playerid][pCorrente] != -1)
	{
	    new CorrenteId = Player[playerid][pCorrente];
		DestroyDynamicObject(correnteobj[CorrenteId]);
		corrente[CorrenteId] = 0;
		Player[playerid][pCorrente] = -1;
	}
	return true;
}

public RemoveCone(playerid)
{
	DestroyDynamicObject(Cone1);
	DestroyDynamicObject(Cone2);
	DestroyDynamicObject(Cone3);
	DestroyDynamicObject(Cone4);
	DestroyDynamicObject(Cone5);
	Player[playerid][pCone] = 0;
	return true;
}

public PortaoCassino()
{
      MoveDynamicObject(PortaoCofre, 2144.1823730469,1627.1091308594,994.31854248047, 10.0);
	  return true;
}
public PortaoLoterica()
{
      MoveDynamicObject(PortaoLote, 824.5576,10.0396,1104.1797, 10.0);
	  return true;
}

public GivePlayerGP(playerid, gp)
{
    nomh[playerid] = 1;
	Player[playerid][pMoney] += gp;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, Player[playerid][pMoney]);
	SetTimerEx("ResetMH",1100,false, "i", playerid);
	return true;
}

public SetPlayerGP(playerid, gp)
{
    nomh[playerid] = 1;
	Player[playerid][pMoney] = gp;
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, Player[playerid][pMoney]);
	SetTimerEx("ResetMH",1100,false, "i", playerid);
	return true;
}

public GetPlayerGP(playerid)
{
	return Player[playerid][pMoney];
}

stock GiveOrgMoney(orgid, money)
{
    CofreOrg[orgid][cfDinheiro] += money;
	return 1;
}

stock GetOrgMoney(orgid)
{
	return CofreOrg[orgid][cfDinheiro];
}

stock Positivar(num)
{
	if(num >= 0) return num;
	return num * -1;
}

// Kuddy Evento
stock PrepararKoEvent(NomeEvento[])
{
    new l@s1[128], l@s2[40];
    g_e@b_checker = true;
    format(l@s2, 40, "RPG/AdEvents/%s.map", NomeEvento);
//	drINI_LoadObjectsFromFile(l@s2);
    format(l@s1, 128,"[BLS Info]{FFFFFF} O administrador iniciou um desafio (%s). Digite {00FFFF}/InscreverDesafio{FFFFFF} para participar!", NomeEvento);
    SendClientMessageToAll(SERVER_INFO, l@s1);
    format(l@s2, 40, "RPG/AdEvents/%s.cfg", NomeEvento);
    g_e@f[0] = DOF2_GetFloat(l@s2, "sx");
    g_e@f[1] = DOF2_GetFloat(l@s2, "sy");
    g_e@f[2] = DOF2_GetFloat(l@s2, "sz");
    g_e@fc[0] = DOF2_GetFloat(l@s2, "cx");
    g_e@fc[1] = DOF2_GetFloat(l@s2, "cy");
    g_e@fc[2] = DOF2_GetFloat(l@s2, "cz");
    g_e@i[0] = DOF2_GetInt(l@s2, "w1");
    g_e@i[1] = DOF2_GetInt(l@s2, "w2");
    g_e@i[2] = DOF2_GetInt(l@s2, "w3");
    format(g_e@map_na, 32, "%s", NomeEvento);
    return 1;
}

stock IniciarKoEvent()
{
    g_e@b_started = true;
    foreach(Player, i)
    {
        if(g_e@autorizado[i])
        {
            SetPlayerPos(i, g_e@f[0], g_e@f[1], g_e@f[2]);
            SendClientMessage(i, COLOR_ADMIN, "[Evento]: Seja o primeiro e ganhe o evento!");
            SendClientMessage(i, COLOR_ADMIN, "[Evento]: Sobreviva e garanta seu premio de consolação!");
            GivePlayerWeapon(i, g_e@i[0], 1000);
            GivePlayerWeapon(i, g_e@i[1], 1000);
            GivePlayerWeapon(i, g_e@i[2], 1000);
            g_e@autorizado[i] = false;
            continue;
        }
        else SendClientMessage(i, COLOR_ADMIN, "[Evento]: O evento começou e você optou por não participar.");
    }
    return 1;
}

stock  arq_Remove(filename[]) {
	if(!fexist(filename)) return false;
	fremove(filename);
	return true;
}

public ExtortionBiz(bizid, money)
{
    new string[128];
    format(string, sizeof(string), "Nenhuma");
    if(strcmp(bExtortion[bizid],string, true ) == 0 )
	    return 0;

	foreach(new i: Player)
	{
		new name[MAX_PLAYER_NAME];
		new wstring[MAX_PLAYER_NAME];
		GetPlayerName(i, name, sizeof(name));
		format(string, sizeof(string), "%s", name);
		strmid(wstring, string, 0, strlen(string), 255);
		if(strcmp(bExtortion[bizid] ,wstring, true ) == 0 )
		{
		    new value = money * 10;
		    value = value / 100;
		    //GivePlayerGP(i, value);
            Player[i][pBank] += value;
		    BizzInfo[bizid][bTill] -= value;
		    format(string, sizeof(string), "Você ganhou %d pela extorsão da empresa.", value);
		    SendClientMessage(i, COLOR_YELLOW, string);
		}
	}
	return true;
}

public PreparePaintball()
{
    foreach(new i: Player)
        if(PlayerPaintballing[i] != 0)
            SendClientMessage(i, COLOR_YELLOW, "A partida de paintball irá se iniciar em 20 segundos.");

 	SetTimer("StartPaintball", 20000, 0);
	return true;
}

public StartPaintball()
{
	PaintballRound = 1;
	StartingPaintballRound = 0;
	PaintballWinner = 999;
	PaintballWinnerKills = 0;
	foreach(new i: Player)
	{
 		if(PlayerPaintballing[i] != 0)
	    {
	    	ResetPlayerWeapons(i);
	        SetPlayerHealth(i, 100);
		    SetPlayerArmour(i, 50);
	        SafeGivePlayerWeapon(i, 29, 999);
	        SafeGivePlayerWeapon(i, 24, 999);
	        Descongelar(i);
	        SendClientMessage(i, COLOR_YELLOW, "A partida de paintball se iniciou, 7 minutos restantes.");
	        PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	    }
	}
	SetTimer("PaintballEnded", 420000, 0);
	return true;
}

public PaintballEnded()
{
	new string[128];
	new name[MAX_PLAYER_NAME];
    foreach(new i: Player)
	{
		if(PlayerPaintballing[i] != 0)
	    {
	    	if(IsPlayerConnected(PaintballWinner))
	        {
	        	GetPlayerName(PaintballWinner, name, sizeof(name));
	            format(string,sizeof(string), " %s ganhou a partida de paintball com %d pontos.",name,PaintballWinnerKills);
	            SendClientMessage(i, COLOR_WHITE, string);
          	}
	        ResetPlayerWeapons(i);
	        PlayerPaintballKills[i] = 0;
	        PlayerPaintballing[i] = 0;
	        SafeSetPlayerPos(i, BizzInfo[Biz_PaintBall][bEntranceX],BizzInfo[Biz_PaintBall][bEntranceY],BizzInfo[Biz_PaintBall][bEntranceZ]);
      	}
  	}
	AnnouncedPaintballRound = 0;
    PaintballRound = 0;
	return true;
}

public Licenses()
{
	foreach(new i: Player)
	{
		if(Teste[i] == 1)
	    {
			TimeTest[i]++;
			new str[128];
			format(str, 128," ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ tempo: ~w~%d", 80 - TimeTest[i]);
			GameTextForPlayer(i, str, 2000,6);
			if(TimeTest[i] >= 80 && Teste[i] == 1)
			{
	        	TimeTest[i]=0;
	            Teste[i] = 0;
	            TakingLesson[i] = 0;
	            SendClientMessage(i, COLOR_RED, "[Auto Escola] Tempo esgotado, você não conseguiu adquirir uma licença terrestre.");
				SetVehicleToRespawn(AutoEscolaCars[3]);
				DisablePlayerRaceCheckpoint(i);

				SafeSetPlayerPos(i, 1491.0194, 1305.7502, 1093.2963);

	 			SetPlayerInterior(i, 3);
				Player[i][pInt] = 3;

				Player[i][pLocal] = 9999;
            }
		}
		if(Teste[i] == 2)
	    {
			TimeTest[i]++;
			new str[128];
			format(str, 128," ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ tempo: ~w~%d", 450 - TimeTest[i]);
			GameTextForPlayer(i, str, 2000,6);
			if(TimeTest[i] >= 450 && Teste[i] == 2)
		    {
	    	    TimeTest[i]=0;
	            Teste[i] = 0;
	            TakingLesson[i] = 0;
	            SendClientMessage(i, COLOR_RED, "[Auto Escola] Tempo esgotado, você não consegiu adquirir uma licença aérea.");
				SetVehicleToRespawn(GetPlayerVehicleID(i));
				DisablePlayerRaceCheckpoint(i);

				SafeSetPlayerPos(i, 1491.0194, 1305.7502, 1093.2963);

	 			SetPlayerInterior(i, 3);
				Player[i][pInt] = 3;

				Player[i][pLocal] = 9999;
    		}
		}
		if(Teste[i] == 3)
	    {
			TimeTest[i]++;
			new str[128];
			format(str, 128," ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ ~n~ tempo: ~w~%d", 120 - TimeTest[i]);
			GameTextForPlayer(i, str, 2000,6);
			if(TimeTest[i] >= 120 && Teste[i] == 3)
			{
	        	TimeTest[i]=0;
	            Teste[i] = 0;
	            TakingLesson[i] = 0;
	            SendClientMessage(i, COLOR_RED, "[Auto Escola] Tempo esgotado, você não consegiu adquirir uma licença náutica");
				SetVehicleToRespawn(GetPlayerVehicleID(i));
				DisablePlayerRaceCheckpoint(i);

				SafeSetPlayerPos(i, 1491.0194, 1305.7502, 1093.2963);

	 			SetPlayerInterior(i, 3);
				Player[i][pInt] = 3;

				Player[i][pLocal] = 9999;
    		}
		}
		if(GetPlayerVehicleID(i) == VeiculosMateriais[3])
		{
		    RepairVehicle(GetPlayerVehicleID(i));
		}
  	}
	return true;
}

public PrepareKarting()
{
    foreach(new i: Player)
    {
		if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	    {
	    	CP[i] = 9;
			SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
			SendClientMessage(i, COLOR_YELLOW, "A corrida se iniciará em instantes, fique em linha.");
		}
	}
	SetTimer("StartKarting", 20000, 0);
	return true;
}

public StartKarting()
{
	KartingRound = 1;
	StartingKartRound = 0;
	EndingKartRound = 0;
	FirstKartWinner = 999;
	SecondKartWinner = 999;
	ThirdKartWinner = 999;
	foreach(new i: Player)
	{
 		if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	    {
	    	CP[i] = 10;
	        SendClientMessage(i, COLOR_YELLOW, "Luz verde, vai vai vai!");
	        PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
	        SetPlayerCheckpoint(i,2308.3540,-2354.0039,12.6842,8.0);
	    }
	}
	SetTimer("KartingEnded", 240000, 0);
	return true;
}


stock IsPlayerInMoto(playerid)
{
    #define MAX_BIKES 11
    new Bike[MAX_BIKES] =
    {
        581,462,521,463,522,461,448,471,468,586,523
    };
    new vehicleid = GetPlayerVehicleID(playerid);
    new model = GetVehicleModel(vehicleid);
    if(model == 0)
		return false;

    if(IsPlayerInVehicle(playerid,vehicleid))
		for(new i = 0; i < MAX_BIKES; i++)
			if(model == Bike[i])
				return true;

    return false;
}


stock IsPlayerInBike(playerid)                // Âåëîñèïåäû
{
    new Velo[] ={509,481,510};
    new vehicleid = GetPlayerVehicleID(playerid);
    if(IsPlayerInVehicle(playerid,vehicleid))
		for(new i = 0; i < sizeof(Velo) ; i++)
			if(GetVehicleModel(vehicleid) == Velo[i])
				return true;

    return false;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if((GetPlayerState(playerid) == PLAYER_STATE_DRIVER) && (newkeys & 320))
	{
	    new string[128];
	    new vehid = GetPlayerVehicleID(playerid);
		if(VehicleInfo[vehid][vWindows])
		{
		    VehicleInfo[vehid][vWindows] = 0;
			SetVehicleParamsCarWindows(vehid, 1, 1, 1, 1);
			format(string, sizeof(string), "* %s fechou as janelas do veículo.", PlayerGetName(playerid));
	    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    	//SendClientMessage(playerid, COLOR_YELLOW, "[Janela]: Você fechou as janelas do veículo, somente motorista e passageiros poderão ver as mensagens.");
		}
		else
		{
		    VehicleInfo[vehid][vWindows] = 1;
			SetVehicleParamsCarWindows(vehid, 0, 0, 0, 0);
			format(string, sizeof(string), "* %s abriu as janelas do veículo.", PlayerGetName(playerid));
	    	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    	//SendClientMessage(playerid, COLOR_YELLOW, "[Janela]: Você abriu as janelas do veículo, todos da proximidade poderão ver as mensagens.");
		}
	}
	if(IsPlayerInAnyVehicle(playerid) && (oldkeys & 1 || oldkeys & 4))
	{
	    if(Player[playerid][pDonateRank] > 0)
	    {
	        new noss = GetPlayerVehicleID(playerid);
	        for(new nos = 0; nos < 5; nos++)
	        {
	            if(Player[playerid][pCar][nos] != INVALID_VEHICLE_ID)
				{
		            if(noss == CarInfo[Player[playerid][pCar][nos]][cID])
		            {
	         			RemoveVehicleComponent(noss, 1010);
						AddVehicleComponent(noss, 1010);
						break;
		            }
				}
	        }
		}
	}
	if(newkeys & KEY_YES)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	        return cmd_motor(playerid);
		else
		{
			new Float:pos[3];
		    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		    if(pos[1] < -1301.4 && pos[1] > -1303.2417 && pos[0] < 1786.2131 && pos[0] > 1784.1555)    // He is using the elevator button
		        ShowElevatorDialog(playerid);
			else    // Is he in a floor button?
			{
			    if(pos[1] > -1301.4 && pos[1] < -1299.1447 && pos[0] < 1785.6147 && pos[0] > 1781.9902)
			    {
			        // He is most likely using it, check floor:
					new i=20;
					while(pos[2] < GetDoorsZCoordForFloor(i) + 3.5 && i > 0)
					    i --;

					if(i == 0 && pos[2] < GetDoorsZCoordForFloor(0) + 2.0)
					    i = -1;

					if(i <= 19)
					{
						CallElevator(playerid, i + 1);
						GameTextForPlayer(playerid, "~r~Elevador Chamado", 3500, 4);
					}
			    }
			}
		}
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && Player[playerid][gSpectateID] != INVALID_PLAYER_ID)
	{
		if(newkeys == KEY_SPRINT)
 			AdvanceSpectate(playerid);

		else if(newkeys == KEY_JUMP)
 			ReverseSpectate(playerid);

		else if(newkeys == KEY_CROUCH)
		{
		    if(GetPlayerState(Player[playerid][gSpectateID]) == PLAYER_STATE_ONFOOT)
			{
				switch(Player[playerid][gSpectateType])
		    	{
					case 1:
					{
						Player[playerid][gSpectateType] = 2;
						PlayerSpectatePlayer(playerid,Player[playerid][gSpectateID],2);
					}
					case 2:
					{
						Player[playerid][gSpectateType] = 3;
						PlayerSpectatePlayer(playerid,Player[playerid][gSpectateID],3);
					}
					case 3:
					{
						Player[playerid][gSpectateType] = 1;
						PlayerSpectatePlayer(playerid,Player[playerid][gSpectateID],1);
					}
					default:
					{
						Player[playerid][gSpectateType] = 1;
						PlayerSpectatePlayer(playerid,Player[playerid][gSpectateID],1);
					}
				}
			}
		    else if(IsPlayerInAnyVehicle(Player[playerid][gSpectateID]))
		    {
		    	switch(Player[playerid][gSpectateType])
		    	{
					case 1:
					{
						Player[playerid][gSpectateType] = 2;
						PlayerSpectateVehicle(playerid,Player[playerid][gSpectateID],2);
					}
					case 2:
					{
						Player[playerid][gSpectateType] = 3;
						PlayerSpectateVehicle(playerid,Player[playerid][gSpectateID],3);
					}
					case 3:
					{
						Player[playerid][gSpectateType] = 1;
						PlayerSpectateVehicle(playerid,Player[playerid][gSpectateID],1);
					}
					default:
					{
						Player[playerid][gSpectateType] = 1;
						PlayerSpectateVehicle(playerid,Player[playerid][gSpectateID],1);
					}
				}
			}
		}
	}
	if(newkeys & KEY_FIRE && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER && GetPlayerWeapon(playerid) == 24)
	{
	    SendClientMessage(playerid,COLOR_WHITE,"Você foi ejetado por atirar de eagle em um carro.");
	    RemovePlayerFromVehicle(playerid);
	}
	if(Pixando[playerid] == false && IsAGang(playerid) && GetPlayerWeapon(playerid) == 41 && (newkeys & KEY_FIRE) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    for(new i = 0; i < MAX_PIX; i ++)
		{
	 		if(IsPlayerInRangeOfPoint(playerid,3.0,Pixacao[i][PixX],Pixacao[i][PixY],Pixacao[i][PixZ]))
	 		{
			    Pixando[playerid] = true;
			    new wep,ammo;
			    GetPlayerWeaponData(playerid, 9, wep, ammo);
			    SetTimerEx("GetAmmo",3500,false, "iiii", playerid,wep,ammo,i);
		    }
	    }
	}
	else if(Pixando[playerid] == false && IsACop(playerid) && GetPlayerWeapon(playerid) == 41 && (newkeys & KEY_FIRE ) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		for(new i = 0; i < MAX_PIX; i ++)
		{
			if(PlayerToPoint(3.0, playerid,Pixacao[i][PixX],Pixacao[i][PixY],Pixacao[i][PixZ]))
			{
				LimpandoPiche[playerid] = true;
				new wep,ammo;
				GetPlayerWeaponData(playerid, 9, wep, ammo);
				SetTimerEx("GetAmmo",3500,false, "iiii", playerid,wep,ammo,i);
			}
		}
	}
	if(Player[playerid][pMember] == TEAM_BOMBE && GetPlayerWeapon(playerid) == 42 && (newkeys & KEY_FIRE ) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
		for(new i=0; i<50; i++)
		{
			if(PlayerToPoint(5.0, playerid, fogoposX[i],fogoposY[i],fogoposZ[i]))
			{
			    new wep,ammo;
			    GetPlayerWeaponData(playerid, 9, wep, ammo);
			    SetTimerEx("GetAmmo",3000,false, "iiiii", playerid,wep,ammo,i);
			}
		}
	}
	if((newkeys==KEY_CROUCH)&&(IsPlayerInAnyVehicle(playerid))&&(GetPlayerState(playerid) == PLAYER_STATE_DRIVER))
    {
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
        {
	        SendClientMessage(playerid,COLOR_WHITE,"Tentando rebocar o carro!.");
			new Float:pos[6];
            GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
            new bool:Found, vid;
            while (vid < MAX_VEHICLES && !Found)
	        {
   				vid++;
   				GetVehiclePos(vid, pos[3], pos[4], pos[5]);
                if(floatabs(pos[0]-pos[3]) < 7.0 && floatabs(pos[1]-pos[4]) < 7.0 && floatabs(pos[2]-pos[5]) < 7.0 && vid != GetPlayerVehicleID(playerid))
			    {
   				    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			        	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
		   			else
		   			{
   				    	AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
	   				    SendClientMessage(playerid,COLOR_WHITE,"Carro Rebocado!");
				    }
                    Found = true;
   				}
			}
			if(!Found)
                SendClientMessage(playerid,COLOR_GREY,"O carro não está perto do guincho.");

        }
    }
	CheckGates(newkeys, playerid);

    if(newkeys == KEY_CROUCH && !IsPlayerInAnyVehicle(playerid))
    {
        new Float:posX, Float:posY, Float:posZ;
        foreach(new d: DroppedGun)
        {
            GetDynamicObjectPos(DroppedGuns[d][2], posX, posY, posZ);
            if(IsPlayerInRangeOfPoint(playerid, 1.0, posX, posY, posZ + 1.005))
            {
                new next;
                Iter_SafeRemove(DroppedGun, d, next);
                GivePlayerWeapon(playerid, DroppedGuns[d][0], DroppedGuns[d][1]);
                DestroyDynamicObject(DroppedGuns[d][2]);
                d = next;
            }
        }
    }

    if(newkeys == 16 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
        //Sprunk
        new sendername[MAX_PLAYER_NAME];
    	new string[128];
		if(IsAtCandySprunk(playerid))
        {
            if(TookSprunk[playerid] == 0)
            {
				new Float:health;
                GetPlayerHealth(playerid, health);
                if(health != 0)
                {
					GivePlayerGP(playerid, -15);
                    GiveBizMoney(Biz_Bebidas, 15);

					SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você pagou R$15,00 pelo Sprunk.");
	                TookSprunk[playerid] = 1;
	                SetTimerEx("SetHP",3750,false, "i", playerid);
				}
        	}
		}

		// Entrada Concessionaria
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1746.3688,-1107.4821,24.0781))
	    {
			SetPlayerPos(playerid, -2096.5818,-148.0583,1138.8004);
			SetPlayerVirtualWorld(playerid, 1);
		}
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1763.5934,-1107.4222,24.0781))
	    {
			SetPlayerPos(playerid, -2096.5818,-148.0583,1138.8004);
			SetPlayerVirtualWorld(playerid, 2);
		}
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1712.8915,-1107.4153,24.0781))
	    {
			SetPlayerPos(playerid, -2096.5818,-148.0583,1138.8004);
			SetPlayerVirtualWorld(playerid, 3);
		}

		// Saída Concessionária
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, -2096.5818,-148.0583,1138.8004))
	    {
			if(GetPlayerVirtualWorld(playerid) == 1) SetPlayerPos(playerid, 1746.3688,-1107.4821,24.0781);
			else if(GetPlayerVirtualWorld(playerid) == 2) SetPlayerPos(playerid, 1763.5934,-1107.4222,24.0781);
			else if(GetPlayerVirtualWorld(playerid) == 3) SetPlayerPos(playerid, 1712.8915,-1107.4153,24.0781);
			else SetPlayerPos(playerid, 1712.8915,-1107.4153,24.0781);
			SetPlayerVirtualWorld(playerid, 0);
		}

        // Subir Concessionária
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1797.7703, -1107.2690, 24.0781))
        {
			SetPlayerPos(playerid, 1780.5235, -1104.8666, 84.9687);
            SetPlayerFacingAngle(playerid, 180.0);

            SetCameraBehindPlayer(playerid);
        }

        // Descer Concessionária
        if(IsPlayerInRangeOfPoint(playerid, 3.0, 1780.4946, -1102.2449, 84.9687))
        {
        	SetPlayerPos(playerid, 1797.7703, -1105.2690, 24.0781);
            SetPlayerFacingAngle(playerid, 0.0);

            SetCameraBehindPlayer(playerid);
        }

		if(GetPlayerOrg(playerid) == TEAM_PREF)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, 375.5500, 180.8200, 1014.1875))
		    {
		        if(Equipou[playerid]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já se equipou.");
		        Equipou[playerid] = true;
				SetPlayerWeapon(playerid, 3, 1);
				SetPlayerWeapon(playerid, 24, 210); //7 * 10 * 3
				SetPlayerWeapon(playerid, 29, 900); //30 * 10 * 3
				SetPlayerWeapon(playerid, 31, 1000); //50 * 10 * 2
				SetPlayerArmour(playerid, 90);
				SetPlayerHealth(playerid, 100);
				format(string, sizeof(string), "* %s se equipou.", PlayerGetName(playerid));
				ProxDetectorEx(15.0, playerid, string, COLOR_PURPLE);
			}
		}
		if(Player[playerid][pMember] == TEAM_BOMBE && Player[playerid][pLeader] == TEAM_BOMBE)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 3.0, 320.6493, 309.3731, 999.1484))
		    {
		        //if(Equipou[playerid]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já se Equipou.");
		        Equipou[playerid] = true;
				SetPlayerWeapon(playerid, 42, 8000);
				SetPlayerArmour(playerid, 90);
				SetPlayerHealth(playerid, 100);
				SetPlayerSkin(playerid, 277);
				format(string, sizeof(string), "* %s se equipou.", PlayerGetName(playerid));
				ProxDetectorEx(15.0, playerid, string, COLOR_PURPLE);
			}
		}
		//if(Player[playerid][pLeader] == TEAM_PM || Player[playerid][pLeader] == TEAM_PCIVIL || Player[playerid][pMember] == TEAM_PCIVIL || Player[playerid][pLeader] == TEAM_PF || Player[playerid][pLeader] == TEAM_FA || Player[playerid][pLeader] == TEAM_MUNICIPAL || Player[playerid][pMember] == TEAM_PM || Player[playerid][pMember] == TEAM_PF || Player[playerid][pMember] == TEAM_FA || Player[playerid][pMember] == TEAM_BOPE || Player[playerid][pJob] == ADVOGADO)
        if(IsACopEx(playerid) || Player[playerid][pJob] == ADVOGADO)
	    {
	        if(PlayerToPoint(0.5, playerid,247.54922485,72.35515594,1004.01593018) || PlayerToPoint(0.5,playerid, 245.25082397,72.83595276,1004.02722168))
			{
	      		MoveDynamicObject(PortaoJ,248.895874,72.519198,1002.640625,1.0);
		        MoveDynamicObject(PortaoK,243.895874,72.519198,1002.640625,1.0);
			//	SendClientMessage(playerid, SERVER_INFO,"Porta aberta, fechando em 5 segundos...");
				SetTimerEx("Close", 5000, false, "iffff", PortaoJ,247.895874,72.519198,1002.640625, 3.0);
				SetTimerEx("Close", 5000, false, "iffff", PortaoK, 244.895874,72.519198,1002.640625, 3.0);
	      		format(string, sizeof(string), "%s abriu a porta da delegacia.", PlayerGetName(playerid));
	      		ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);
	      		ApplyAnimation(playerid,"PED","endchat_01",4.1,0,1,1,0,1500);
	       	}
		}
    	if(Player[playerid][pMember] == TEAM_PM)
/*        || GetPlayerOrg(playerid) == TEAM_ROCAM
        || GetPlayerOrg(playerid) == TEAM_FT)*/
		{
			if(PlayerToPoint(2, playerid,227.0215,73.6524,1005.0391))
			{
				if(OnDuty[playerid] == 0)
		        {
			    	format(string, sizeof(string), "O Oficial %s pegou seus equipamentos e distintivo.", PlayerGetName(playerid));
                    ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);

					SetPlayerFacingAngle(playerid, 90.0);
					ApplyAnimation(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		        SetTimerEx("LimparAnim", 2000, false, "i", playerid);

					SetPlayerWeapon(playerid, 3, 0);
					SetPlayerWeapon(playerid, 24, 200);
					SetPlayerWeapon(playerid, 25, 100);
					SetPlayerWeapon(playerid, 29, 600);
					SetPlayerWeapon(playerid, 31, 750);

					SetPlayerArmour(playerid, 90);
					SetPlayerHealth(playerid, 100);

                    if(Player[playerid][pLeader] == TEAM_PM)
                        SetPlayerSkin(playerid, 265);
                    else
                        ShowPlayerDialog(playerid, 1264, DIALOG_STYLE_LIST, "Skins", "Policial (Los Santos)\nPolicial (San Fierro)\nPolicial (Las Venturas)\nPolicial (Motos)\nSheriff 1\nSheriff 2\nEddie Pulaski\nJimmy Hernandez", "Selecionar", "");

					OnDuty[playerid] = 1;
				}
				else if(OnDuty[playerid] == 1)
				{
					format(string, sizeof(string), "O Oficial %s devolveu seus equipamentos e distintivo.", PlayerGetName(playerid));
                    ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);

		 			ApplyAnimation(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		        SetTimerEx("LimparAnim", 2000, false, "i", playerid);

					ResetPlayerWeapons(playerid);
					SetPlayerWeapon(playerid, 24, 21);

					SetPlayerArmour(playerid, 0);

                    SetPlayerSkin(playerid, Player[playerid][pModel]);

    				OnDuty[playerid] = 0;
				}
			}
		}
		else if(Player[playerid][pMember] == TEAM_PF)
		{
			if(PlayerToPoint(2, playerid, 240.2817, 123.2749, 1003.2576) && GetPlayerVirtualWorld(playerid) == 1)
			{
				if(OnDuty[playerid] == 0)
		        {
                    GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
                    format(string, sizeof(string), "O Agente Federal %s pegou seus equipamentos e distintivo.", PlayerGetName(playerid));
                    ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);

                    SetPlayerFacingAngle(playerid, 90.0);
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		        SetTimerEx("LimparAnim", 2000, false, "i", playerid);

					SetPlayerWeapon(playerid, 3, 0);
					SetPlayerWeapon(playerid, 24, 150);
					SetPlayerWeapon(playerid, 25, 100);
					SetPlayerWeapon(playerid, 29, 600);
					SetPlayerWeapon(playerid, 31, 750);
					SetPlayerWeapon(playerid, 34, 50);
					SetPlayerWeapon(playerid, 43, 72);

					SetPlayerHealth(playerid, 100);
					SetPlayerArmour(playerid, 90);

					SetPlayerSkin(playerid, 286);
		            //Player[playerid][pModel] = GetPlayerSkin(playerid);

					OnDuty[playerid] = 1;
				}
				else if(OnDuty[playerid] == 1)
				{
                    GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
					format(string, sizeof(string), "O Agente Federal %s devolveu seus equipamentos e distintivo.", PlayerGetName(playerid));
                    ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);

                    SetPlayerFacingAngle(playerid, 90.0);
					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      	       	    SetTimerEx("LimparAnim", 2000, false, "i", playerid);

					ResetPlayerWeapons(playerid);
					SetPlayerWeapon(playerid, 24, 21);

                    SetPlayerSkin(playerid, Player[playerid][pModel]);

					SetPlayerArmour(playerid, 0);

					OnDuty[playerid] = 0;
				}
			}
		}
		else if(Player[playerid][pMember] == TEAM_FA)
		{
			if(PlayerToPoint(2, playerid,318.4442,-164.7262,999.6010))
			{
				if(OnDuty[playerid] == 0)
		        {
			    	format(string, sizeof(string), "O Soldado %s pegou seus equipamentos e distintivo.", PlayerGetName(playerid));
                    ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);

					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		        SetTimerEx("LimparAnim", 2000, false, "i", playerid);

    	    		SetPlayerWeapon(playerid, 4, 1);
    				SetPlayerWeapon(playerid, 24, 300);
    	    		SetPlayerWeapon(playerid, 25, 100);
    				SetPlayerWeapon(playerid, 29, 600);
    				SetPlayerWeapon(playerid, 31, 750);
    	   			SetPlayerWeapon(playerid, 34, 100);
    	    		SetPlayerWeapon(playerid, 46, 1);

					SetPlayerArmour(playerid, 90);
					SetPlayerHealth(playerid, 100);

					//SetPlayerSkin(playerid, 287);

                    ShowPlayerDialog(playerid, 1266, DIALOG_STYLE_LIST, "Skins", "Exército\nPiloto\nParaquedista\nTreinamento\nMilitar Feminina", "Selecionar", "");
                    //Player[playerid][pModel] = GetPlayerSkin(playerid);

					OnDuty[playerid] = 1;
				}
				else if(OnDuty[playerid] == 1)
				{
					format(string, sizeof(string), "O Soldado %s devolveu seus equipamentos e distintivo.", PlayerGetName(playerid));
                    ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);

					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		        SetTimerEx("LimparAnim", 2000, false, "i", playerid);

					ResetPlayerWeapons(playerid);
					SetPlayerWeapon(playerid, 24, 21);

					SetPlayerArmour(playerid, 0);

                    SetPlayerSkin(playerid, Player[playerid][pModel]);

					OnDuty[playerid] = 0;
				}
			}
		}
		/*else if(Player[playerid][pMember] == TEAM_MUNICIPAL)
		{
			if(PlayerToPoint(2, playerid, 320.8569, 309.2000, 999.1484))
			{
				if(OnDuty[playerid] == 0)
		        {
			    	format(string, sizeof(string), "O agente da PRF %s pegou seus equipamentos e distintivo.", PlayerGetName(playerid));
                    ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);

                    SetPlayerFacingAngle(playerid, 90.0);
		 			ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		        SetTimerEx("LimparAnim", 2000, false, "i", playerid);

					SetPlayerWeapon(playerid, 3, 1);
					SetPlayerWeapon(playerid, 24, 200);
					SetPlayerWeapon(playerid, 25, 100);
					SetPlayerWeapon(playerid, 29, 300);
					SetPlayerWeapon(playerid, 31, 750);

					SetPlayerHealth(playerid, 100);
					SetPlayerArmour(playerid, 90);

					//if(Player[playerid][pRank] < 4)
					//   SetPlayerSkin(playerid, 282);
                    //else
					//   SetPlayerSkin(playerid, 283);

		            //Player[playerid][pModel] = GetPlayerSkin(playerid);

                    ShowPlayerDialog(playerid, 1264, DIALOG_STYLE_LIST, "Skins", "Policial (Los Santos)\nPolicial (San Fierro)\nPolicial (Las Venturas)\nPolicial (Motos)\nSheriff 1\nSheriff 2", "Selecionar", "");

					OnDuty[playerid] = 1;
				}
				else if(OnDuty[playerid] == 1)
				{
					format(string, sizeof(string), "O agente do PRF %s devolveu seus equipamentos e distintivo.", PlayerGetName(playerid));
                    ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);

                    SetPlayerFacingAngle(playerid, 90.0);
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		        SetTimerEx("LimparAnim", 2000, false, "i", playerid);

					ResetPlayerWeapons(playerid);
					SetPlayerWeapon(playerid, 24, 21);

					SetPlayerArmour(playerid, 0);

                    SetPlayerSkin(playerid, Player[playerid][pModel]);

					OnDuty[playerid] = 0;
				}
			}
		}*/
		/*else if(Player[playerid][pMember] == TEAM_PCIVIL)
		{
			if(PlayerToPoint(2, playerid, 220.7165, 176.6567, 1003.0253))
			{
				if(OnDuty[playerid] == 0)
		        {
                    GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
			    	format(string, sizeof(string), "O Policial Civil %s pegou seus equipamentos e distintivo.", PlayerGetName(playerid));
                    ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);

                    SetPlayerFacingAngle(playerid, 0.0);
		 			ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		        SetTimerEx("LimparAnim", 2000, false, "i", playerid);

					SetPlayerWeapon(playerid, 3, 1);
					SetPlayerWeapon(playerid, 24, 200);
					SetPlayerWeapon(playerid, 25, 50);
					SetPlayerWeapon(playerid, 29, 600);
					SetPlayerWeapon(playerid, 31, 750);
                    SetPlayerWeapon(playerid, 34, 50);

					SetPlayerHealth(playerid, 100);
					SetPlayerArmour(playerid, 90);

					if(Player[playerid][pRank] == 6)
					   SetPlayerSkin(playerid, 120);
                    else
					   SetPlayerSkin(playerid, 124);

                    ShowPlayerDialog(playerid, 1265, DIALOG_STYLE_LIST, "Skins", "Agente 1\nAgente 2", "Selecionar", "");

		            //Player[playerid][pModel] = GetPlayerSkin(playerid);
					OnDuty[playerid] = 1;
				}
				else if(OnDuty[playerid] == 1)
				{
                    GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
					format(string, sizeof(string), "O Policial Civil %s devolveu seus equipamentos e distintivo.", PlayerGetName(playerid));
                    ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);

                    SetPlayerFacingAngle(playerid, 0.0);
                    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		        SetTimerEx("LimparAnim", 2000, false, "i", playerid);

					ResetPlayerWeapons(playerid);
					SetPlayerWeapon(playerid, 24, 21);

					SetPlayerArmour(playerid, 0);

                    SetPlayerSkin(playerid, Player[playerid][pModel]);

					OnDuty[playerid] = 0;
				}
			}
		}*/
		else if(Player[playerid][pMember] == TEAM_BOPE && GetPlayerVirtualWorld(playerid) == 0)
		{
			if(PlayerToPoint(2, playerid,240.5815, 123.2306, 1003.2527))
			{
				if(OnDuty[playerid] == 0)
		        {
			    	format(string, sizeof(string), "O Agente BOPE %s pegou seus equipamentos e distintivo.", PlayerGetName(playerid));
                    ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);

					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		        SetTimerEx("LimparAnim", 2000, false, "i", playerid);

					SetPlayerWeapon(playerid, 3, 1);
					SetPlayerWeapon(playerid, 17, 10);
					SetPlayerWeapon(playerid, 24, 200);
					SetPlayerWeapon(playerid, 25, 100);
					SetPlayerWeapon(playerid, 29, 600);
					SetPlayerWeapon(playerid, 31, 750);
					SetPlayerWeapon(playerid, 34, 50);

					SetPlayerArmour(playerid, 90);
					SetPlayerHealth(playerid, 100);

					SetPlayerSkin(playerid, 285);
		            //Player[playerid][pModel] = GetPlayerSkin(playerid);

					OnDuty[playerid] = 1;
				}
				else if(OnDuty[playerid] == 1)
				{
					format(string, sizeof(string), "O Agente BOPE %s devolveu seus equipamentos e distintivo.", PlayerGetName(playerid));
                    ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);

					ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
     	            SetTimerEx("LimparAnim", 2000, false, "i", playerid);

					ResetPlayerWeapons(playerid);
					SetPlayerWeapon(playerid, 24, 21);

					SetPlayerArmour(playerid, 0);

                    SetPlayerSkin(playerid, Player[playerid][pModel]);

					OnDuty[playerid] = 0;
				}
			}
		}
		for(new i = 0; i < MAX_ATMS; i ++)
        {
	 		if(PlayerToPoint(1.25, playerid, ATMs[i][ATMPosX], ATMs[i][ATMPosY], ATMs[i][ATMPosZ]) && ATMs[i][ATMPodeUsar])
            {
				ShowPlayerDialog(playerid,DIALOG_ATM,DIALOG_STYLE_LIST,"Caixa Rápido","-Ver Saldo \n-Sacar \n-Depositar \n-Transferir\n","Selecionar","Voltar");
                TogglePlayerControllable(playerid, false);
                TogglePlayerControllable(playerid, true);
            }
        }
        if(IsPlayerInRangeOfPoint(playerid, 3.0, 2308.8520, -13.3233, 26.7418))
            ShowPlayerDialog(playerid,DIALOG_ATM,DIALOG_STYLE_LIST,"Banco","-Ver Saldo \n-Sacar \n-Depositar \n-Transferir\n","Selecionar","Voltar");

		if(PlayerToPoint(1.0, playerid, 952.5583, -909.3518, 45.7656))//auto escola entrada
		{
			SafeSetPlayerPos(playerid, 1494.5456, 1305.0952, 1093.2890);
            SetPlayerFacingAngle(playerid, 0.0);

	        SetPlayerInterior(playerid, 3);
			Player[playerid][pInt] = 3;

			GameTextForPlayer(playerid, "~y~bem vindo a~n~~r~auto escola", 5000, 1);
			Player[playerid][pLocal] = 9999;
		}
		else if(PlayerToPoint(1.0, playerid, 1494.4216, 1303.9289, 1093.2890))//auto escola saida
		{
			SafeSetPlayerPos(playerid, 952.5527, -911.4453, 45.7656);
            SetPlayerFacingAngle(playerid, 180.0);

	        SetPlayerInterior(playerid, 0);
			Player[playerid][pInt] = 0;

			Player[playerid][pLocal] = 255;
		}
		else if(PlayerToPoint(1, playerid,2695.6235,-1704.6960,11.8438))
		{
		    GameTextForPlayer(playerid, "~w~bem vindo ao 8ball Track", 5000, 1);
		    SetPlayerInterior(playerid,7);
			SafeSetPlayerPos(playerid,-1404.5299,-259.0602,1043.6563);
		}
		else if(PlayerToPoint(1, playerid,-1404.5299,-259.0602,1043.6563))
		{
		    SetPlayerInterior(playerid,0);
			SafeSetPlayerPos(playerid,2695.6235,-1704.6960,11.8438);
		}
		else if(PlayerToPoint(1, playerid,1554.3798,-1675.6377,16.1953) || PlayerToPoint(1, playerid,1524.7883,-1677.8892,7.218750)) //dp entrada
		{
	       	SetPlayerInterior(playerid,6);
	       	SafeSetPlayerPos(playerid,246.7872,62.8089,1003.6406);
          	if(!IsACop(playerid))
			{
          	 	for(new a = 0; a < 13; a++) GetPlayerWeaponData(playerid, a, weapons[a][0][playerid], weapons[a][1][playerid]);
	   	        ResetPlayerWeapons(playerid);
	           	SendClientMessage(playerid, COLOR_GREY, "Você passou no detector de metais e suas armas foram retiradas.");
        	    SendClientMessage(playerid, COLOR_GREY, "Caso você possua porte de armas elas serão devolvidas.");
			}
		}
		else if(PlayerToPoint(1, playerid,246.7872,62.8089,1003.6406) || PlayerToPoint(1, playerid,246.5332,86.9715,1004.6406)) //dp saida
		{
		    //if(Player[playerid][pMember] == TEAM_PM || Player[playerid][pMember] == TEAM_PF || Player[playerid][pMember] == TEAM_FA || Player[playerid][pMember] == TEAM_PREF || Player[playerid][pMember] == TEAM_MUNICIPAL || Player[playerid][pMember] == TEAM_BOPE)
            if(IsACop(playerid))
            {
		        SetPlayerInterior(playerid,0);
	        	SafeSetPlayerPos(playerid,1551.3892,-1675.6689,15.8282);
	        	SetPlayerFacingAngle(playerid, 90.0);
            }
   	        else
       	    {
		    	if(Player[playerid][pGunLic] != 1)
			    {
            		SetPlayerInterior(playerid,0);
	    	    	SafeSetPlayerPos(playerid,1551.3892,-1675.6689,15.8282);
	    	    	SetPlayerFacingAngle(playerid, 90.0);
		        	SendClientMessage(playerid,COLOR_GREY, "Suas armas não foram devolvidas por que você não tem licença de armas!");
					return true;
				}
				else
				{
					for (new a = 0; a < 13; a++) SafeGivePlayerWeapon(playerid,weapons[a][0][playerid], weapons[a][1][playerid]);
   					SetPlayerInterior(playerid,0);
	        		SafeSetPlayerPos(playerid,1551.3892,-1675.6689,15.8282);
	        		SetPlayerFacingAngle(playerid, 90.0);
	        		SendClientMessage(playerid,COLOR_GREY, "Suas armas foram devolvidas por que você possui licença de armas.");
				}
			}
		}
		else if(PlayerToPoint(3.0, playerid,1524.4830,-1677.7732,6.2188))// DP garagem entrada
		{
			GameTextForPlayer(playerid, "~b~Departamento de policia", 5000, 1);
            SetPlayerInterior(playerid,6);
            SafeSetPlayerPos(playerid,246.4902,87.6368,1003.6406);
            Player[playerid][pInt] = 6;
            Player[playerid][pLocal] = 200;
	    }
	    else if(PlayerToPoint(3.0, playerid,246.4902,87.6368,1003.6406))// DP garagem saida
		{
		    //if(Player[playerid][pMember] == TEAM_PM || Player[playerid][pMember] == TEAM_PCIVIL || Player[playerid][pMember] == TEAM_PF || Player[playerid][pMember] == TEAM_FA || Player[playerid][pMember] == TEAM_PREF || Player[playerid][pMember] == TEAM_MUNICIPAL || Player[playerid][pMember] == TEAM_BOPE)
            if(IsACop(playerid))
            {
	            SetPlayerInterior(playerid,0);
	            SafeSetPlayerPos(playerid,1524.4830,-1677.7732,6.2188);
	            Player[playerid][pInt] = 0;
	            Player[playerid][pLocal] = 255;
            }
            else
                SendClientMessage(playerid,COLOR_RED,"[ERRO]:{FFFFFF} Você não tem as chaves desta porta.");
	    }
		else if(PlayerToPoint(2.0, playerid,1652.7452,-1272.2284,14.8136)) // Condominio entrada1
   		{
   		    SafeSetPlayerPos(playerid, 1702.5358,-1667.8009,20.2188);
    		SetPlayerInterior(playerid, 18);
   		}
   		else if(PlayerToPoint(2.0, playerid,1702.5358,-1667.8009,20.2188)) // Condominio saida1
   		{
   		    SafeSetPlayerPos(playerid, 1652.7452,-1272.2284,14.8136);
    		SetPlayerInterior(playerid, 0);
   		}
   		else if(PlayerToPoint(2.0, playerid,1673.4814,-1219.6364,14.8976)) // Condominio entrada2
   		{
   		    SafeSetPlayerPos(playerid, 1727.0551,-1637.8459,20.2229);
    		SetPlayerInterior(playerid, 18);
   		}
   		else if(PlayerToPoint(2.0, playerid,1727.0551,-1637.8459,20.2229)) // Condominio saida2
   		{
   		    SafeSetPlayerPos(playerid, 1673.4814,-1219.6364,14.8976);
    		SetPlayerInterior(playerid, 0);
   		}
   		else if(PlayerToPoint(1, playerid,1127.0536, -2036.8794, 69.8837))//Prefeitura entrada
		{
		    SetPlayerInterior(playerid,3);
			SafeSetPlayerPos(playerid,390.7658,173.7874,1008.3828);
			GameTextForPlayer(playerid, "~w~bem vindo a prefeitura", 5000, 1);
			Player[playerid][pInt] = 3;
		}
		else if(PlayerToPoint(1, playerid,390.7658,173.7874,1008.3828))//Prefeitura saida
		{
		    SetPlayerInterior(playerid,0);
			SafeSetPlayerPos(playerid,1127.0536, -2036.8794, 69.8837);
			Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,1382.1472, -1088.7833, 28.2106))//Advogado entrada
		{
		    SetPlayerInterior(playerid,1);
			SafeSetPlayerPos(playerid,2676.5840,-610.7538,-67.8005);
			Player[playerid][pInt] = 1;
		}
		else if(PlayerToPoint(1, playerid,2674.2112,-610.8218,-71.6582))//Advogado saida
		{
		    SetPlayerInterior(playerid,0);
			SafeSetPlayerPos(playerid,1382.1472,-1088.7833,28.2106);
			Player[playerid][pInt] = 0;
		}
        //~ Alterar
        //Ex: 328.4095, -1512.6602, 36.0390 ~ Int: 246.4531, 110.9530, 1003.2187, 0.0, 10 ~ VW: 1 ~ Entrada
        //Int: 246.4869, 107.7615, 1003.2188 ~ VW: 1 ~ Ex: 330.0432, -1513.6362, 35.8671, 230.0 ~ Saida
		else if(PlayerToPoint(1, playerid, 327.2900,-1513.4558,36.0325))//HQ PF entrada
		{
		    SafeSetPlayerPos(playerid, 246.4531, 110.9530, 1003.2187);
            SetPlayerFacingAngle(playerid, 0.0);
            SetPlayerVirtualWorld(playerid, 1);

		    SetPlayerInterior(playerid, 10);
            Player[playerid][pInt] = 10;
		}
		else if(PlayerToPoint(1, playerid, 246.4869, 107.7615, 1003.2188) && GetPlayerVirtualWorld(playerid) == 1)//HQ PF saida1
		{
		    SafeSetPlayerPos(playerid, 330.0432, -1513.6362, 35.8671);
            SetPlayerFacingAngle(playerid, 230.0);
            SetPlayerVirtualWorld(playerid, 0);

		    SetPlayerInterior(playerid, 0);
            Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid, 316.1968, -1513.6556, 24.9219))//HQ PF Entrar pela Garagem
		{
		    if(IsACop(playerid))
            {
    		    SafeSetPlayerPos(playerid, 225.6330, 121.0247, 999.0695);
                SetPlayerFacingAngle(playerid, 132.5);
                SetPlayerVirtualWorld(playerid, 1);

    		    SetPlayerInterior(playerid, 10);
                Player[playerid][pInt] = 10;
			}
	        else
                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Porta trancada.");
		}
		else if(PlayerToPoint(1, playerid, 225.6330, 124.2645, 999.0156) && GetPlayerVirtualWorld(playerid) == 1)//HQ PF Sair p/ Garagem
		{
		    if(IsACop(playerid))
            {
			    SafeSetPlayerPos(playerid,316.1968, -1513.6556, 24.9219);
                SetPlayerFacingAngle(playerid, 55.0);
                SetPlayerVirtualWorld(playerid, 0);

			    SetPlayerInterior(playerid, 0);
			    Player[playerid][pInt] = 0;
			}
	        else
                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Porta trancada.");
  		}
		else if(PlayerToPoint(1, playerid, 238.6568, 114.8699, 1010.2187) && GetPlayerVirtualWorld(playerid) == 1)//HQ PF Subir
		{
  		    if(IsACop(playerid))
            {
    		    SafeSetPlayerPos(playerid, 315.9400, -1507.8166, 76.5390);
                SetPlayerFacingAngle(playerid, 228.5);
                SetPlayerVirtualWorld(playerid, 0);

    		    SetPlayerInterior(playerid, 0);
                Player[playerid][pInt] = 0;
            }
	        else
                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Porta trancada.");
		}
		else if(PlayerToPoint(1, playerid, 313.6436, -1505.7624, 76.7390))//HQ PF Entrar por Cima
		{
		    if(IsACop(playerid))
            {
    		    SafeSetPlayerPos(playerid, 236.6568, 114.8699, 1010.2187);
                SetPlayerFacingAngle(playerid, 90.0);
                SetPlayerVirtualWorld(playerid, 1);

    		    SetPlayerInterior(playerid, 10);
                Player[playerid][pInt] = 10;
			}
	        else
                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Porta trancada.");
		}


        //----------------------------------------------------------------------

		else if(PlayerToPoint(1, playerid,2421.4651,-1219.3932,25.5522)) // puteiro entrada
		{
	        SetPlayerInterior(playerid,2);
			SafeSetPlayerPos(playerid,1204.8531,-13.8454,1000.9219);
		}
		else if(PlayerToPoint(1, playerid,1204.8531,-13.8454,1000.9219)) // puteiro saida
		{
	        SetPlayerInterior(playerid,0);
			SafeSetPlayerPos(playerid,2421.4075,-1219.6160,25.5380);
		}
		else if(PlayerToPoint(1, playerid,720.9106,-1339.9320,13.8480))//HQ BOPE entrada
		{
            SafeSetPlayerPos(playerid,246.4869,107.7615,1003.2188);
            SetPlayerFacingAngle(playerid, 277.0);
		    SetPlayerInterior(playerid,10);
		    Player[playerid][pInt] = 10;
		}
		else if(PlayerToPoint(1, playerid,246.4869,107.7615,1003.2188))//HQ BOPE saida
		{
            SafeSetPlayerPos(playerid,720.9106,-1339.9320,13.8480);
            SetPlayerFacingAngle(playerid, 270.0);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,1940.4210,-2115.9280,13.6953))//Sex shop entrada
		{
            SafeSetPlayerPos(playerid,-100.1601,-25.7164,1000.7188);
		    SetPlayerInterior(playerid,3);
		    Player[playerid][pInt] = 3;
		}
		else if(PlayerToPoint(1, playerid,-100.1601,-25.7164,1000.7188))//Sex shop saida
		{
            SafeSetPlayerPos(playerid,1940.4210,-2115.9280,13.6953);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,2196.2703,1677.0828,12.3672))//Cassino entrada
		{
            SafeSetPlayerPos(playerid,2234.7202,1714.6704,1012.0874);
		    SetPlayerInterior(playerid,1);
		    Player[playerid][pInt] = 1;
		}
		else if(PlayerToPoint(1, playerid,2234.7202,1714.6704,1012.0874))//Cassino saida
		{
            SafeSetPlayerPos(playerid,2196.2703,1677.0828,12.3672);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,1038.2190,-1340.5662,13.7431))//rosca entrada
		{
            SafeSetPlayerPos(playerid,377.1373,-193.1733,1000.6328);
		    SetPlayerInterior(playerid,17);
		    Player[playerid][pInt] = 17;
		}
		else if(PlayerToPoint(1, playerid,377.1373,-193.1733,1000.6328))//rosca saida
		{
            SafeSetPlayerPos(playerid,1038.2190,-1340.5662,13.7431);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,928.3212,-1352.9554,13.3438))//cluckin LS entrada
		{
            SafeSetPlayerPos(playerid,364.8187,-11.3235,1001.8515);
		    SetPlayerInterior(playerid,9);
		    cluckinexit[playerid] += 1;
            SetPlayerVirtualWorld(playerid,1);
		}
		else if(PlayerToPoint(1, playerid,2638.5730,1671.7606,11.0234))// cluckin LV1 entrada
		{
            SafeSetPlayerPos(playerid,364.8187,-11.3235,1001.8515);
		    SetPlayerInterior(playerid,9);
            SetCameraBehindPlayer(playerid);
            cluckinexit[playerid] += 2;
            SetPlayerVirtualWorld(playerid,2);
		}
		else if(PlayerToPoint(1, playerid,2393.3562,2041.5771,10.8203))// cluckin LV2 entrada
		{
            SafeSetPlayerPos(playerid,364.8187,-11.3235,1001.8515);
		    SetPlayerInterior(playerid,9);
            SetCameraBehindPlayer(playerid);
            cluckinexit[playerid] += 3;
            SetPlayerVirtualWorld(playerid,3);
		}
		else if(PlayerToPoint(1, playerid,2101.8975,2228.8127,11.0234))// cluckin LV3 entrada
		{
            SafeSetPlayerPos(playerid,364.8187,-11.3235,1001.8515);
		    SetPlayerInterior(playerid,9);
            SetCameraBehindPlayer(playerid);
            cluckinexit[playerid] += 4;
            SetPlayerVirtualWorld(playerid,4);
		}
		else if(PlayerToPoint(1.0, playerid, 364.8187,-11.3235,1001.8515)) // cluckin saida
		{
            if(cluckinexit[playerid] == 1)// cluckin LS saida
			{
	            SafeSetPlayerPos(playerid,928.3212,-1352.9554,13.3438);
			    SetPlayerInterior(playerid,0);
			    Player[playerid][pInt] = 0;
			    cluckinexit[playerid] = 0;
			}
			if(cluckinexit[playerid] == 2)// cluckin LV1 saida
			{
	            SafeSetPlayerPos(playerid,2638.5730,1671.7606,11.0234);
			    SetPlayerInterior(playerid,0);
			    Player[playerid][pInt] = 0;
			    cluckinexit[playerid] = 0;
			}
			if(cluckinexit[playerid] == 3)// cluckin LV2 saida
			{
	            SafeSetPlayerPos(playerid,2393.3562,2041.5771,10.8203);
			    SetPlayerInterior(playerid,0);
			    Player[playerid][pInt] = 0;
			    cluckinexit[playerid] = 0;
			}
			if(cluckinexit[playerid] == 4)// cluckin LV3 saida
			{
	            SafeSetPlayerPos(playerid,2101.8975,2228.8127,11.0234);
			    SetPlayerInterior(playerid,0);
			    Player[playerid][pInt] = 0;
			    cluckinexit[playerid] = 0;
			}
			SetPlayerVirtualWorld(playerid,0);
			return true;
		}
		else if(PlayerToPoint(1, playerid,2104.7605,-1806.4418,13.5547))//pizzaria LS entrada
		{
            SafeSetPlayerPos(playerid,372.3066,-133.1851,1001.4921);
		    SetPlayerInterior(playerid,5);
		    pizzaexit[playerid] += 1;
            SetPlayerVirtualWorld(playerid,1);
		}
		else if(PlayerToPoint(1, playerid,2083.2524,2224.6887,11.0234))// pizzaria LV1 entrada
		{
            SafeSetPlayerPos(playerid,372.3066,-133.1851,1001.4921);
		    SetPlayerInterior(playerid,5);
            SetCameraBehindPlayer(playerid);
            pizzaexit[playerid] += 2;
            SetPlayerVirtualWorld(playerid,2);
		}
		else if(PlayerToPoint(1, playerid,2638.7815,1849.8501,11.0234))// pizzaria LV2 entrada
		{
            SafeSetPlayerPos(playerid,372.3066,-133.1851,1001.4921);
		    SetPlayerInterior(playerid,5);
            SetCameraBehindPlayer(playerid);
            pizzaexit[playerid] += 3;
            SetPlayerVirtualWorld(playerid,3);
		}
		else if(PlayerToPoint(1, playerid,2351.8073,2533.6237,10.8203))// pizzaria LV3 entrada
		{
            SafeSetPlayerPos(playerid,372.3066,-133.1851,1001.4921);
		    SetPlayerInterior(playerid,5);
            SetCameraBehindPlayer(playerid);
            pizzaexit[playerid] += 4;
            SetPlayerVirtualWorld(playerid,4);
		}
		else if(PlayerToPoint(1.0, playerid, 372.3360,-133.5212,1001.1921)) // pizzaria saida
		{
            if(pizzaexit[playerid] == 1)// pizzaria LS saida
			{
	            SafeSetPlayerPos(playerid,2104.7605,-1806.4418,13.5547);
			    SetPlayerInterior(playerid,0);
			    Player[playerid][pInt] = 0;
			    pizzaexit[playerid] = 0;
			    SetPlayerVirtualWorld(playerid,0);
				return true;
			}
			if(pizzaexit[playerid] == 2)// pizzaria LV1 saida
			{
	            SafeSetPlayerPos(playerid,2083.2524,2224.6887,11.0234);
			    SetPlayerInterior(playerid,0);
			    Player[playerid][pInt] = 0;
			    pizzaexit[playerid] = 0;
			    SetPlayerVirtualWorld(playerid,0);
				return true;
			}
			if(pizzaexit[playerid] == 3)// pizzaria LV2 saida
			{
	            SafeSetPlayerPos(playerid,2638.7815,1849.8501,11.0234);
			    SetPlayerInterior(playerid,0);
			    Player[playerid][pInt] = 0;
			    pizzaexit[playerid] = 0;
			    SetPlayerVirtualWorld(playerid,0);
				return true;
			}
			if(pizzaexit[playerid] == 4)// pizzaria LV3 saida
			{
	            SafeSetPlayerPos(playerid,2351.8073,2533.6237,10.8203);
			    SetPlayerInterior(playerid,0);
			    Player[playerid][pInt] = 0;
			    pizzaexit[playerid] = 0;
			    SetPlayerVirtualWorld(playerid,0);
				return true;
			}
		}
		else if(PlayerToPoint(1.0, playerid, 1199.2856,-918.5673,43.1198)) //Burger Shot LS norte entrada
		{
           	SafeSetPlayerPos(playerid, 364.0662,-73.9463,1001.5078);
           	SetPlayerInterior(playerid, 10);
           	burgerexit[playerid] += 1;
           	SetPlayerVirtualWorld(playerid,1);
		}
		else if(PlayerToPoint(1.0, playerid, 810.4879,-1616.1256,13.5469)) // BurgerBurger Shot LS sul entrada
		{
           	SafeSetPlayerPos(playerid, 364.0662,-73.9463,1001.5078);
           	SetPlayerInterior(playerid, 10);
           	burgerexit[playerid] += 2;
           	SetPlayerVirtualWorld(playerid,2);
		}
		else if(PlayerToPoint(1.0, playerid, 2472.8430,2034.2061,11.0625)) // Burger shot LV1 entrada
		{
           	SafeSetPlayerPos(playerid, 364.0662,-73.9463,1001.5078);
           	SetPlayerInterior(playerid, 10);
           	burgerexit[playerid] += 3;
           	SetPlayerVirtualWorld(playerid,3);
		}
		else if(PlayerToPoint(1.0, playerid, 2367.0420,2071.1606,10.8203)) // Burger shot LV2 entrada
		{
           	SafeSetPlayerPos(playerid, 364.0662,-73.9463,1001.5078);
           	SetPlayerInterior(playerid, 10);
           	burgerexit[playerid] += 4;
           	SetPlayerVirtualWorld(playerid,4);
		}
		else if(PlayerToPoint(1.0, playerid, 1872.2538,2071.8525,11.0625)) // Burger shot LV3 entrada
		{
           	SafeSetPlayerPos(playerid, 364.0662,-73.9463,1001.5078);
           	SetPlayerInterior(playerid, 10);
           	burgerexit[playerid] += 5;
           	SetPlayerVirtualWorld(playerid,5);
		}
		else if(PlayerToPoint(1.0, playerid, 1157.9180,2072.0603,11.0625)) // Burger shot LV4 entrada
		{
           	SafeSetPlayerPos(playerid, 364.0662,-73.9463,1001.5078);
           	SetPlayerInterior(playerid, 10);
           	burgerexit[playerid] += 6;
           	SetPlayerVirtualWorld(playerid,6);
		}
		else if(PlayerToPoint(1.0, playerid, 363.1819,-75.0567,1001.5078)) // Burger shot saida
		{
			if(burgerexit[playerid] == 1)//Burger Shot LS norte saida
			{
				burgerexit[playerid] = 0;
            	SafeSetPlayerPos(playerid, 1199.4812,-921.2283,43.1094);
            	SetPlayerInterior(playerid, 0);
            	SetPlayerVirtualWorld(playerid,0);
				return true;
			}
			if(burgerexit[playerid] == 2)//Burger Shot LS sul saida
			{
				burgerexit[playerid] = 0;
	            SafeSetPlayerPos(playerid, 814.7692,-1616.0751,13.6206);
	            SetPlayerInterior(playerid, 0);
	            SetPlayerVirtualWorld(playerid,0);
	            return true;
			}
			if(burgerexit[playerid] == 3)//Burger Shot LV1 saida
			{
				burgerexit[playerid] = 0;
            	SafeSetPlayerPos(playerid, 2472.8430,2034.2061,11.0625);
            	SetPlayerInterior(playerid, 0);
            	SetPlayerVirtualWorld(playerid,0);
				return true;
			}
			if(burgerexit[playerid] == 4)//Burger Shot LV2 saida
			{
				burgerexit[playerid] = 0;
	            SafeSetPlayerPos(playerid, 2367.0420,2071.1606,10.8203);
	            SetPlayerInterior(playerid, 0);
	            SetPlayerVirtualWorld(playerid,0);
	            return true;
			}
			if(burgerexit[playerid] == 5)//Burger Shot LV3 saida
			{
				burgerexit[playerid] = 0;
            	SafeSetPlayerPos(playerid, 1872.2538,2071.8525,11.0625);
            	SetPlayerInterior(playerid, 0);
            	SetPlayerVirtualWorld(playerid,0);
				return true;
			}
			if(burgerexit[playerid] == 6)//Burger Shot LV3 saida
			{
				burgerexit[playerid] = 0;
            	SafeSetPlayerPos(playerid, 1157.9180,2072.0603,11.0625);
            	SetPlayerInterior(playerid, 0);
            	SetPlayerVirtualWorld(playerid,0);
				return true;
			}
		}

        //24-7 DP
		else if(PlayerToPoint(1.0, playerid, 1352.2979, -1758.2746, 13.5078))
		{
            SafeSetPlayerPos(playerid, -27.4117, -57.3621, 1003.5468);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 6);

            SetCameraBehindPlayer(playerid);
		}
        else if(PlayerToPoint(1.0, playerid, -27.4117, -57.3621, 1003.5468)
             && GetPlayerVirtualWorld(playerid) == 0)
        {
            SafeSetPlayerPos(playerid, 1352.2979, -1758.2746, 13.5078);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
        }

        //24-7 Norte
		else if(PlayerToPoint(1.0, playerid, 1315.5980, -898.9420, 39.5781))
		{
            SafeSetPlayerPos(playerid, -25.9887, -140.2994, 1003.5468);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 16);

            SetCameraBehindPlayer(playerid);
		}
		else if(PlayerToPoint(1.0, playerid, -25.9887, -140.2994, 1003.5468))
		{
            SafeSetPlayerPos(playerid, 1315.5980, -898.9420, 39.5781);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
		}

        //24-7 perto da Cluckin' Bell
		else if(PlayerToPoint(1.0, playerid, 2423.5771, -1923.2297, 13.5468))
		{
            SafeSetPlayerPos(playerid, -27.4117, -57.3621, 1003.5468);
            SetPlayerVirtualWorld(playerid, 1);
            SetPlayerInterior(playerid, 6);
		}
		else if(PlayerToPoint(1.0, playerid, -27.4117, -57.3621, 1003.5468)
             && GetPlayerVirtualWorld(playerid) == 1)
		{
            SafeSetPlayerPos(playerid, 2423.5771, -1923.2297, 13.5468);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
		}

        //24-7 Pier
		else if(PlayerToPoint(1.0, playerid, 374.9634, -2055.7504, 8.0156))
		{
            SafeSetPlayerPos(playerid, -25.8902, -186.5804, 1003.5468);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 17);

            SetCameraBehindPlayer(playerid);
		}
		else if(PlayerToPoint(1.0, playerid, -25.8902, -186.5804, 1003.5468))
		{
            SafeSetPlayerPos(playerid, 374.9634, -2055.7504, 8.0156);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
		}

        //24-7 Spawn
		else if(PlayerToPoint(1.0, playerid, 1832.6463, -1842.5885, 13.5781))
		{
            SafeSetPlayerPos(playerid, -27.3541, -29.6933, 1003.5572);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 4);

            SetCameraBehindPlayer(playerid);
		}
		else if(PlayerToPoint(1.0, playerid, -27.3541, -29.6933, 1003.5572))
		{
            SafeSetPlayerPos(playerid, 1832.6463, -1842.5885, 13.5781);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
		}

		/*else if(PlayerToPoint(1, playerid,2140.9441,-1802.1223,16.1475))//king's entrada
		{
		    SetPlayerInterior(playerid,1);
			SafeSetPlayerPos(playerid,453.5516,-18.4287,1001.1328);
		}
		else if(PlayerToPoint(1, playerid,453.5516,-18.4287,1001.1328))//king's saida
		{
		    SetPlayerInterior(playerid,0);
			SafeSetPlayerPos(playerid,2140.9441,-1802.1223,16.1475);
		}*/
		else if(PlayerToPoint(1, playerid,2595.8110,2790.7332,10.8203))//usina entrada
		{
            SafeSetPlayerPos(playerid,-959.5595,1956.3635,9.00003);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,17);
		    Player[playerid][pInt] = 17;
		}
		else if(PlayerToPoint(1, playerid,-959.5595,1956.3635,9.0000))//usina saida
		{
            SafeSetPlayerPos(playerid,2595.8110,2790.7332,10.8203);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,1830.4603,-1768.1846,13.5469))//deposito entrada
		{
            SafeSetPlayerPos(playerid,1062.2012,2077.5088,10.8203);
            SetPlayerFacingAngle(playerid, 0.0);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,1062.2012,2077.5088,10.8203))//deposito saida
		{
            SafeSetPlayerPos(playerid,1830.4603,-1768.1846,13.5469);
            SetPlayerFacingAngle(playerid, 0.0);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,1858.5580,-1792.8334,17.7473))//deposito entrada2
		{
            SafeSetPlayerPos(playerid,1091.5336,2121.9229,15.3504);
            SetPlayerFacingAngle(playerid, 180.0);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,1091.5336,2121.9229,15.3504))//deposito saida2
		{
            SafeSetPlayerPos(playerid,1858.5580,-1792.8334,18.2473);
            SetPlayerFacingAngle(playerid, 180.0);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		/// arrumar daqui pra baixo
		/*else if(PlayerToPoint(1, playerid,2770.6277,-1627.9957,12.1775))//HQ Pcc entrada
		{
            SafeSetPlayerPos(playerid, 2575.2285, -1300.3563, 1060.9843);
		    SetPlayerInterior(playerid,2);
		    Player[playerid][pInt] = 2;
		}
		else if(PlayerToPoint(1, playerid,2577.8101,-1300.3234,1060.9844))//HQ Pcc entrar
		{
            SafeSetPlayerPos(playerid,2770.6277,-1627.9957,12.1775);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}*/
		else if(PlayerToPoint(1, playerid,1571.0620,-1336.6965,16.4844))//Porta 1 Roubo entrada
		{
            SafeSetPlayerPos(playerid,2266.6208,1675.9430,1090.4453);
            SetPlayerFacingAngle(playerid, 189.4263);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,1);
		    Player[playerid][pInt] = 1;
		}
		else if(PlayerToPoint(1, playerid,2266.6208,1675.9430,1090.4453))//Porta 1 Roubo entrar
		{
            SafeSetPlayerPos(playerid,1571.0620,-1336.6965,16.4844);
            SetPlayerFacingAngle(playerid, 189.4263);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,2266.3604,1647.5522,1084.2344))//Porta elevador Roubo entrada
		{
            SafeSetPlayerPos(playerid,958.9839,2100.9421,1011.0262);
            SetPlayerFacingAngle(playerid, 90.9277);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,1);
		    Player[playerid][pInt] = 1;
		}
		else if(PlayerToPoint(1, playerid,958.9839,2100.9421,1011.0262))//Porta elevador Roubo saida
		{
            SafeSetPlayerPos(playerid,2266.3604,1647.5522,1084.2344);
            SetPlayerFacingAngle(playerid, 90.9277);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,1);
		    Player[playerid][pInt] = 1;
		}
		else if(PlayerToPoint(1, playerid,2264.7314,1619.5131,1090.4453))//TOPO entrada
		{
            SafeSetPlayerPos(playerid,1548.5200,-1366.5095,326.2109);
            SetPlayerFacingAngle(playerid, 88.9277);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,1548.5200,-1366.5095,326.2109))//TOPO saida
		{
            SafeSetPlayerPos(playerid,2264.7314,1619.5131,1090.4453);
            SetPlayerFacingAngle(playerid, 88.9277);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,1548.6365,-1363.7911,326.2183))//TOPO entrada2
		{
            SafeSetPlayerPos(playerid,2266.3047,1619.6364,1090.4453);
            SetPlayerFacingAngle(playerid, 268.9277);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,1);
		    Player[playerid][pInt] = 1;
		}
		else if(PlayerToPoint(1, playerid,2266.3047,1619.6364,1090.4453))//TOPO saida2
		{
            SafeSetPlayerPos(playerid,1548.6365,-1363.7911,326.2183);
            SetPlayerFacingAngle(playerid, 268.9277);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,1);
		    Player[playerid][pInt] = 1;
		}
		else if(PlayerToPoint(1, playerid,2264.4968,1675.8313,1090.4453))//Sair principal
		{
            SafeSetPlayerPos(playerid,1576.0704,-1335.0132,16.4844);
            SetPlayerFacingAngle(playerid, 312.9277);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,1576.0704,-1335.0132,16.4844))//Sair principal
		{
            SafeSetPlayerPos(playerid,2264.4968,1675.8313,1090.4453);
            SetPlayerFacingAngle(playerid, 312.9277);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,958.9973,2102.4746,1011.0278))//Sair roubo ir elevador
		{
            SafeSetPlayerPos(playerid, 2269.0479,1646.3433,1084.2344);
            SetPlayerFacingAngle(playerid, 270.9277);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,1);
		    Player[playerid][pInt] = 1;
		}
		else if(PlayerToPoint(1, playerid,2269.0479,1646.3433,1084.2344))//Sair roubo ir elevador
		{
            SafeSetPlayerPos(playerid, 958.9973,2102.4746,1011.0278);
            SetPlayerFacingAngle(playerid, 270.9277);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,1);
		    Player[playerid][pInt] = 1;
		}
		else if(PlayerToPoint(1, playerid,2495.3159,-1691.0486,14.7656)) //HQ groove entrada
		{
	        SetPlayerInterior(playerid,3);
	        SafeSetPlayerPos(playerid,2496.0254,-1695.3577,1014.7422);
            SetPlayerVirtualWorld(playerid,1);
		}
		else if(PlayerToPoint(1, playerid,2496.0500,-1692.9301,1014.7422)) //HQ groove saida
		{
	        SetPlayerInterior(playerid,0);
	        SafeSetPlayerPos(playerid,2495.2893,-1688.4492,13.8131);
	        SetPlayerVirtualWorld(playerid,0);
		}
        //Nova HQ Vagos:
        //Entrada: 2808.0278, -1176.4579, 25.3777 =>  2808.0278, -1178.8079, 25.3777, 180.0
        //Saida: 2807.6198, -1174.1999, 1025.5703 => 2807.6198, -1171.8999, 1025.5703, 0.0, 8
        else if(PlayerToPoint(1, playerid, 2808.0278, -1176.4579, 25.3777))//HQ vagos entrada
		{
            SetPlayerVirtualWorld(playerid, 1);

            SafeSetPlayerPos(playerid, 2807.6198, -1171.8999, 1025.5703);
            SetPlayerFacingAngle(playerid, 0.0);
		    SetPlayerInterior(playerid, 8);
		    Player[playerid][pInt] = 8;
		}
		else if(PlayerToPoint(1, playerid, 2807.6198, -1174.1999, 1025.5703)
        && GetPlayerVirtualWorld(playerid) == 1)//HQ vagos saida
		{
            SetPlayerVirtualWorld(playerid, 0);

            SafeSetPlayerPos(playerid, 2808.0278, -1178.8079, 25.3777);
            SetPlayerFacingAngle(playerid, 180.0);
		    SetPlayerInterior(playerid, 0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,1831.8425,-1996.0016,13.5469))//HQ aztecas entrada
		{
            SafeSetPlayerPos(playerid,2807.619873,-1174.899902,1025.570312);
		    SetPlayerInterior(playerid,8);
		    Player[playerid][pInt] = 8;
		}
		else if(PlayerToPoint(1, playerid,2807.619873,-1174.899902,1025.570312))//HQ aztecas saida
		{
            SafeSetPlayerPos(playerid,1831.8425,-1996.0016,13.5469);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,-1541.6155,415.0150,7.1875))//HQ FA entrada
		{
            SafeSetPlayerPos(playerid,316.6039,-169.3718,999.6010);
		    SetPlayerInterior(playerid,6);
		    Player[playerid][pInt] = 6;
		}
		else if(PlayerToPoint(1, playerid,316.524993,-170.706985,999.593750))//HQ FA saida
		{
            SafeSetPlayerPos(playerid,-1541.6155,415.0150,7.1875);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		/*else if(PlayerToPoint(1, playerid, -560.6564, -514.8737, 26.1058))//HQ Detran entrada
		{
            SafeSetPlayerPos(playerid, 321.9968, 302.4636, 999.1484);
            SetPlayerFacingAngle(playerid, 0.0);
            SetPlayerVirtualWorld(playerid, 1);

		    SetPlayerInterior(playerid, 5);
		    Player[playerid][pInt] = 5;

		    detranexit[playerid] = 1;
		}*/

        //~ Alterar
        // Ex: 1279.3056, -1651.7993, 13.5287 ~ Int: 238.4877, 142.6057, 1003.0234, 0.0, 3 ~ Entrada de Baixo
        // Ex: 1251.2407, -1601.8550, 17.6887 ~ Int: 288.6497, 170.8343, 1007.1794, 0.0, 3 ~ Entrada de Cima
				/*else if(PlayerToPoint(1, playerid, 2337.1655,2458.6545,14.9688))//HQ PCivil Entrada Cima
		{
		    SafeSetPlayerPos(playerid, 288.6497, 170.8343, 1007.1794);
		    SetPlayerFacingAngle(playerid, 0.0);

		    SetPlayerInterior(playerid, 3);
		    Player[playerid][pInt] = 3;
		}
        else if(PlayerToPoint(1, playerid, 288.8373, 166.9213, 1007.1719))//HQ PCivil Saida Cima
        {
		    SafeSetPlayerPos(playerid, 2337.1655,2458.6545,14.9688);
		    SetPlayerFacingAngle(playerid, 270.0);

		    SetPlayerInterior(playerid, 0);
		    Player[playerid][pInt] = 0;
        }
		else if(PlayerToPoint(1, playerid, 2286.9734,2431.6416,10.8203))//HQ PCivil Entrada Baixo
		{
		    SafeSetPlayerPos(playerid, 238.4877, 142.6057, 1003.0234);
		    SetPlayerFacingAngle(playerid, 0.0);

		    SetPlayerInterior(playerid, 3);
		    Player[playerid][pInt] = 3;
		}
        else if(PlayerToPoint(1, playerid, 238.6219,139.1842,1003.0234))//HQ PCivil Saida Baixo
        {
		    SafeSetPlayerPos(playerid, 2286.9734,2431.6416,10.8203);
		    SetPlayerFacingAngle(playerid, 270.0);

		    SetPlayerInterior(playerid, 0);
		    Player[playerid][pInt] = 0;
        }
		else if(PlayerToPoint(1, playerid, 2296.6287,2451.5303,10.8203))//HQ PCivil Entrada pela Garagem
		{
    			SafeSetPlayerPos(playerid, 188.6381,179.1621,1003.0234);
                SetPlayerFacingAngle(playerid, 270.0);

    			SetPlayerInterior(playerid, 3);
    			Player[playerid][pInt] = 3;
		}
		else if(PlayerToPoint(1, playerid, 188.6381,179.1621,1003.0234))//HQ PCivil Saida p/ Garagem
		{
    			SafeSetPlayerPos(playerid, 2296.6287,2451.5303,10.8203);
                SetPlayerFacingAngle(playerid, 180.0);

    			SetPlayerInterior(playerid, 0);
    			Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid, 2296.7625,2468.7229,10.8203))//HQ PCivil entrada Heli
        {
            if(!IsACop(playerid))
                SafeSetPlayerPos(playerid, 2278.6238,2444.6726,46.9766);
            else
                SendClientMessage(playerid, 0xAA3333AA, "[ERRO]:{FFFFFF} Porta trancada.");
        }
        else if(PlayerToPoint(1, playerid, 2278.6238,2444.6726,46.9766))//HQ PCivil Saida Heli
        {
		    if(!IsACop(playerid))
                SafeSetPlayerPos(playerid, 2296.7625,2468.7229,10.8203);
 	        else
                SendClientMessage(playerid, 0xAA3333AA, "[ERRO]:{FFFFFF} Porta trancada.");
        }
        //----------------------------------------------------------------------

		else if(PlayerToPoint(1, playerid,623.5234,-566.3334,26.1432))//HQ Detran Entrada Heli
		{
		    detranexit[playerid] = 1;
            SafeSetPlayerPos(playerid,322.1681,316.8151,999.1484);
		    SetPlayerInterior(playerid,5);
		    Player[playerid][pInt] = 5;
		} */
		else if(PlayerToPoint(1, playerid, 1034.9765, -2305.8129, 13.3423))//HQ Bombeiros Entrada
		{
            SafeSetPlayerPos(playerid, 321.9968, 302.4636, 999.1484);
            SetPlayerFacingAngle(playerid, 0.0);

		    SetPlayerInterior(playerid, 5);
		    Player[playerid][pInt] = 5;

		    detranexit[playerid] = 2;
		}
		else if(PlayerToPoint(1, playerid, 321.9968, 302.4636, 999.1484))
		{
		    /*if(detranexit[playerid] == 1
            || GetPlayerVirtualWorld(playerid) == 1)//HQ Detran saida
		    {
	            SafeSetPlayerPos(playerid, -565.1036, -518.6875, 26.1058);
	            SetPlayerFacingAngle(playerid, 180.0);
                SetPlayerVirtualWorld(playerid, 0);

			    SetPlayerInterior(playerid, 0);
			    Player[playerid][pInt] = 0;
			}
			if(detranexit[playerid] == 2
            && GetPlayerVirtualWorld(playerid) != 1)//HQ Bombeiros saida
		    {*/
            SafeSetPlayerPos(playerid,1032.3210,-2300.9087,13.3423);
            SetPlayerFacingAngle(playerid, 90);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		    SetPlayerVirtualWorld(playerid,0);
		}
/*		else if(PlayerToPoint(1, playerid,322.1681,317.8151,999.1484))
		{
		    if(detranexit[playerid] == 1)//HQ Detran Saida Heli
		    {
			    detranexit[playerid] = 1;
	            SafeSetPlayerPos(playerid,623.5234,-566.3334,26.1432);
			    SetPlayerInterior(playerid,0);
			    Player[playerid][pInt] = 0;
			}
		}*/
		else if(PlayerToPoint(1, playerid,914.2776,-1037.9454,31.8984))//HQ Reporter entrada
		{
            SafeSetPlayerPos(playerid,366.9390,196.8342,1008.3828);
		    SetPlayerInterior(playerid,3);
		    Player[playerid][pInt] = 3;
		}
		else if(PlayerToPoint(1, playerid,366.9390,196.8342,1008.3828))//HQ Reporter saida
		{
            SafeSetPlayerPos(playerid,914.2776,-1037.9454,31.8984);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid, 2310.0471, -1643.4968, 14.8270))//HQ Black Pistons entrada
		{
            SafeSetPlayerPos(playerid, 501.8980, -69.5629, 998.7578);
            SetPlayerFacingAngle(playerid, 180.0);

		    SetPlayerInterior(playerid, 11);
		    Player[playerid][pInt] = 11;
        }
        else if(PlayerToPoint(1, playerid, 501.8980, -67.5629, 998.7578) && GetPlayerVirtualWorld(playerid) == 0)//HQ Black Pistons saida
		{
            SafeSetPlayerPos(playerid, 2310.0231, -1647.5325, 14.8270);
            SetPlayerFacingAngle(playerid, 180.0);
            SetCameraBehindPlayer(playerid);

		    SetPlayerInterior(playerid, 0);
		    Player[playerid][pInt] = 0;

        }
		else if(PlayerToPoint(1, playerid, 681.6459, -473.3458, 16.5362))//HQ Hell Angels entrada
		{
            SafeSetPlayerPos(playerid, 501.8980, -69.5629, 998.7578);
            SetPlayerFacingAngle(playerid, 180.0);

		    SetPlayerInterior(playerid, 11);
		    Player[playerid][pInt] = 11;

            SetPlayerVirtualWorld(playerid, 1);
        }
        else if(PlayerToPoint(1, playerid, 501.8980, -67.5629, 998.7578) && GetPlayerVirtualWorld(playerid) == 1)//HQ Hell Angels saida
		{
            SafeSetPlayerPos(playerid, 681.6459, -475.3458, 16.5362);
            SetPlayerFacingAngle(playerid, 180.0);

		    SetPlayerInterior(playerid, 0);
		    Player[playerid][pInt] = 0;

            SetPlayerVirtualWorld(playerid, 0);

        }
        else if(PlayerToPoint(1, playerid, 915.8343, -917.7040, 42.6015) && GetPlayerVirtualWorld(playerid) == 0)//HQ Russa entrada
		{
            SafeSetPlayerPos(playerid, 1277.4471, -789.2729, 1084.0078);
            SetPlayerFacingAngle(playerid, 90.0);
            SetCameraBehindPlayer(playerid);

		    SetPlayerInterior(playerid, 5);
		    Player[playerid][pInt] = 5;
        }
        else if(PlayerToPoint(1, playerid, 1279.4471, -789.2729, 1084.0078) && GetPlayerVirtualWorld(playerid) == 0)//HQ Russa saida
		{
            SafeSetPlayerPos(playerid, 915.8343, -919.7040, 42.6015);
            SetPlayerFacingAngle(playerid, 180.0);
            SetCameraBehindPlayer(playerid);

		    SetPlayerInterior(playerid, 0);
		    Player[playerid][pInt] = 0;
        }
        else if(PlayerToPoint(1, playerid, 1252.4471, -789.2729, 1084.0078) && GetPlayerVirtualWorld(playerid) == 0) //HQ Russa ir Cofre
        {
            SafeSetPlayerPos(playerid, 1237.4416, -812.3161, 1084.0078);
            SetPlayerFacingAngle(playerid, 90.0);
        }
        else if(PlayerToPoint(1, playerid, 1239.4416, -812.3161, 1084.0078) && GetPlayerVirtualWorld(playerid) == 0) //HQ Russa sair Cofre
        {
            SafeSetPlayerPos(playerid, 1254.4471, -789.2729, 1084.0078);
            SetPlayerFacingAngle(playerid, 270.0);
        }
        else if(PlayerToPoint(1, playerid,690.3526,-1276.0282,13.5598)) //HQ Yakuza entrada
	  	{
	       SetPlayerInterior(playerid,1);
	       SafeSetPlayerPos(playerid,-2159.5452,641.3278,1052.3817);
		}
		else if(PlayerToPoint(1, playerid,-2158.4368,643.6974,1052.3817)) //HQ Yakuza saida
	  	{
	       SetPlayerInterior(playerid,0);
	       SafeSetPlayerPos(playerid,690.3526,-1276.0282,13.5598);
		}
		else if(PlayerToPoint(1, playerid, 1462.3992, -1011.6098, 26.8437))//Banco entrada
		{
            SafeSetPlayerPos(playerid, 2307.2165, -16.1324, 26.7421);
            SetPlayerFacingAngle(playerid, 270.0);
            SetCameraBehindPlayer(playerid);
		}
		else if(PlayerToPoint(1, playerid, 2305.2165, -16.132400, 26.7421))//Banco saida
		{
            SafeSetPlayerPos(playerid, 1462.3992, -1013.6098, 26.8437);
            SetPlayerFacingAngle(playerid, 180.0);
            SetCameraBehindPlayer(playerid);
		}
		else if(PlayerToPoint(1, playerid, 2315.5764, -0.3131000, 26.742100))//Banco entrada corredor
		{
            SafeSetPlayerPos(playerid, 2526.9409, -1296.0268, 1031.4218);
            SetPlayerFacingAngle(playerid, 180.0);
            SetCameraBehindPlayer(playerid);
            SetPlayerInterior(playerid, 2);
		}
		else if(PlayerToPoint(1, playerid, 2528.4375, -1293.9272, 1031.4218))//Banco saida corredor
		{
            SafeSetPlayerPos(playerid, 2315.5690, -3.3370, 26.7421);
            SetPlayerFacingAngle(playerid, 180.0);
            SetCameraBehindPlayer(playerid);
            SetPlayerInterior(playerid, 0);
		}
		else if(PlayerToPoint(1, playerid, 2541.8823, -1304.0325, 1025.0703))//Banco entrada cofre
		{
            SafeSetPlayerPos(playerid, 2144.2238, 1630.3815, 993.5761);
            SetPlayerFacingAngle(playerid, 0.0);
            SetPlayerVirtualWorld(playerid, 1);
            SetCameraBehindPlayer(playerid);
            SetPlayerInterior(playerid, 1);
		}
		else if(PlayerToPoint(1, playerid, 2144.1704, 1628.44950, 993.57610) && GetPlayerVirtualWorld(playerid) == 1)//Banco saida cofre
		{
            SafeSetPlayerPos(playerid, 2543.3791, -1305.7188, 1025.0703);
            SetPlayerFacingAngle(playerid, 1800.0);
            SetPlayerVirtualWorld(playerid, 0);
            SetCameraBehindPlayer(playerid);
            SetPlayerInterior(playerid, 2);
		}
		else if(PlayerToPoint(1, playerid,2229.4399,-1721.6360,13.5647))//academia entrada
		{
           	SafeSetPlayerPos(playerid, 771.7618,-5.6084,1000.7277);
           	SetPlayerInterior(playerid, 5);
		}
		else if(PlayerToPoint(1, playerid,771.7618,-5.6084,1000.7277))//academia saida
		{
           	SafeSetPlayerPos(playerid,2229.4399,-1721.6360,13.5647);
           	SetPlayerInterior(playerid, 0);
		}
		else if(PlayerToPoint(1, playerid,2244.4446,-1665.2186,15.4766))//binco entrada
		{
            SafeSetPlayerPos(playerid,207.737991,-111.019996,1005.132812);
            SetPlayerFacingAngle(playerid, 0.0);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,15);
		    Player[playerid][pInt] = 15;
		}
		else if(PlayerToPoint(1, playerid,207.737991,-111.019996,1005.132812))//binco saida
		{
            SafeSetPlayerPos(playerid,2244.4446,-1665.2186,15.4766);
            SetPlayerFacingAngle(playerid, 0.0);
            SetCameraBehindPlayer(playerid);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,1022.4554,-1121.7389,23.8718))//PIMP entrada
		{
            SafeSetPlayerPos(playerid,-2636.762939,1402.682006,906.460937);
		    SetPlayerInterior(playerid,3);
		    Player[playerid][pInt] = 3;
		}
		else if(PlayerToPoint(1, playerid,-2636.762939,1402.682006,906.460937))//PIMP saida
		{
            SafeSetPlayerPos(playerid,1022.4554,-1121.7389,23.8718);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		/*else if(PlayerToPoint(1, playerid,2552.7019,-958.2281,82.6375))//HQ CV entrada
		{
            SafeSetPlayerPos(playerid,422.6099,2536.6777,10.0000);
		    SetPlayerInterior(playerid,10);
		    Player[playerid][pInt] = 10;
		}
		else if(PlayerToPoint(1, playerid,422.6099,2536.6777,10.0000))//HQ CV saida
		{
            SafeSetPlayerPos(playerid,2552.7019,-958.2281,82.6375);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,2794.4131,-2025.8241,13.5620))//HQ lowrider entrada
		{
    	    SafeSetPlayerPos(playerid,1133.3461,-15.3592,1000.6797);
		    SetPlayerInterior(playerid,12);
		    Player[playerid][pInt] = 12;
		}
		else if(PlayerToPoint(1, playerid,1133.3461,-15.3592,1000.6797))//HQ lowrider saida
		{
    	    SafeSetPlayerPos(playerid,2794.4131,-2025.8241,13.5620);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid,970.0628,-1520.6289,13.5503))//HQ drifters entrada
		{
        	SafeSetPlayerPos(playerid,-229.2888,1401.1505,27.7656);
		    SetPlayerInterior(playerid,18);
		    Player[playerid][pInt] = 18;
		}
		else if(PlayerToPoint(1, playerid,-229.2888,1401.1505,27.7656))//HQ drifters saida
		{
        	SafeSetPlayerPos(playerid,970.0628,-1520.6289,13.5503);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}*/
		else if(PlayerToPoint(1.0, playerid,1836.1659,-1682.4061,13.3593))//Alhambra entrada
        {
	   		SetPlayerInterior(playerid, 17);
   			SafeSetPlayerPos(playerid,493.7970,-24.5094,1000.6801);
       	}
       	else if(PlayerToPoint(1.0, playerid,493.7970,-24.5094,1000.6801))//Alhambra saida
        {
	   		SetPlayerInterior(playerid, 0);
   			SafeSetPlayerPos(playerid,1836.1659,-1682.4061,13.3593);
       	}
       	else if(PlayerToPoint(1, playerid,1489.1617,-1719.5250,8.2420))//HQ droga entrada
		{
            SafeSetPlayerPos(playerid,2577.3137,-1289.8612,1044.1250);
		    SetPlayerInterior(playerid,2);
		    Player[playerid][pInt] = 2;
		}
		else if(PlayerToPoint(1, playerid,2577.3137,-1289.8612,1044.1250))//HQ droga saida
		{
            SafeSetPlayerPos(playerid,1489.1617,-1719.5250,8.2420);
		    SetPlayerInterior(playerid,0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid, 1368.1035, -1279.8251, 13.5469))//Ammunation entrada
  		{
            SafeSetPlayerPos(playerid, 314.7967, -141.6312, 999.6015);
            SetPlayerFacingAngle(playerid, 42.5);
		    SetPlayerInterior(playerid, 7);
		    Player[playerid][pInt] = 7;
		}
		else if(PlayerToPoint(1, playerid, 315.7572, -143.1386, 999.6015))//Ammunation saida
  		{
            SafeSetPlayerPos(playerid, 1365.4603, -1279.7326, 13.5468);
            SetPlayerFacingAngle(playerid, 90.0);
		    SetPlayerInterior(playerid, 0);
		    Player[playerid][pInt] = 0;
		}
		else if(PlayerToPoint(1, playerid, 306.4193, -141.8289, 1004.0547))//Ammunation tiro ao alvo entrar
  		{
            SafeSetPlayerPos(playerid, 302.2744, -141.2202, 1004.0625);
            SetPlayerFacingAngle(playerid, 0.0);
		}
		else if(PlayerToPoint(1, playerid, 303.6068, -141.9046, 1004.0625))//Ammunation tiro ao alvo saida
  		{
            if(InTAA[playerid])
                return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode sair durante o Tiro ao Alvo.");

            SafeSetPlayerPos(playerid, 308.4193, -141.8289, 1004.0547);
            SetPlayerFacingAngle(playerid, 270.0);
		}
        else if(PlayerToPoint(1, playerid,1631.7124,-1172.2827,24.0843)) // Loterica entrada
		{
	       SetPlayerInterior(playerid,3);
	       SetPlayerFacingAngle(playerid, 90.0);
	       SafeSetPlayerPos(playerid,834.1446,7.3283,1004.1797);
		}
		else if(PlayerToPoint(1, playerid,834.1446,7.3283,1004.1797)) // Loterica saida
		{
	       SetPlayerInterior(playerid,0);
	       SetPlayerFacingAngle(playerid, 90.0);
	       SafeSetPlayerPos(playerid,1631.7124,-1172.2827,24.0843);
		}
        else if(PlayerToPoint(1, playerid,2166.3228,-1671.6299,15.0740))//HQ ballas entrada
		{
	       SetPlayerInterior(playerid,5);
	       SafeSetPlayerPos(playerid,318.5657,1115.0000,1083.8828);
		}
		else if(PlayerToPoint(1, playerid,318.5657,1115.0000,1083.8828))//HQ ballas saida
		{
	       SetPlayerInterior(playerid,0);
	       SafeSetPlayerPos(playerid,2166.3228,-1671.6299,15.0740);
		}
		else if(PlayerToPoint(5.0, playerid,-2111.5686,-443.9720,38.7344))//Dirt Track entrada
		{
		    GameTextForPlayer(playerid, "~w~bem vindo ao Dirt Track", 5000, 1);
		    SetPlayerInterior(playerid,4);
			SafeSetPlayerPos(playerid,-1443.0554,-581.1879,1055.0472);
		}
		else if(PlayerToPoint(5.0, playerid,-1443.0554,-581.1879,1055.0472))//Dirt Track saida
		{
		    SetPlayerInterior(playerid,0);
			SafeSetPlayerPos(playerid,-2111.5686,-443.9720,38.7344);
		}
		else if(PlayerToPoint(5.0, playerid,-2080.3079,-406.0309,38.7344))// Stunting Track entrada
		{
		    GameTextForPlayer(playerid, "~w~bem vindo ao Stunting Track", 5000, 1);
		    SetPlayerInterior(playerid,14);
			SafeSetPlayerPos(playerid,-1464.7732,1557.5533,1052.5313);
		}
		else if(PlayerToPoint(5.0, playerid,-1464.7732,1557.5533,1052.5313))// Stunting Track saida
		{
		    SetPlayerInterior(playerid,0);
			SafeSetPlayerPos(playerid,-2080.3079,-406.0309,38.7344);
		}
		else if(PlayerToPoint(1.0, playerid,2233.8235,-1332.4860,23.9814))//igreja entrada
		{
		    SetPlayerInterior(playerid,10);
			SafeSetPlayerPos(playerid,387.1423,2324.0554,1889.5800);
			GameTextForPlayer(playerid, "~w~bem vindo a igreja", 5000, 1);
			TogglePlayerControllable(playerid,false);
			SetTimerEx("Descongelar",1000,false,"i",playerid);
		}
		else if(PlayerToPoint(3.0, playerid,387.1423,2324.0554,1889.5800))//igreja saida
		{
		    SetPlayerInterior(playerid,0);
			SafeSetPlayerPos(playerid,2233.8235,-1332.4860,23.9814);
		}
/*		else if(PlayerToPoint(3.0, playerid, 238.7007, 139.3007, 1003.0234))//Entrar Area de Treinamento da PF
		{
			SafeSetPlayerPos(playerid,332.9713, -1577.0754, 1102.9687);
			GameTextForPlayer(playerid, "~w~bem vindo a area de treinamento", 5000, 1);
			TogglePlayerControllable(playerid,false);
			SetTimerEx("Descongelar",2000,false,"i",playerid);
		}
		else if(PlayerToPoint(3.0, playerid, 332.9713, -1577.0754, 1102.9687))//Sair da Area de Treinamento da PF
		{
		    SafeSetPlayerPos(playerid, 238.7007, 139.3007, 1003.0234);
		} */
        else if(PlayerToPoint(1.0, playerid, 55.6816, -1531.2508, 5.2470) && IsACop(playerid))//GetPlayerOrg(playerid) == TEAM_MUNICIPAL) //Entrar da "Casinha do Pedágio"
            SafeSetPlayerPos(playerid, 53.6119, -1530.9697, 5.2686);
        else if(PlayerToPoint(1.0, playerid, 53.6119, -1530.9697, 5.2686) && IsACop(playerid))//GetPlayerOrg(playerid) == TEAM_MUNICIPAL) //Sair da "Casinha do Pedágio"
            SafeSetPlayerPos(playerid, 55.6816, -1531.2508, 5.2470);
        CheckBizEntranceExit(playerid, false);
	}
    return true;
}

public KartingEnded()
{
    foreach(new i: Player)
    {
		if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
	    {
	    	CP[i] = 0;
	        DisablePlayerCheckpoint(i);
		}
	}
	AnnouncedKartRound = 0;
    KartingRound = 0;
	return true;
}

public ScoreUpdate()
{
	foreach(new i: Player)
		SetPlayerScore(i, Player[i][pLevel]);
	return true;
}

public Encrypt(string[])
{
	for(new x=0; x < strlen(string); x++)
	{
		string[x] += (4^x) * (x % 20);

		if(string[x] > (0xff))
			string[x] -= 256;
	}
	return true;
}

stock right(source[], len)
{
	new retval[255], srclen;
	srclen = strlen(source);
	strmid(retval, source, srclen - len, srclen, 255);
	return retval;
}


//------------------------------------------------------------------------------------------------------
public IsAMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new leader = Player[playerid][pLeader];
	    new member = Player[playerid][pMember];
	    if(member==5 || member==12 || member==6 || member==8)
 		{
		    return true;
		}
		if(leader==5 || leader==12 || leader==6 || leader==8)
		{
		    return true;
		}
	}
	return 0;
}

stock IsATerror(playerid)
{
	if(!IsPlayerConnected(playerid)) return false;
	new M = GetPlayerOrg(playerid);

	if(M == TEAM_ALQAEDA) return true;
	return false;
}

stock IsAMafia(playerid)
{
	if(!IsPlayerConnected(playerid)) return false;
	new M = GetPlayerOrg(playerid);

	if(M == TEAM_YAKUZA || M == TEAM_RUSSA) return true;
	return false;
}

public IsAGang(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    new leader = Player[playerid][pLeader];
	    new member = Player[playerid][pMember];
	    if(member == 5 || member == 6 || member == 10 || member == 11 || member == 12 || member == 13)
		{
		    return true;
		}
		else if(leader == 5 || leader == 6 || leader == 10 || leader == 11 || leader == 12 || member == 13)
		{
		    return true;
		}
	}
	return 0;
}

stock IsAGangOrgID(member)
{
    if(member == 5 || member == 6 || member == 10 || member == 11 || member == 12 || member == 13)
	{
	    return true;
	}
	return 0;
}

stock IsACrimeOrg(member)
{
    if(member == 5 || member == 6 || member == 10 || member == 11 || member == 12 || member == 13 || member == 14 || member == 15 || member == 17)
	    return true;

	return false;
}

public IsACrime(playerid)
{
    if(IsPlayerConnected(playerid))
        if(IsACrimeOrg(GetPlayerOrg(playerid)))
            return true;

	return false;
}

public IsACivil(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    new leader = Player[playerid][pLeader];
	    new member = Player[playerid][pMember];
	    if(member == 0 || member == 9)
		{
		    return true;
		}
		else if(leader == 0 || member == 9)
		{
		    return true;
		}
	}
	return 0;
}

stock IsACopOrg(member)
{
    if(member == 1 || member == 2 || member == 3 || member == 7 || member == 16 || member == 18)
	    return true;

	return false;
}

stock IsACopOrgEx(member)
{
    if(member == 1 || member == 2 || member == 3|| member == 7 || member == 16 || member == 18)
	    return true;

	return false;
}
public IsACop(playerid)
{
	if(IsPlayerConnected(playerid))
        if(IsACopOrg(GetPlayerOrg(playerid)))
            return true;

	return false;
}

forward IsACopEx(playerid);
public IsACopEx(playerid)
{
	if(IsPlayerConnected(playerid))
        if(IsACopOrgEx(GetPlayerOrg(playerid)))
            return true;

	return false;
}

public IsAtClothShop(playerid)
{
    if(IsPlayerConnected(playerid))
	{
        if(PlayerToPoint(25.0,playerid,207.5627,-103.7291,1005.2578) || PlayerToPoint(25.0,playerid,203.9068,-41.0728,1001.8047))
		{//Binco & Suburban
		    return true;
		}
		else if(PlayerToPoint(30.0,playerid,214.4470,-7.6471,1001.2109) || PlayerToPoint(50.0,playerid,161.3765,-83.8416,1001.8047))
		{//Zip & Victim
		    return true;
		}
	}
	return 0;
}

public IsAtGasStation(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(10.0, playerid, 2660.9291, -1423.8730, 30.6578) || PlayerToPoint(10.0, playerid, 2661.0786, -1429.1689, 30.6578))
	    {//Posto Custom Rafael_Veiga
	        return true;
	    }
		else if(PlayerToPoint(10.0,playerid,1004.0070,-939.3102,42.1797) || PlayerToPoint(10.0,playerid,1944.3260,-1772.9254,13.3906))
		{//LS
		    return true;
		}
		else if(PlayerToPoint(10.0,playerid,-90.5515,-1169.4578,2.4079) || PlayerToPoint(10.0,playerid,-1609.7958,-2718.2048,48.5391) || PlayerToPoint(10.00,playerid, 1211.0505,-1832.3279,12.9750))
		{//LS
		    return true;
		}
		else if(PlayerToPoint(10.0,playerid,-2029.4968,156.4366,28.9498) || PlayerToPoint(10.0,playerid,-2408.7590,976.0934,45.4175))
		{//SF
		    return true;
		}
		else if(PlayerToPoint(10.0,playerid,-2243.9629,-2560.6477,31.8841) || PlayerToPoint(10.0,playerid,-1676.6323,414.0262,6.9484))
		{//Between LS and SF
		    return true;
		}
		else if(PlayerToPoint(10.0,playerid,2202.2349,2474.3494,10.5258) || PlayerToPoint(10.0,playerid,614.9333,1689.7418,6.6968))
		{//LV
		    return true;
		}
		else if(PlayerToPoint(10.0,playerid,323.5893,-1799.0508,4.7738) || PlayerToPoint(10.0, playerid, 655.6313,-564.7337,16.3359))
		{//posto de tunning
		    return true;
		}
		else if(PlayerToPoint(10.0,playerid,-121.4728,-378.7709,1.4297))
		{//caminhoneiro
		    return true;
		}
		else if(PlayerToPoint(10.0,playerid,-1328.8250,2677.2173,49.7665) || PlayerToPoint(10.0,playerid,70.3882,1218.6783,18.5165))
		{//LV
		    return true;
		}
		else if(PlayerToPoint(10.0,playerid,2113.7390,920.1079,10.5255) || PlayerToPoint(10.0,playerid,-1327.7218,2678.8723,50.0625))
		{//LV
		    return true;
		}
	}
	return 0;
}

public IsAtFishPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(1.0,playerid,403.8266,-2088.7598,7.8359) || PlayerToPoint(1.0,playerid,398.7553,-2088.7490,7.8359))
		{
		    return true;
		}
		else if(PlayerToPoint(1.0,playerid,396.2197,-2088.6692,7.8359) || PlayerToPoint(1.0,playerid,391.1094,-2088.7976,7.8359))
		{
		    return true;
		}
		else if(PlayerToPoint(1.0,playerid,383.4157,-2088.7849,7.8359) || PlayerToPoint(1.0,playerid,374.9598,-2088.7979,7.8359))
		{
		    return true;
		}
		else if(PlayerToPoint(1.0,playerid,369.8107,-2088.7927,7.8359) || PlayerToPoint(1.0,playerid,367.3637,-2088.7925,7.8359))
		{
		    return true;
		}
		else if(PlayerToPoint(1.0,playerid,362.2244,-2088.7981,7.8359) || PlayerToPoint(1.0,playerid,354.5382,-2088.7979,7.8359))
		{
		    return true;
		}
	}
	return 0;
}

public IsAtCookPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(3.0,playerid,369.9786,-4.0798,1001.8589))
	    {
	        return true;
	    }
	    else if(PlayerToPoint(3.0,playerid,376.4466,-60.9574,1001.5078) || PlayerToPoint(3.0,playerid,378.1215,-57.4928,1001.5078))
		{
		    return true;
		}
		else if(PlayerToPoint(3.0,playerid,374.1185,-113.6361,1001.4922) || PlayerToPoint(3.0,playerid,377.7971,-113.7668,1001.4922))
		{
		    return true;
		}
	}
	return 0;
}


public IsAtLoja(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(30.0,playerid,-25.884498,-185.868988,1003.546875) || PlayerToPoint(40.0,playerid,6.091179,-29.271898,1003.549438) || PlayerToPoint(40.0,playerid,-30.946699,-89.609596,1003.546875) || PlayerToPoint(3.0, playerid, 1209.1460,-1420.2618,13.3828))
		{
		    return true;
		}
		else if(PlayerToPoint(30.0,playerid,-25.132598,-139.066986,1003.546875) || PlayerToPoint(30.0,playerid,-27.312299,-29.277599,1003.557250) || PlayerToPoint(30.0,playerid,-26.691598,-55.714897,1003.546875))
		{
		    return true;
		}
	}
	return 0;
}

public IsAtNeonShop(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 696.0831, -1185.4281, 15.6033))
	    return 4;
	if(IsPlayerInRangeOfPoint(playerid, 1.5, 1581.9423, -2164.5415, 14.2972))
	    return 3;
	if(IsPlayerInRangeOfPoint(playerid, 1.5, 1572.8270, -2164.4897, 14.2971))
	    return 2;
	if(IsPlayerInRangeOfPoint(playerid, 1.5, 1563.3766, -2164.3469, 14.2981))
	    return 1;
	if(IsPlayerInRangeOfPoint(playerid, 1.5, 1554.2604, -2164.7881, 14.2992))
	    return 0;

	return -1;
}

public IsAtBar(playerid)
{
    if(!IsPlayerConnected(playerid))
        return false;

	if(PlayerToPoint(3.0, playerid, 499.731700, -20.670600, 1000.6796)         //Alhambra
  /*|| PlayerToPoint(3.0, playerid, 495.780100, -76.030500, 998.75780)*/       //HQ Black Pistons
    || PlayerToPoint(6.0, playerid, 2193.91500, 1603.63360, 1005.0625)         //Cassino
	|| PlayerToPoint(3.0, playerid, 1215.94800, -13.351900, 1000.9219)         //Putero
    || PlayerToPoint(3.0, playerid, -2658.9187, 1410.35090, 906.27030)         //Putero (Jizzy)
  /*|| PlayerToPoint(3.0, playerid, 1512.91850, -1661.7511, 13.546900)*/       //Praça DP
  /*|| PlayerToPoint(3.0, playerid, 1393.46060, -1896.8706, 13.495800)*/       //Beco
	|| PlayerToPoint(3.0, playerid, 2856.19780, -1897.9268, 10.929800)         //East Beach
    || PlayerToPoint(3.0, playerid, 2850.15450, -1892.1344, 10.923400)         //East Beach
    || PlayerToPoint(3.0, playerid, 2856.22070, -1885.8684, 10.935900)         //East Beach
    || PlayerToPoint(3.0, playerid, 2862.26200, -1891.8096, 10.934200)         //East Beach
	|| PlayerToPoint(3.0, playerid, 358.276400, -1749.8837, 5.6906000)         //Santa Maria Beach
    || PlayerToPoint(9.0, playerid, 1220.05340, -1427.1149, 13.351600)         //Do lado do Hosp
    || PlayerToPoint(9.0, playerid, 1096.83260, -1239.3665, 15.751600))        //Perto do Hosp
        return true;

	return false;
}

stock IsAtMonitor(playerid)
{
    if(!IsPlayerConnected(playerid))
        return false;

	if(PlayerToPoint(1.5, playerid, 231.364800, 75.9387000, 1005.0391)         //HQ PM
    || PlayerToPoint(1.5, playerid, 234.481900, 111.318300, 1003.2257)         //HQ PF & BOPE
    || PlayerToPoint(1.5, playerid, 199.026500, 168.303500, 1003.0234)         //HQ PC
    || PlayerToPoint(1.5, playerid, 313.412100, -159.62920, 999.59370))        //HQ FA
        return true;

    return false;
}

forward playerConnectLookAt(playerid);
public playerConnectLookAt(playerid)
{
	new idx = random(sizeof(TutorialScreens));
	SafeSetPlayerPos(playerid, TutorialScreens[idx][0], TutorialScreens[idx][1], TutorialScreens[idx][2]);
	SetPlayerCameraPos(playerid, TutorialScreens[idx][3], TutorialScreens[idx][4], TutorialScreens[idx][5]);
	SetPlayerCameraLookAt(playerid, TutorialScreens[idx][0], TutorialScreens[idx][1], TutorialScreens[idx][6]);
	return true;
}

//------------------------------------------------------------------------------------------------------
#include "gamemodes/users/base.pwn"

forward UpdateServer();
public UpdateServer()
{
    foreach(Player, pid)
    {
        if(GetPlayerGP(pid) > 1000000000) BanEx(pid, "Dinheiro excessivo");
        if(IsPlayerInRangeOfPoint(pid, 100.0, 2857.0173,-1915.2451,10.9304) && !IsPlayerInAnyVehicle(pid))
        {
            if(!PlayerOuvindoBar[pid])
            {
                PlayAudioStreamForPlayer(pid, "https://japeto.sscdn.co/palcomp3/5/a/3/f/pagodaodaelite-cheia-de-manias-49dac3.mp3?", 2857.0173,-1915.2451,10.9304, 110, 1);
                PlayerOuvindoBar[pid] = true;
                continue;
            }
        }
        else PlayerOuvindoBar[pid] = false;
    }
    return 1;
}

forward OnReset(playerid);
public OnReset(playerid)
{
	new file[64];
	format(file, 64, "/RPG/users/%s.ini", playerid);
	DOF2_RemoveFile(file);
    SendClientMessage(playerid, 0xFFFFFFFF, "Sua conta foi resetada.");
	SetTimerEx("OnKick",500,false, "i", playerid);
    return true;
}

forward OnKick(playerid);
public OnKick(playerid)
{
    SendClientMessage(playerid, COLOR_RED, "Você foi kickado.");
    Kick(playerid);
    return true;
}

stock ReturnPlayer(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name,MAX_PLAYER_NAME);
	return name;
}

public ClearMarriage(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nenhuma");
		strmid(pMarriedTo[playerid], string, 0, strlen(string), 255);
		Player[playerid][pMarried] = 0;
	}
	return true;
}
public ClearCrime(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "********");
		strmid(PlayerCrime[playerid][pBplayer], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pVictim], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusing], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusedof], string, 0, strlen(string), 255);
	}
	return true;
}

public ClearCrimeTempo(id)
{
	if(IsPlayerConnected(id))
	{
		if(WantedPoints[id] > 0)
	    {
			SendClientMessage(id, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você limpou sua ficha por se esconder.");
			ClearCrime(id);
		    WantedPoints[id] = 0;
		    escondendo[id] = 0;
		}
	}
	return true;
}

public FishCost(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new cost = 0;
		switch (fish)
		{
		    case 1:
		    {
		        cost = 1;
		    }
		    case 2:
		    {
		        cost = 3;
		    }
		    case 3:
		    {
		        cost = 3;
		    }
		    case 5:
		    {
		        cost = 5;
		    }
		    case 6:
		    {
		        cost = 2;
		    }
		    case 8:
		    {
		        cost = 8;
		    }
		    case 9:
		    {
		        cost = 12;
		    }
		    case 11:
		    {
		        cost = 9;
		    }
		    case 12:
		    {
		        cost = 7;
		    }
		    case 14:
		    {
		        cost = 12;
		    }
		    case 15:
		    {
		        cost = 9;
		    }
		    case 16:
		    {
		        cost = 7;
		    }
		    case 17:
		    {
		        cost = 7;
		    }
		    case 18:
		    {
		        cost = 10;
		    }
		    case 19:
		    {
		        cost = 4;
		    }
		    case 21:
		    {
		        cost = 3;
		    }
		}
		return cost;
	}
	return 0;
}

public ClearFishes(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Fishes[playerid][pFid1] = 0; Fishes[playerid][pFid2] = 0; Fishes[playerid][pFid3] = 0;
		Fishes[playerid][pFid4] = 0; Fishes[playerid][pFid5] = 0; Fishes[playerid][pFid6] = 0;
		Fishes[playerid][pWeight1] = 0; Fishes[playerid][pWeight2] = 0; Fishes[playerid][pWeight3] = 0;
		Fishes[playerid][pWeight4] = 0; Fishes[playerid][pWeight5] = 0; Fishes[playerid][pWeight6] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nenhum");
		strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish6], string, 0, strlen(string), 255);
	}
	return true;
}

public ClearFishID(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nenhum");
		switch (fish)
		{
		    case 1:
		    {
		        strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight1] = 0;
		        Fishes[playerid][pFid1] = 0;
		    }
		    case 2:
		    {
		        strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight2] = 0;
		        Fishes[playerid][pFid2] = 0;
		    }
		    case 3:
		    {
		        strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight3] = 0;
		        Fishes[playerid][pFid3] = 0;
		    }
		    case 4:
		    {
		        strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight4] = 0;
		        Fishes[playerid][pFid4] = 0;
		    }
		    case 5:
		    {
		        strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight5] = 0;
		        Fishes[playerid][pFid5] = 0;
		    }
		    case 6:
		    {
		        strmid(Fishes[playerid][pFish6], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight6] = 0;
		        Fishes[playerid][pFid6] = 0;
		    }
		}
	}
	return true;
}

public ClearCooking(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Cooking[playerid][pCookID1] = 0; Cooking[playerid][pCookID2] = 0; Cooking[playerid][pCookID3] = 0;
		Cooking[playerid][pCookID4] = 0; Cooking[playerid][pCookID5] = 0;
		Cooking[playerid][pCWeight1] = 0; Cooking[playerid][pCWeight2] = 0; Cooking[playerid][pCWeight3] = 0;
		Cooking[playerid][pCWeight4] = 0; Cooking[playerid][pCWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nenhum");
		strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
	}
	return true;
}

public ClearCookingID(playerid, cook)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nenhum");
		switch (cook)
		{
		    case 1:
		    {
		        strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight1] = 0;
		        Cooking[playerid][pCookID1] = 0;
		    }
		    case 2:
		    {
		        strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight2] = 0;
		        Cooking[playerid][pCookID2] = 0;
		    }
		    case 3:
		    {
		        strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight3] = 0;
		        Cooking[playerid][pCookID3] = 0;
		    }
		    case 4:
		    {
		        strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight4] = 0;
		        Cooking[playerid][pCookID4] = 0;
		    }
		    case 5:
		    {
		        strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight5] = 0;
		        Cooking[playerid][pCookID5] = 0;
		    }
		}
	}
	return true;
}

public ClearGroceries(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
	    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
	    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
	}
	return true;
}

forward Reloguer(playerid);
public Reloguer(playerid)
{
	if(IsPlayerConnected(playerid))
	{
        Player[playerid][AllowGod] = true;

	    if(WantedPoints[playerid] > 0 && !IsACop(playerid))
	    {
		    new str[128];
			format(str, sizeof(str), "Nível de procurado: %d", WantedPoints[playerid]);
			SendClientMessage(playerid, COLOR_YELLOW, str);
			if(WantedPoints[playerid] != 1) format(str, sizeof(str), "HQ - %s Acabou de Logar com %d Niveis de Procurado.", Player[playerid][pName], WantedPoints[playerid]);
			else format(str, sizeof(str), "HQ - %s Acabou de Logar com 1 Nivel de Procurado.", Player[playerid][pName]);

			foreach(new i: Player) if(IsACop(i)) SendClientMessage(i, COLOR_RED, str);
	    }
	}
	return true;
}

public SetPlayerSpawn(playerid)
{
    nowh[playerid] = 0;
    noab2[playerid] = false;
    noab[playerid][3] = 0;
	Congelado[playerid] = 0;
	PedidoAceito[playerid] = 900;
	for(new i=0;i<4;i++)
	    AFK[playerid][i] = i;

	if(IsPlayerConnected(playerid))
	{
	    Congelar(playerid);
    	SetTimerEx("Descongelar", 1000, 0, "i", playerid);
        LoadFightStyle(playerid);
        noteste[playerid] = false;
        noevento[playerid] = false;
	    if(Player[playerid][pTut] == 0)
	    {
			Congelar(playerid);
			ShowPlayerDialog(playerid,14, DIALOG_STYLE_MSGBOX, "Atencão", "Qual é o seu sexo?", "Masculino", "Feminino");
	    }
	    Player[playerid][Spawned] = true;
		new rand;

		if(PlayerPaintballing[playerid] != 0)
		{
		    ResetPlayerWeapons(playerid);
	        SetPlayerHealth(playerid, 100);
		    SetPlayerArmour(playerid, 50);
	        SafeGivePlayerWeapon(playerid, 29, 999);
	        SafeGivePlayerWeapon(playerid, 24, 999);
	        Descongelar(playerid);
		    rand = random(sizeof(PaintballSpawns));
			SafeSetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
		    return true;
		}
		if(Player[playerid][pJailed] == 1)
		{
			SafeSetPlayerPos(playerid, 264.6288, 77.5742, 1001.0391);
		    SetPlayerInterior(playerid, 6);
            ResetPlayerWeapons(playerid);

			SendClientMessage(playerid, COLOR_RED, "Você não cumpriu com sua pena.");
			return true;
		}
		else if(Player[playerid][pJailed] == 3)
		{
			SafeSetPlayerPos(playerid, 197.7218, 175.0082, 1003.0234);
		    SetPlayerInterior(playerid, 3);
            ResetPlayerWeapons(playerid);

			SendClientMessage(playerid, COLOR_RED, "Você ainda não cumpriu com sua pena.");
			return true;
		}
		else if(Player[playerid][pJailed] == 4)
		{
			SafeSetPlayerPos(playerid, 223.2259, 109.8377, 999.0156);
            SetPlayerVirtualWorld(playerid, 1);
		    SetPlayerInterior(playerid, 10);
            ResetPlayerWeapons(playerid);

			SendClientMessage(playerid, COLOR_RED, "Você ainda não cumpriu com sua pena.");
			return true;
		}
		else if(Player[playerid][pJailed] == 5)
		{
			SafeSetPlayerPos(playerid, 223.2259, 109.8377, 999.0156);
            SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerInterior(playerid, 10);
            ResetPlayerWeapons(playerid);

			SendClientMessage(playerid, COLOR_RED, "Você ainda não cumpriu com sua pena.");
			return true;
		}
		else if(Player[playerid][pJailed] == 2)
		{
			SetPlayerWorldBounds(playerid, 337.5694,101.5826,1940.9759,1798.7453);
            SafeSetPlayerPos(playerid,268.5777,1857.9351,9.8133);
		    SetPlayerInterior(playerid, 0);
            ResetPlayerWeapons(playerid);
			return true;
		}
		if(Player[playerid][pMorto] == 1 && Player[playerid][pJailed] == 0 && PlayerPaintballing[playerid] == 0)
		{
		    //SetPVarInt(playerid, "Hospital", 1);
			SetTimerEx("SetMorto",1000,false, "i", playerid);
			return true;
		}
        if(Player[playerid][pLocalX] == 0 && Player[playerid][pLocalY] == 0 && Player[playerid][pLocalZ] == 0)
		{
		    SafeSetPlayerPos(playerid, CivilSpawns[0], CivilSpawns[1], CivilSpawns[2]);
			SetPlayerFacingAngle(playerid, CivilSpawns[3]);
		}

        if(Player[playerid][pDonateRank] > 0)
     	{
			ResetPlayerWeapons(playerid);
			SafeGivePlayerWeapon(playerid, 24, 50);
			SafeGivePlayerWeapon(playerid, 29, 150);
			SafeGivePlayerWeapon(playerid, 31, 150);
			SetPlayerArmour(playerid, 30);
		}
		/*
		if(Player[playerid][pDonateRank] == 2)
     	{
     	    ResetPlayerWeapons(playerid);
			SafeGivePlayerWeapon(playerid, 24, 100);
			SafeGivePlayerWeapon(playerid, 29, 300);
			SafeGivePlayerWeapon(playerid, 31, 300);
			SetPlayerArmour(playerid, 60);
		}

		if(Player[playerid][pDonateRank] == 3)
     	{
     	    ResetPlayerWeapons(playerid);
	 		SafeGivePlayerWeapon(playerid, 24, 999);
			SafeGivePlayerWeapon(playerid, 29, 999);
			SafeGivePlayerWeapon(playerid, 31, 999);
			SetPlayerArmour(playerid, 90);
		}
		*/
	}
	SpawnNecessario(playerid);
	return true;
}

forward SpawnNecessario(playerid);
public SpawnNecessario(playerid)
{
    new house = Player[playerid][pHouseKey];
	new ahouse = Player[playerid][pPaluguelkey];

	Equipou[playerid] = false;
	EquipouColete[playerid] = false;

    SetPlayerTeam(playerid, NO_TEAM);

    if(IsACop(playerid))
        OnDuty[playerid] = false;

    //CASA
	if(Player[playerid][pLocalSpawn] == 1 && (house != 255 || ahouse != 255))
	{
        if(house == 255)
            house = ahouse;

		SafeSetPlayerPos(playerid, HouseInfo[house][hExitx], HouseInfo[house][hExity],HouseInfo[house][hExitz]);
   		SetPlayerVirtualWorld(playerid, HouseInfo[house][hWorld]);

   		SetPlayerInterior(playerid, HouseInfo[house][hInt]);
		Player[playerid][pInt] = HouseInfo[house][hInt];

		Player[playerid][pLocal] = house;
        Incasa[playerid] = house;
		return true;
	}
    SetPlayerVirtualWorld(playerid, 0);

	//MECANICOS
	if(Player[playerid][pJob] == MECANICO && Player[playerid][pRank] == 0)
    {
		SafeSetPlayerPos(playerid, 2520.1360,-1476.3246,23.9898);
		SetPlayerFacingAngle(playerid, 0.0);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
        return true;
    }
    //TAXISTAS
    else if(Player[playerid][pJob] == TAXISTA && Player[playerid][pRank] == 0)
    {
		SafeSetPlayerPos(playerid, 1284.4120,-1350.1644,13.5634);
		SetPlayerFacingAngle(playerid, 90.0);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
        return true;
    }
    //TAXISTASAEREOS
    else if(Player[playerid][pJob] == TAXISTAAEREO && Player[playerid][pRank] == 0)
    {
		SafeSetPlayerPos(playerid, 1655.9739,-1710.4868,20.6561);
		SetPlayerFacingAngle(playerid, 90.0);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
        return true;
    }
    //CAMINHONEIROS
    else if(Player[playerid][pJob] == CAMINHONEIRO && Player[playerid][pRank] == 0)
    {
		SafeSetPlayerPos(playerid, -40.0272,-232.3873,5.7161);
		SetPlayerFacingAngle(playerid, 270.0);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
        return true;
    }
	//ADVOGADOS
	else if(Player[playerid][pJob] == ADVOGADO && Player[playerid][pRank] == 0)
    {
		SafeSetPlayerPos(playerid, 2694.1377,-610.9766,-71.6582);
		SetPlayerFacingAngle(playerid, 270.0);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,1);
        return true;
    }
    //DESEMPREGADO & SEM ORG
	else if(GetPlayerOrg(playerid) == 0)
	{
	    SafeSetPlayerPos(playerid, CivilSpawns[0], CivilSpawns[1], CivilSpawns[2]);
		SetPlayerFacingAngle(playerid, CivilSpawns[3]);
        SetPlayerInterior(playerid, 0);
        return 1;
	}

    //POLICIA MILITAR
	if(Player[playerid][pMember] == TEAM_PM || Player[playerid][pLeader] == TEAM_PM)
	{
		SetPlayerArmour(playerid, 90);
		SafeGivePlayerWeapon(playerid, 24, 21);
		SafeSetPlayerPos(playerid, 232.7498,73.7373,1005.0391);
		SetPlayerFacingAngle(playerid, 270.0);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,6);
		Player[playerid][pInt] = 6;
		return true;
    }
    //FBI
    else if(Player[playerid][pMember] == TEAM_PF || Player[playerid][pLeader] == TEAM_PF)
	{
		SafeSetPlayerPos(playerid, 222.0222, 118.6661, 1003.2187);
		SetPlayerFacingAngle(playerid, 270.0);
        SetPlayerVirtualWorld(playerid, 1);

		SetPlayerInterior(playerid, 10);
		Player[playerid][pInt] = 10;

		SafeGivePlayerWeapon(playerid, 24, 21);
        SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 90);
		return true;
    }
    // FORÇAS ARMADAS
	else if(Player[playerid][pMember] == TEAM_FA || Player[playerid][pLeader] == TEAM_FA)
	{
	    SafeSetPlayerPos(playerid, 310.6609,-164.7110,999.5938);
	    SetPlayerFacingAngle(playerid, 280.0);
	    SetPlayerInterior(playerid, 6);
	    Player[playerid][pInt] = 6;
	    SetPlayerArmour(playerid, 90);

	 	SafeGivePlayerWeapon(playerid, 24, 21);
/*    	SafeGivePlayerWeapon(playerid, 46, 1);
	    SafeGivePlayerWeapon(playerid, 34, 100);
	 	SafeGivePlayerWeapon(playerid, 31, 5000);
	 	SafeGivePlayerWeapon(playerid, 29, 5000);
	 	SafeGivePlayerWeapon(playerid, 25, 300);
	 	SafeGivePlayerWeapon(playerid, 24, 300);
	 	SafeGivePlayerWeapon(playerid, 4, 1);    */
	    return true;
	}
	//Bombeiros
	else if(Player[playerid][pMember] == TEAM_BOMBE && Player[playerid][pLeader] == TEAM_BOMBE)
	{
    	SafeSetPlayerPos(playerid, 322.1213,315.1004,999.1484);
		SetPlayerFacingAngle(playerid, 180.0);
	    SetPlayerVirtualWorld(playerid, 0);
		SetCameraBehindPlayer(playerid);

		SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 90);

        SetPlayerInterior(playerid, 5);
		Player[playerid][pInt] = 5;

	    detranexit[playerid] = 2;
	    return true;
	}
	//BALLAS
	else if(Player[playerid][pMember] == TEAM_BALLAS || Player[playerid][pLeader] == TEAM_BALLAS)
	{
	    SafeSetPlayerPos(playerid, 324.0143,1122.2839,1083.8828);
	    SetPlayerInterior(playerid, 5);
	    return true;
	}
	//GROVE STREET
	else if(Player[playerid][pMember] == TEAM_GROOVE || Player[playerid][pLeader] == TEAM_GROOVE)
	{
	    SetPlayerInterior(playerid, 0);
	    SetCameraBehindPlayer(playerid);
	    SafeSetPlayerPos(playerid, 2519.1958,-1678.1322,14.6467);
	    Player[playerid][pInt] = 0;
	    return true;
	}
	//PREFEITO
	else if(Player[playerid][pLeader] == TEAM_PREF || Player[playerid][pMember] == TEAM_PREF)
	{
	    SetPlayerInterior(playerid, 3);
	    SafeSetPlayerPos(playerid, 373.7500, 188.5000, 1014.1797);
	    SetPlayerFacingAngle(playerid, 180.0000);
	    SetCameraBehindPlayer(playerid);
       	SetPlayerArmour(playerid, 90);
		SafeGivePlayerWeapon(playerid, 24, 250);
	 	SafeGivePlayerWeapon(playerid, 29, 700);
	    Player[playerid][pInt] = 3;
	    return true; // Equipar 375.5500, 180.8200, 1014.1875
	}
	//HITMANS
	else if(Player[playerid][pMember] == TEAM_HITMAN || Player[playerid][pLeader] == TEAM_HITMAN)
	{
	    SetPlayerArmour(playerid, 90);
	    SafeSetPlayerPos(playerid, -688.0905, 936.3817, 13.6328);
       	SetPlayerFacingAngle(playerid, 0.0);
       	SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
		SafeGivePlayerWeapon(playerid, 4, 1);
		SafeGivePlayerWeapon(playerid, 24, 100);
		SafeGivePlayerWeapon(playerid, 34, 50);
		Player[playerid][pInt] = 4;
	    return true;
	}
	//SAN NEWS e Empredo de Jornaleiro
	else if(Player[playerid][pMember] == TEAM_SANEWS || Player[playerid][pLeader] == TEAM_SANEWS || (Player[playerid][pJob] == JORNALEIRO && Player[playerid][pRank] == 0))
	{
		SafeSetPlayerPos(playerid, 356.6006,209.0214,1008.3828);
		SetPlayerInterior(playerid,3);
		Player[playerid][pInt] = 3;
	    return true;
	}
	//LOWRIDERS
	/*else if(Player[playerid][pMember] == TEAM_LOWRIDERS || Player[playerid][pLeader] == TEAM_LOWRIDERS)
	{
		SafeSetPlayerPos(playerid, 1121.4432,7.9393,1002.0859);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,12);
		Player[playerid][pInt] = 12;
        return true;
	}*///Hamas
	/*else if(GetPlayerOrg(playerid) == TEAM_HAMAS)
	{
	    SafeSetPlayerPos(playerid, 1089.6013, 1289.8026, 10.8203);
	    SetPlayerFacingAngle(playerid, 90.0);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 0);
		Player[playerid][pInt] = 0;
	}*/
	 //VAGOS
	else if(Player[playerid][pMember] == TEAM_VAGOS || Player[playerid][pLeader] == TEAM_VAGOS)
	{
		SetPlayerInterior(playerid,8);
		SafeSetPlayerPos(playerid, 2817.9792,-1169.5975,1025.5778);
		Player[playerid][pInt] = 8;
        SetPlayerVirtualWorld(playerid, 1);
		return true;
	}
	else if(GetPlayerOrg(playerid) == TEAM_BIKERS || GetPlayerOrg(playerid) == TEAM_ANGELS)
	{
		SafeSetPlayerPos(playerid, 508.3417,-80.1715,998.9609);
 		SetPlayerFacingAngle(playerid, 0.0);
 		SetCameraBehindPlayer(playerid);
        SetPlayerInterior(playerid,11);
		Player[playerid][pInt] = 11;

        SetPlayerVirtualWorld(playerid, GetPlayerOrg(playerid) - TEAM_BIKERS); //13 - 13 = 0, 14 - 13 = 1
		return true;
	}
    /*else if(Player[playerid][pMember] == TEAM_MUNICIPAL || Player[playerid][pLeader] == TEAM_MUNICIPAL)
	{
		SafeSetPlayerPos(playerid, 322.1213, 315.1004, 999.1484);
 		SetPlayerFacingAngle(playerid, 180.0);
        SetPlayerVirtualWorld(playerid, 1);
 		SetCameraBehindPlayer(playerid);

		SetPlayerHealth(playerid, 100);
		SetPlayerArmour(playerid, 90);

        SetPlayerInterior(playerid, 5);
		Player[playerid][pInt] = 5;

	    detranexit[playerid] = 1;
	    return true;
    }*/
	else if(Player[playerid][pMember] == TEAM_AZTECAS || Player[playerid][pLeader] == TEAM_AZTECAS)
	{
		SetPlayerInterior(playerid,8);
		SafeSetPlayerPos(playerid, 2817.9792,-1169.5975,1025.5778);
		Player[playerid][pInt] = 8;
		return true;
	}
	else if(Player[playerid][pMember] == TEAM_RUSSA || Player[playerid][pLeader] == TEAM_RUSSA)
	{
		SafeSetPlayerPos(playerid, 1266.1817, -792.8649, 1084.0078);
        SetPlayerFacingAngle(playerid, 0.0);
       	SetCameraBehindPlayer(playerid);

		SetPlayerInterior(playerid, 5);
		Player[playerid][pInt] = 5;
		return true;
    }
        //Yakuza
	else if(Player[playerid][pMember] == TEAM_YAKUZA || Player[playerid][pLeader] == TEAM_YAKUZA)
	{
		SafeSetPlayerPos(playerid, -2164.5222,645.5374,1057.5938);
		SetPlayerInterior(playerid,1);
	    return true;
	}
	    //DRIFTERS
	/*else if(Player[playerid][pMember] == TEAM_DRIFTERS || Player[playerid][pLeader] == TEAM_DRIFTERS)
	{
		SafeSetPlayerPos(playerid, -226.2575,1409.8733,27.7734);
		SetPlayerInterior(playerid,18);
	    return true;
	}
	   //CV
	else if(Player[playerid][pMember] == TEAM_CV || Player[playerid][pLeader] == TEAM_CV)
	{
		SafeSetPlayerPos(playerid, 416.1714,2537.2358,10.0000);
		SetPlayerInterior(playerid,10);
	    return true;
	}
	   //PCC
	else if(Player[playerid][pMember] == TEAM_PCC || Player[playerid][pLeader] == TEAM_PCC)
	{
        SafeSetPlayerPos(playerid, 2554.1692,-1285.9547,1060.9844);
		SetPlayerInterior(playerid,2);
		Player[playerid][pInt] = 2;
	    return true;
	}*/
	  //BOPE
	else if(Player[playerid][pMember] == TEAM_BOPE || Player[playerid][pLeader] == TEAM_BOPE)
	{
	    SetPlayerArmour(playerid, 90);
		SafeSetPlayerPos(playerid, 248.9618,115.4132,1003.2188);
		SetPlayerFacingAngle(playerid, 180.0);
		SetPlayerInterior(playerid,10);
	    return true;
	}
	    //ALQAEDA
	else if(Player[playerid][pMember] == TEAM_ALQAEDA || Player[playerid][pLeader] == TEAM_ALQAEDA)
	{
		SafeSetPlayerPos(playerid, 138.2542, 2528.7663, 16.8136);
		SetPlayerFacingAngle(playerid, 90.0);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid,0);
	    return true;
	}
	    //KING'S
	/*else if(Player[playerid][pMember] == TEAM_KINGS || Player[playerid][pLeader] == TEAM_KINGS)
	{
		SafeSetPlayerPos(playerid, 446.0672,-9.3721,1000.7343);
		SetPlayerInterior(playerid,1);
	    return true;
	}
	else if(Player[playerid][pMember] == TEAM_PCIVIL || Player[playerid][pLeader] == TEAM_PCIVIL)
	{
	    SafeSetPlayerPos(playerid, 213.6497, 164.7765, 1003.0234);
        SetPlayerFacingAngle(playerid, 355.0);

	    SetPlayerInterior(playerid, 3);
	    Player[playerid][pInt] = 3;

	    SafeGivePlayerWeapon(playerid, 24, 21);
	    SetPlayerHealth(playerid, 100);
	    SetPlayerArmour(playerid, 90);
	    return true;
	}*/

	/*Sistema de Arsenal
	if(Player[playerid][pDonateRank] == 1)
    {
		  SafeGivePlayerWeapon(playerid, 24, 50);
		  SafeGivePlayerWeapon(playerid, 29, 150);
		  SafeGivePlayerWeapon(playerid, 31, 150);
		  SetPlayerArmour(playerid, 30);
	}
	else if(Player[playerid][pDonateRank] == 2)
   	{
		  SafeGivePlayerWeapon(playerid, 24, 100);
		  SafeGivePlayerWeapon(playerid, 29, 300);
		  SafeGivePlayerWeapon(playerid, 31, 300);
		  SetPlayerArmour(playerid, 60);
	}
	else if(Player[playerid][pDonateRank] == 3)
   	{
		  SafeGivePlayerWeapon(playerid, 24, 999);
		  SafeGivePlayerWeapon(playerid, 29, 999);
		  SafeGivePlayerWeapon(playerid, 31, 999);
		  SetPlayerArmour(playerid, 90);
	}
	*///Sistema de Arsenal
	SetPlayerWeapons(playerid);
	return true;
}


public OnPlayerPickUpPickup(playerid, pickupid)
{
	nowh[playerid] = 1;
	SetTimerEx("ResetAB", 1100, false, "i", playerid);
    return 1;
}

public OnVehicleDeath(vehicleid)
{
	if(IsAnTransportVehicle(vehicleid) || vehicleid == YakuzaCars[8] || vehicleid == RussaCar[8] || vehicleid == TerrorCar[2])
	{
	    AddVehicleMaterial(vehicleid, 0);
	    TrunkInfo[vehicleid][TrunkMateriais] = 0;
	    return 1;
	}
	return true;
}

stock DropWeapons(playerid)
{
    if(IsPlayerInAreaAzul(playerid))
        return 1;

	new Weap,
        Ammo,
        Float:posX,
        Float:posY,
        Float:posZ,
        Float:mapZ;
    GetPlayerPos(playerid, posX, posY, posZ);

    MapAndreas_FindZ_For2DCoord(posX, posY, mapZ);

    if(posZ > mapZ + 30.0)
        return 1;

    if(posZ < mapZ)
        posZ -= 1.005;
    else
        posZ = mapZ;

	for(new wep = 1; wep < 12; wep ++)
	{
		GetPlayerWeaponData(playerid, wep, Weap, Ammo);
		if(PickupID[Weap][0] != -1)
		{
			new Float:X2 = posX + (RandomFloat(3) - RandomFloat(3));
			new Float:Y2 = posY + (RandomFloat(3) - RandomFloat(3));

            if(LastDropID > sizeof(DroppedGuns))
                LastDropID = -1;

            LastDropID ++;
            Iter_Add(DroppedGun, LastDropID);

            if(IsValidDynamicObject(DroppedGuns[LastDropID][2]))
                DestroyDynamicObject(DroppedGuns[LastDropID][2]);

            DroppedGuns[LastDropID][0] = Weap;
            DroppedGuns[LastDropID][1] = Math_Clamp(Ammo, 1, PickupID[Weap][1]);
            DroppedGuns[LastDropID][2] = CreateDynamicObject(PickupID[Weap][0], X2, Y2, posZ + WpModelDrop[PickupID[Weap][0] - 321][0], WpModelDrop[PickupID[Weap][0] - 321][1], WpModelDrop[PickupID[Weap][0] - 321][2], RandomFloat(360));
		}
	}
    return 1;
}

forward Handsup(playerid);
public Handsup(playerid)
{
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
}

forward SetMorto(playerid);
public SetMorto(playerid)
{
	if(GetPVarInt(playerid, "Morto") != 2) return 0;
	if(GetPVarInt(playerid, "Hospital")) return 0;
    if(Player[playerid][pJailed] == 0)
	{
	    SetPVarInt(playerid, "Hospital", 1);

	    if(Player[playerid][pDonateRank]>=2)
	    {
			NoHospital[playerid] = 10;
		}
		else
		{
		    NoHospital[playerid] = 25;
		}
        SetPlayerFacingAngle(playerid, 90);

        new rand = random(sizeof(MacaSpawns));
  	    SafeSetPlayerPos(playerid, MacaSpawns[rand][0], MacaSpawns[rand][1], MacaSpawns[rand][2]);
		ApplyAnimation(playerid,"CRACK", "crckdeth2", 4.0, 1, 1, 1, 0, 45000);
		SetPlayerCameraPos(playerid, MacaSpawns[rand][0]+3, MacaSpawns[rand][1]-5, MacaSpawns[rand][2]+3);
		SetPlayerCameraLookAt(playerid, MacaSpawns[rand][0], MacaSpawns[rand][1], MacaSpawns[rand][2]);

		if(Player[playerid][pPlano])
		{
            SendClientMessage(playerid, 0xFF9680FF, "[MÉDICO] Você estava ferido e foi levado ao hospital. Custo pago pelo plano de saúde.");
		}
		else
		{
            SendClientMessage(playerid, 0xFF9680FF, "[MÉDICO] Você estava ferido e foi levado ao hospital. Os custos ficaram em R$500,00");
      		GivePlayerGP(playerid,-500);
		}
	}
	DeletePVar(playerid, "Morto");
    return true;
}

//new bool:morreuPorBug[MAX_PLAYERS];
public OnPlayerDeath(playerid, killerid, reason)
{
    PlayerTextDrawHide(playerid,vida[playerid]);
	PlayerTextDrawHide(playerid,colete[playerid]);

/*	if(morreuPorBug[playerid])
    {
        morreuPorBug[playerid] = false;
        return 1;
    }
*/
    if(Player[playerid][pMorto] == 1) return 1;
    SetPVarInt(playerid, "Morto", 2);
    static Float:zxyPos[3];
    new string[256];

	Equipou[playerid] = false;
	EquipouColete[playerid] = false;
	//SendDeathMessage(killerid, playerid, reason);

    if(InTAA[playerid])
        EndTAA(playerid);

    if(PlayerInRace[playerid])
        EndRace(playerid, RACE_LOST_DIE);
    if(PlayerCuffed[playerid] != 0)
    {
        PlayerCuffed[playerid] = 0;
        Camburao[playerid] = false;
    }

    if(GetPlayerState(killerid) == 2 && !IsPlayerInGuerra(playerid) && !IsPlayerInUsina(playerid) && (!IsPlayerInAQFA(playerid) && InGuerra) && !noteste[killerid] && !noevento[killerid])
    {
		GetPlayerPos(killerid, zxyPos[0], zxyPos[1], zxyPos[2]);
        if (IsPlayerInRangeOfPoint(playerid, 10.0, zxyPos[0], zxyPos[1], zxyPos[2]))
        {
            SendClientMessage(killerid, COLOR_YELLOW, "Você infringiu uma lei do servidor cometendo DRIVE-BY !");
			BanguBot(killerid,20,"Drive-By");
        }
    }
    if(InGuerra == 1 && IsPlayerInAQFA(playerid) && IsPlayerInAQFA(killerid) && Guerrilheiro(killerid))
    {
        new pOrg = GetPlayerOrg(playerid), kOrg = GetPlayerOrg(killerid);

        //Se matar da Própria Org
        if(pOrg == kOrg)
            goto PularGuerra;

        //Se um FA matar um Terror
        if(kOrg == TEAM_FA && (pOrg == TEAM_ALQAEDA))
        {
	    	AddPlayerTeamPoints(killerid, 100);
	        format(string,sizeof(string),"[Guerra]: {FFFFFF}A {%s}%s {FFFFFF}marcou mais 100 pontos! Totalizando até agora: %d", OrgsColorTags[GetPlayerOrg(killerid)], OrgsNames[GetPlayerOrg(killerid)], GetPlayerTeamPoints(killerid));
        }
        //Se matar o Prefeito
		else if(Player[playerid][pLeader] == 7)
		{
            //Se um Terror matar o Prefeito
            if(kOrg != TEAM_FA)
            {
    	    	AddPlayerTeamPoints(killerid, 250);
    	        format(string,sizeof(string),"[Guerra]: {FFFFFF}A {%s}%s {FFFFFF}marcou mais 250 pontos! Totalizando até agora: %d", OrgsColorTags[GetPlayerOrg(killerid)], OrgsNames[GetPlayerOrg(killerid)], GetPlayerTeamPoints(killerid));
            }
            //Se um FA matar o Prefeito
            else
            {
    	    	AddPlayerTeamPoints(killerid, -2500);
    	        format(string,sizeof(string),"[Guerra]: {FFFFFF}A {%s}%s {FFFFFF}%s perdeu 2500 pontos! Totalizando até agora: %d", OrgsColorTags[GetPlayerOrg(killerid)], OrgsNames[GetPlayerOrg(killerid)], GetPlayerTeamPoints(killerid));
            }
        }
        //Se matar um Player não Guerrilheiro
		else if(pOrg != TEAM_FA && pOrg != TEAM_ALQAEDA)
		{
            //Se um FA matar um Civil
		    if(kOrg == TEAM_FA && !IsAGang(playerid) && !IsATerror(playerid) && GetPlayerOrg(playerid) != TEAM_RUSSA && GetPlayerOrg(playerid) != TEAM_YAKUZA)
            {
    	    	AddPlayerTeamPoints(killerid, -20);
    	        format(string,sizeof(string), "[Guerra]: {FFFFFF}A {%s}%s {FFFFFF}perdeu 20 pontos! Totalizando até agora: %d", OrgsColorTags[GetPlayerOrg(killerid)], OrgsNames[GetPlayerOrg(killerid)], GetPlayerTeamPoints(killerid));
            }
            //Se um FA matar um Criminoso sem ser Guerrilheiro
            else if(kOrg == TEAM_FA)
            {
    	    	AddPlayerTeamPoints(killerid, 50);
    	        format(string,sizeof(string), "[Guerra]: {FFFFFF}A {%s}%s {FFFFFF}marcou mais 50 pontos! Totalizando até agora: %d", OrgsColorTags[GetPlayerOrg(killerid)], OrgsNames[GetPlayerOrg(killerid)], GetPlayerTeamPoints(killerid));
            }
            else
            {
                //Se um Teror matar um COP sem ser FA
                if(IsACop(playerid))
                {
        	    	AddPlayerTeamPoints(killerid, 35);
        	        format(string,sizeof(string), "[Guerra]: {FFFFFF}A {%s}%s {FFFFFF}marcou mais 35 pontos! Totalizando até agora: %d", OrgsColorTags[GetPlayerOrg(killerid)], OrgsNames[GetPlayerOrg(killerid)], GetPlayerTeamPoints(killerid));
                }
                //Se um Terror matar um Civil
                else
                {
        	    	AddPlayerTeamPoints(killerid, 20);
        	        format(string,sizeof(string), "[Guerra]: {FFFFFF}A {%s}%s {FFFFFF}marcou mais 20 pontos! Totalizando até agora: %d", OrgsColorTags[GetPlayerOrg(killerid)], OrgsNames[GetPlayerOrg(killerid)], GetPlayerTeamPoints(killerid));
                }
            }
        }
        //Se um Terror matar um Inimigo
		else
		{
	    	AddPlayerTeamPoints(killerid, 50);
	        format(string,sizeof(string),"[Guerra]: {FFFFFF}A {%s}%s {FFFFFF}marcou mais 50 pontos! Totalizando até agora: %d", OrgsColorTags[GetPlayerOrg(killerid)], OrgsNames[GetPlayerOrg(killerid)], GetPlayerTeamPoints(killerid));
		}

        AddPlayerTeamKills(killerid, 1);
        AtualizarGuerra();
        SendGuerraMessage(COLOR_LIGHTBLUE, string);
 	}
 	PularGuerra:
    Player[playerid][pMorto] = 1;
	Player[playerid][pDeaths] ++;

    if(killerid != INVALID_PLAYER_ID)
        Player[killerid][pKills] ++;

    GetPlayerPos(playerid, MortePos[playerid][0], MortePos[playerid][1], MortePos[playerid][2]);
    MorteInt[playerid] = GetPlayerInterior(playerid);
    if(Player[playerid][FirstSpawn] == true)
        return true;
    WarCode_PlayerDeath(playerid, killerid, reason);

	if(PlayerTied[playerid] > 0)
	{
	    format(string, sizeof(string), "BOPE fracassou no sequestro de %s. Refém morto.",ReturnPlayer(playerid));
	    SendClientMessageToAll(COLOR_OOC, string);
	    PlayerTied[playerid] = 0;
	    BanguBot(playerid, 10, "Morreu em Sequestro");
	}
    foreach(new x: Player)
 		if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && Player[x][gSpectateID] == playerid)
              AdvanceSpectate(x);

    //EVENTO
    if(noevento[playerid] && EventoInfo[EventoTDM])
    {
        noevento[playerid] = false;
        new TeamPlayers[2]; //3° Array no caso de erro.
        foreach(new pId: Player)
            if(noevento[pId] && EventoInfo[EventoTeam][pId] < 3)
                TeamPlayers[EventoInfo[EventoTeam][pId]] ++;

        if(TeamPlayers[0] == 0 && TeamPlayers[1] == 0)
            return ABroadCast(COLOR_ADMIN, "[Evento]: Todos os participantes do evento morreram.", 1);
        else if(TeamPlayers[0] == 0)
            ABroadCast(COLOR_ADMIN, "[Evento]: O Time 1 venceu o evento.", 1);
        else if(TeamPlayers[1] == 0)
            ABroadCast(COLOR_ADMIN, "[Evento]: O Time 2 venceu o evento.", 1);
        else
            return 1;

        foreach(new pId: Player)
        {
            if(noevento[pId])
            {
				PlayerPlaySound(pId, 1062, 0.0, 0.0, 0.0);
				GivePlayerGP(pId, 5000);
				SendClientMessage(pId, COLOR_LIGHTBLUE, "Seu time ganhou o evento, e como recompensa cada um recebeu R$ 5.000. Parabéns!");
                SetTimerEx("StopMusic", 10000, false, "d", pId);

                noevento[pId] = false;
                SetPlayerTeam(pId, NO_TEAM);

                SpawnNecessario(pId);

                SetPlayerSkin(pId, Player[pId][pModel]);
                ResetPlayerWeapons(pId);

                Equipou[pId] = false;
                EquipouColete[pId] = false;

                OnDuty[pId] = false;
            }
        }
        return 1;
    }

    //PAINT BALL
	if(PlayerPaintballing[playerid] != 0)
	{
        if(killerid == INVALID_PLAYER_ID)
            return 1;

	    new killer[MAX_PLAYER_NAME];
	    PlayerPaintballKills[killerid] ++;
	    format(string, sizeof(string), "Você matou %d pessoas nesta partida.",PlayerPaintballKills[killerid]);
	    SendClientMessage(killerid, COLOR_YELLOW, string);
	    if(PlayerPaintballKills[killerid] > PaintballWinnerKills)
	    {
	        PaintballWinner = killerid;
	        PaintballWinnerKills = PlayerPaintballKills[killerid];
	        GetPlayerName(killerid, killer, sizeof(killer));
	        foreach(new i: Player)
	        {
         		if(PlayerPaintballing[i] != 0)
	            {
	            	format(string, sizeof(string), "%s está liderando o paintball com %d pontos.",ReturnPlayer(killerid),PaintballWinnerKills);
					SendClientMessage(i, COLOR_YELLOW, string);
					return true;
     			}
        	}
	    }
	    return true;
	}
	//Roubo
	if(IsPlayerAttachedObjectSlotUsed(playerid, 9))
	{
	    RemovePlayerAttachedObject(playerid, 9);
	    HoldingOrgMoney[playerid] = 0;
	}

	//empresa
	if(Player[playerid][pPlano] == 0)
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Hospital]: Você não tinha plano de saúde e isto te custou R$300.");
		if(GetPlayerGP(playerid) >= 300) GivePlayerGP(playerid, -300);
		else Player[playerid][pBank] -= 300;

        GiveBizMoney(Biz_Hosp, 300);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Hospital]: Seu plano de saúde cobriu os custos do hospital.");
	    Player[playerid][pPlano] -= 1;
	}
	if(CarShopping[playerid] == true)
	{
		CarShopping[playerid] = false;
		DestroyVehicle(ShopCar[playerid]);
	    carbrowse[playerid] = 0;
	    Kick(playerid);
 	}
    if(dw)
      	DropWeapons(playerid);
    Conce[playerid] = 0;
	new Float:px,Float:py,Float:pz;
	GetPlayerPos(playerid, px, py, pz);
    burgerexit[playerid] = 0;
//    Player[playerid][pInvWeapon] = 0;
//    Player[playerid][pInvAmmo] = 0;
    cherifeexit[playerid] = 0;
    Player[playerid][pLocal] = 255;
    Player[playerid][pSeatBelt] = 0;
    Player[playerid][pCapacete] = 0;
    nowh[playerid] = 0;

	//TELEFONEMA
	new caller = Mobile[playerid];
	if(caller != 255)
	{
		if(caller < 255)
		{
            SetTimerEx("RemoverAttachTelefone", 1500, false, "d", caller);
			SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
			SendClientMessage(caller,  COLOR_LIGHTBLUE, "** A ligação caiu...");

			CellTime[caller] = 0;
			Mobile[caller] = 255;
    	    KillTimer(LOL[caller]);
		}
		Mobile[playerid] = 255;
		CellTime[playerid] = 0;
		KillTimer(LOL[playerid]);
	}
	ClearCrime(playerid);

 	Player[playerid][Spawned] = false;

	if(gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)
	{
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	}

    if(killerid == INVALID_PLAYER_ID)
        return 1;

	if(WantedPoints[playerid] > 0 && Player[playerid][pMember] != 21 && PlayerPaintballing[playerid] == 0)
	{
        if(GetPlayerOrg(killerid) != GetPlayerOrg(playerid))
        {
    	    new dstring[128];
    		new wanted = WantedPoints[playerid];
    		new diecash = 0;
    	    while(WantedPoints[playerid] > 0)
    	    {
    	        diecash += (150 + random(50));
    	        WantedPoints[playerid] --;
    	    }
    	    format(dstring, sizeof(dstring), "{FF0000}[Info]:{FFFFFF} Você perdeu R$ %d por morrer em fuga de procurado sob nível: %d.", diecash, wanted);
    	    SendClientMessage(playerid, SERVER_INFO, dstring);
    	    GivePlayerGP(playerid, - diecash);
    	    Player[playerid][pWantedDeaths] += 1;
        }
	}

    if(Player[playerid][pLeader] == TEAM_PREF)
	{
	    if(Player[killerid][pMember] == 0 && Player[killerid][pLeader] == 0  && (noevento[killerid] == false && noteste[killerid] == false))
	    {
	        BanguBot(killerid,20,"Death-Match");
		}
	    format(string, sizeof(string), "[Atenção]: O Prefeito %s foi assassinado por %s!!!", ReturnPlayer(playerid) , ReturnPlayer(killerid));
		SendClientMessageToAll(COLOR_NOTICIA, string);
	}

    new arma = GetPlayerWeapon(killerid);
    SendFakeKillMessage(playerid, killerid, arma);

	//CONTRATO
    if(GetPlayerOrg(killerid) == TEAM_HITMAN)
    {
        if(Procurando[killerid])
        {
            if(Vitima[killerid] == playerid)
            {
	            GivePlayerGP(killerid, Player[playerid][pHeadValue]);
				format(string, 128, "[Assassino]: Um assassino cumpriu um contrato de R$%d em %s.", Player[playerid][pHeadValue], Player[playerid][pName]);
				SendClientMessageToAll(COLOR_HITMAN, string);
//				WantedPoints[killerid] += 1;
//	            SetPlayerCriminal(killerid, 255, "Homicídio de primeiro grau", "Desconhecido");
				Player[playerid][pHeadValue] = 0;
				SendoProcurado[playerid] = false;
	            Procurando[killerid] = false;
	            Vitima[killerid] = 999;
//	            return true;
			}
        }
		else
		{
//          WantedPoints[killerid] += 1;
//          SetPlayerCriminal(killerid,255, "Homicídio de primeiro grau", "Desconhecido");
            SendClientMessage(killerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você matou uma pessoa sem contrato.");
//          return true;
		}
    }
    if(SendoProcurado[killerid] && Vitima[playerid] == killerid)
    {
        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você morreu para seu contrato e o perdeu.");
//      WantedPoints[killerid] += 1;
//      SetPlayerCriminal(killerid, 255, "Homicídio de primeiro grau", "Desconhecido");
		Player[playerid][pHeadValue] = 0;
		SendoProcurado[playerid] = false;
        Procurando[killerid] = false;
        Vitima[killerid] = 999;
//      return true;
    }


	//MATAR EM LOCAL PROIBIDO
	if(PlayerToPoint(40.0, killerid, 245.9469,75.8629,1003.6406) || PlayerToPoint(40.0, killerid, 197.7218,175.0082,1003.0234) || PlayerToPoint(40.0, killerid, 2003.3408,2288.0269,1011.1256) && (!noevento[killerid] && !noteste[killerid]))
	{
	    new penaantiga = Player[killerid][pJailTime]/60;
	    new penanova = penaantiga+5;

	    //if(Player[killerid][pJailed] == 1 || Player[killerid][pJailed] == 2 && !IsACop(killerid))
        if(Player[killerid][pJailed] != 0 && !IsACop(killerid))
			BanguBot(killerid, penanova, "Matar em Local Proibido");
	    else if(!IsACop(killerid))
			BanguBot(killerid, 20, "Matar em Local Proibido");

//		return true;
	}
    if(IsPlayerCivil[playerid])
    {
        if(Player[killerid][pLevel] <= 3)
        {
	        BanguBot(killerid, 20, "Matar Civil em Area Proibida");
            format(string, sizeof(string), "[ATENÇÃO]: %s[ID %d] foi kickado por Matar Civil em Área Proibida.", ReturnPlayer(killerid), killerid);
            SendClientMessageToAll(COLOR_OOC, string);
            Kick(killerid);
            return 1;
        }
    }
/*	if(killerid != 65535 && Player[playerid][pLevel] >= 2 && PlayerPaintballing[playerid] != 0)
	{
	    BanguBot(killerid,10,"Spawn-Kill");
	}*/
 	if(Player[killerid][pJailed] == 2 && Player[playerid][pJailed] == 2)
	{
	    BanguBot(killerid,10,"Matar no Bangu");
    }
    if(IsPlayerConnected(killerid) && !noevento[killerid])// && Player[killerid][pMember] != TEAM_HITMAN)
    {
        if(IsACrime(killerid) || Player[killerid][pMember] == TEAM_HITMAN || IsACivil(killerid))
		{
			WantedPoints[killerid] += 1;
			SetPlayerCriminal(killerid,255, "Homicídio de primeiro grau", "Desconhecido");
		}
        else if(IsACop(killerid))
			WantedPoints[killerid] = 0;

    }
/*    if(killerid != playerid)
    {
        WantedPoints[playerid] = 0;
	}*/
	return true;
}

public OnPlayerSpawn(playerid)
{
    TextDrawHideForPlayer(playerid, FundoLogin);
    PlayerTextDrawShow(playerid,vida[playerid]);
	PlayerTextDrawShow(playerid,colete[playerid]);
	if(Player[playerid][FirstSpawn] == true)
	{
		Player[playerid][FirstSpawn] = false;
	    if(gPlayerLogged[playerid] == 1)
	    {
			new lol[64];
			format(lol,64,"/RPG/bans/%s.ini", Player[playerid][pName]);
			if(DOF2_FileExists(lol))
			{
	  			new string[128], banfile[50];
			    new admin[52], data[52], tempban[128];
				format(admin,52,"%s", DOF2_GetString(lol,"AdminName"));
				format(data,52,"%s", DOF2_GetString(lol,"Data"));

				new tick = DOF2_GetInt(lol,"BanTime");
				if(tick > 0)
				{
					if(tick < GetTickCount())
					    format(tempban,128,"|| Ban temporário - Acaba em %s", Convert(tick-GetTickCount()));

					else
					{
					    SendClientMessage(playerid, COLOR_RED,"[ADMIN BOT] Seu ban temporário acabou.");
						DOF2_RemoveFile(lol);
						goto Join;
					}
				}

				SendClientMessage(playerid, COLOR_BARRAS,"=============================================================");
				format(string,128,"- Esse nick '%s' foi banido pelo '%s' em '%s'", Player[playerid][pName], admin, data);
			    SendClientMessage(playerid, COLOR_WHITE, string);
		  	    format(string,128,"- Motivo: '%s' %s", DOF2_GetString(lol, "Motivo"), tempban);
		  	    SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_ORANGE,"Visite a página 'www.blsrpg.com.br', leia as regras e crie seu tópico com esta imagem. (F8 para capturá-la)");
				SendClientMessage(playerid, COLOR_BARRAS,"=============================================================");

				banfile = GetBannedFile(playerid);
				if(!DOF2_FileExists(banfile) && tick == 0)
				{
					new hour, minute, second, day, month, year;
					GetTimeFix(hour, minute, second);
					getdate(year, month, day);
					DOF2_CreateFile(banfile);
					DOF2_SetString(banfile,"PlayerName", Player[playerid][pName]);
					DOF2_SetString(banfile,"AdminName", "Admin Bot");
					DOF2_SetString(banfile,"Motivo", "Evasão de Ban (Old)");
					format(string, sizeof(string), "%02d/%02d às %02d:%02d", day, month, hour, minute);
					DOF2_SetString(banfile,"Data", string);
					DOF2_SaveFile();
				}
				return Kick(playerid);
			}
		}
		Join:
	  	TextDrawShowForPlayer(playerid, MoneyTD);
		TextDrawShowForPlayer(playerid, ServerLogo2);
	 	TextDrawShowForPlayer(playerid, ServerLogo1);
        //SetPlayerTeam(playerid, 1);
	}
	PlaySoundForPlayer(playerid, 1057);
	StopMusic(playerid);

    if(IsPlayerNPC(playerid)) //Checa se o jogador é um NPC.
    {
		SetPlayerSkin(playerid, 181);
		return true;
    }
    nowh[playerid] = 0;
    Incasa[playerid] = Player[playerid][pHouseKey];
	SetTimerEx("TurfsDebug",3000, false, "i", playerid);

	//InitLockDoors(playerid);
	SetPlayerHealth(playerid, 100);
	DSTPlayer[playerid] = 0;

    if(Player[playerid][pAdmin] > 0)
	    SetPlayerChatBubble(playerid, AccountName(playerid), COLOR_YELLOW, 50.0, 14400000);

 	SetPlayerSkin(playerid, Player[playerid][pModel]);

	if(AdminDuty[playerid] == MODOSA_TRABALHANDO)
	{
		if(Player[playerid][pSex] == 1) SetPlayerSkin(playerid, 217);
		else SetPlayerSkin(playerid, 211);
	}

	AtualizarTextDraws(playerid);
    // Milestones
    /*TextDrawShowForPlayer(playerid, Milestone);
    TextDrawShowForPlayer(playerid, MilTask1);
    TextDrawShowForPlayer(playerid, MilTask2);*/

	Player[playerid][pMorto] = 0;
	SetPlayerSpawn(playerid);
	SetPlayerWeapons(playerid);
    //SetPlayerTeam(playerid, 1);
	return true;
}

public Sms(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\r\n",string);
	new File:hFile;
	hFile = fopen("/RPG/logs/sms.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public OnPlayerEnterCheckpoint(playerid)
{
	new string[128];
	new name[MAX_PLAYER_NAME];
	new bool:ResetCheck = true;
	if(CP[playerid]==1)
	{
		if(IsPlayerInAnyVehicle(playerid))
	    {
		    Player[playerid][pJackSkill] ++;
			if(Player[playerid][pJackSkill] == 50)
			{ SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade em desmanches agora é Level 2, você irá ganhar mais dinheiro e uma recarga menor"); }
			else if(Player[playerid][pJackSkill] == 100)
			{ SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade em desmanches agora é Level 3, você irá ganhar mais dinheiro e uma recarga menor"); }
			else if(Player[playerid][pJackSkill] == 200)
			{ SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade em desmanches agora é Level 4, você irá ganhar mais dinheiro e uma recarga menor"); }
			else if(Player[playerid][pJackSkill] == 400)
			{ SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade em desmanches agora é Level 5, você irá ganhar mais dinheiro e uma recarga menor"); }
			new level = Player[playerid][pJackSkill];
			if(level >= 0 && level <= 50)
			{
			    new rand = random(sizeof(SELLCAR1));
			    format(string, sizeof(string), "Você vendeu o veículo por R$ %d sua recarga é de 20 minutos.", SELLCAR1[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerGP(playerid, SELLCAR1[rand]);
			    Player[playerid][pCarTime] = 1200;
			}
			else if(level >= 51 && level <= 100)
			{
			    new rand = random(sizeof(SELLCAR2));
			    format(string, sizeof(string), "Você vendeu o veículo por R$ %d sua recarga é de 18 minutos.", SELLCAR2[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerGP(playerid, SELLCAR2[rand]);
			    Player[playerid][pCarTime] = 1080;
			}
			else if(level >= 101 && level <= 200)
			{
			    new rand = random(sizeof(SELLCAR3));
			    format(string, sizeof(string), "Você vendeu o veículo por R$ %d sua recarga é de 16 minutos.", SELLCAR3[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerGP(playerid, SELLCAR3[rand]);
			    Player[playerid][pCarTime] = 960;
			}
			else if(level >= 201 && level <= 400)
			{
			    new rand = random(sizeof(SELLCAR4));
			    format(string, sizeof(string), "Você vendeu o veículo por R$ %d sua recarga é de 14 minutos.", SELLCAR4[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerGP(playerid, SELLCAR4[rand]);
			    Player[playerid][pCarTime] = 840;
			}
			else if(level >= 401)
			{
			    new rand = random(sizeof(SELLCAR5));
			    format(string, sizeof(string), "Você vendeu o veículo por R$ %d sua recarga é de 12 minutos.", SELLCAR5[rand]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerGP(playerid, SELLCAR5[rand]);
			    Player[playerid][pCarTime] = 720;
			}
			GameTextForPlayer(playerid, "~y~Carro vendido", 2500, 1);
			CP[playerid] = 0;
		    DisablePlayerCheckpoint(playerid);
		    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		}
		else
		{
		    GameTextForPlayer(playerid, "~r~sem ve¢culo", 5000, 1);
		}
	}
	if(CP[playerid] == 5)
	{
	    GameTextForPlayer(playerid, "~y~sobre o checkpoint de misso", 2500, 1);
		CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	if(CP[playerid] == 9)//Karting
	{
		GameTextForPlayer(playerid, "~r~espere mais corredores de kart", 4000, 6);
		DisablePlayerCheckpoint(playerid);
	}
	if(CP[playerid] == 10) { CP[playerid] = 11; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2258.7874,-2402.9712,12.7035,8.0); ResetCheck = false; }
	if(CP[playerid] == 11) { CP[playerid] = 12; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2225.8755,-2461.3875,12.7190,8.0); ResetCheck = false; }
	if(CP[playerid] == 12) { CP[playerid] = 13; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2276.9983,-2662.8328,12.8580,8.0); ResetCheck = false; }
	if(CP[playerid] == 13) { CP[playerid] = 14; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2449.1399,-2663.0562,12.8138,8.0); ResetCheck = false; }
	if(CP[playerid] == 14) { CP[playerid] = 15; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2566.9814,-2504.5686,12.7692,8.0); ResetCheck = false; }
	if(CP[playerid] == 15) { CP[playerid] = 16; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2719.0520,-2503.5962,12.7706,8.0); ResetCheck = false; }
	if(CP[playerid] == 16) { CP[playerid] = 17; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2720.7881,-2405.6589,12.7441,8.0); ResetCheck = false; }
	if(CP[playerid] == 17) { CP[playerid] = 18; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2571.5195,-2401.1531,12.7528,8.0); ResetCheck = false; }
	if(CP[playerid] == 18) { CP[playerid] = 19; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2406.6995,-2423.1182,12.6641,8.0); ResetCheck = false; }
	if(CP[playerid] == 19) { CP[playerid] = 20; DisablePlayerCheckpoint(playerid); SetPlayerCheckpoint(playerid,2322.9194,-2341.5715,12.6664,8.0); ResetCheck = false; }
	if(CP[playerid] == 20)
	{
	    CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	    GetPlayerName(playerid, name, sizeof(name));
	    if(FirstKartWinner == 999)
	    {
	        FirstKartWinner = playerid;
	        foreach(new i: Player)
	        {
     			if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		        {
		        	format(string, sizeof(string), "%s terminou em primeiro (1°) corrida de Kart.",name);
		            SendClientMessage(i, COLOR_WHITE, string);
           		}
    		}
	    }
	    else if(SecondKartWinner == 999)
	    {
	        SecondKartWinner = playerid;
	        foreach(new i: Player)
	        {
     			if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		        {
		        	format(string, sizeof(string), "%s terminou em segundo (2°) na Corrida de Kart",name);
		            SendClientMessage(i, COLOR_WHITE, string);
              	}
			}
	    }
	    else if(ThirdKartWinner == 999)
	    {
	        ThirdKartWinner = playerid;
	        foreach(new i: Player)
	        {
		    	if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		        {
		        	format(string, sizeof(string), "%s terminou em terceiro (3°) na Corrida de Kart.",name);
		            SendClientMessage(i, COLOR_WHITE, string);
		            SendClientMessage(i, COLOR_WHITE, "A Corrida de Kart terminou **");
		            CP[i] = 0;
		            DisablePlayerCheckpoint(i);
              	}
	        }
	    }
	}
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_HOME:
		    {
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
				GameTextForPlayer(playerid, "~w~bem vindo a~n~~y~casa", 5000, 1);
		    }
		}
	}
	if(InAFoodPlace[playerid] != 0)
	{
		Congelar(playerid);
		switch (InAFoodPlace[playerid])
		{
			case 1: // chicken
			{
				ShowMenuForPlayer(chickenmenu, playerid);
				SafeSetPlayerPos(playerid,368.9714,-6.2486,1001.8516);
				SetPlayerFacingAngle(playerid, 357.0132);
			}
			case 2: // burger
			{
				ShowMenuForPlayer(burgermenu, playerid);
				SafeSetPlayerPos(playerid,376.8571,-67.6620,1001.5151);
				SetPlayerFacingAngle(playerid, 357.0132);
			}
			case 3: // pizza
			{
				ShowMenuForPlayer(pizzamenu, playerid);
				SafeSetPlayerPos(playerid,375.6895,-118.9683,1001.4995);
				SetPlayerFacingAngle(playerid, 357.0132);
			}
			case 4: // donut
			{
				ShowMenuForPlayer(donutshop, playerid);
				SafeSetPlayerPos(playerid,379.0611,-186.6032,1000.6328);
				SetPlayerFacingAngle(playerid, 280);
			}
		}
		SetCameraBehindPlayer(playerid);
		return true;
	}
	if(IsPlayerInDynamicCP(playerid,CP_chickenmenu))
    {
		if(PlayerToPoint(2.0,playerid,369.0634,-6.1397,1001.8516))
		{
			Congelar(playerid);
			ShowMenuForPlayer(chickenmenu,playerid);
		}
		return true;
	}
	if(IsPlayerInDynamicCP(playerid,CP_pizzamenu))
    {
		if(PlayerToPoint(2.0,playerid,373.2310,-118.9228,1001.4922))
		{
			Congelar(playerid);
			ShowMenuForPlayer(pizzamenu,playerid);
		}
		return true;
	}
	if(IsPlayerInDynamicCP(playerid,CP_burgermenu))
    {
		if(PlayerToPoint(2.0,playerid,375.5965,-67.6347,1001.5151))
		{
			Congelar(playerid);
			ShowMenuForPlayer(burgermenu,playerid);
		}
		return true;
	}
	if(IsPlayerInDynamicCP(playerid,CP_donutshop))
    {
		if(PlayerToPoint(2.0,playerid,379.0816,-184.1575,1000.6328))
		{
			Congelar(playerid);
			ShowMenuForPlayer(donutshop,playerid);
		}
		return true;
	}
	new vid = GetPlayerVehicleID(playerid);
	if(GasMission[playerid] == 2 && GetPlayerVehicleID(playerid) >= 194 && GetPlayerVehicleID(playerid) <= 196)
	{
        DisablePlayerCheckpoint(playerid);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você obteve R$800 por entregar o combustível, espere sua recarga por 2 minutos.");
	    GasMission[playerid] = 0;
	    PlayerOnMission[playerid] = 0;
	    GivePlayerGP(playerid, 800);
	    Player[playerid][pCarTime] = 120;
	}
	if(GasMission[playerid] == 1 && GetPlayerVehicleID(playerid) >= 194 && GetPlayerVehicleID(playerid) <= 196)
	{
        DisablePlayerCheckpoint(playerid);
        GasMission[playerid] = 2;
        PlayerOnMission[playerid] = 1;
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Caminhão abastecido, agora vá entregar o combustível.");
	    new tk = random(3);
	    if(tk == 0) { SetPlayerCheckpoint(playerid, 1937.9812,-1774.2764,13.3828, 8.0); ResetCheck = false; }
	    if(tk == 1) { SetPlayerCheckpoint(playerid, 997.9598,-898.8039,42.2418, 8.0); ResetCheck = false; }
	    if(tk == 2) { SetPlayerCheckpoint(playerid, -1603.0886,-2709.2991,48.5335, 8.0); ResetCheck = false; }
	    PlayerPlaySound(playerid, 1057, 0,0,0);
	}
	if(TruckMission[playerid] == 2 && (IsACaminhao(GetVehicleModel(GetPlayerVehicleID(playerid))) || vid >= Caminhao[0] && vid <= Caminhao[14]))
	{
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você obteve R$800 por entregar a carga, espere sua recarga por 2 minutos.");
		DisablePlayerCheckpoint(playerid);
		TruckMission[playerid] = 0;
		PlayerOnMission[playerid] = 0;
		GivePlayerGP(playerid, 800);
		Player[playerid][pCarTime] = 120;
	}
	if(TruckMission[playerid] == 1 && (IsACaminhao(GetVehicleModel(GetPlayerVehicleID(playerid))) || vid >= Caminhao[0] && vid <= Caminhao[14]))
	{
        DisablePlayerCheckpoint(playerid);
        new tk = random(11);
		if(tk == 0) { SetPlayerCheckpoint(playerid, -1729.3041,-123.8946,3.2335, 8.0); ResetCheck = false; }
		else if(tk == 1) { SetPlayerCheckpoint(playerid, 2054.3250,1919.5562,11.8507, 8.0); ResetCheck = false; }
		else if(tk == 2) { SetPlayerCheckpoint(playerid, 136.2286,1958.7998,19.1340, 8.0); ResetCheck = false; }
		else if(tk == 3) { SetPlayerCheckpoint(playerid, -2464.9397,786.0217,34.7181, 8.0); ResetCheck = false; }
		else if(tk == 4) { SetPlayerCheckpoint(playerid, 2196.2961,1386.3473,10.3898, 8.0); ResetCheck = false; }
		else if(tk == 5) { SetPlayerCheckpoint(playerid, 821.7500,851.0410,10.9370, 8.0); ResetCheck = false; }
		else if(tk == 6) { SetPlayerCheckpoint(playerid, 1124.5498,1460.4063,5.3868, 8.0); ResetCheck = false; }
		else if(tk == 7) { SetPlayerCheckpoint(playerid, 1704.6572,998.3389,10.3809, 8.0); ResetCheck = false; }
		else if(tk == 8) { SetPlayerCheckpoint(playerid, -2052.9871,93.2057,27.9611, 8.0); ResetCheck = false; }
		else if(tk == 9) { SetPlayerCheckpoint(playerid, -1650.6758,1220.5131,6.7496, 8.0); ResetCheck = false; }
		else if(tk == 10) { SetPlayerCheckpoint(playerid, -1893.2769,272.4434,40.6017, 8.0); ResetCheck = false; }
        TruckMission[playerid] = 2;
        PlayerOnMission[playerid] = 1;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Se você está disposto a entregar essa carga, siga o checkpoint.");
		PlayerPlaySound(playerid, 1057, 0,0,0);
	}
	if(FuneMission[playerid] == 2 && vid >= Funecars[0] && vid <= Funecars[5])
	{
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você recebeu R$800 por transportar o corpo, espere sua recarga por 2 minutos.");
		DisablePlayerCheckpoint(playerid);
		FuneMission[playerid] = 0;
		PlayerOnMission[playerid] = 0;
		GivePlayerGP(playerid, 800);
		Player[playerid][pCarTime] = 120;
	}
	if(FuneMission[playerid] == 1 && vid >= Funecars[0] && vid <= Funecars[5])
	{
        DisablePlayerCheckpoint(playerid);
        FuneMission[playerid] = 2;
        PlayerOnMission[playerid] = 1;
		SendClientMessage(playerid, COLOR_RED, "Leve o corpo até o cemitério de Los Santos.");
		new tk1 = random(1);
		if(tk1 == 0) { SetPlayerCheckpoint(playerid, 832.7652,-1101.7255,24.0348, 8.0); ResetCheck = false; }
		PlayerPlaySound(playerid, 1057, 0,0,0);
	}
    if(BusMission[playerid] == 2 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 437)
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você obteve R$800 por viajar, espere sua recarga por 2 minutos.");
		DisablePlayerCheckpoint(playerid);
		BusMission[playerid] = 0;
		PlayerOnMission[playerid] = 0;
		GivePlayerGP(playerid, 800);
		Player[playerid][pCarTime] = 120;
	}
	if(BusMission[playerid] == 1 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 437)
	{
        DisablePlayerCheckpoint(playerid);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você está proposto viajar apenas siga o checkpoint.");
		new cp = random(3);
		if(cp == 0) { SetPlayerCheckpoint(playerid, -1539.4520,-2742.4358,48.5376, 8.0); ResetCheck = false; }
		if(cp == 1) { SetPlayerCheckpoint(playerid, 1721.3585,1375.0752,10.4922, 8.0); ResetCheck = false; }
		if(cp == 2) { SetPlayerCheckpoint(playerid, -1658.7230,430.3951,7.1797, 8.0); ResetCheck = false; }
		PlayerPlaySound(playerid, 1057, 0,0,0);
        BusMission[playerid] = 2;
        PlayerOnMission[playerid] = 1;
	}
	if(PaperMission[playerid] >= 2 && vid==MotoJornal[0] || vid==MotoJornal[1])
	{
		DisablePlayerCheckpoint(playerid);
        PaperMission[playerid]++;
        new money = random(200);
        if(PaperMission[playerid] >= 11)
        {
			new money2 = money + random(250) + 100;

	        GivePlayerGP(playerid, money2);
			format(string,sizeof(string), "~w~gorjeta ~g~R$~w~%d",money2);
			GameTextForPlayer(playerid, string, 2000, 1);

			Player[playerid][pCarTime] = 300;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Parabéns! Volte ao trabalho em 5 minutos!");
			PaperMission[playerid] = 0;
			PlayerOnMission[playerid] = 0;
			PlayerPlaySound(playerid, 1057, 0,0,0);
			return true;
		}
		GivePlayerGP(playerid, money);
        new rand = random(sizeof(cPaperPoints));
		format(string,sizeof(string), "~w~gorjeta ~g~R$~w~%d",money);
		GameTextForPlayer(playerid, string, 2000, 1);
		PlayerPlaySound(playerid, 1149, 0,0,0);
		SetPlayerCheckpoint(playerid, cPaperPoints[rand][0],cPaperPoints[rand][1],cPaperPoints[rand][2],5.0);
		ResetCheck = false;
    }
    if(PaperMission[playerid] == 1 && vid==MotoJornal[0] || vid==MotoJornal[1])
	{
		DisablePlayerCheckpoint(playerid);
        PaperMission[playerid] = 2;
        PlayerOnMission[playerid] = 1;
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você recebeu seus instrumentos de trabalho");
        new rand = random(sizeof(cPaperPoints));
        SetPlayerCheckpoint(playerid, cPaperPoints[rand][0],cPaperPoints[rand][1],cPaperPoints[rand][2],5.0);
        ResetCheck = false;
        PlayerPlaySound(playerid, 1149, 0,0,0);
    }
    if(LixoMission[playerid] >= 2 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 408)
	{
		DisablePlayerCheckpoint(playerid);
        LixoMission[playerid]++;
        new money = random(200);
        if(LixoMission[playerid] >= 11)
        {
			new money2 = money + random(250) + 100;

	        GivePlayerGP(playerid, money2);
			format(string,sizeof(string), "~w~gorjeta ~g~R$~w~%d", money2);
			GameTextForPlayer(playerid, string, 2000, 1);

			Player[playerid][pCarTime] = 300;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Parabéns! Volte ao trabalho em 5 minutos!");
			LixoMission[playerid] = 0;
			PlayerOnMission[playerid] = 0;
			PlayerPlaySound(playerid, 1057, 0,0,0);
			return true;
		}
		GivePlayerGP(playerid, money);
        new rand = random(sizeof(cLixoPoints));
		format(string,sizeof(string), "~w~gorjeta ~g~R$~w~%d",money);
		GameTextForPlayer(playerid, string, 2000, 1);
		PlayerPlaySound(playerid, 1149, 0,0,0);
		SetPlayerCheckpoint(playerid, cLixoPoints[rand][0],cLixoPoints[rand][1],cLixoPoints[rand][2],5.0);
		ResetCheck = false;
    }
	if(LixoMission[playerid] == 1 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 408)
	{
		DisablePlayerCheckpoint(playerid);
        LixoMission[playerid] = 2;
        PlayerOnMission[playerid] = 1;
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você recebeu suas ferramentas de trabalho");
        new rand = random(sizeof(cLixoPoints));
        SetPlayerCheckpoint(playerid, cLixoPoints[rand][0],cLixoPoints[rand][1],cLixoPoints[rand][2],5.0);
        ResetCheck = false;
        PlayerPlaySound(playerid, 1149, 0,0,0);
    }
    if(CP[playerid] == CP_Marcos + CP_Material) CP[playerid] = 0;
    if(CP[playerid] == CP_Marcos + CP_DinheiroOrg)
    {
        CP[playerid] = 0;
		SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Entre na HQ e entregue o Dinheiro no Cofre.(/ColocarDinheiro)");
    }
	if(ResetCheck) DisablePlayerCheckpoint(playerid);

	CompletarNonRepMilestone(playerid, 1);
	return true;
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	new string[128];
    if(enterexit == 1)
	{ // 1 entrando,   0 saindo
		Gastos[playerid] = Player[playerid][pMoney];
		SendClientMessage(playerid, COLOR_LIGHTBLUE,string);
	    InModShop[playerid] = true;
	    noab2[playerid] = true;
	    SetTimerEx("ResetAB",1100,false, "i", playerid);
    }
    else
    {
        new money = (Gastos[playerid] - GetPlayerMoney(playerid));
        InModShop[playerid] = false;
		Player[playerid][pMoney] = GetPlayerMoney(playerid);
        format(string, 128, "[Oficina]: {FFFFFF}Os serviços custaram R$%d. Esperamos que tenha gostado.", money);
		SendClientMessage(playerid, 0x1E90FFFF, string);
        GiveBizMoney(Biz_Tunning, money);
    }
    return true;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
    noab2[playerid] = true;
	new x = 0;
    while(x!=MAX_PLAYERS)
	{
    	if(IsPlayerConnected(x) && GetPlayerState(x) == PLAYER_STATE_SPECTATING && Player[x][gSpectateID] == playerid && Player[x][gSpectateType] == ADMIN_SPEC_TYPE_PLAYER )
        {
			SetPlayerInterior(x,newinteriorid);
        }
        x++;
	}

	if(newinteriorid == 0 && oldinteriorid == 15)
		DisablePlayerCheckpoint(playerid);
	if(CP[playerid] == CP_Marcos + CP_Material)
		SetTimerEx("SetCPPlayerID", 2000, false, "dd", playerid, CP_Marcos + CP_Material);

    if(USE_MASK) TimerNome();
    return true;
}

forward SetCPPlayerID(playerid, checkid);
public SetCPPlayerID(playerid, checkid)
{
	if(checkid == CP_Marcos + CP_Material) SetPlayerCheckpoint(playerid, 848.8222, -1360.2641, 13.5468, 2.0);
	return 1;
}

forward SetarVW(playerid, vw);
public SetarVW(playerid, vw)
{
	SetPlayerVirtualWorld(playerid, vw);
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	return true;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid, X,Y,Z);
    if(PlayerInRace[playerid])
    {
        EndRace(RACE_WIN, playerid);
        return 1;
    }
	if(noevento[playerid] && EventoInfo[EventoCarregado])
	{
	    if(Player_EventoCP[playerid] == EventoInfo[NumeroCheck] - 1)
	    {
	        new striing[128];
	        if(!EventoInfo[EventoGanhador][0])
	        {
	            format(striing, 128, "[Evento]: {FFFFFF}%s Chegou em Primeiro!", Player[playerid][pName]);
	            SendClientMessageToAll(SERVER_INFO, striing);
	            EventoInfo[EventoGanhador][0] = true;

				PlayerPlaySound(playerid, 1062, 0.0, 0.0, 0.0);
				GivePlayerGP(playerid, 7000);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você ficou em primeiro lugar e recebeu R$ 7.000. Parabéns!");
                SetTimerEx("StopMusic", 10000, false, "d", playerid);
	        }
	        else if(!EventoInfo[EventoGanhador][1])
	        {
	            format(striing, 128, "[Evento]: {FFFFFF}%s Chegou em Segundo!", Player[playerid][pName]);
	            SendClientMessageToAll(SERVER_INFO, striing);
	            EventoInfo[EventoGanhador][1] = true;

				PlayerPlaySound(playerid, 1062, 0.0, 0.0, 0.0);
				GivePlayerGP(playerid, 3500);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você ficou em segundo lugar e recebeu R$ 3.500. Parabéns!");
                SetTimerEx("StopMusic", 10000, false, "d", playerid);
	        }
	        else if(!EventoInfo[EventoGanhador][2])
	        {
	            format(striing, 128, "[Evento]: {FFFFFF}%s Chegou em Terceiro!", Player[playerid][pName]);
	            SendClientMessageToAll(SERVER_INFO, striing);
	            EventoInfo[EventoGanhador][2] = true;

				PlayerPlaySound(playerid, 1062, 0.0, 0.0, 0.0);
				GivePlayerGP(playerid, 2000);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você ficou em terceiro lugar e recebeu R$ 2.000. Parabéns!");
				SetTimerEx("StopMusic", 10000, false, "d", playerid);
	        }
	        else
	        {
	            SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você chegou tarde!");
	        }
	        Player_EventoCP[playerid] = 0;
	        noevento[playerid] = false;
	        PlayerPlaySound(playerid,1057,X,Y,Z);
	        DisablePlayerRaceCheckpoint(playerid);
	        return 1;
	    }

	    Player_EventoCP[playerid] ++;
	    PlayerPlaySound(playerid,1149,X,Y,Z);
	    SetPlayerEventoCP(playerid, Player_EventoCP[playerid]);
	    return 1;
	}
	if(Teste[playerid] == 1 || GetPlayerVehicleID(playerid) ==  AutoEscolaCars[3])
	{
		if(CPorder[playerid] == MAXCPS_DRIVETEST-2)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você passou no teste e adquiriu uma licença terrestre.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Lembre-se, o limite de velocidade é 100 km/h! Ultrapassando esse limite você poderá ser multado.");
			Player[playerid][pCarLic] = 1;
			Player[playerid][pCarLicPoints] = 0;
			TakingLesson[playerid] = 0;
			SetVehicleToRespawn(AutoEscolaCars[3]);
			Teste[playerid] = 0;
			PlayerPlaySound(playerid,1057,X,Y,Z);
			TimeTest[playerid] = 0;
			CPorder[playerid]=0;
			DisablePlayerRaceCheckpoint(playerid);

			OnPlayerSave(playerid);

        	SafeSetPlayerPos(playerid, 1491.0194, 1305.7502, 1093.2963);

        	SetPlayerInterior(playerid, 3);
        	Player[playerid][pInt] = 3;

        	Player[playerid][pLocal] = 9999;
			CompletarNonRepMilestone(playerid, 3);
		} else {
			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid, 0, DriverTestCP[CPorder[playerid]+1][0],DriverTestCP[CPorder[playerid]+1][1],DriverTestCP[CPorder[playerid]+1][2],
			DriverTestCP[CPorder[playerid]+2][0],DriverTestCP[CPorder[playerid]+2][1],DriverTestCP[CPorder[playerid]+2][2],4.0);
			CPorder[playerid]+=1;
        	PlayerPlaySound(playerid,1149,X,Y,Z);
        	new str[128];format(str, 128,"Checkpoints rodados: [%d/%d]",CPorder[playerid], MAXCPS_DRIVETEST-2);
        	SendClientMessage(playerid, COLOR_NOTICIA,str);
        }
	}

	if(Teste[playerid] == 2  || GetPlayerVehicleID(playerid) == AutoEscolaCars[0] || GetPlayerVehicleID(playerid) == AutoEscolaCars[1])
	{
        CPorder[playerid]+=1;
		if(CPorder[playerid] == MAXCPS_FLYTEST-1)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você passou no teste e adquiriu uma licença aérea");
			Player[playerid][pFlyLic] = 1;
			TakingLesson[playerid] = 0;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			Teste[playerid] = 0;
			PlayerPlaySound(playerid,1057,X,Y,Z);
			TimeTest[playerid] = 0;
			CPorder[playerid]=0;
			DisablePlayerRaceCheckpoint(playerid);
			OnPlayerSave(playerid);

        	SafeSetPlayerPos(playerid, 1491.0194, 1305.7502, 1093.2963);

        	SetPlayerInterior(playerid, 3);
        	Player[playerid][pInt] = 3;

        	Player[playerid][pLocal] = 9999;
		} else {
            DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid, 3,FlyTestCP[CPorder[playerid]][0],FlyTestCP[CPorder[playerid]][1],FlyTestCP[CPorder[playerid]][2]
			,FlyTestCP[CPorder[playerid]][0],FlyTestCP[CPorder[playerid]+1][1],FlyTestCP[CPorder[playerid]+1][2],10.0);
			PlayerPlaySound(playerid,1149,X,Y,Z);
        	new str[128];format(str, 128,"Checkpoints rodados: [%d/%d]",CPorder[playerid], MAXCPS_FLYTEST-1);
        	SendClientMessage(playerid, COLOR_NOTICIA,str);
            if(CPorder[playerid] > 12 && CPorder[playerid] < 18)
			{
                SetPlayerRaceCheckpoint(playerid, 0,FlyTestCP[CPorder[playerid]][0],FlyTestCP[CPorder[playerid]][1],FlyTestCP[CPorder[playerid]][2]
			     ,FlyTestCP[CPorder[playerid]][0],FlyTestCP[CPorder[playerid]+1][1],FlyTestCP[CPorder[playerid]+1][2],10.0);
			}
			if(CPorder[playerid] == 18)
			{
				 SetVehiclePos(AutoEscolaCars[1],-1225.3461,-10.8064,14.6119);
				 SetVehicleZAngle(AutoEscolaCars[1], 0);

				 SendClientMessage(playerid, SERVER_INFO, "Dirija-se ao checkpoint que indica o aereoporto desértico de Las Venturas.");
				 SetVehicleToRespawn(GetPlayerVehicleID(playerid));
				 SafePutPlayerInVehicle(playerid, AutoEscolaCars[1], 0);
			}
        }
	}
	if(Teste[playerid] == 3 || GetPlayerVehicleID(playerid) == AutoEscolaCars[2])
	{
        CPorder[playerid]+=1;
		if(CPorder[playerid] == MAXCPS_BOATTEST-1)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você passou no teste e adquiriu uma licença náutica");
			TakingLesson[playerid] = 0;
			Player[playerid][pBoatLic] = 1;
			SetVehicleToRespawn(GetPlayerVehicleID(playerid));
			Teste[playerid] = 0;
			PlayerPlaySound(playerid,1057,X,Y,Z);
			TimeTest[playerid] = 0;
			CPorder[playerid]=0;
			DisablePlayerRaceCheckpoint(playerid);
			OnPlayerSave(playerid);

        	SafeSetPlayerPos(playerid, 1491.0194, 1305.7502, 1093.2963);

        	SetPlayerInterior(playerid, 3);
        	Player[playerid][pInt] = 3;

        	Player[playerid][pLocal] = 9999;
		} else {
			DisablePlayerRaceCheckpoint(playerid);
			SetPlayerRaceCheckpoint(playerid, 0, BoatTestCP[CPorder[playerid]][0],BoatTestCP[CPorder[playerid]][1],BoatTestCP[CPorder[playerid]][2],
			BoatTestCP[CPorder[playerid]+1][0],BoatTestCP[CPorder[playerid]+1][1],BoatTestCP[CPorder[playerid]+1][2],4.0);
			PlayerPlaySound(playerid,1149,X,Y,Z);
        	new str[128];format(str, 128,"Checkpoints rodados: [%d/%d]",CPorder[playerid], MAXCPS_BOATTEST-1);
        	SendClientMessage(playerid, COLOR_NOTICIA,str);
        }
	}

	return true;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return true;
}

public OnRconCommand(cmd[])
{
	return true;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return true;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
    new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid, X,Y,Z);
/*	if(GetPlayerMenu(playerid) == Zip)
	{
	    if(row == 0)
	    {
		    SetPlayerFacingAngle(playerid,210.0125);
            ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Torso",4.1,0,1,1,1,1);
		    new skin = random(300);
		    foreach(new i: Player)
			{
			    if(skin < 0 || skin > 299)
				{
                   SetPlayerSkin(playerid, 23);
			       ShowMenuForPlayer(Zip,playerid);
				   return true;
			    }
		    }
            if(skin==1||skin==3||skin==4||skin==5||skin==6||skin==8||skin==17||skin==42||skin==47||skin==61||
            skin==65||skin==74||skin==86||skin==98||skin==100||skin==102||skin==103||skin==104||skin==105||skin==106||
            skin==107||skin==108||skin==109||skin==110||skin==111||skin==112||skin==113||skin==114||skin==115||skin==116||
            skin==119||skin==120||skin==123||skin==125||skin==126||skin==142||skin==147||skin==149||skin==152||skin==153||
            skin==170||skin==172||skin==173||skin==174||skin==175||skin==184||skin==189||skin==194||skin==223||skin==228||
            skin==242||skin==247||skin==248||skin==254||skin==265||skin==266||skin==267||skin==269||skin==270||skin==271||
            skin==272||skin==273||skin==280||skin==281||skin==282||skin==283||skin==284||skin==285||skin==286||skin==287||
            skin==289||skin==290||skin==291||skin==294||skin==295||skin==296||skin==299)
			{
		        SetPlayerSkin(playerid, 23);
			    ShowMenuForPlayer(Zip,playerid);
		    }
			else
			{
			    SetPlayerSkin(playerid, skin);
                ShowMenuForPlayer(Zip,playerid);
            }
		}
		if(row == 1)
		{
			if(GetPlayerGP(playerid) >= 50)
			{
	            GivePlayerGP(playerid, -50);
                GiveBizMoney(Biz_Binco, 50);

			    HideMenuForPlayer(Zip, playerid);
			    Player[playerid][pModel] = GetPlayerSkin(playerid);
			    GivePlayerGP(playerid, - 50);
			    SetPlayerSkin(playerid, Player[playerid][pModel]);
		        SendClientMessage(playerid, COLOR_YELLOW, "[Lojas Binco] Você comprou suas peças por R$50.");
                TogglePlayerControllable(playerid, true);
			    GetPlayerPos(playerid,X,Y,Z);
			    PlayerPlaySound(playerid,1056,X,Y,Z);
                SetCameraBehindPlayer(playerid);
                ApplyAnimation(playerid,"CLOTHES","CLO_Buy",4.1,0,1,1,1,1);
		    }
			else
			{
		 		SendClientMessage(playerid, COLOR_YELLOW, "[Lojas Binco] Você precisa de R$50 para comprar algum skin.");
	    		ShowMenuForPlayer(Zip,playerid);
				return true;
		    }
 	    }
		if(row == 2)
	    {
			 HideMenuForPlayer(Zip, playerid);
			 TogglePlayerControllable(playerid, true);
			 SetCameraBehindPlayer(playerid);
			 SetPlayerSkin(playerid, Player[playerid][pModel]);
			 return true;
		}
    }*/
	if(GetPlayerMenu(playerid) == Remedios)
	{
		if(row == 0 || row == 1)
		{
			if(GetPlayerGP(playerid) >= 2)
			{
                GivePlayerGP(playerid, -2);
			    SendClientMessage(playerid, COLOR_RED, "Você comprou uma Pastilha. /ComerPastilha");
			    Player[playerid][pPastilhas] ++;
				Descongelar(playerid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você não tem R$2 para comprar a pastilha!");
				Descongelar(playerid);
			}
   		}
		else if(row == 2)
		{
			if(GetPlayerGP(playerid) > 0)
			{
	    		if(FicarRoco[playerid] > 0)
	    		{
	        		FicarRoco[playerid] += 3;
	    			SendClientMessage(playerid, COLOR_RED, "Esta pastilha tem um sabor tão ruim que você ficou ainda mais Roco. Tente comprar outra!");

				}
				else
				{
	        		FicarRoco[playerid] = 5;
	    			SendClientMessage(playerid, COLOR_RED, "Esta pastilha tem um sabor tão ruim que você ficou Roco. Agora compre outra!");
				}
                GivePlayerGP(playerid, -1);
				Descongelar(playerid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você não tem R$1 para comprar o remédio!");
				Descongelar(playerid);
			}
   		}
   		else if(row == 3)
   		{
			if(GetPlayerGP(playerid) >= 20)
			{
                GivePlayerGP(playerid, -20);
			    SendClientMessage(playerid, COLOR_RED, "Você comprou uma Caixinha de Pastilhas. /ComerPastilha");
			    Player[playerid][pPastilhas] += 10;
				Descongelar(playerid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você não tem R$20 para comprar a caixinha de pastilhas!");
				Descongelar(playerid);
			}
   		}
		if(row == 4)
        {
            Descongelar(playerid);
        }
	}
    if(GetPlayerMenu(playerid) == burgermenu || GetPlayerMenu(playerid) == chickenmenu || GetPlayerMenu(playerid) == pizzamenu || GetPlayerMenu(playerid) == donutshop)
	{
		Descongelar(playerid);
		if(row != 10) // 10 = Leave
		{
			if(GetPlayerGP(playerid) <= 0)
			{
				GameTextForPlayer(playerid, "~r~Você não tem dinheiro", 5000, 1);
				return true;
			}
			new sendername[MAX_PLAYER_NAME];
			//new actstring[128];
			new Float:health;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			GetPlayerHealth(playerid, health);
			if(row == 7) // Agua
			{
				//format(actstring, sizeof(actstring), "%s bebeu água.", sendername);
				FalarEx(playerid, "bebeu água.", 30.0);
				GivePlayerGP(playerid, -1);
                GiveBizMoney(Biz_Bebidas, 3);
				SetPlayerHealth(playerid, health + 10);
				ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,0,1);
			}
			if(row == 8) // Drink
			{
				//format(actstring, sizeof(actstring), "%s bebeu Sprunk.", sendername);
				FalarEx(playerid, "bebeu Sprunk.", 30.0);
				GivePlayerGP(playerid, -1);
                GiveBizMoney(Biz_Bebidas, 3);
				SetPlayerHealth(playerid, health + 10);
				ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,0,1);
			}
			else // Meal
			{
				switch (row)
				{
					case 1:
					{
					    if(GetPlayerMenu(playerid) == donutshop) FalarEx(playerid, "tomou um sorvete de ovo maltine.", 30.0); //format(actstring, sizeof(actstring), "%s tomou um sorvete de ovo maltine.", sendername);
					    else if(GetPlayerMenu(playerid) == pizzamenu) FalarEx(playerid, "comeu uma pizza pequena de presunto e mussarela.", 30.0); //format(actstring, sizeof(actstring), "%s comeu uma pizza pequena de presunto e mussarela.", sendername);
         				else if(GetPlayerMenu(playerid) == burgermenu) FalarEx(playerid, "comeu um X-SIMPLES.", 30.0); //format(actstring, sizeof(actstring), "%s comeu um X-SIMPLES.", sendername);
         				else if(GetPlayerMenu(playerid) == chickenmenu) FalarEx(playerid, "comeu um churrasco de coracão.", 30.0); //format(actstring, sizeof(actstring), "%s comeu um churrasco de coracão.", sendername);
						GivePlayerGP(playerid, -2);
                        GiveBizMoney(Biz_Alimentos, 6);
						SetPlayerHealth(playerid, health + 20);
					}
					case 2:
					{
						if(GetPlayerMenu(playerid) == chickenmenu) FalarEx(playerid, "come um churrasco de carne de vaca.", 30.0); //format(actstring, sizeof(actstring), "%s come um churrasco de carne de vaca.", sendername);
						else if(GetPlayerMenu(playerid) == pizzamenu) FalarEx(playerid, "comeu uma pizza grande de presunto e mussarela.", 30.0); //format(actstring, sizeof(actstring), "%s comeu uma pizza grande de presunto e mussarela.", sendername);
						else if(GetPlayerMenu(playerid) == donutshop) FalarEx(playerid, "comeu uma pizza de tamanho normal.", 30.0); //format(actstring, sizeof(actstring), "%s comeu uma pizza de tamanho normal.", sendername);
						else if(GetPlayerMenu(playerid) == burgermenu) FalarEx(playerid, "comeu um X-TUDO.", 30.0); //format(actstring, sizeof(actstring), "%s comeu um X-TUDO.", sendername);
						GivePlayerGP(playerid, -4);
                        GiveBizMoney(Biz_Alimentos, 12);
						SetPlayerHealth(playerid, health + 50);
					}
					case 3:
					{
						if(GetPlayerMenu(playerid) == pizzamenu) FalarEx(playerid, "comeu uma pizza de Frango e Azeitona.", 30.0); //format(actstring, sizeof(actstring), "%s comeu uma pizza de Frango e Azeitona.", sendername);
						else if(GetPlayerMenu(playerid) == donutshop) FalarEx(playerid, "comeu uma pizza entra grande.", 30.0); //format(actstring, sizeof(actstring), "%s comeu uma pizza entra grande.", sendername);
						else if(GetPlayerMenu(playerid) == burgermenu) FalarEx(playerid, "comeu um X-ESPECIAL.", 30.0); //format(actstring, sizeof(actstring), "%s comeu um X-ESPECIAL.", sendername);
						else if(GetPlayerMenu(playerid) == chickenmenu) FalarEx(playerid, "comeu um churrasco de jacare.", 30.0); //format(actstring, sizeof(actstring), "%s comeu um churrasco de jacare.", sendername);
						GivePlayerGP(playerid, -5);
                        GiveBizMoney(Biz_Alimentos, 15);
						SetPlayerHealth(playerid, health + 80);
					}
					case 4:
					{
					    if(GetPlayerMenu(playerid) == donutshop) FalarEx(playerid, "comeu uma rosca extra grande.", 30.0); //format(actstring, sizeof(actstring), "%s comeu uma rosca extra grande.", sendername);
					    else if(GetPlayerMenu(playerid) == pizzamenu) FalarEx(playerid, "comeu uma pizza de Bacon e Chocolate.", 30.0); //format(actstring, sizeof(actstring), "%s comeu uma pizza de Bacon e Chocolate.", sendername);
					    else if(GetPlayerMenu(playerid) == burgermenu) FalarEx(playerid, "comeuu um X-FRANGO.", 30.0); //format(actstring, sizeof(actstring), "%s comeuu um X-FRANGO.", sendername);
					    else if(GetPlayerMenu(playerid) == chickenmenu) FalarEx(playerid, "comeu um churrasco de frango.", 30.0); //format(actstring, sizeof(actstring), "%s comeu um churrasco de frango.", sendername);
						GivePlayerGP(playerid, -3);
                        GiveBizMoney(Biz_Alimentos, 9);
						SetPlayerHealth(playerid, health + 35);
					}
				}
				if(GetPlayerMenu(playerid) == burgermenu) ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,0,1);
				else if(GetPlayerMenu(playerid) == chickenmenu) ApplyAnimation(playerid,"FOOD","EAT_Chicken",4.1,0,1,1,0,1);
				else if(GetPlayerMenu(playerid) == pizzamenu) ApplyAnimation(playerid,"FOOD","EAT_Pizza",4.1,0,1,1,0,1);
				else if(GetPlayerMenu(playerid) == donutshop) ApplyAnimation(playerid,"FOOD","EAT_Pizza",4.1,0,1,1,0,1);
				if(GetPlayerGP(playerid) > 100)
				SetPlayerHealth(playerid, 100);
			}
			//ProxDetector(30.0, playerid, actstring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	return true;
}

public OnPlayerExitedMenu(playerid)
{
    Descongelar(playerid);
    SetCameraBehindPlayer(playerid);
//    SetPlayerSkin(playerid, Player[playerid][pModel]);
    Teste[playerid] = 0;
	return true;
}

//Alterado Recentemente

new p_CarWarpTime[MAX_PLAYERS];
new p_CarWarpVehicleID[MAX_PLAYERS];

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    // Anti Car Spam
    if(newstate == PLAYER_STATE_DRIVER)
	{
	    if(GetPlayerVehicleID(playerid) != p_CarWarpVehicleID[playerid])
        {
            if(p_CarWarpTime[playerid] > gettime())
            {
                BanEx(playerid, "Car Warp");
                return 1;
            }
            p_CarWarpTime[playerid] = gettime() + 1;
            p_CarWarpVehicleID[playerid] = GetPlayerVehicleID(playerid);
        }

		if((GetTickCount()-GetPVarInt(playerid, "cartime")) < 1000)
	    {
			SetPVarInt(playerid, "carspam", GetPVarInt(playerid, "carspam")+1);
			if(GetPVarInt(playerid, "carspam") >= 5)
	        {
	        	new name[24];
	        	new string128[128];
				GetPlayerName(playerid,name,24);
	            format(string128,sizeof(string128),"%s[%d] foi kickado por car spam.",name,playerid);
	            SendClientMessageToAll(COLOR_OOC,string128);
	            printf(string128);
	            #if defined IRC_ECHO
	            IRC_GroupSay(groupID, IRC_CHANNEL, string128);
	            #endif
				return Kick(playerid);
	        }
	  	}
	  	SetPVarInt(playerid, "cartime", GetTickCount());
  	}

    if(oldstate == PLAYER_STATE_DRIVER
    || oldstate == PLAYER_STATE_PASSENGER)
    {
        if(Player[playerid][pSeatBelt] == 1)
        {
          	Player[playerid][pSeatBelt] = 0;
            FalarEx(playerid, "tirou o cinto de segurança.", 30.0);
    	}
    	if(Player[playerid][pCapacete] == 1)
        {
          	Player[playerid][pCapacete] = 0;
            FalarEx(playerid, "tirou o capacete.", 30.0);
            RemovePlayerAttachedObject(playerid, 7);
    	}
        if(PlayerInRace[playerid])
        {
            SendClientMessage(playerid, COLOR_LIGHTYELLOW, "Corrida: {FFFFFF}Você tem 15 segundos para retornar à sua moto.");
            RaceLostTime[playerid] = SetTimerEx("EndRace", (15*1000), false, "dd", RACE_LOST_RUNOUT, playerid);

            //new vehicleid = Player[playerid][LastVeh];

            //GetVehicleParamsNew(vehicleid);
            //SetVehicleParamsEx(vehicleid, true, lights, false, false, bonnet, boot, objective);
        }

    	foreach(new x: Player)
    	{
			if(IsValidDynamicArea(Player[x][pDynamicBBArea]))
			{
	    	    if(IsPlayerInDynamicArea(playerid, Player[x][pDynamicBBArea]))
	    	    {
					PlayAudioStreamForPlayer(playerid, Player[x][pDynamicBBStation], Player[x][pDynamicBBX], Player[x][pDynamicBBY], Player[x][pDynamicBBZ], 15, 1);
	    	    }
			}
            if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && Player[x][gSpectateID] == playerid && Player[x][gSpectateType] == ADMIN_SPEC_TYPE_VEHICLE)
    		{
            	TogglePlayerSpectating(x, 1);
                PlayerSpectatePlayer(x, playerid);
                Player[x][gSpectateType] = ADMIN_SPEC_TYPE_PLAYER;
      		}
        }
    }

	new string[128];
	new str[128];
    new oldnew;
	if(newstate == 2 || newstate == 3)
    {
        if(PlayerInRace[playerid])
        {
            if(GetPlayerVehicleID(playerid) != RaceInfo[rVeh][RaceRunnerID[playerid]])
            {
                SendClientMessage(playerid, COLOR_LIGHTYELLOW, "Corrida: {FFFFFF}Volte para o veículo que você usou desde o inicio da corrida.");
            }
            else
            {
                KillTimer(RaceLostTime[playerid]);
                SetPlayerArmedWeapon(playerid, 0);

                //GetVehicleParamsNew(GetPlayerVehicleID(playerid));
                //SetVehicleParamsEx(GetPlayerVehicleID(playerid), true, lights, false, true, bonnet, boot, objective);
            }
        }
   		if(oldnew == 0 && Counting == false)
    	{
        	format(str, sizeof(str), "~g~%s",vehName[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
        	GameTextForPlayer(playerid, str, 6000, 1);
		}
		if(Player[playerid][pAutoBelt])
		{
		    if(!IsABike(GetVehicleModel(GetPlayerVehicleID(playerid))) && !IsABicicle(GetVehicleModel(GetPlayerVehicleID(playerid))))
			{
				cmd_cinto(playerid);
			}
		    else
			{
				cmd_capacete(playerid);
			}
	    }

        if(GetPlayerWeapon(playerid) == 24)
            SetPlayerArmedWeapon(playerid, 0);

    	foreach(new x: Player)
    	{
     		if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && Player[x][gSpectateID] == playerid)
    		{
       			TogglePlayerSpectating(x, 1);
          		PlayerSpectateVehicle(x, GetPlayerVehicleID(playerid));
            	Player[x][gSpectateType] = ADMIN_SPEC_TYPE_VEHICLE;
    		}
       	}
	}
	if(oldstate == PLAYER_STATE_DRIVER)
	{
	    new Veiculo = Player[playerid][LastVeh];
	    if(EventoInfo[VeiculoEvento][Veiculo] && EventoInfo[EventoCP])
        {
            DisablePlayerRaceCheckpoint(playerid);
            if(EventoInfo[EventoRace])
            {
                SpawnNecessario(playerid);
                noevento[playerid] = false;

                VehicleInfo[Player[playerid][LastVeh]][vCustom] = false;
                EventoInfo[VeiculoEvento][Player[playerid][LastVeh]] = false;
                DestroyVehicle(Player[playerid][LastVeh]);
                SendClientMessage(playerid, COLOR_ADMIN, "[Evento]: Você saiu do evento.");
            }
        }
	    if(IsAnTransportVehicle(Veiculo) || Veiculo == YakuzaCars[8] || Veiculo == RussaCar[8] || Veiculo == TerrorCar[2])
	    {
	        RemovePlayerMapIcon(playerid, 36);
	        RemovePlayerMapIcon(playerid, 37);
	        new i = TransportVehicle(Veiculo);
	        if(i != INVALID_VEHICLE_ID && VeiculoMaterialAlugado[i][0] == -1)
	        {
			    SetVehicleToRespawn(VeiculosMateriais[i]);
			    AddVehicleMaterial(VeiculosMateriais[i], 0);
			    TrunkInfo[VeiculosMateriais[i]][TrunkMateriais] = 0;
			    VeiculoMaterialAlugado[i][0] = 0;
			    VeiculoMaterialAlugado[i][1] = 0;
	        }
	    }
	}
	else if(newstate == PLAYER_STATE_DRIVER)
	{// 38 / 49 / 56 = SS
		new newcar = GetVehicleModel(GetPlayerVehicleID(playerid));
		new vId = GetPlayerVehicleID(playerid);
		Player[playerid][LastVeh] = vId;

		new keys, updown, leftright;
   	    GetPlayerKeys(playerid, keys, updown, leftright);

        if(newcar == 509
        || newcar == 481
        || newcar == 510)
            VehicleInfo[vId][vEngine] = true;

        new engine, lights, alarm, doors, bonnet, boot, objective;
        GetVehicleParamsEx(vId, engine, lights, alarm, doors, bonnet, boot, objective);
        SetVehicleParamsEx(vId, VehicleInfo[vId][vEngine], lights, alarm, doors, bonnet, boot, objective);
        if(!VehicleInfo[vId][vEngine]) SendClientMessage(playerid, COLOR_WHITE, "[Aviso]: Seu motor está desligado, você pode ligá-lo com a tecla {E9ED19}Y {FFFFFF}ou {E9ED19}/motor{FFFFFF}.");


		if(EventoInfo[EventoCP] && EventoInfo[VeiculoEvento][vId])
		{
		    SetPlayerEventoCP(playerid, Player_EventoCP[playerid]);
		}

		if(IsAConceCar(vId))
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Bem vindo ao seu provável futuro veículo! Você pode personalizá-lo antes de comprar!");
		    SendClientMessage(playerid, SERVER_INFO, "[Concessionária]: {FFFFFF}Escolha a cor do seu veículo usando {33CCFF}/testarcor! {FFFFFF}Para comprar, digite{33CCFF} /comprarveiculo!");
            SetEngine(vId, false);
  		}

  		for(new v = 0; v < 5; v++)
		{
		    if(Player[playerid][pCar][v] == INVALID_VEHICLE_ID)
		        continue;
		    if(vId == CarInfo[Player[playerid][pCar][v]][cID])
		    {
		        if(v > 1 && Player[playerid][pVIP] == 0)
		        {
					SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é mais VIP, portanto só pode usar seus dois primeiros veículos.");
					return true;
		        }
			}
		}

   	    for(new IdV = 0; IdV < 6; IdV++)
		{
   	        if(vId == CarroVIP[IdV])
  			{
   	            Congelar(playerid);
                ShowPlayerDialog(playerid, 769, DIALOG_STYLE_MSGBOX, "{FF0000}Life {FFFFFF}Simulation RPG - Carro VIP","{FFFFFF}Esse é um carro para jogadores {FFFF00}VIP.\n{FFFFFF}Você deseja usá-lo?", "Usar", "Sair");
			}
		}

		for(new I=0;I<MAX_HOUSES;I++)
		{
   	        if(vId == CarroCasa[I])
  			{
				if(strcmp(Player[playerid][pName],hOwner[I]) == 0)
				{
				    format(string, 128, "Bem vindo ao veículo da sua casa, %s.", Player[playerid][pName]);
				    SendClientMessage(playerid, COLOR_MARINE, string);
				}
				else
				{
				    format(string, 128, "[ERRO]:{FFFFFF} Veículo exclusivo da casa %d.", I);
				    SendClientMessage(playerid, COLOR_RED, string);
				    RemovePlayerFromVehicle(playerid);
				    return Descongelar(playerid);
				}
			}
		}

		if(vId == YakuzaCars[8] || vId == RussaCar[8] || IsAnTransportVehicle(vId))
		{
		    SetPlayerMapIcon(playerid, 34, -2227.7126, 2327.6140, 7.6365, 0, 0x0066FFFF, MAPICON_GLOBAL);
		    SetPlayerMapIcon(playerid, 35, -4439.4780, 5715.6987, 14.8347, 56, 0x0066FFFF, MAPICON_GLOBAL);
		}
		if(IsAnTransportVehicle(vId))
		{
		    new Org = GetPlayerOrg(playerid);
		    if(vId == VeiculosMateriais[3])
		    {
		        if(Org != 14 && Org != 15 && Org != 17)
		        {
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Mafioso/Terrorista.");
				    RemovePlayerFromVehicle(playerid);
				    Descongelar(playerid);
			        return 1;
				}
			}
			else
			{
		        if(!IsAGangOrgID(Org) && Org != 14 && Org != 15 && Org != 17)
		        {
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Criminoso.");
				    RemovePlayerFromVehicle(playerid);
				    Descongelar(playerid);
			        return 1;
				}
			}
			new VeiculoId = TransportVehicle(vId);
			if(VeiculoMaterialAlugado[VeiculoId][0] != 0)
			{
			    if(GetPlayerOrg(playerid) != VeiculoMaterialAlugado[VeiculoId][0])
			    {
				    format(string, 256, "[ERRO]:{FFFFFF} Veiculo alugado pela(o) %s a %s.", OrgsNames[VeiculoMaterialAlugado[VeiculoId][0]], Convert(TEMPO_ALUGUEL - VeiculoMaterialAlugado[VeiculoId][1]));
				    SendClientMessage(playerid, COLOR_RED, string);
				    RemovePlayerFromVehicle(playerid);
				    Descongelar(playerid);
				}
				return 1;
			}
            SetEngine(VeiculoId, true);
			if(VeiculoId == 3) ShowPlayerDialog(playerid, 6601, DIALOG_STYLE_MSGBOX, "Alugar:", "Você deseja Alugar este Veiculo?\n\n{FFFFFF}Carga: {FF0000}7.500\n{FFFFFF}Tempo: {FF0000}30 Minutos\n{FFFFFF}Preço: {009900}R$10.000", "Alugar", "Cancelar");
			else ShowPlayerDialog(playerid, 6601, DIALOG_STYLE_MSGBOX, "Alugar:", "Você deseja Alugar este Veiculo?\n\n{FFFFFF}Carga: {FF0000}15.000\n{FFFFFF}Tempo: {FF0000}30 Minutos\n{FFFFFF}Preço: {009900}R$5.000", "Alugar", "Cancelar");
			return 1;
		}

		if(IsATruck(newcar))
		{
		    if(GetVehicleModel(vId) == 456)
		        PlayerHaul[vId][pCapasity] = 200;
		    else if(GetVehicleModel(vId) == 499)
		        PlayerHaul[vId][pCapasity] = 120;

			if(Player[playerid][pJob] != ENTREGADOR)
			{
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um entregador");
			    RemovePlayerFromVehicle(playerid);
			    Descongelar(playerid);
			}
			else
	        {
				format(string, sizeof(string), "Produtos: %d/%d", PlayerHaul[vId][pLoad],PlayerHaul[vId][pCapasity]);
		        SendClientMessage(playerid, COLOR_GROOVE, string);
		        SendClientMessage(playerid, COLOR_WHITE, "DICA: Você pode fornecer produtos para as empresas e lucrar com isso.");
		        SendClientMessage(playerid, COLOR_WHITE, "DICA: Os comandos são: /carga /comprarprods /devolverprods");
			}
		}

		if((vId==Aereo[0] || vId==Aereo[1]) && Player[playerid][pJob] != TAXISTAAEREO)
		{
			RemovePlayerFromVehicle(playerid);
			Descongelar(playerid);
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um taxista aéreo.");
			return true;
		}

		if(GetOwnedVehicleID(vId) != INVALID_VEHICLE_ID && CarInfo[GetOwnedVehicleID(vId)][cLock] && Teste[playerid] == 0)
		{
			RemovePlayerFromVehicle(playerid);
			Descongelar(playerid);
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Veículo trancado pelo dono.");
			return true;
		}

		new v = GetOwnedVehicleID(vId);
	    if(v != INVALID_VEHICLE_ID)
	    {
			if(strcmp(CarInfo[v][cOwner], Player[playerid][pName]) != 0)
			{
                new streeee[155],
                    i = IsPlayerConnectedEx(CarInfo[v][cOwner]);
                if(i != INVALID_PLAYER_ID)
                {
			        format(streeee, 155, "[Alarme]: Seu veículo foi roubado pelo player %s e o alarme está tocando.", Player[playerid][pName]);
			        SendClientMessage(i, COLOR_ORANGE, streeee);
                }

		        format(streeee, 155, "[Alarme]: Você roubou o veículo do player %s e o alarme está tocando.", CarInfo[v][cOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, streeee);
			}
		}

	    if(Player[playerid][pJailTime] > 0)
		{
			RemovePlayerFromVehicle(playerid);
			Descongelar(playerid);
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode entrar no veículo, pois está preso.");
			return true;
		}
		if(IsAPizzabike(newcar))
		{
		    if(Player[playerid][pJob] != EPIZZA)
			{
		        RemovePlayerFromVehicle(playerid);
	            Descongelar(playerid);
		        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um entregador de pizza.");
			}
		}

	    if(vId==MotoJornal[0] || vId==MotoJornal[1])
		{
			if(Player[playerid][pJob] != JORNALEIRO)
			{
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é jornaleiro.");
			    RemovePlayerFromVehicle(playerid);
			    Descongelar(playerid);
			}
			else
			{
				if(Player[playerid][pCarTime] <= 0)
				{
				    SetPlayerCheckpoint(playerid,641.7455,-1356.5403,13.4020,5.0);
				    if(PaperMission[playerid] == 0 || PaperMission[playerid] == 1){ PaperMission[playerid] = 1;
					}
				    else
		            {
						new rand = random(sizeof(cPaperPoints));
                        SetPlayerCheckpoint(playerid, cPaperPoints[rand][0],cPaperPoints[rand][1],cPaperPoints[rand][2],5.0);
                    }
				}
				else { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Seu trabalho terminou por hoje, aguarde o tempo de recarga."); }
			}
		}
		if(newcar == 408)
		{
			if(Player[playerid][pJob] != LIXEIRO)
			{
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é Lixeiro.");
			    RemovePlayerFromVehicle(playerid);
			    Descongelar(playerid);
			}
			else
			{
				if(Player[playerid][pCarTime] <= 0)
				{
				    SetPlayerCheckpoint(playerid,1656.8923,-1875.2163,13.3828,5.0);
				    if(LixoMission[playerid] == 0 || LixoMission[playerid] == 1){ LixoMission[playerid] = 1;
					}
				    else
		            {
						new rand = random(sizeof(cLixoPoints));
                        SetPlayerCheckpoint(playerid, cLixoPoints[rand][0],cLixoPoints[rand][1],cLixoPoints[rand][2],5.0);
                    }
				}
				else { SendClientMessage(playerid, COLOR_RED, "Seu trabalho terminou por hoje, aguarde o tempo de recarga."); }
			}
		}
        if(IsAOnibus(GetPlayerVehicleID(playerid)))
		{
			if(Player[playerid][pJob] != MOTORISTA)
			{
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um motorista de ônibus.");
			    Descongelar(playerid);
			    RemovePlayerFromVehicle(playerid);
			}
			else
			{
			    if(Player[playerid][pCarTime] <= 0)
			    {
			        SetPlayerCheckpoint(playerid, 1802.8055,-1854.9038,13.4141, 5.0);
			        BusMission[playerid] = 1;
			    }
			    else
					SendClientMessage(playerid, COLOR_RED, "Seu tempo de viagem ainda não excedeu.");
			}
		}
		if(IsACaminhao(GetVehicleModel(GetPlayerVehicleID(playerid))) || (vId >= Caminhao[0] && vId <= Caminhao[14]))
		{
			if(Player[playerid][pJob] != CAMINHONEIRO || (vId < Caminhao[0] || vId > Caminhao[14]))
			{
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um caminhoneiro.");
			    Descongelar(playerid);
			    RemovePlayerFromVehicle(playerid);
			}
			else
			{
			    if(Player[playerid][pCarTime] <= 0)
			    {
			        SetPlayerCheckpoint(playerid, -121.4728,-378.7709,1.4297, 5.0);
			        TruckMission[playerid] = 1;
			    }
			    else { SendClientMessage(playerid, COLOR_RED, "Seu tempo de recarga ainda não excedeu."); }
			}
		}
		if(vId >= Funecars[0] && vId <= Funecars[5])
		{
			if(Player[playerid][pJob] != FUNERARIO)
			{
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Agente Funerário.");
			    Descongelar(playerid);
			    RemovePlayerFromVehicle(playerid);
			}
			else
			{
			    if(Player[playerid][pCarTime] <= 0)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vá até o checkpoint para buscar o corpo.");
			        new tk1 = random(3);
					if(tk1 == 0)
						SetPlayerCheckpoint(playerid, -2649.8726,624.2493,14.4531, 8.0);
					else if(tk1 == 1)
						SetPlayerCheckpoint(playerid, -316.3485,1056.9937,19.7422, 8.0);
					else if(tk1 == 2)
						SetPlayerCheckpoint(playerid, 1606.7324,1821.6688,10.8203, 8.0);

			        FuneMission[playerid] = 1;
			        PlayerOnMission[playerid] = 1;
			    }
			    else
					SendClientMessage(playerid, COLOR_RED, "Seu tempo de recarga ainda não excedeu.");
			}
		}
		if(vId == AutoEscolaCars[3])
		{
			if(TakingLesson[playerid] == 0)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COLOR_RED,"[ERRO]:{FFFFFF} Este veículo só poderá ser usado em testes.");
			}
		}
		if(vId == AutoEscolaCars[2])
		{
			if(TakingLesson[playerid] ==0)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COLOR_RED,"[ERRO]:{FFFFFF} Este veículo só poderá ser usado em testes.");
			}
		}
		if(vId == AutoEscolaCars[0] || vId == AutoEscolaCars[1])
		{
			if(TakingLesson[playerid] ==0)
			{
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, COLOR_RED,"[ERRO]:{FFFFFF} Este veículo só poderá ser usado em testes.");
			}
		}
		//if(newcar == 420 || newcar==438 || newcar==586)
        for(new i = 0; i < sizeof(Taxi); i++)
        {
		    if(vId == Taxi[i] && Player[playerid][pJob] != TAXISTA)
			{
		        SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um taxista.");
		        RemovePlayerFromVehicle(playerid);
		        Descongelar(playerid);
                break;
		    }
		}
		if(vId == Ambucars[0]||vId == Ambucars[1]||vId == Ambucars[2]||vId == Ambucars[3]||vId == Ambucars[4]||vId == Ambucars[5])
		{
		    if(Player[playerid][pJob] != MEDICO)
			{
		        SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um médico.");
		        RemovePlayerFromVehicle(playerid);
		        Descongelar(playerid);
		    }
		}
		if(TakingLesson[playerid]==0)
		{
		    if(IsABoat(newcar))
		    {
		        if(Player[playerid][pBoatLic] < 1)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "[Aviso]: Você pode ser multado por estar sem a licença náutica.");
			        //SetPlayerCriminal(playerid,255, "Dirigindo sem licença De náutica", "Desconhecido");
			    }
		    }
		    else if(IsAPlane(newcar))
		    {
		        if(Player[playerid][pFlyLic] < 1)
			    {
			        if(TakingLesson[playerid] == 1) { }
			        else
					{
			        	SendClientMessage(playerid, COLOR_WHITE, "[Aviso]: Você pode ser multado por estar sem a licença aérea.");
			        	//SetPlayerCriminal(playerid,255, "Pilotando sem licença aérea", "Desconhecido");
					}
			    }
		    }
		    else
		    {
			    if(Player[playerid][pCarLic] < 1 && GetVehicleModel(vId) != 481 && GetVehicleModel(vId) != 462 && GetVehicleModel(vId) != 510)
				{
			        if(PlayerDrunk[playerid] >= 5)
				    {
					    SetPlayerCriminal(playerid,255, "Dirigindo bêbado", "Desconhecido");
				        WantedPoints[playerid] += 1;
				        Player[playerid][pCarLicPoints]++;
				    }
				    if(TakingLesson[playerid] == 1 && GetVehicleModel(vId) != 481 && GetVehicleModel(vId) != 510) { }
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "[Aviso]: Você pode ser multado por estar sem a licença terrestre.");
                    	//SetPlayerCriminal(playerid,255, "Dirigindo sem licença de motorista", "Desconhecido");
					}
			    }
			    else if(PlayerDrunk[playerid] >= 5)
			    {
			    	SetPlayerCriminal(playerid,255, "Dirigindo bêbado", "Desconhecido");
				    WantedPoints[playerid] += 1;
			    }
            }
		}
		if(newcar == 425)
		{
		    if(Player[playerid][pMember] == TEAM_FA || Player[playerid][pLeader] == TEAM_FA) //FA e Hamas
		    {
		        if(Player[playerid][pRank] < 3)
		        {
			        SendClientMessage(playerid,COLOR_RED,"Você precisa de cargo 3 ao mínimo para usar esse veículo.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
		        }
		    }
		    /*else
		    {
		        RemovePlayerFromVehicle(playerid);
		    }*/
		}
		if(newcar == 571)//KartVeh
		{
		    if(PlayerKarting[playerid] != 1)
		    {
		        RemovePlayerFromVehicle(playerid);
		    }
		}
		if(vId==GroveCars[0]||vId==GroveCars[1]||vId==GroveCars[2]||vId==GroveCars[3]||vId==GroveCars[4]||vId==GroveCars[5])
		{
		    if(Player[playerid][pMember] == TEAM_GROOVE||Player[playerid][pLeader] == TEAM_GROOVE) { }
		    else
			{
		        SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro da Grove Street Families.");
		        RemovePlayerFromVehicle(playerid);
		        Descongelar(playerid);
		    }
		}
		for(new i = 0; i < sizeof(FaCars); i ++)
		{
			if(vId==FaCars[i])
			{
			    if(Player[playerid][pMember] == TEAM_FA||Player[playerid][pLeader] == TEAM_FA) { }
	            else if(Player[playerid][pMember] == TEAM_PM||Player[playerid][pMember] == TEAM_PF||Player[playerid][pMember] == TEAM_BOPE)
	            {
				    RemovePlayerFromVehicle(playerid);
	           	}
			    else
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Militar.");
				    RemovePlayerFromVehicle(playerid);
				    Descongelar(playerid);
			    }
			}
		}
		if(vId==Reboque[0]||vId==Reboque[1]||vId==Reboque[2]||vId==Reboque[3]||vId==Reboque[4]||vId==Reboque[5]||vId==Reboque[6]||vId==Reboque[7]||vId==Reboque[8])
		{
		    if(Player[playerid][pJob] != MECANICO)
			{
		        SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um mecânico.");
		        RemovePlayerFromVehicle(playerid);
		        Descongelar(playerid);
		    }
		}
		if(vId==HeliPM[0])
		{
		    if(Player[playerid][pMember] == TEAM_PM||Player[playerid][pLeader] == TEAM_PM)
       		{
            	if(Player[playerid][pRank] < 4)
				{
					SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você ainda não pode utilizar o Helicoptero da L.S.P.D.");
					RemovePlayerFromVehicle(playerid);
	           	}
    		}
		    else
			{
		        SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um oficial da L.S.P.D.");
		        RemovePlayerFromVehicle(playerid);
		        Descongelar(playerid);
		    }
		}
		/*if(vId==HeliPC[0])
		{
		    if(Player[playerid][pMember] == TEAM_PCIVIL||Player[playerid][pLeader] == TEAM_PCIVIL)
		    {
		        if(Player[playerid][pRank] < 4)
		        {
		            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você ainda não pode utilizar o Helicoptero da Policia Civil.");
		            RemovePlayerFromVehicle(playerid);
				}
			}
			else
			{
			    SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Policial Civil.");
			    RemovePlayerFromVehicle(playerid);
			    Descongelar(playerid);
			}
		}
		if(vId==HeliPR[0])
		{
		    if(Player[playerid][pMember] == TEAM_MUNICIPAL||Player[playerid][pLeader] == TEAM_MUNICIPAL)
       		{
            	if(Player[playerid][pRank] < 4)
				{
					SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você ainda não pode utilizar o Helicoptero da PR.");
					RemovePlayerFromVehicle(playerid);
	           	}
    		}
		    else
			{
		        SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro dos Guarda.");
		        RemovePlayerFromVehicle(playerid);
		        Descongelar(playerid);
		    }
		}*/
		if(vId==HeliFBI[0])
		{
		    if(Player[playerid][pMember] == TEAM_PF||Player[playerid][pLeader] == TEAM_PF)
			{
		    	if(Player[playerid][pRank] < 4)
				{
					SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você ainda não tem autorização para utilizar o helicóptero da Polícia Federal.");
					RemovePlayerFromVehicle(playerid);
           		}
           	}
		    else
			{
		        SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro da Polícia Federal");
		        RemovePlayerFromVehicle(playerid);
		        Descongelar(playerid);
		    }
		}
		for(new i = 0; i < sizeof(FBICar); i ++)
		{
			if(vId==FBICar[i])
			{
			    if(Player[playerid][pMember] == TEAM_PF||Player[playerid][pLeader] == TEAM_PF) { }
				else if(Player[playerid][pMember] == TEAM_PM||Player[playerid][pMember] == TEAM_FA||Player[playerid][pMember] == TEAM_BOPE)
				{
					RemovePlayerFromVehicle(playerid);
	           	}
			    else
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Polícial Federal.");
				    RemovePlayerFromVehicle(playerid);
				    Descongelar(playerid);
			    }
			}
		}
		for(new i = 0; i < sizeof(PMcars); i ++)
		{
			if(vId==PMcars[i])
			{
			    if(Player[playerid][pMember] == TEAM_PM||Player[playerid][pLeader] == TEAM_PM)//||GetPlayerOrg(playerid) == TEAM_ROCAM||GetPlayerOrg(playerid) == TEAM_FT)
				{
				}
				else if(Player[playerid][pMember] == TEAM_PM||Player[playerid][pMember] == TEAM_FA||Player[playerid][pMember] == TEAM_BOPE)
				{
					RemovePlayerFromVehicle(playerid);
	           	}
			    else
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Polícial Militar.");
				    RemovePlayerFromVehicle(playerid);
				    Descongelar(playerid);
			    }
			}
		}
/*		for(new i = 0; i < sizeof(ROCAM_FTCars); i ++)
		{
			if(vId == ROCAM_FTCars[i])
			{
			    if(Player[playerid][pMember] == TEAM_PM||Player[playerid][pLeader] == TEAM_PM)//||GetPlayerOrg(playerid) == TEAM_ROCAM||GetPlayerOrg(playerid) == TEAM_FT)
				{
				}
				else if(Player[playerid][pMember] == TEAM_PM||Player[playerid][pMember] == TEAM_FA||Player[playerid][pMember] == TEAM_BOPE)
				{
					RemovePlayerFromVehicle(playerid);
	           	}
			    else
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um PM.");
				    RemovePlayerFromVehicle(playerid);
				    Descongelar(playerid);
			    }
			}
		}
		for(new i = 0; i < sizeof(PCcars); i ++)
		{
		    if(vId==PCcars[i])
		    {
		        if(Player[playerid][pMember] == TEAM_PCIVIL||Player[playerid][pLeader] == TEAM_PCIVIL)
		        {
		        }
		        else if(Player[playerid][pMember] == TEAM_PM||Player[playerid][pMember] == TEAM_FA||Player[playerid][pMember] == TEAM_BOPE)
		        {
					RemovePlayerFromVehicle(playerid);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Policial Civil.");
				    RemovePlayerFromVehicle(playerid);
				    Descongelar(playerid);
				}
			}
		}
		for(new i = 0; i < sizeof(PCcarsD); i ++)
		{
		    if(vId==PCcarsD[i])
		    {
		        if(Player[playerid][pMember] == TEAM_PCIVIL||Player[playerid][pLeader] == TEAM_PCIVIL)
		        {
		        }
		        else if(Player[playerid][pMember] == TEAM_PM||Player[playerid][pMember] == TEAM_FA||Player[playerid][pMember] == TEAM_BOPE)
		        {
					RemovePlayerFromVehicle(playerid);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Policial Civil.");
				    RemovePlayerFromVehicle(playerid);
				    Descongelar(playerid);
				}
			}
		}
		if(vId==PRcars[0]||vId==PRcars[1]||vId==PRcars[2]||vId==PRcars[3]||vId==PRcars[4]||vId==PRcars[5]||vId==PRcars[6]||vId==PRcars[7]||vId==PRcars[8]||vId==PRcars[9]||vId==PRcars[10])
		{
		    if(Player[playerid][pMember] == TEAM_MUNICIPAL||Player[playerid][pLeader] == TEAM_MUNICIPAL) { }
		    else if(Player[playerid][pMember] == TEAM_PM||Player[playerid][pMember] == TEAM_PF||Player[playerid][pMember] == TEAM_FA||Player[playerid][pMember] == TEAM_BOPE)
		    {
		    	RemovePlayerFromVehicle(playerid);
           	}
		    else
			{
		        SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é da Polícia Rodoviária Federal.");
		        RemovePlayerFromVehicle(playerid);
		        Descongelar(playerid);
		    }
		}*/
		for(new i = 0; i < sizeof(BOPECar); i ++)
		{
			if(vId==BOPECar[i])
			{
				if(Player[playerid][pMember] == TEAM_BOPE||Player[playerid][pLeader] == TEAM_BOPE)
				{
				}
				else if(Player[playerid][pMember] == TEAM_PM||Player[playerid][pMember] == TEAM_PF||Player[playerid][pMember] == TEAM_FA)
			    	RemovePlayerFromVehicle(playerid);
			    else
				{
			        SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro do BOPE.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
			    }
			}
		}
		if(vId==BOPECar[6]||vId==BOPECar[7])
		{
		    if(IsACop(playerid)) SetPlayerArmour(playerid, 90);
			else {}

            return true;
		}
		for(new i = 0; i < sizeof(BombeiroCars); i ++)
		{
			if(vId==BombeiroCars[i])
			{
			    if(GetPlayerOrg(playerid) != TEAM_BOMBE)
				{
			        SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Bombeiro.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
			    }
			}
		}
		/*for(new i = 0; i < sizeof(Pcccars); i ++)
		{
			if(vId==Pcccars[i])
			{
			    if(GetPlayerOrg(playerid) != TEAM_PCC)
				{
			        SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro dos PCC.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
			    }
			}
		}*/
		for(new i = 0; i < sizeof(BallasCars); i ++)
		{
			if(vId==BallasCars[i])
			{
			    if(GetPlayerOrg(playerid) != TEAM_BALLAS)
				{
			        SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro dos Front Yard Ballas.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
				}
		    }
		}
		for(new i = 0; i < sizeof(HitmanCar); i ++)
		{
			if(vId==HitmanCar[i])
			{
			    if(GetPlayerOrg(playerid) == TEAM_HITMAN)
			    {
			        if(Player[playerid][pRank] < 4 && GetVehicleModel(vId) == 487)
				    {
				        SendClientMessage(playerid, COLOR_RED, "Seu cargo não permite que você use este veículo.");
					    RemovePlayerFromVehicle(playerid);
					    Descongelar(playerid);
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Assassino.");
				    RemovePlayerFromVehicle(playerid);
				    Descongelar(playerid);
			    }
			}
		}
		/*for(new i = 0; i < sizeof(HamasCar); i ++)
		{
			if(vId == HamasCar[i])
			{
			    if(GetPlayerOrg(playerid) != TEAM_HAMAS)
				{
			        SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é da Hamas.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
			    }
			}
		}*/
		for(new i = 0; i < sizeof(VagosCars); i ++)
		{
			if(vId==VagosCars[i])
			{
			    if(GetPlayerOrg(playerid) != TEAM_VAGOS)
				{
	                SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Los Santos Vagos.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
		        }
		    }
		}
		/*for(new i = 0; i < sizeof(Cmver); i ++)
		{
			if(vId==Cmver[i])
			{
			    if(GetPlayerOrg(playerid) != TEAM_CV)
				{
	                SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um do Comando Vermelho.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
		        }
		    }
		}
		for(new i = 0; i < sizeof(Drifters); i ++)
		{
			if(vId==Drifters[i])
			{
			    if(GetPlayerOrg(playerid) != TEAM_DRIFTERS)
				{
	                SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Drifter.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
		        }
		    }
		}
		for(new i = 0; i < sizeof(Kings); i ++)
		{
			if(vId==Kings[i])
			{
			    if(GetPlayerOrg(playerid) != TEAM_KINGS)
				{
	                SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um King's.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
		        }
		    }
		}
		for(new i = 0; i < sizeof(Lowriders); i ++)
		{
			if(vId==Lowriders[i])
			{
			    if(GetPlayerOrg(playerid) != TEAM_LOWRIDERS)
				{
	                SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Lowrider.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
		        }
		    }
		}*/
		for(new i = 0; i < sizeof(RussaCar); i ++)
		{
			if(vId==RussaCar[i])
			{
			    if(GetPlayerOrg(playerid) != TEAM_RUSSA)
				{
	                SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Mafioso Russo.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
		        }
		    }
		}
		for(new i = 0; i < sizeof(prefeitocars); i ++)
		{
			if(vId==prefeitocars[i])
			{
			    if(GetPlayerOrg(playerid) != TEAM_PREF)
				{
	                SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é Membro Político.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
		        }
		    }
		}
		for(new i = 0; i < sizeof(LixoCar); i ++)
		{
			if(vId==LixoCar[i])
			{
				if(Player[playerid][pJob] != LIXEIRO)
				{
	                SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Lixeiro.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
			    }
			}
		}
  		for(new i = 0; i < sizeof(TerrorCar); i ++)
		{
			if(vId==TerrorCar[i])
			{
			    if(GetPlayerOrg(playerid) != TEAM_ALQAEDA)
				{
	                SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro da Al-Qaeda.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
		        }
		    }
		}
  		for(new i = 0; i < sizeof(YakuzaCars); i ++)
		{
			if(vId==YakuzaCars[i])
			{
			    if(GetPlayerOrg(playerid) != TEAM_YAKUZA)
				{
	                SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro da Mafia Yakuza.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
		        }
		    }
		}
  		for(new i = 0; i < sizeof(AztecasCars); i ++)
		{
			if(vId==AztecasCars[i])
			{
			    if(GetPlayerOrg(playerid) != TEAM_AZTECAS)
				{
	                SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Azteca.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
		        }
		    }
		}
  		for(new i = 0; i < sizeof(HACars); i ++)
		{
			if(vId==HACars[i])
			{
			    if(GetPlayerOrg(playerid) != TEAM_ANGELS)
				{
	                SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Hell Angel.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
		        }
		    }
        }
  		for(new i = 0; i < sizeof(BPCars); i ++)
		{
			if(vId==BPCars[i])
			{
			    if(GetPlayerOrg(playerid) != TEAM_BIKERS)
				{
	                SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Black Pistons.");
			        RemovePlayerFromVehicle(playerid);
			        Descongelar(playerid);
		        }
		    }
        }
		if(newcar==582||newcar==488)
		{
			if(Player[playerid][pMember] == TEAM_SANEWS || Player[playerid][pLeader] == TEAM_SANEWS){ }
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro da San News.");
			    RemovePlayerFromVehicle(playerid);
			    Descongelar(playerid);
			}
			if(Player[playerid][pRank] < 4 && newcar == 488)
			{
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Seus pontos de San News são insuficientes para usar o Helicoptero da San News.");
			    RemovePlayerFromVehicle(playerid);
			    Descongelar(playerid);
            }
		}
		if(newcar==571)
		{
		    if(PlayerKarting[playerid] != 1)
		    {
		        RemovePlayerFromVehicle(playerid);
		        Descongelar(playerid);
		    }
		}
        for(new i = 0; i < sizeof(AluguelCarro); i++)
		{
            if(AluguelCarro[i] != GetPlayerVehicleID(playerid))
                continue;
			if(HireCar[playerid] == GetPlayerVehicleID(playerid))
                continue;

			format(string, sizeof(string), "~w~Voce pode alugar este carro~n~Valor: ~g~R$ %d~n~~w~para alugar digite ~g~/alugarcarro~w~~n~para sair, ~r~/sair", BizCarrosPrice[i]);
            SetEngine(vId, false);
			GameTextForPlayer(playerid, string, 5000, 6);
		}
        for(new i = 0; i < sizeof(AluguelMoto); i++)
		{
            if(AluguelMoto[i] != GetPlayerVehicleID(playerid))
                continue;
			if(HireCar[playerid] == GetPlayerVehicleID(playerid))
                continue;

			format(string, sizeof(string), "~w~Voce pode alugar esta moto~n~Valor: ~g~R$ %d~n~~w~para alugar digite ~g~/alugarcarro~w~~n~para sair, ~r~/sair", BizMotosPrice[i]);
            SetEngine(vId, false);
			GameTextForPlayer(playerid, string, 5000, 6);
		}
        for(new i = 0; i < sizeof(AluguelAero); i++)
		{
            if(AluguelAero[i] != GetPlayerVehicleID(playerid))
                continue;
			if(HireCar[playerid] == GetPlayerVehicleID(playerid))
                continue;

			format(string, sizeof(string), "~w~Voce pode alugar este aviao~n~Valor: ~g~R$ %d~n~~w~para alugar digite ~g~/alugarcarro~w~~n~para sair, ~r~/sair", BizAeroPrice[i]);
            SetEngine(vId, false);
			GameTextForPlayer(playerid, string, 5000, 6);
		}

		new type = GetVehicleType(GetPlayerVehicleID(playerid));

		if((type == VTYPE_MOTORBIKE || type == VTYPE_BIKE) && GetPlayerVehicleID(playerid) != 481 && GetPlayerVehicleID(playerid) != 509 && GetPlayerVehicleID(playerid) != 510)
		{
			if(Player[playerid][pCapacete] == 0)
				SendClientMessage(playerid, COLOR_WHITE,"[Aviso]: Não se esqueça do capacete. {E9ED19}/Capacete");
		}
		else if(type == VTYPE_CAR || type == VTYPE_SPORT || type == VTYPE_MAV || type == VTYPE_HEAVY)
		{
		    if(Player[playerid][pSeatBelt] == 0)
				SendClientMessage(playerid, COLOR_WHITE,"[Aviso]: Não se esqueça do cinto de segurança. {E9ED19}/Cinto");

			SendClientMessage(playerid, COLOR_WHITE,"[Aviso]: As janelas do seu veículos estão fechadas, aperte {E9ED19}'J'{FFFFFF} para abri-las.");
			SendClientMessage(playerid, COLOR_WHITE, "Use {E9ED19}/escolherradio {FFFFFF}para mudar a rádio do veículo.");
			if(!OuvindoIPod[playerid])
				PlayAudioStreamForPlayer(playerid, VehicleInfo[GetPlayerVehicleID(playerid)][vRadio]);
			else
				SendClientMessage(playerid, COLOR_RED, "Você não está ouvindo a rádio do veículo pois seu iPod está ligado. Desligue-o caso queira ouvir a rádio.");
		}
	}

	if(newstate == PLAYER_STATE_ONFOOT)
	{
	    if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	        if(!OuvindoIPod[playerid])
		    	StopAudioStreamForPlayer(playerid);

		cVehicle[playerid] = -1;
		if(TruckMission[playerid] == 1 || FuneMission[playerid] == 1 || BusMission[playerid] == 1 || PaperMission[playerid] >= 1 || LixoMission[playerid] >= 1 || GasMission[playerid] >= 1)
			DisablePlayerCheckpoint(playerid);

	    if(PlayerKarting[playerid] > 0 && PlayerInKart[playerid] > 0)
		{
		    PlayerInKart[playerid] = 0;
		    KartingPlayers --;
		}
		SetCameraBehindPlayer(playerid);
	}

	if(newstate == PLAYER_STATE_PASSENGER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
		new type = GetVehicleType(vehicleid);

	   	if(GetOwnedVehicleID(vehicleid) != INVALID_VEHICLE_ID && CarInfo[GetOwnedVehicleID(vehicleid)][cLock])
		{
	    	RemovePlayerFromVehicle(playerid);
	        Descongelar(playerid);
	        SendClientMessage(playerid, COLOR_RED,"[ERRO]:{FFFFFF} Veículo trancado pelo dono.");
	        return true;
	 	}
   		if(Player[playerid][pJailTime] > 0)
		{
		    RemovePlayerFromVehicle(playerid);
      		Descongelar(playerid);
	    	SendClientMessage(playerid, COLOR_RED,"[ERRO]:{FFFFFF} Você não pode entrar no veículo, pois está preso.");
	    	return true;
	    }

		if((type == VTYPE_MOTORBIKE || type == VTYPE_BIKE) && GetPlayerVehicleID(playerid) != 481 && GetPlayerVehicleID(playerid) != 509 && GetPlayerVehicleID(playerid) != 510)
			SendClientMessage(playerid, COLOR_WHITE,"[Aviso]: Não se esqueça do capacete. {E9ED19}/Capacete");
		else if(type == VTYPE_CAR || type == VTYPE_SPORT || type == VTYPE_MAV || type == VTYPE_HEAVY)
		{
			SendClientMessage(playerid, COLOR_WHITE,"[Aviso]: Não se esqueça do cinto de segurança. {E9ED19}/Cinto");
			SendClientMessage(playerid, COLOR_WHITE, "Use {E9ED19}/escolherradio {FFFFFF}para mudar a rádio do veículo.");
			if(!OuvindoIPod[playerid])
				PlayAudioStreamForPlayer(playerid, VehicleInfo[GetPlayerVehicleID(playerid)][vRadio]);
			else
				SendClientMessage(playerid, COLOR_RED, "Você não está ouvindo a rádio do veículo pois seu iPod está ligado. Desligue-o caso queira ouvir a rádio.");
		}
	}

	if(newstate == PLAYER_STATE_WASTED)
	{
	    if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	    {
	    	StopAudioStreamForPlayer(playerid);
	    	OuvindoIPod[playerid] = false;
		}
		if(WantedPoints[playerid] >= 1 && !IsACop(playerid) && nobangu[playerid] == false && Player[playerid][pJailed] != 2 && PlayerPaintballing[playerid] == 0 && AdminDuty[playerid] != MODOSA_TRABALHANDO && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
		{
		    if(noevento[playerid])
                goto Jump;
	        	//format(Player[playerid][JailReason],12,"Em evento");
        	else if(noteste[playerid])
                goto Jump;
        	    //format(Player[playerid][JailReason],12,"Em teste");
			else
			    format(Player[playerid][JailReason],20,"Morto por COP");

		    new price = WantedPoints[playerid]*200;
		    new deadprice = 0;
			new bool:count = false,
                JailID[4] = {0, 0, 0, 0};
			foreach(new i: Player)
			{
			    if(CrimInRange(50.0, playerid, i))
                {
          		    if(IsACop(i)
                    && AdminDuty[i] != MODOSA_TRABALHANDO
                    && GetPlayerState(i) != PLAYER_STATE_SPECTATING)
                    {
    					count = true;
    					ConsumingMoney[i] = 1;

    					format(string, sizeof(string), "~w~Suspeito Procurado ~r~MORTO ~n~ ~g~ R$%d", price);
    					GameTextForPlayer(i, string, 5000, 1);

    					PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);

                        //if(GetPlayerOrg(i) == TEAM_PCIVIL)
                            //JailID[1] ++;
                        if(GetPlayerOrg(i) == TEAM_PF)
                            JailID[2] ++;
                        else if(GetPlayerOrg(i) == TEAM_BOPE)
                            JailID[3] ++;
                        else
                            JailID[0] ++;

                        GivePlayerGP(i, price);
    					if(GetPlayerGP(playerid) >= price)
                        {
                            deadprice += price;
                            GivePlayerGP(playerid, - price);
                        }
                        else
                        {
                            deadprice += GetPlayerGP(playerid);
                            SetPlayerGP(playerid, 0);
                        }
                    }
   				}
			}
			if(count)
			{
                new GoToJail = 0;
                for(new j = 1; j < sizeof(JailID); j++)
                    if(JailID[j] > JailID[GoToJail])
                        GoToJail = j;

                if(GoToJail == 0)
                    Player[playerid][pJailed] = 1;
                else if(GoToJail == 1)
                    Player[playerid][pJailed] = 3;
                else if(GoToJail == 2) //HQ da BOPE é fechada
                    Player[playerid][pJailed] = 4;
                else
                    Player[playerid][pJailed] = 5;

				Player[playerid][pWantedDeaths] += 1;

				new Time = (WantedPoints[playerid])*(65);
				if(Time > 900) Time = 900;

    		    Player[playerid][pJailTime] = Time;
			    Player[playerid][pJailTimetotal] = Time;

			    format(string, sizeof(string), "Você está preso por %d segundos e perdeu R$%d por cometer crimes.", Player[playerid][pJailTime], deadprice);
			    SendClientMessage(playerid, COLOR_RED, string);

			    WantedPoints[playerid] = 0;
           	}
		}
        Jump:
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		new Float: lwx, Float:lwy, Float:lwz;
		GetPlayerPos(playerid, lwx, lwy, lwz);
		SafeTime[playerid] = 60;
		if(Player[playerid][pDonateRank] < 2)
        {
            new Float:hp = 50.0+Player[playerid][pSHealth];
            SetPlayerHealth(playerid, hp);
        }
		else
            SetPlayerHealth(playerid, 75.0);
	}
	return true;
}

public CarCheck()
{
	new string[128];
	foreach(new j: Player)
	{
	    new Float:health;
	    GetPlayerHealth(j, health);
		//SetPlayerHealth(j, health - 1.0);
		if(DSTPlayer[j]==1)
		{
		    GetPlayerHealth(j, health);
		    SetPlayerHealth(j, health - 4.0);
		    SendClientMessage(j, COLOR_LIGHTBLUE, "Você perdeu 4 pontos de saúde por conta da DST");
		}
		else if(DSTPlayer[j]==2)
		{
		    GetPlayerHealth(j, health);
		    SetPlayerHealth(j, health - 8.0);
		    SendClientMessage(j, COLOR_LIGHTBLUE, "Você perdeu 8 pontos de saúde por conta da DST ");
		}
		else if(DSTPlayer[j]==3)
		{
		    GetPlayerHealth(j, health);
		    SetPlayerHealth(j, health - 12.0);
		    SendClientMessage(j, COLOR_LIGHTBLUE, "Você perdeu 12 pontos de saúde por conta da DST");
		}
		if(Player[j][pDoenca] == DoencaGripe)
		{
		    GetPlayerHealth(j, health);
		    SetPlayerHealth(j, health - 2.0);
		    SendClientMessage(j, COLOR_LIGHTBLUE, "Você perdeu 2 pontos de saúde por conta da Gripe");
		}
		if(GetPlayerGP(j) < 0 || Player[j][pBank] < 0)
		{
		    if(MoneyMessage[j] == 0)
		    {
			    format(string, sizeof(string), "Você está em dívida, por isso deve recuperar o dinheiro perdido até o próximo pagamento para não ser preso.");
				SendClientMessage(j, COLOR_RED, string);
				MoneyMessage[j] = 1;
			}
		}
		else
		{
		    MoneyMessage[j] = 0;
		}
	}
	return true;
}

public CarTow(carid)
{
	SetVehiclePos(carid,HouseCarSpawns[carid][0], HouseCarSpawns[carid][1], HouseCarSpawns[carid][2]);
	SetVehicleZAngle(carid, HouseCarSpawns[carid][3]);
	return true;
}


public LockCar(carid)
{
    GetVehicleParamsNew(carid);
    SetVehicleParamsEx(carid, engine, lights, alarm, true, bonnet, boot, objective);
}

public UnLockCar(carid)
{
    GetVehicleParamsNew(carid);
    SetVehicleParamsEx(carid, engine, lights, alarm, false, bonnet, boot, objective);
}

public OnPlayerRequestClass(playerid, classid)
{
    TextDrawShowForPlayer(playerid, FundoLogin);
	//PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	if(IsPlayerNPC(playerid))
	{
		return true;
	}
	if(gPlayerLogged[playerid] != 1)
	{
		new idx = random(sizeof(TutorialScreens));
		//SetPlayerTime(playerid, 12, 0);
		SetPlayerCameraPos(playerid, TutorialScreens[idx][3], TutorialScreens[idx][4], TutorialScreens[idx][5]);
		SetPlayerCameraLookAt(playerid, TutorialScreens[idx][0], TutorialScreens[idx][1], TutorialScreens[idx][6]);
		SafeSetPlayerPos(playerid, TutorialScreens[idx][0], TutorialScreens[idx][1], TutorialScreens[idx][2]);
		TogglePlayerControllable(playerid, false);
		SetPlayerTeamFromClass(playerid,classid);
	}
	else
		SpawnPlayer(playerid);

	return false;
}

//---------------------------------------------------------

public SetPlayerTeamFromClass(playerid,classid)
{
    return 1;
}

//---------------------------------------------------------

public SetPlayerCriminal(playerid,declare,reason[],local[])
{
	if(IsPlayerConnected(playerid) && !IsACop(playerid) && nobangu[playerid] != true && !IsPlayerInGuerra(playerid) && !IsPlayerInUsina(playerid))
	{
	    Player[playerid][pCrimes] += 1;
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new turnmes[128];
		new wantedmes[128];
		new wlevel = WantedPoints[playerid];
		//strmid(PlayerCrime[playerid][pAccusedof], reason, 0, strlen(reason), 255);
		strcpy(PlayerCrime[playerid][pAccusedof], reason);
		GetPlayerName(playerid, turned, sizeof(turned));
		if(declare == 255)
		{
			format(turner, sizeof(turner), "Desconhecido");
			strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
				strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
				strmid(PlayerCrime[declare][pBplayer], turned, 0, strlen(turned), 255);
				strmid(PlayerCrime[declare][pAccusing], reason, 0, strlen(reason), 255);
			}
		}
		format(turnmes, sizeof(turnmes), "Você cometeu um crime (%s). Relato: %s.",reason,turner);
		SendClientMessage(playerid, COLOR_RED, turnmes);
		format(wantedmes, sizeof(wantedmes), "Nível de procurado: %d", wlevel);
		SendClientMessage(playerid, COLOR_YELLOW, wantedmes);
		foreach(new i: Player)
		{
		   	if(IsACop(i))
			{
				format(cbjstore, sizeof(cbjstore), "HQ - Todas as unidades APB: Relato: %s",turner);
				SendClientMessage(i, COLOR_RED, cbjstore);
				format(cbjstore, sizeof(cbjstore), "HQ - Crime: %s, Suspeito: %s, Localização: %s ",reason, turned, local);
				SendClientMessage(i, COLOR_RED, cbjstore);
			}
		}
	}
}

stock Denunciar190(playerid, denunciado, reason[])
{
    new string[128];
	if(IsPlayerConnected(denunciado) && !IsACop(denunciado) && nobangu[denunciado] != true && !IsPlayerInGuerra(denunciado) && !IsPlayerInUsina(denunciado))
	{
		format(string, sizeof(string), "Você foi denunciado para a polícia. Motivo: %s.", reason);
		SendClientMessage(denunciado, COLOR_RED, string);

		foreach(new i: Player)
		{
		   	if(IsACop(i))
			{
				format(string, sizeof(string), "HQ - Denuncia recebida: %s, Suspeito: %s, Relato: %s.", reason, Player[denunciado][pName], Player[playerid][pName]);
				SendClientMessage(i, COLOR_RED, string);
			}
		}
	}
	format(string, sizeof(string), "Você denunciou %s para a polícia. Motivo: %s.", Player[denunciado][pName], reason);
	SendClientMessage(playerid, COLOR_RED, string);
	return 1;
}

public SetPlayerFree(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
		ClearCrime(playerid);
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new crbjstore[128];
		if(declare == 255)
		{
			format(turner, sizeof(turner), "911");
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
			}
		}
		GetPlayerName(playerid, turned, sizeof(turned));
		foreach(new i: Player)
		{
        	//if(Player[i][pMember] == TEAM_PM||Player[i][pLeader] == TEAM_PM||Player[i][pMember] == TEAM_PF||Player[i][pLeader] == TEAM_PF||Player[i][pMember] == TEAM_FA||Player[i][pLeader] == TEAM_FA||Player[i][pLeader] == TEAM_MUNICIPAL||Player[i][pMember] == TEAM_BOPE||Player[i][pLeader] == TEAM_BOPE)
            if(IsACopEx(i))
            {
				format(crbjstore, sizeof(crbjstore), "HQ: atencão todas as unidades, %s já atribuiu-se.",turner);
				SendClientMessage(i, COLOR_MARINE, crbjstore);
				format(crbjstore, sizeof(crbjstore), "HQ: %s foi processado: %s",turned,reason);
				SendClientMessage(i, COLOR_MARINE, crbjstore);
			}
   		}
 	}
}

public RingToner()
{
	foreach(new i: Player)
	{
		if(RingTone[i] != 6 && RingTone[i] != 0 && RingTone[i] < 11)
		{
			RingTone[i] = RingTone[i] -1;
			PlayerPlaySound(i, 1138, 0.0, 0.0, 0.0);
		}
		if(RingTone[i] == 6)
			RingTone[i] = RingTone[i] -1;

		if(RingTone[i] == 20)
		{
			RingTone[i] = RingTone[i] -1;
			PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
		}
	}
	SetTimer("RingTonerRev", 1000, 0);
	return true;
}

public RingTonerRev()
{
	foreach(new i: Player)
	{
		if(RingTone[i] != 5 && RingTone[i] != 0 && RingTone[i] < 10)
		{
			RingTone[i] = RingTone[i] -1;
			PlayerPlaySound(i, 1137, 0.0, 0.0, 0.0);
		}
		if(RingTone[i] == 5)
			RingTone[i] = RingTone[i] -1;

		if(RingTone[i] == 19)
		{
			PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
			RingTone[i] = 0;
		}
	}
	SetTimer("RingToner", 1000, 0);
	return true;
}

stock strcpy(_sStr[],sStr_[]) // (strdestino, strsource)
{
    _sStr[0x0] = '\0';
    return strcat(_sStr,sStr_,strlen(sStr_));
}

stock OtherStuff()
{
    if(RaceInfo[rRacing])
    {
        new Min,
            Sec,
            str[32];

        PegarMinSec((GetTickCount() - RaceInfo[rStartTime]) / 1000, Sec, Min);
        format(str, 32, "%02d:%02d", Min, Sec);
        TextDrawSetString(RaceTime, str);
    }

	new Float:oldposx, Float:oldposy, Float:oldposz,
        Float:speed[3];
	foreach(new i: Player)
	{
 		//if(IsPlayerInEscond(i))
    	//{
		//	if(WantedPoints[i] > 0)
		//    {
		//        escondendo[i] ++;
		//		format(string,128,"~r~Escondendo: ~w~%d~y~/~g~%d", escondendo[i], (WantedPoints[i] * 60));
		//		GameTextForPlayer(i, string, 1200, 6);
		//        if(escondendo[i] == (WantedPoints[i] * 60))
		//        	ClearCrimeTempo(i);
	    //    }
		//}
	    if(Player[i][pLocal] != 255
        && GetPlayerInterior(i) != 0)
		{
			new house = Player[i][pLocal];
			GetPlayerPos(i, oldposx, oldposy, oldposz);

			if(oldposz != 0.0
            && oldposz < 600.0)
			{
                //Verificar se está Caindo
                GetPlayerVelocity(i, speed[0], speed[1], speed[2]);
                if(speed[2] > -0.8)
                    continue;

				if(house > 10000)
				{
					new tmpcar = GetVehicleModel(GetPlayerVehicleID(i));
					if(!PlayerToPoint(6, i, 1040.60, -1021.0, 31.7) && house == 10001
                    || !PlayerToPoint(6, i, -2720.5, 217.500, 4.10) && house == 10002
                    || !PlayerToPoint(6, i, 2644.60, -2044.9, 13.3) && house == 10003)
					{
						if(GetPlayerState(i) == 2)
						{
							SetVehiclePos(tmpcar, HouseCarSpawns[tmpcar-1][0], HouseCarSpawns[tmpcar-1][1], HouseCarSpawns[tmpcar-1][2]);
							SetVehicleZAngle(tmpcar, HouseCarSpawns[tmpcar-1][3]);
						}
						else
						{
							SafeSetPlayerPos(i, HouseCarSpawns[tmpcar-1][0], HouseCarSpawns[tmpcar-1][1], HouseCarSpawns[tmpcar-1][2]);
						}
						gSpentCash[i] = 0;
						Player[i][pLocal] = 255;
						SetPlayerInterior(i,0);
						Player[i][pInt] = 0;
						Spectate[i] = 255;
					}
				}
				else if(house == 500) //FBI HQ
				{
                    SetPlayerInterior(i, 0);
					SafeSetPlayerPos(i, 328.3718, -1513.3346, 36.0391);
					Player[i][pInt] = 0;
					Player[i][pLocal] = 255;
				}
				else if(house == 241)//prefeitura
				{
				    SetPlayerInterior(i, 0);
					SafeSetPlayerPos(i, 1127.0536, -2036.8794, 69.8837);
					Player[i][pInt] = 0;
					Player[i][pLocal] = 255;
				}
				else if(house == 242)
				{
				    SetPlayerInterior(i, 0);
					SafeSetPlayerPos(i, 1073.0619, -344.5148, 73.9922);
					Player[i][pInt] = 0;
					Player[i][pLocal] = 255;
				}
				else if(house == 243) // Policia Militar HQ
				{
                    SetPlayerInterior(i, 0);
					SafeSetPlayerPos(i, 246.4178, 86.9627, 1003.6406);
					Player[i][pInt] = 0;
					Player[i][pLocal] = 255;
				}
				else if(house < MAX_HOUSES)
				{
					SafeSetPlayerPos(i, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]); // Warp the player
					Player[i][pLocal] = 255;
					SetPlayerInterior(i, 0);
                    SetPlayerVirtualWorld(i, 0);
					Player[i][pInt] = 0;
				}
			}
		}
	}
	return true;
}

public SyncClock()
{
	Online = 0;
    foreach(new i: Player)
	    Online++;

	if(InGuerra == 1)
	{
        foreach(new i: Player)
            if(Guerrilheiro(i) && IsPlayerInAQFA(i))
                AddPlayerTeamPoints(i, 2);

	    /*if(Membros(3) > 0)
	    {
	    	Guerra[GuerraPontos][0] += Membros(3) * 2;
		}
		if(Membros(11) > 0)
		{
			Guerra[GuerraPontos][1] += Membros(11) * 2;
		}
		if(Membros(22) > 0)
		{
			Guerra[GuerraPontos][2] += Membros(22) * 2;
		}   */
		AtualizarGuerra();
	}

	new str[128];
	GetTimeFix(ClockTime[tHour], ClockTime[tMinute], ClockTime[tSecond]);
	getdate(ClockTime[dYear], ClockTime[dMonth], ClockTime[dDay]);
	format(str,128, "%s~n~%02d:%02d:%02d - %02d/%02d ~n~%d/%d", SITE_URL, ClockTime[tHour], ClockTime[tMinute], ClockTime[tSecond], ClockTime[dDay], ClockTime[dMonth], Online, GetMaxPlayers());
	TextDrawSetString(ServerLogo2, str);

    CustomPickups();
    OtherStuff();
	return true;
}

new UnjailDebug[3] = {-1, 0, 0};
public SetPlayerUnjail()
{
	new string[128];
    if(UnjailDebug[0] != -1)
    {
        format(string, 128, "Fatal Error: SetPlayerUnjail Crashou! ~> [0] = %d, [1] = %d, [2] = %d. Avise a um ADM Rcon.", UnjailDebug[0], UnjailDebug[1], UnjailDebug[2]);
        ABroadCast(COLOR_YELLOW, string, 1);
    }
    UnjailDebug[0] = 0;
    UnjailDebug[1] = 0;
    UnjailDebug[2] = 0;

	if(PaintballPlayers >= 2 && PaintballRound != 1 && StartingPaintballRound != 1)
	{
		StartingPaintballRound = 1;
	   	SetTimer("PreparePaintball", 15000, 0);
	}
	if(KartingPlayers >= 2 && KartingRound == 0 && StartingKartRound == 0)
	{
	    StartingKartRound = 1;
	    SetTimer("PrepareKarting", 15000, 0);
	}
	if(KartingRound != 0 && KartingPlayers < 2)
	{
	    StartingKartRound = 0;
	    KartingRound = 0;
	    EndingKartRound = 1;
	}

	/*for(new i = 0; i <= HighestID; i++)
	{
	    if(IsPlayerConnected(i))
	    {*/
    foreach(new i: Player)
    {
        new Float:X,Float:Y,Float:Z;
		GetPlayerPos(i, X,Y,Z);
        UnjailDebug[1] = 1;
		if(Player[i][pJailed] > 0)
	    {
            UnjailDebug[2] = 1;
			if(Player[i][pJailTime] > 0 && WantLawyer[i] == 0)
            {
				Player[i][pJailTime]--;
                ResetPlayerWeapons(i);
                if(Player[i][pJailed] == 2)
                    if(Z > 36.0)
                        SafeSetPlayerPos(i, 245.2564, 1859.9233, 14.0840);
            }

            //if(Player[i][pMorto] == 1)
		    //    Player[i][pMorto] = 0;

            UnjailDebug[2] ++;
			if(Player[i][pJailTime] <= 0 && WantLawyer[i] == 0)
			{
			    Player[i][pJailTime] = 0;
				if(Player[i][pJailed] == 1)
				{
					SafeSetPlayerPos(i, 246.422622, 70.870399, 1003.640625);
					SetPlayerInterior(i, 6);
				}
				if(Player[i][pJailed] == 2)
				{
                    SetPlayerWorldBounds(i, 20000.0000, -20000.0000, 20000.0000, -20000.0000); //Reset world to player
				    SafeSetPlayerPos(i, 1751.7994, -1949.2076, 13.5492);
				    SetPlayerInterior(i, 0);
				}
				if(Player[i][pJailed] == 3)
				{
					SafeSetPlayerPos(i, 229.6444, 151.1319, 1003.0234);
					SetPlayerInterior(i, 3);
				}
				if(Player[i][pJailed] == 4)
				{
					SafeSetPlayerPos(i, 242.2509, 116.9337, 1003.2188);
                    SetPlayerVirtualWorld(i, 1);
					SetPlayerInterior(i, 10);
				}
				if(Player[i][pJailed] == 5)
				{
					SafeSetPlayerPos(i, 716.1177, -1387.3785, 13.6861);
                    SetPlayerVirtualWorld(i, 0);
					SetPlayerInterior(i, 0);
				}

                UnjailDebug[2] ++;
				Player[i][pJailed] = 0;
				Player[i][pMorto] = 0;
                UnjailDebug[2] ++;
				SendClientMessage(i, COLOR_GREY,"Você pagou seu débito a sociedade");
				format(string, sizeof(string), "~g~libertado~n~~w~tente ser um cidado melhor");
                UnjailDebug[2] ++;
				format(Player[i][JailReason], 4, "%s", "");
				GameTextForPlayer(i, string, 5000, 1);
                UnjailDebug[2] ++;
				nobangu[i] = false;
                UnjailDebug[2] ++;
				ClearCrime(i);
				//SetPlayerToTeamColor(i);
			}
		}
        UnjailDebug[1] ++;
	    if(Player[i][pJob] != DESEMPREGADO)
			Player[i][pContractTime] ++;
		if(GetPlayerGP(i) && Player[i][pAdmin] < 1)
	    {
	        if(ConsumingMoney[i])
	        {
                CurrentMoney[i] = GetPlayerGP(i);
				ConsumingMoney[i] = 0;
		    }
		}
	    else
	        CurrentMoney[i] = GetPlayerGP(i);
        UnjailDebug[1] ++;
		if(MedicTime[i] > 0)
		{
		    if(MedicTime[i] == 3)
		    {
		        SetPlayerInterior(i, 5);
		        GetPlayerPos(i, X,Y,Z);
		        SetPlayerCameraPos(i, X + 3, Y, Z);
		        SetPlayerCameraLookAt(i,X,Y,Z);
		    }
		    MedicTime[i] ++;
		    if(MedicTime[i] >= NeedMedicTime[i])
		    {
				new cut = 300; //Player[playerid][pLevel]*deathcost;
				GivePlayerGP(i, -cut);
				format(string, sizeof(string), "DOUTOR: Sua fatura médica custou R$ %d, tenha um bom dia.", cut);
				SendClientMessage(i, COLOR_MEDICOS, string);
				TogglePlayerControllable(i, 1);
		        MedicTime[i] = 0;
		        NeedMedicTime[i] = 0;
		    }
		}
        UnjailDebug[1] ++;
		if(WantLawyer[i] >= 1)
		{
		    CallLawyer[i] = 111111111;
		    if(WantLawyer[i] == 1)
			    SendClientMessage(i, COLOR_RED, "Você quer um advogado? (Digite sim ou não)");

			WantLawyer[i] ++;
			if(WantLawyer[i] == 8)
			    SendClientMessage(i, COLOR_RED, "Você quer um advogado? (Digite sim ou não)");

            if(WantLawyer[i] == 15)
			    SendClientMessage(i, COLOR_RED, "Você quer um advogado? (Digite sim ou não)");

			if(WantLawyer[i] == 20)
			{
			    SendClientMessage(i, COLOR_RED, "Não há advogados, tempo de detenção iniciado.");
			    WantLawyer[i] = 0;
			    CallLawyer[i] = 0;
			}
		}
        UnjailDebug[1] ++;
		if(PlayerTazeTime[i] >= 1)
		{
		    PlayerTazeTime[i] += 1;
		    if(PlayerTazeTime[i] == 15)
                PlayerTazeTime[i] = 0;

		    else
		    {
		        new Float:angle;
				GetPlayerFacingAngle(i, angle);
				SetPlayerFacingAngle(i, angle + 90);
		    }
		}
        UnjailDebug[1] ++;
        if(PlayerDrunk[i] >= 5)
		{
		    PlayerDrunkTime[i] += 1;
		    if(PlayerDrunkTime[i] == 5)
		    {
		        PlayerDrunkTime[i] = 0;
		        new Float:angle;
				GetPlayerFacingAngle(i, angle);
				if(IsPlayerInAnyVehicle(i))
				{
					if(GetPlayerState(i) == 2)
				    {
						SetVehicleZAngle(GetPlayerVehicleID(i), angle + 25);
					}
				}
				else
				{
					ApplyAnimation(i,"PED", "WALK_DRUNK",3.0,0,1,0,0,0);
				}
		    }
		}
        UnjailDebug[1] ++;
		if(PlayerStoned[i] >= 2)
		{
	        PlayerStoned[i] += 1;
	        FixCamera[i]++;
		    if(PlayerStoned[i] == 10)
		    {
		        PlayerStoned[i] = 2;
		        FixCamera[i]=0;
		        new Float:angle;
				GetPlayerFacingAngle(i, angle);
				if(!IsPlayerInAnyVehicle(i))
				{
				    SetPlayerFacingAngle(i, angle + 90);
				    new chapado = random(3);
				    if(chapado == 0)
					{
				       ApplyAnimation(i,"SMOKING","M_smk_in",4.1,0,1,1,1,1);
		 	           ApplyAnimation(i,"SMOKING","M_smk_in",4.1,0,1,1,1,1);
		 	        }
				}
		    }
			else
			{
               if(FixCamera[i] > 3)
				{
					KillTimer(DrunkTime[i]);
					SetCameraBehindPlayer(i);
				}
			}
		}
        UnjailDebug[1] ++;
		if(Player[i][pCarTime] > 0)
	        Player[i][pCarTime] -= 1;

        UnjailDebug[1] ++;
		if(BoxWaitTime[i] > 0)
		{
		    if(BoxWaitTime[i] >= BoxDelay)
			{
			    BoxDelay = 0;
				BoxWaitTime[i] = 0;
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				GameTextForPlayer(i, "~g~Partida iniciada", 5000, 1);
				TogglePlayerControllable(i, 1);
				RoundStarted = 1;
			}
		    else
			{
			    format(string, sizeof(string), "%d", BoxDelay - BoxWaitTime[i]);
				GameTextForPlayer(i, string, 1500, 6);
				BoxWaitTime[i] += 1;
			}
		}
        UnjailDebug[1] ++;
		if(RoundStarted > 0)
		{
		    if(PlayerBoxing[i] > 0)
		    {
		        new trigger = 0;
		        new Lost = 0;
	        	new Float:angle;
	            new Float:health;
				GetPlayerHealth(i, health);
	            if(health < 12)
				{
				    if(i == Boxer1) { Lost = 1; trigger = 1; }
		            else if(i == Boxer2) { Lost = 2; trigger = 1; }
				}
		        if(health < 28) { GetPlayerFacingAngle(i, angle); SetPlayerFacingAngle(i, angle + 85); }
		        if(trigger)
		        {
		            new winner[MAX_PLAYER_NAME];
		            new loser[MAX_PLAYER_NAME];
		            new titel[MAX_PLAYER_NAME];
		            if(Lost == 1)
		            {
		                if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
		                {
				        	SafeSetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SafeSetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
				        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
		                	GetPlayerName(Boxer1, loser, sizeof(loser));
		                	GetPlayerName(Boxer2, winner, sizeof(winner));
	                		if(Player[Boxer1][pJob] == LUTADOR) { Player[Boxer1][pLoses] += 1; }
							if(Player[Boxer2][pJob] == LUTADOR) { Player[Boxer2][pWins] += 1; }
		                	if(TBoxer < 255)
		                	{
		                	    if(IsPlayerConnected(TBoxer))
		                	    {
			                	    if(TBoxer != Boxer2)
			                	    {
			                	        if(Player[Boxer2][pJob] == LUTADOR)
			                	        {
			                	            TBoxer = Boxer2;
			                	            GetPlayerName(TBoxer, titel, sizeof(titel));
				                	        new nstring[MAX_PLAYER_NAME];
											format(nstring, sizeof(nstring), "%s", titel);
											strmid(TitelName, nstring, 0, strlen(nstring), 255);
				                	        Titel[TitelWins] = Player[TBoxer][pWins];
				                	        Titel[TitelLoses] = Player[TBoxer][pLoses];
				                	        SaveBoxer();
						                	format(string, sizeof(string), "Boxe News: %s ganhou uma luta contra o campeão %s.",  titel, loser);
											SendClientMessageToAll(COLOR_WHITE,string);
			                	        }
			                	        else
			                	            SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "Você irá ser o Campeão se você for um Boxer !");
									}
									else
									{
									    GetPlayerName(TBoxer, titel, sizeof(titel));
									    format(string, sizeof(string), "Boxe News: O campeão de Boxe %s ganhou uma Luta sobre %s",  titel, loser);
										SendClientMessageToAll(COLOR_WHITE,string);
										Titel[TitelWins] = Player[TBoxer][pWins];
			                	        Titel[TitelLoses] = Player[Boxer2][pLoses];
			                	        SaveBoxer();
									}
								}
							}//TBoxer
							format(string, sizeof(string), "Você perdeu uma luta para %s.", winner);
							SendClientMessage(Boxer1, COLOR_LIGHTBLUE, string);
							GameTextForPlayer(Boxer1, "~r~você perdeu", 3500, 1);
							format(string, sizeof(string), "Você venceu uma luta sobre %s.", loser);
							SendClientMessage(Boxer2, COLOR_LIGHTBLUE, string);
							GameTextForPlayer(Boxer2, "~g~você venceu", 3500, 1);
							if(GetPlayerHealth(Boxer1, health) < 20)
							{
							    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "Você sente esgotado a partir da Luta, vá comer em algum lugar.");
							    SetPlayerHealth(Boxer1, 30.0);
							}
							else
							{
							    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "Você se sente perfeito, mesmo depois da Luta.");
							    SetPlayerHealth(Boxer1, 50.0);
							}
							if(GetPlayerHealth(Boxer2, health) < 20)
							{
							    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "Você sente esgotado a partir da Luta, vá comer em algum lugar.");
						    	SetPlayerHealth(Boxer2, 30.0);
							}
							else
							{
							    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "Você se sente perfeito, mesmo depois da Luta.");
							    SetPlayerHealth(Boxer2, 50.0);
							}
                            GameTextForPlayer(Boxer1, "~g~fim de partida", 5000, 1); GameTextForPlayer(Boxer2, "~g~fim de partida", 5000, 1);
							if(Player[Boxer2][pJob] == LUTADOR) { Player[Boxer2][pBoxSkill] += 1; }
							PlayerBoxing[Boxer1] = 0;
							PlayerBoxing[Boxer2] = 0;
						}
		            }
		            else if(Lost == 2)
		            {
		                if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
		                {
				        	SafeSetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SafeSetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
				        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
		                	GetPlayerName(Boxer1, winner, sizeof(winner));
		                	GetPlayerName(Boxer2, loser, sizeof(loser));
	                		if(Player[Boxer2][pJob] == LUTADOR) { Player[Boxer2][pLoses] += 1; }
							if(Player[Boxer1][pJob] == LUTADOR) { Player[Boxer1][pWins] += 1; }
		                	if(TBoxer < 255)
		                	{
		                	    if(IsPlayerConnected(TBoxer))
		                	    {
			                	    if(TBoxer != Boxer1)
			                	    {
			                	        if(Player[Boxer1][pJob] == LUTADOR)
			                	        {
				                	        TBoxer = Boxer1;
				                	        GetPlayerName(TBoxer, titel, sizeof(titel));
				                	        new nstring[MAX_PLAYER_NAME];
											format(nstring, sizeof(nstring), "%s", titel);
											strmid(TitelName, nstring, 0, strlen(nstring), 255);
				                	        Titel[TitelWins] = Player[TBoxer][pWins];
				                	        Titel[TitelLoses] = Player[TBoxer][pLoses];
				                	        SaveBoxer();
						                	format(string, sizeof(string), "Boxe News: %s ganhou uma Luta sobre o Campeão %s e agora é o Novo Campeão de Boxe.",  titel, loser);
											SendClientMessageToAll(COLOR_WHITE,string);
										}
			                	        else
			                	            SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "Você teria sido o campeão se você tivesse o emprego de Boxer !");
									}
									else
									{
									    GetPlayerName(TBoxer, titel, sizeof(titel));
									    format(string, sizeof(string), "Boxe News: Boxe Champion %s ganhou a luta contra o %s.",  titel, loser);
										SendClientMessageToAll(COLOR_WHITE,string);
										Titel[TitelWins] = Player[TBoxer][pWins];
			                	        Titel[TitelLoses] = Player[Boxer1][pLoses];
			                	        SaveBoxer();
									}
								}
							}//TBoxer
							format(string, sizeof(string), "Você perdeu a luta contra o %s.", winner);
							SendClientMessage(Boxer2, COLOR_LIGHTBLUE, string);
							GameTextForPlayer(Boxer2, "~r~você perdeu", 3500, 1);
							format(string, sizeof(string), "Você venceu a luta contra o %s.", loser);
							SendClientMessage(Boxer1, COLOR_LIGHTBLUE, string);
							GameTextForPlayer(Boxer1, "~g~você venceu", 3500, 1);
							if(GetPlayerHealth(Boxer1, health) < 20)
							{
							    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "Você sente esgotado a partir da Luta, vá comer em algum lugar.");
							    SetPlayerHealth(Boxer1, 30.0);
							}
							else
							{
							    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, "Você se sente perfeito, mesmo depois da Luta.");
							    SetPlayerHealth(Boxer1, 50.0);
							}
							if(GetPlayerHealth(Boxer2, health) < 20)
							{
							    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "Você sente esgotado a partir da Luta, vá comer em algum lugar.");
						    	SetPlayerHealth(Boxer2, 30.0);
							}
							else
							{
							    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, "Você se sente perfeito, mesmo depois da Luta.");
							    SetPlayerHealth(Boxer2, 50.0);
							}
                            GameTextForPlayer(Boxer1, "~g~fim de partida", 5000, 1); GameTextForPlayer(Boxer2, "~g~fim de partida", 5000, 1);
							if(Player[Boxer1][pJob] == LUTADOR) { Player[Boxer1][pBoxSkill] += 1; }
							PlayerBoxing[Boxer1] = 0;
							PlayerBoxing[Boxer2] = 0;
						}
		            }
		            InRing = 0;
		            RoundStarted = 0;
		            Boxer1 = 255;
		            Boxer2 = 255;
		            TBoxer = 255;
		            trigger = 0;
		        }
		    }
		}
        UnjailDebug[1] ++;
		if(StartingPaintballRound == 1 && AnnouncedPaintballRound == 0)
		{
		    AnnouncedPaintballRound = 1;
		    if(PlayerPaintballing[i] != 0)
		        SendClientMessage(i, COLOR_YELLOW, "O paintball irá ser anunciado ao passar de 15 segundos.");
		}
        UnjailDebug[1] ++;
		if(StartingKartRound == 1 && AnnouncedKartRound == 0)
		{
		    AnnouncedKartRound = 1;
		    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		        SendClientMessage(i, COLOR_YELLOW, "A corrida irá ser anunciada ao passar de 15 segundos.");
		}
        UnjailDebug[1] ++;
		if(EndingKartRound == 1)
		{
		    if(PlayerKarting[i] != 0 && PlayerInKart[i] != 0)
		    {
		        DisablePlayerCheckpoint(i);
		        CP[i] = 0;
		    }
		}
        UnjailDebug[1] ++;
		if(TempoPedido[i] > 0)
		{
		    if(TempoPedido[i] == 60)
			{
				TempoPedido[i] = 0;
				SetPlayerMarkerForPlayer(i, PedidoAceito[i], 0xFFFFFF00);
				SetPlayerMarkerForPlayer(i, PedidoAceito[i], 0xFFFFFF00);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				GameTextForPlayer(i, "~r~checkpoint finalizado", 2500, 1);
			}
		    else
			{
			    format(string, sizeof(string), "%d", 60 - TempoPedido[i]);
				GameTextForPlayer(i, string, 1500, 6);
				TempoPedido[i] += 1;
			}
		}
        UnjailDebug[1] ++;
		if(PlayerCuffed[i] == 1)
		{
		    if(PlayerCuffedTime[i] <= 0)
		    {
		        TogglePlayerControllable(i, 1);
		        PlayerCuffed[i] = 0;
		        PlayerCuffedTime[i] = 0;
		        PlayerTazeTime[i] = 1;
		    }
		    else
		    {
                TogglePlayerControllable(i, 0);
		        PlayerCuffedTime[i] -= 1;
		    }
		}
        UnjailDebug[1] ++;
		if(PlayerCuffed[i] == 2 || PlayerCuffed[i] == 3)
		{
		    if(PlayerCuffedTime[i] <= 0)
		    {
		        GameTextForPlayer(i, "~r~Você se livrou das algemas, corra!", 2500, 1);
		        PlayerCuffed[i] = 0;
		        PlayerCuffedTime[i] = 0;
                SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
                RemovePlayerAttachedObject(i, 7);
                if(Camburao[i])
                {
                    Descongelar(i);
                    Camburao[i] = false;
                }
		    }
		    else
		        PlayerCuffedTime[i] --;

		}
        UnjailDebug[1] ++;
		if(PlayerCuffed[i] == 3)
		{
		    if(PlayerCuffedTime[i] <= 0)
		    {
		        GameTextForPlayer(i, "~r~Você quebrou as algemas, libertado!", 2500, 1);
		        TogglePlayerControllable(i, 1);
		        PlayerCuffed[i] = 0;
		        PlayerCuffedTime[i] = 0;
		    }
		    else
		        PlayerCuffedTime[i] --;

		}
        UnjailDebug[1] ++;
		if(Anuncio > 0)
			Anuncio --;
        UnjailDebug[1] ++;
		if(InGZ[i] > 0)
			InGZ[i] --;
        UnjailDebug[1] ++;
		if(Morrendo[i] > 0)
		    Morrendo[i]--;
        UnjailDebug[1] ++;
        if(NoTaxi[i][0] == 1)
        {
            NoTaxi[i][1] += TaxistaPreco[i];
            if(GetPlayerGP(i) < NoTaxi[i][1])
            {
                SendClientMessage(i, COLOR_LIGHTRED, "A corrida foi finalizada, pois você não pode pagá-la.");
                RemovePlayerFromVehicle(i);
            }

            format(string, sizeof(string), "~r~R$ %d",NoTaxi[i][1]);
		    GameTextForPlayer(i, string, 1000, 6);
		    GameTextForPlayer(NoTaxi[i][2], string, 1000, 6);
		}
        UnjailDebug[1] ++;
        if(Encontrando[i] > 0)
        {
            Encontrando[i]--;
			if(Encontrando[i] == 15)
			{
			    SetPlayerMarkerForPlayer(i, Procurado[i], 0xFF0000BB);
			    SetPlayerMarkerForPlayer(i, Procurado[i], 0xFF0000BB);
		    }
			else if(Encontrando[i] == 10)
			{
			    SetPlayerMarkerForPlayer(i, Procurado[i], 0xFF000077);
			    SetPlayerMarkerForPlayer(i, Procurado[i], 0xFF000077);
		    }
			else if(Encontrando[i] == 5)
			{
			    SetPlayerMarkerForPlayer(i, Procurado[i], 0xFF000033);
			    SetPlayerMarkerForPlayer(i, Procurado[i], 0xFF000033);
		    }
			else if(Encontrando[i] == 1)
			{
			    SetPlayerMarkerForPlayer(i, Procurado[i], 0xFFFFFF00);
			    SetPlayerMarkerForPlayer(i, Procurado[i], 0xFFFFFF00);
		    }
        }
        UnjailDebug[1] ++;
		if(Player[i][pLastSave] <= 0)
	        Player[i][pLastSave] = 0;
	    else
	        Player[i][pLastSave] -= 1;
        UnjailDebug[1] ++;
        if(NoHospital[i])
        {
            NoHospital[i]--;
            if(!NoHospital[i])
            {
                new rand;
	    	    rand = random(sizeof(HospSpawns));
    	        SafeSetPlayerPos(i, HospSpawns[rand][0], HospSpawns[rand][1], HospSpawns[rand][2]);
				TogglePlayerControllable(i, true);
                SetCameraBehindPlayer(i);
                SetPlayerHealth(i, 50.0);
                SendClientMessage(i, 0xFF9680FF, "[HOSPITAL] Você está recuperado. Tome mais cuidado!");
                ClearAnimations(i);
                DeletePVar(i, "Hospital");
            }
        }
        Player[i][pLogedTime] += 1;
        UnjailDebug[1] ++;
	    /*if(CellTime[i] > 0)
		{
			if(Mobile[Mobile[i]] == 255 && CellTime[i] == 5)
			{
			    if(IsPlayerConnected(Mobile[i]))
			    {
					new called[MAX_PLAYER_NAME];
					GetPlayerName(Mobile[i], called, sizeof(called));
					format(string, sizeof(string), "O celular de %s está tocando.", PlayerGetName(Mobile[i]));
					RingTone[Mobile[i]] = 10;
					ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}
		} */
        UnjailDebug[1] ++;
        if(Player[i][pFishes] <= 0)
	        Player[i][pFishes] = 0;
	    else
	        Player[i][pFishes] -= 1;
        UnjailDebug[1] ++;
        CheckAlarmArea(i);
        UnjailDebug[0] ++;
	}
    UnjailDebug[0] = -1;
}

public CheckGas()
{
    new engine, lights, alarm, doors, bonnet, boot, objective,
        Float:health,
        string[128], vid,
        Float:vLastSpeed[MAX_VEHICLES];

    //PlayerSide
	foreach(new i: Player)
    {
   	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER || GetPlayerState(i) == PLAYER_STATE_PASSENGER)
        {
            vid = GetPlayerVehicleID(i);
        	if(VehicleInfo[vid][vGas] > 0)
            {
	   		    if(VehicleInfo[vid][vGas] < 11)
                    if(VehicleInfo[vid][vEngine])
					   PlayerPlaySound(i, 1085, 0.0, 0.0, 0.0);
            }
            else
	       	    GameTextForPlayer(i,"~w~~n~~n~~n~~n~~n~~n~~n~~n~ve¢culo sem combust¢vel", 1500, 6);

    		new HGG[265]; new Float:Can;
    		GetVehicleHealth(vid, Can);
    		GetPlayerPos(i,Xa,Ya,Za);
    		//KMH = floatsqroot(floatpower(floatabs(floatsub(Xa,Xb[i])),2)+floatpower(floatabs(floatsub(Ya,Yb[i])),2)+floatpower(floatabs(floatsub(Za,Zb[i])),2));
    		//KMH *= 4.5;
            KMH = GetPlayerSpeed(i);

    		if(floatround(KMH) > 500)
    			KMH = 0.0;

    		Player[i][LastSpeed] = KMH;
            vLastSpeed[vid] = KMH;

            format(string, sizeof(string), "~p~Gasolina: ~w~%d", VehicleInfo[vid][vGas]);
    		format(HGG, sizeof(HGG), "~b~~h~~h~Veiculo:~w~ %s ~n~~g~~h~Velocidade: ~w~%0.0f km/h~n~~n~%s~n~~r~~h~Lataria: ~w~%.2f", vehName[GetVehicleModel(GetPlayerVehicleID(i))-400], KMH,string, Can);
    		TextDrawSetString(HUDTexts[i], HGG);

    	    if(SeeHUD[i] == false)
    	    {
    	        SeeHUD[i] = true;
    			TextDrawShowForPlayer(i, HealthBar[i]);
    			TextDrawShowForPlayer(i, LowHealthLine);
    	        TextDrawShowForPlayer(i, HUDTexts[i]);
    			TextDrawShowForPlayer(i, Text:Background);
    			TextDrawShowForPlayer(i, Text:Topbar);
    			TextDrawShowForPlayer(i, Text:Leftbar);
    			TextDrawShowForPlayer(i, Text:Bottombar);
    			TextDrawShowForPlayer(i, Text:Rightbar);
    			TextDrawShowForPlayer(i, Text:SpeedBarBackground);
    			TextDrawShowForPlayer(i, Text:HealthBarBackground);
    		}

            if(KMH < 1)
                TextDrawHideForPlayer(i, SpeedBar[i]);
    		else if(KMH >= 250)
            {
    		  //TextDrawTextSize(SpeedBar[i], 603.000000, 0.000000);
                TextDrawTextSize(SpeedBar[i], SPEEDO_MAX, 0.000000);
                TextDrawShowForPlayer(i, SpeedBar[i]);
            }
            else
            {
    		  //TextDrawTextSize(SpeedBar[i], floatadd(534.0, floatdiv(KMH, 3.9000000)), 0.000000);
                TextDrawTextSize(SpeedBar[i], floatlerp(SPEEDO_MIN, SPEEDO_MAX, (KMH / 250.0)), 0);
                TextDrawShowForPlayer(i, SpeedBar[i]);
            }

    		if(Can < 1)
    			TextDrawTextSize(HealthBar[i], SPEEDO_MIN, 0.000000);
            else if(Can >= 1000)
    			TextDrawTextSize(HealthBar[i], SPEEDO_MAX, 0.000000);
    		else
                TextDrawTextSize(HealthBar[i], floatlerp(SPEEDO_MIN, SPEEDO_MAX, (Can / 1000.0)), 0);
    		  //TextDrawTextSize(HealthBar[i], floatadd(534.0, floatdiv(Can, 14.6000000)), 0.000000);

    		TextDrawShowForPlayer(i, HealthBar[i]);
    	}
    	else
    	{
    	    if(SeeHUD[i] == true)
    	    {
    	        SeeHUD[i] = false;
    			TextDrawHideForPlayer(i, Text:HUDTexts[i]);
    			TextDrawHideForPlayer(i, Text:SpeedBar[i]);
    			TextDrawHideForPlayer(i, Text:HealthBar[i]);
    			TextDrawHideForPlayer(i, Text:Background);
    			TextDrawHideForPlayer(i, Text:Topbar);
    			TextDrawHideForPlayer(i, Text:Leftbar);
    			TextDrawHideForPlayer(i, Text:Bottombar);
    			TextDrawHideForPlayer(i, Text:Rightbar);
    			TextDrawHideForPlayer(i, Text:SpeedBarBackground);
    			TextDrawHideForPlayer(i, Text:HealthBarBackground);
    			TextDrawHideForPlayer(i, Text:LowHealthLine);
    		}
        }
		//GetPlayerPos(i,Xb[i],Yb[i],Zb[i]),
        Xb[i] = Xa;
        Yb[i] = Ya;
        Zb[i] = Za;
	}

	//VehicleSide
    for(new vehicleid = 1; vehicleid < MAX_VEHICLES; vehicleid++)
    {
        if(!IsValidVehicle(vehicleid))
            continue;

        if(!AllowExplosions)
        {
            GetVehicleHealth(vehicleid, health);
        	if(health < 280)
        	{
                GetVehicleParams(vehicleid);
        	    SetVehicleParamsEx(vehicleid, false, false, false, doors, bonnet, boot, objective);
        		SetVehicleHealth(vehicleid, 280);
                VehicleInfo[vid][vEngine] = false;
    		}
        }

		if(!VehicleInfo[vehicleid][vUseGas])
            continue;
        if(VehicleInfo[vehicleid][vGas] < 1)
        {
            GetVehicleParams(vehicleid);
    	    SetVehicleParamsEx(vehicleid, false, false, false, doors, bonnet, boot, objective);
            VehicleInfo[vid][vEngine] = false;
            continue;
        }
        if(!VehicleInfo[vehicleid][vEngine])
            continue;

        if(VehicleInfo[vehicleid][vGas] > GasMax)
            VehicleInfo[vehicleid][vGas] = GasMax;

        if(vLastSpeed[vehicleid] >= 10.0)
            VehicleInfo[vehicleid][vGasTemp] += 2;
        else
            VehicleInfo[vehicleid][vGasTemp] ++;

	    if(VehicleInfo[vehicleid][vGasTemp] >= 24)
	    {
	        VehicleInfo[vehicleid][vGasTemp] -= 24;
	    	VehicleInfo[vehicleid][vGas] --;
            if(VehicleInfo[vehicleid][vGas] == 0)
            {
                GetVehicleParams(vehicleid);
        	    SetVehicleParamsEx(vehicleid, false, false, false, doors, bonnet, boot, objective);
                VehicleInfo[vid][vEngine] = false;
            }
		}
    }
	return true;
}

public Fillup(playerid, correctvid)
{
    if(!IsPlayerInVehicle(playerid, correctvid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você saiu do veículo.");

    new VID;
    new FillUp;
    new string[128];
    VID = GetPlayerVehicleID(playerid);
    FillUp = GasMax - VehicleInfo[VID][vGas];
	if(Refueling[playerid] == 1)
    {
		if(GetPlayerGP(playerid) >= floatround(FillUp * BizPostoPrice))
		{
			VehicleInfo[VID][vGas] = GasMax;
			FillUp = floatround(FillUp * BizPostoPrice);
		    format(string,sizeof(string),"Veículo abastecido por: R$ %d.",FillUp);
		    SendClientMessage(playerid,COLOR_LIGHTBLUE,string);

			GivePlayerGP(playerid, -FillUp);
            GiveBizMoney(Biz_Posto, FillUp);

			Refueling[playerid] = 0;
            SetEngine(VID, true);
		}
	   	else
	   	{
	   	    format(string,sizeof(string),"[ERRO]:{FFFFFF} Dinheiro insuficiente para reabastecer, o custo é de R$ %d.",FillUp);
		    SendClientMessage(playerid,COLOR_RED,string);
	   	}
 	}
	return true;
}

public SetPlayerWeapons(playerid)
{
	if(IsPlayerConnected(playerid))
	{
/*	    if(PlayerPaintballing[playerid] == 0)
	    	ResetPlayerWeapons(playerid);*/

	    if(Player[playerid][pJailed] != 1)
	    {
            if(Player[playerid][pPacoteArmas] != 0)
			{
				ResetPlayerWeapons(playerid);
				if(Player[playerid][pGun1] > 0)
				{
					SafeGivePlayerWeapon(playerid, Player[playerid][pGun1], 500);
				}
				if(Player[playerid][pGun2] > 0)
				{
					SafeGivePlayerWeapon(playerid, Player[playerid][pGun2], 500);
				}
				if(Player[playerid][pGun3] > 0)
				{
					SafeGivePlayerWeapon(playerid, Player[playerid][pGun3], 500);
				}
				if(Player[playerid][pGun4] > 0)
				{
					SafeGivePlayerWeapon(playerid, Player[playerid][pGun4], 500);
				}
			}
		}
	}
}

public ResetBiz(Biz)
{
	BizzInfo[Biz][bProducts] = BizzInfo[Biz][bMaxProducts];
	BizzInfo[Biz][bTill] = floatround(BizzInfo[Biz][bBuyPrice] * 0.05) + random(floatround(BizzInfo[Biz][bBuyPrice] * 0.05));
    //5% + Random 5%
}

public:do ResetAllBiz()
{
    for(new Biz = 0; Biz < MAX_BIZ; Biz++)
        ResetBiz(Biz);
}

public PrintBizInfo(playerid, targetid)
{
	if(!IsPlayerConnected(playerid))
        return 1;

	new coordsstring[128];
	format(coordsstring, sizeof(coordsstring),"------- (%02d) %s -------", targetid, bMessage[targetid]);
	SendClientMessage(playerid, COLOR_GREEN, coordsstring);
	format(coordsstring, sizeof(coordsstring), "- {FFFFFF}Dono: {33AA33}%s", bOwner[targetid]);
	SendClientMessage(playerid, COLOR_GREEN, coordsstring);
	format(coordsstring, sizeof(coordsstring), "- {FFFFFF}Sócio: {33AA33}%s", bExtortion[targetid]);
	SendClientMessage(playerid, COLOR_GREEN, coordsstring);
    format(coordsstring, sizeof(coordsstring),"- {FFFFFF}Gasto por Produto: {33AA33}%d", BizzInfo[targetid][bBizPriceProd]);
    SendClientMessage(playerid, COLOR_GREEN, coordsstring);

    if(strlen(GetEntranceCostString(targetid)) > 1)
    {
        format(coordsstring, sizeof(coordsstring),"- {FFFFFF}%s", GetEntranceCostString(targetid));
        SendClientMessage(playerid, COLOR_GREEN, coordsstring);
    }

	format(coordsstring, sizeof(coordsstring), "- {FFFFFF}Produtos: {33AA33}%03d/%d", BizzInfo[targetid][bProducts], BizzInfo[targetid][bMaxProducts]);
	SendClientMessage(playerid, COLOR_GREEN, coordsstring);
	format(coordsstring, sizeof(coordsstring), "- {FFFFFF}Cofre: {33AA33}R$%d", BizzInfo[targetid][bTill]);
	SendClientMessage(playerid, COLOR_GREEN, coordsstring);
    return 1;
}

public ShowStats(playerid,targetid,status)
{
    //Info from playerid, show to targetid
    if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid))
	{
        new rgString[155];
        if(status == STATUS_RG)
        {
    		new atext[12];
    		if(Player[playerid][pSex] == 1)
    			atext = "Masculino";
    		else if(Player[playerid][pSex] == 2)
    			atext = "Feminino";

            SendClientMessage(targetid, 0x0E7D28FF, "------ {FFFFFF}Carteira de Identidade {0E7D28}------");
            format(rgString, sizeof(rgString), "- {FFFFFF}Registro Geral: %s", Player[playerid][pRG]);
            SendClientMessage(targetid, 0x0E7D28FF, rgString);
            format(rgString, sizeof(rgString), "- {FFFFFF}Nome: %s", ReturnPlayer(playerid));
            SendClientMessage(targetid, 0x0E7D28FF, rgString);
            format(rgString, sizeof(rgString), "- {FFFFFF}Sexo: %s", atext);
            SendClientMessage(targetid, 0x0E7D28FF, rgString);
            return true;
        }
        else if(status == STATUS_INV)
        {
            format(rgString, sizeof(rgString), "------ {FFFFFF}Inventário de %s {00A6FF}------", ReturnPlayer(playerid));
            SendClientMessage(targetid, 0x00A6FFFF, rgString);
            format(rgString, sizeof(rgString), "- {FFFFFF}Dinheiro: {00A6FF}R$%d", GetPlayerGP(playerid));
            SendClientMessage(targetid, 0x00A6FFFF, rgString);
            format(rgString, sizeof(rgString), "- {FFFFFF}Drogas: {00A6FF}%d", Player[playerid][pDrugs]);
            SendClientMessage(targetid, 0x00A6FFFF, rgString);
            format(rgString, sizeof(rgString), "- {FFFFFF}Materiais: {00A6FF}%d{FFFFFF}", Player[playerid][pMats]);
            SendClientMessage(targetid, 0x00A6FFFF, rgString);
            format(rgString, sizeof(rgString), "- {FFFFFF}Cordas: {00A6FF}%d{FFFFFF}", Player[playerid][pCorda]);
            SendClientMessage(targetid, 0x00A6FFFF, rgString);
            format(rgString, sizeof(rgString), "- {FFFFFF}Cigarros: {00A6FF}%d{FFFFFF}", Player[playerid][pCigarro]);
            SendClientMessage(targetid, 0x00A6FFFF, rgString);
            format(rgString, sizeof(rgString), "- {FFFFFF}Pastilhas: {00A6FF}%d{FFFFFF}", Player[playerid][pPastilhas]);
            SendClientMessage(targetid, 0x00A6FFFF, rgString);
            format(rgString, sizeof(rgString), "- {FFFFFF}Telefone: {00A6FF}N° %d{FFFFFF}", Player[playerid][pPnumber]);
            SendClientMessage(targetid, 0x00A6FFFF, rgString);
            format(rgString, sizeof(rgString), "- {FFFFFF}Dinamites: {00A6FF}%d{FFFFFF}", Player[playerid][pExplosivo]);
            SendClientMessage(targetid, 0x00A6FFFF, rgString);
            return true;
        }
        else if(status == STATUS_ACC)
        {
    		/*new dtext[12];
    		if(DSTPlayer[targetid] == 1)
    			dtext = "Clamídia";
    		else if(DSTPlayer[targetid] == 2)
    			dtext = "Gonorréia";
    		else if(DSTPlayer[targetid] == 3)
    			dtext = "Sífilis";
    		else
    			dtext = "Nenhuma";    */

            new estiloluta[24];
    		if(Player[playerid][pLuta] == 1)
    			estiloluta = "Cotovelo de Aço";
    		else if(Player[playerid][pLuta] == 2)
    			estiloluta = "Boxe";
    		else if(Player[playerid][pLuta] == 3)
    			estiloluta = "Aprendiz";
    		else if(Player[playerid][pLuta] == 4)
    			estiloluta = "Luta de Rua";
    		else if(Player[playerid][pLuta] == 5)
    			estiloluta = "Kung Fu";
    		else if(Player[playerid][pLuta] == 6)
    			estiloluta = "Normal";
    		else
    			estiloluta = "Nenhuma";
    		SendClientMessage(targetid, COLOR_YELLOW, "Status da Conta:");
            if(Player[playerid][pAtend] != 0)
                format(rgString, sizeof(rgString), "Nível:[%d] - Respeito:[%d/%d] - Banco:[R$%d] - BLS$: [%d] - Tempo de Jogo:[%s] - Atendimentos:[%d]", Player[playerid][pLevel], Player[playerid][pExp], (Player[playerid][pLevel] + 1) * levelexp, Player[playerid][pBank], Player[playerid][pBLSCash], Convert(Player[playerid][pConnectTime]), Player[playerid][pAtend]);
            else
                format(rgString, sizeof(rgString), "Nível:[%d] - Respeito:[%d/%d] - Banco:[R$%d] - BLS$: [%d] - Tempo de Jogo:[%s]", Player[playerid][pLevel], Player[playerid][pExp], (Player[playerid][pLevel] + 1) * levelexp, Player[playerid][pBank], Player[playerid][pBLSCash], Convert(Player[playerid][pConnectTime]));
            SendClientMessage(targetid, COLOR_WHITE, rgString);
    		format(rgString, sizeof(rgString), "Trabalho:[%s] - Organização:[%s] - Cargo:[%s - %d] - Vezes Preso:[%d] - Luta:[%s]", JobsNames[Player[playerid][pJob]], OrgsNames[GetPlayerOrg(playerid)], GetPlayerRank(playerid), Player[playerid][pRank], Player[playerid][pArrested], estiloluta);
            SendClientMessage(targetid, COLOR_WHITE, rgString);
    		format(rgString, sizeof(rgString), "Chave de Aluguel:[%d] - Chave da Casa:[%d] - Chave da Empresa:[%d] - Drogas Guardadas:[%d]", Player[playerid][pPaluguelkey], Player[playerid][pHouseKey], Player[playerid][pBizKey], Player[playerid][pDrogasGuardadas]);
    		SendClientMessage(targetid, COLOR_WHITE, rgString);
    		format(rgString, sizeof(rgString), "Mortes:[%d] - Assassinatos:[%d] - Maior Peixe:[%d] - Crimes Cometidos: [%d]", Player[playerid][pDeaths], Player[playerid][pKills], Player[playerid][pBiggestFish], Player[playerid][pCrimes]);
    		SendClientMessage(targetid, COLOR_WHITE, rgString);
            return true;
        }
        //Old RG
		new atext[12];
		if(Player[targetid][pSex] == 1)
			atext = "Masculino";
		else if(Player[targetid][pSex] == 2)
			atext = "Feminino";

		//ORG
		new ttext[24];

		if(Player[targetid][pLeader] != 0)
			format(ttext,24,"%s",OrgsNames[Player[targetid][pLeader]]);
		else if(Player[targetid][pMember] != 0)
			format(ttext,24,"%s",OrgsNames[Player[targetid][pMember]]);
		else
		    ttext = "Nenhuma";

		new dtext[12];
		if(DSTPlayer[targetid] == 1)
			dtext = "Clamídia";
		else if(DSTPlayer[targetid] == 2)
			dtext = "Gonorréia";
		else if(DSTPlayer[targetid] == 3)
			dtext = "Sífilis";
		else
			dtext = "Nenhuma";

	    new rtext[48];
		format(rtext,48,"%s",GetPlayerRank(targetid));

        //EMPREGO
        new jtext[48];
        if(Player[targetid][pJob] > 0 && Player[targetid][pJob] < sizeof(JobsNames))
	        format(jtext,48,"%s",JobsNames[Player[targetid][pJob]]);
		else
		    jtext = "Desempregado";
        //ESTILO LUTA
        new estiloluta[24];
		if(Player[targetid][pLuta] == 1)
			estiloluta = "Cotovelo de Aço";
		else if(Player[targetid][pLuta] == 2)
			estiloluta = "Boxe";
		else if(Player[targetid][pLuta] == 3)
			estiloluta = "Aprendiz";
		else if(Player[targetid][pLuta] == 4)
			estiloluta = "Luta de Rua";
		else if(Player[targetid][pLuta] == 5)
			estiloluta = "Kung Fu";
		else if(Player[targetid][pLuta] == 6)
			estiloluta = "Normal";
		else
			estiloluta = "Nenhuma";

		new bigfish = Player[targetid][pBiggestFish];
		new arrests = Player[targetid][pArrested];
		new mortes = Player[targetid][pDeaths];
		new matadas = Player[targetid][pKills];
		new drugs = Player[targetid][pDrugs];
		new cigarro = Player[targetid][pCigarro];
		new corda = Player[targetid][pCorda];
		new plano = Player[targetid][pPlano];
		new mats = Player[targetid][pMats];
		new level = Player[targetid][pLevel];
		new exp = Player[targetid][pExp];

		new prank = 0;

		if(GetPlayerOrg(targetid) != 0)
		 prank = Player[targetid][pRank];

		new pnumber = Player[targetid][pPnumber];
		new account = Player[targetid][pBank];
	    new nxtlevel = Player[targetid][pLevel]+1;
	    new expamount = nxtlevel*levelexp;
	    new aluguelkey = Player[playerid][pPaluguelkey];
		new housekey = Player[targetid][pHouseKey];
		new bizkey = Player[targetid][pBizKey];
		new atendimentos = Player[targetid][pAtend];

		new Info[6][10];
	    split(Player[playerid][pLastLogin],Info,'/');

		new Float:health;
		GetPlayerHealth(targetid,health);
		new Float:px,Float:py,Float:pz;
		GetPlayerPos(targetid, px, py, pz);
		new coordsstring[156];
		format(coordsstring, sizeof(coordsstring),"________________________________________[ Meu RG %s ]________________________________________",Player[targetid][pName]);
		SendClientMessage(playerid, COLOR_YELLOW,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Nível:[%d] - Sexo:[%s] - R$:[%d] - Banco:[R$%d] - Tempo de Jogo:[%s] - Atendimentos:[%d]", level,atext,GetPlayerGP(targetid),account, Convert(Player[targetid][pConnectTime]),atendimentos);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Trabalho:[%s] - Respeito:[%d/%d] - Tel:[%d] - Drogas:[%d] - Materiais:[%d] - Plano:[%d] - BLS$: [%d]", jtext,exp,expamount,pnumber,drugs,mats,plano,Player[targetid][pBLSCash]);
        SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Chave de aluguel:[%d] - Chave da casa:[%d] - Chave da empresa:[%d] - Organização:[%s] - Cargo:[%s - %d]",aluguelkey, housekey, bizkey,ttext,rtext,prank);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Maior Peixe:[%d] - Mortes:[%d] - Assassinatos:[%d] - Vezes Preso:[%d] - Cordas:[%d] - Cigarros:[%d] - Luta:[%s]", bigfish,mortes,matadas,arrests,corda,cigarro,estiloluta);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Drogas Guardadas:[%d] - Pastilhas no Bolso:[%d] - Ultimo Login:[%02d/%02d/%04d as %02d:%02d]", Player[targetid][pDrogasGuardadas], Player[targetid][pPastilhas], strval(Info[0]), strval(Info[1]), strval(Info[2]), strval(Info[3]), strval(Info[4]));
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);

		ReturnOrgsCommands(playerid);
		if(GetAdminLevel(playerid) > 0)
		{
		    format(coordsstring,128,"[Comandos %s] %s - Org : %s", JobsNames[Player[targetid][pJob]], JobsCommands[Player[targetid][pJob]],OrgsNames[Player[targetid][pMember]]);
			SendClientMessage(playerid, COLOR_YELLOW, coordsstring);
		}
	}
	return true;
}

public GameModeInitExitFunc()
{
	new string[128];
	format(string, sizeof(string), "~y~Life Simulation ~w~RPG");
	foreach(new i: Player)
	{
		DisablePlayerCheckpoint(i);
		gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
		GameTextForPlayer(i, string, 5000, 1);
		SetPlayerCameraPos(i,1460.0, -1324.0, 287.2);
		SetPlayerCameraLookAt(i,1374.5, -1291.1, 239.0);
		OnPlayerSave(i);
		gPlayerLogged[i] = 0;
 	}
	//SetTimer("Func", 4000, 0);
	return true;
}


public LoadBoxer()
{
	new arrCoords[3][64];
	new strFromFile2[256];
	new File: file = fopen("/RPG/logs/boxer.cfg", io_read);
	if(file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		Titel[TitelWins] = strval(arrCoords[0]);
		strmid(TitelName, arrCoords[1], 0, strlen(arrCoords[1]), 255);
		Titel[TitelLoses] = strval(arrCoords[2]);
		fclose(file);
	}
	return true;
}

public SaveBoxer()
{
	new coordsstring[128];
	format(coordsstring, sizeof(coordsstring), "%d,%s,%d", Titel[TitelWins],TitelName,Titel[TitelLoses]);
	new File: file2 = fopen("/RPG/logs/boxer.cfg", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return true;
}

public LoadConfig()
{
	if(!fexist(ConfigFile))
	{
	    Jackpot = random(30000) + 12150;
		DOF2_CreateFile(ConfigFile);
		DOF2_SetInt(ConfigFile, "Jackpot", Jackpot);
		DOF2_SetInt(ConfigFile, "Tax", 0);
        DOF2_SetInt(ConfigFile, "RG", 0);
		DOF2_SaveFile();
	    return 1;
	}
	Jackpot = DOF2_GetInt(ConfigFile, "Jackpot");
	Tax = DOF2_GetInt(ConfigFile, "Tax");
	actualRG = DOF2_GetInt(ConfigFile, "RG");
	return true;
}

stock SaveConfig()
{
	DOF2_SetInt(ConfigFile, "Jackpot", Jackpot);
	DOF2_SetInt(ConfigFile, "Tax", Tax);
	DOF2_SetInt(ConfigFile, "RG", actualRG);
	DOF2_SaveFile();
	return 1;
}

stock SaveZones()
{
	new zSaved;
   	new tmp[24];

	if(!DOF2_FileExists(ZonesFile))
 		DOF2_CreateFile(ZonesFile);

	for(new i = 0; i < MAX_TURFS; i ++)
	{
		format(tmp,24,"zone_%d",i);
		DOF2_SetInt(ZonesFile,tmp, gZonesData[i][ZoneOwner]);
		zSaved++;
	}
	for(new i = 0; i < MAX_RACEGZ; i ++)
	{
		format(tmp,24,"race_%d",i);
		DOF2_SetInt(ZonesFile,tmp, RaceGZ[i][rOwner]);
		zSaved++;
	}

	new log[128];
	format(log,128,"> Gang Zones Saved: %d <", zSaved);
	DOF2_SaveFile();
	WriteLog("server", log);
}

stock LoadZones()
{
	new zLoaded;
    new tmp[24];

	if(!DOF2_FileExists(ZonesFile))
 		DOF2_CreateFile(ZonesFile);

	for (new i = 0; i < MAX_TURFS; i++)
	{
		format(tmp,24,"zone_%d",i);
		gZonesData[i][ZoneOwner] = DOF2_GetInt(ZonesFile,tmp);
		zLoaded++;
	}
	for (new i = 0; i < MAX_RACEGZ; i++)
	{
		format(tmp,24,"race_%d",i);
		RaceGZ[i][rOwner] = DOF2_GetInt(ZonesFile, tmp);
		zLoaded++;

        //RaceMapIcon[i][0] = RaceGZ[i][rPos][2] + ((RaceGZ[i][rPos][0] - RaceGZ[i][rPos][2]) / 2.0);
        //RaceMapIcon[i][1] = RaceGZ[i][rPos][3] + ((RaceGZ[i][rPos][1] - RaceGZ[i][rPos][3]) / 2.0);

        RacePickupPos[i][0] = RaceGZ[i][rStart1][0] + ((RaceGZ[i][rStart2][0] - RaceGZ[i][rStart1][0]) / 2.0);
        RacePickupPos[i][1] = RaceGZ[i][rStart1][1] + ((RaceGZ[i][rStart2][1] - RaceGZ[i][rStart1][1]) / 2.0);
        RacePickupPos[i][2] = RaceGZ[i][rStart1][2] + ((RaceGZ[i][rStart2][2] - RaceGZ[i][rStart1][2]) / 2.0);
	}

	new log[128];
	format(log,128,"> Total Turfs Loaded: %d <", zLoaded);
	WriteLog("server", log);
}

public LoadProperty()
{
    new file[32];

    for(new h=0; h < MAX_HOUSES;h++)
    {
		format(file, sizeof(file), "/RPG/Casas/%d.ini", h);
		HouseInfo[h][hLevel] = DOF2_GetInt(file, "Level");
		format(hOwner[h],32,"%s", DOF2_GetString(file, "Dono"));
	    HouseInfo[h][hDate] = DOF2_GetInt(file, "Data");
	    HouseInfo[h][hEntrancex] = DOF2_GetFloat(file, "EntradaX");
	    HouseInfo[h][hEntrancey] = DOF2_GetFloat(file, "EntradaY");
	    HouseInfo[h][hEntrancez] = DOF2_GetFloat(file, "EntradaZ");
	    HouseInfo[h][hExitx] = DOF2_GetFloat(file, "SaidaX");
	    HouseInfo[h][hExity] = DOF2_GetFloat(file, "SaidaY");
	    HouseInfo[h][hExitz] = DOF2_GetFloat(file, "SaidaZ");
	    format(hDiscription[h],32,"%s", DOF2_GetString(file, "Descricao"));
	    HouseInfo[h][hValue] = DOF2_GetInt(file, "Valor");
	    HouseInfo[h][hHel] = DOF2_GetInt(file, "AttLife");
	    HouseInfo[h][hArm] = DOF2_GetInt(file, "AttColete");
	    HouseInfo[h][hInt] = DOF2_GetInt(file, "Interior");
	    HouseInfo[h][hLock] = DOF2_GetInt(file, "Trancada");
	    HouseInfo[h][hOwned] = DOF2_GetInt(file, "Comprada");
	    HouseInfo[h][hRent] = DOF2_GetInt(file, "Aluguel");
	    HouseInfo[h][hRentabil] = DOF2_GetInt(file, "Alugavel");
	    HouseInfo[h][hTakings] = DOF2_GetInt(file, "Cofre");
	    HouseInfo[h][hVec] = DOF2_GetInt(file, "Carro");
	    HouseInfo[h][hVcol1] = DOF2_GetInt(file, "Cor1");
	    HouseInfo[h][hVcol2] = DOF2_GetInt(file, "Cor2");
	    HouseInfo[h][hWorld] = DOF2_GetInt(file, "VW");
	    HouseInfo[h][hVpos][0] = DOF2_GetFloat(file, "CarroX");
	    HouseInfo[h][hVpos][1] = DOF2_GetFloat(file, "CarroY");
	    HouseInfo[h][hVpos][2] = DOF2_GetFloat(file, "CarroZ");
	    HouseInfo[h][hVpos][3] = DOF2_GetFloat(file, "CarroR");

        /*if(HouseInfo[h][hValue] < 50000)
            printf("Casa %d, preço: %d", h, HouseInfo[h][hValue]);*/

	    if(HouseInfo[h][hVec] == 0) HouseInfo[h][hVec] = 405;                    //Desbugar Carros
	}
	printf("===============Houses Loaded===============");
}

public SaveProperty(h)
{
	new file[32];
	format(file, sizeof(file), "/RPG/Casas/%d.ini", h);

	if(!DOF2_FileExists(file))
	    DOF2_CreateFile(file);

    DOF2_SetInt(file, "Level", HouseInfo[h][hLevel]);
    DOF2_SetString(file, "Dono",hOwner[h]);
    DOF2_SetInt(file, "Data", HouseInfo[h][hDate]);
    DOF2_SetFloat(file, "EntradaX", HouseInfo[h][hEntrancex]);
    DOF2_SetFloat(file, "EntradaY", HouseInfo[h][hEntrancey]);
    DOF2_SetFloat(file, "EntradaZ", HouseInfo[h][hEntrancez]);
    DOF2_SetFloat(file, "SaidaX", HouseInfo[h][hExitx]);
    DOF2_SetFloat(file, "SaidaY", HouseInfo[h][hExity]);
    DOF2_SetFloat(file, "SaidaZ", HouseInfo[h][hExitz]);
    DOF2_SetString(file, "Descricao",hDiscription[h]);
    DOF2_SetInt(file, "Valor", HouseInfo[h][hValue]);
    DOF2_SetInt(file, "AttLife", HouseInfo[h][hHel]);
    DOF2_SetInt(file, "AttColete", HouseInfo[h][hArm]);
    DOF2_SetInt(file, "Interior", HouseInfo[h][hInt]);
    DOF2_SetInt(file, "Trancada", HouseInfo[h][hLock]);
    DOF2_SetInt(file, "Comprada", HouseInfo[h][hOwned]);
    DOF2_SetInt(file, "Aluguel", HouseInfo[h][hRent]);
    DOF2_SetInt(file, "Alugavel", HouseInfo[h][hRentabil]);
    DOF2_SetInt(file, "Cofre", HouseInfo[h][hTakings]);
    DOF2_SetInt(file, "Carro", HouseInfo[h][hVec]);
    DOF2_SetInt(file, "Cor1", HouseInfo[h][hVcol1]);
    DOF2_SetInt(file, "Cor2", HouseInfo[h][hVcol2]);
    DOF2_SetInt(file, "VW", HouseInfo[h][hWorld]);
    DOF2_SetFloat(file, "CarroX", HouseInfo[h][hVpos][0]);
    DOF2_SetFloat(file, "CarroY", HouseInfo[h][hVpos][1]);
    DOF2_SetFloat(file, "CarroZ", HouseInfo[h][hVpos][2]);
    DOF2_SetFloat(file, "CarroR", HouseInfo[h][hVpos][3]);
    DOF2_SaveFile();
}

public LoadBizz()
{
    new file[32],
        Tick = GetTickCount();
    for(new h=0; h < MAX_BIZ;h++)
    {
		format(file, sizeof(file), "/RPG/Bizz/%d.ini", h);

	    BizzInfo[h][bLevelNeeded] = DOF2_GetInt(file, "Level");
	    format(bOwner[h],32,"%s", DOF2_GetString(file, "Dono"));
	    format(bMessage[h],32,"%s", DOF2_GetString(file, "Nome"));
		BizzInfo[h][bBuyPrice] = DOF2_GetInt(file, "Preço");
		format(bExtortion[h],32,"%s", DOF2_GetString(file, "Extorsao"));
		BizzInfo[h][bOwned] = DOF2_GetInt(file, "Comprada");
		BizzInfo[h][bEntranceX] = DOF2_GetFloat(file, "EntradaX");
		BizzInfo[h][bEntranceY] = DOF2_GetFloat(file, "EntradaY");
		BizzInfo[h][bEntranceZ] = DOF2_GetFloat(file, "EntradaZ");
		BizzInfo[h][bTill] = DOF2_GetInt(file, "Cofre");
		BizzInfo[h][bProducts] = DOF2_GetInt(file, "Produtos");
		BizzInfo[h][bMaxProducts] = DOF2_GetInt(file, "MaxProd");
		BizzInfo[h][bPriceProd] = DOF2_GetInt(file, "PreçoProd");
		BizzInfo[h][bBizPriceProd] = DOF2_GetInt(file, "BizPriceProd");

        BizzInfo[h][bCustomSell] = DOF2_GetBool(file, "CustomSell");
        BizzInfo[h][bCustomPrice] = DOF2_GetInt(file, "CustomPrice");
	}
	printf("Businesses Loaded. %dms", GetTickCount() - Tick);

    Tick = GetTickCount();
    LoadBizzSettings();
	printf("Businesses Settings Loaded. %dms", GetTickCount() - Tick);
}

public:do LoadBizzSettings()
{
    new file[64], str[64];

    format(file, sizeof(file), "/RPG/Bizz/Settings/Carros.ini");
    for(new i = 0; i < sizeof(BizCarrosPrice); i++)
    {
        format(str, 64, "P%d", i);
        BizCarrosPrice[i] = DOF2_GetInt(file, str);
        if(BizCarrosPrice[i] == 0)
            BizCarrosPrice[i] = 500 + (random(51) * 10);
    }

    format(file, sizeof(file), "/RPG/Bizz/Settings/Motos.ini");
    for(new i = 0; i < sizeof(BizMotosPrice); i++)
    {
        format(str, 64, "P%d", i);
        BizMotosPrice[i] = DOF2_GetInt(file, str);
        if(BizMotosPrice[i] == 0)
            BizMotosPrice[i] = 500 + (random(51) * 10);
    }

    format(file, sizeof(file), "/RPG/Bizz/Settings/Aero.ini");
    for(new i = 0; i < sizeof(BizAeroPrice); i++)
    {
        format(str, 64, "P%d", i);
        BizAeroPrice[i] = DOF2_GetInt(file, str);
        if(BizAeroPrice[i] == 0)
            BizAeroPrice[i] = 1000 + (random(76) * 10);
    }

    format(file, sizeof(file), "/RPG/Bizz/Settings/Posto.ini");
    BizPostoPrice = DOF2_GetFloat(file, "P0");
    if(BizPostoPrice == 0.0)
        BizPostoPrice = 2.0;

    format(file, sizeof(file), "/RPG/Bizz/Settings/Produtos.ini");
    BizProdutosPrice = DOF2_GetInt(file, "P0");
    if(BizProdutosPrice == 0)
        BizProdutosPrice = 10;

    format(file, sizeof(file), "/RPG/Bizz/Settings/Anuncios.ini");
    BizAnunciosPrice = DOF2_GetInt(file, "P0");
    if(BizAnunciosPrice == 0)
        BizAnunciosPrice = 100;

    format(file, sizeof(file), "/RPG/Bizz/Settings/Pedagio.ini");
    BizPedagioPrice = DOF2_GetInt(file, "P0");
    if(BizPedagioPrice == 0)
        BizPedagioPrice = 50;

    format(file, sizeof(file), "/RPG/Bizz/Settings/Loterica.ini");
    BizLotericaPrice = DOF2_GetInt(file, "P0");
    if(BizLotericaPrice == 0)
        BizLotericaPrice = 20;

    format(file, sizeof(file), "/RPG/Bizz/Settings/Telefonica.ini");
    BizTelefonicaPrice = DOF2_GetFloat(file, "P0");
    if(BizTelefonicaPrice == 0.0)
        BizTelefonicaPrice = 2.0;

    format(file, sizeof(file), "/RPG/Bizz/Settings/PaintBall.ini");
    BizPaintBallPrice = DOF2_GetInt(file, "P0");
    BizPaintBallLock = DOF2_GetBool(file, "L");
    if(BizPaintBallPrice == 0)
        BizPaintBallPrice = 500 + (random(25) * 10);

    format(file, sizeof(file), "/RPG/Bizz/Settings/Ammu1.ini");
    BizAmmu1Price = DOF2_GetInt(file, "P0");
    BizAmmu1Lock = DOF2_GetBool(file, "L");
    if(BizAmmu1Price == 0)
        BizAmmu1Price = 500 + (random(25) * 10);

    format(file, sizeof(file), "/RPG/Bizz/Settings/Ammu2.ini");
    BizAmmu2Price = DOF2_GetInt(file, "P0");
    BizAmmu2Lock = DOF2_GetBool(file, "L");
    if(BizAmmu2Price == 0)
        BizAmmu2Price = 500 + (random(25) * 10);

    format(file, sizeof(file), "/RPG/Bizz/Settings/Binco.ini");
    BizBincoPrice = DOF2_GetInt(file, "P0");
    if(BizBincoPrice == 0)
        BizBincoPrice = 50;
    return 1;
}

stock PlaySoundForPlayersInRange(soundid, Float:range, Float:x, Float:y, Float:z)
{
	foreach(new i: Player)
	{
	    if(IsPlayerInRangeOfPoint(i,range,x,y,z))
	    {
		    PlayerPlaySound(i, soundid, x, y, z);
	    }
	}
	return 1;
}

stock Elevator_Initialize()
{
	// Initializes the elevator.

	Obj_Elevator 			= CreateDynamicObject(18755, 1786.678100, -1303.459472, GROUND_Z_COORD + ELEVATOR_OFFSET, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[0] 	= CreateDynamicObject(18757, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[1] 	= CreateDynamicObject(18756, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);

	Label_Elevator          = Create3DTextLabel("{CCCCCC}Pressione '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' para usar o Elevador", 0xCCCCCCAA, 1784.9822, -1302.0426, 13.6491, 4.0, 0, 1);

	new string[128],
		Float:z;

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    Obj_FloorDoors[i][0] 	= CreateDynamicObject(18757, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);
		Obj_FloorDoors[i][1] 	= CreateDynamicObject(18756, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);

		format(string, sizeof(string), "{CCCCCC}[%s]\n{CCCCCC}Pressione '{FFFFFF}~k~~CONVERSATION_YES~{CCCCCC}' para chamar o Elevador", FloorNames[i]);

		if(i == 0)
		    z = 13.4713;
		else
		    z = 13.4713 + 8.7396 + ((i-1) * 5.45155);

		Label_Floors[i]         = Create3DTextLabel(string, 0xCCCCCCAA, 1783.9799, -1300.7660, z, 10.5, 0, 1);
		// Label_Elevator, Text3D:Label_Floors[21];
	}

	// Open ground floor doors:
	Floor_OpenDoors(0);
	Elevator_OpenDoors();

	return 1;
}

stock Elevator_Destroy()
{
	// Destroys the elevator.

	DestroyObject(Obj_Elevator);
	DestroyObject(Obj_ElevatorDoors[0]);
	DestroyObject(Obj_ElevatorDoors[1]);
	Delete3DTextLabel(Label_Elevator);

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    DestroyObject(Obj_FloorDoors[i][0]);
		DestroyObject(Obj_FloorDoors[i][1]);
		Delete3DTextLabel(Label_Floors[i]);
	}

	return 1;
}

stock Elevator_OpenDoors()
{
	// Opens the elevator's doors.

	new Float:x, Float:y, Float:z;

	GetDynamicObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_L_OPENED, y, z, DOORS_SPEED);
	MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_R_OPENED, y, z, DOORS_SPEED);

	return 1;
}

stock Elevator_CloseDoors()
{
    // Closes the elevator's doors.

    if(ElevatorState == ELEVATOR_STATE_MOVING)
	    return 0;

    new Float:x, Float:y, Float:z;

	GetDynamicObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, y, z, DOORS_SPEED);
	MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, y, z, DOORS_SPEED);

	return 1;
}

stock Floor_OpenDoors(floorid)
{
    // Opens the doors at the specified floor.

    MoveDynamicObject(Obj_FloorDoors[floorid][0], X_DOOR_L_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveDynamicObject(Obj_FloorDoors[floorid][1], X_DOOR_R_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	PlaySoundForPlayersInRange(6401, 50.0, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid) + 5.0);

	return 1;
}

stock Floor_CloseDoors(floorid)
{
    // Closes the doors at the specified floor.

    MoveDynamicObject(Obj_FloorDoors[floorid][0], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveDynamicObject(Obj_FloorDoors[floorid][1], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	PlaySoundForPlayersInRange(6401, 50.0, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid) + 5.0);

	return 1;
}

stock Elevator_MoveToFloor(floorid)
{
	// Moves the elevator to specified floor (doors are meant to be already closed).

	ElevatorState = ELEVATOR_STATE_MOVING;
	ElevatorFloor = floorid;

	// Move the elevator slowly, to give time to clients to sync the object surfing. Then, boost it up:
	MoveDynamicObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), 0.25);
    MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.25);
    MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.25);
    Delete3DTextLabel(Label_Elevator);

	ElevatorBoostTimer = SetTimerEx("Elevator_Boost", 2000, 0, "i", floorid);

	return 1;
}

public Elevator_Boost(floorid)
{
	// Increases the elevator's speed until it reaches 'floorid'
	StopObject(Obj_Elevator);
	StopObject(Obj_ElevatorDoors[0]);
	StopObject(Obj_ElevatorDoors[1]);

	MoveDynamicObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);

	return 1;
}

public Elevator_TurnToIdle()
{
	ElevatorState = ELEVATOR_STATE_IDLE;
	ReadNextFloorInQueue();

	return 1;
}

stock RemoveFirstQueueFloor()
{
	// Removes the data in ElevatorQueue[0], and reorders the queue accordingly.

	for(new i; i < sizeof(ElevatorQueue) - 1; i ++)
	    ElevatorQueue[i] = ElevatorQueue[i + 1];

	ElevatorQueue[sizeof(ElevatorQueue) - 1] = INVALID_FLOOR;

	return 1;
}

stock AddFloorToQueue(floorid)
{
 	// Adds 'floorid' at the end of the queue.

	// Scan for the first empty space:
	new slot = -1;
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(ElevatorQueue[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue[slot] = floorid;

     	// If needed, move the elevator.
	    if(ElevatorState == ELEVATOR_STATE_IDLE)
	        ReadNextFloorInQueue();

	    return 1;
	}

	return 0;
}

stock ResetElevatorQueue()
{
	// Resets the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    ElevatorQueue[i] 	= INVALID_FLOOR;
	    FloorRequestedBy[i] = INVALID_PLAYER_ID;
	}

	return 1;
}

stock IsFloorInQueue(floorid)
{
	// Checks if the specified floor is currently part of the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	    if(ElevatorQueue[i] == floorid)
	        return 1;

	return 0;
}

stock ReadNextFloorInQueue()
{
	// Reads the next floor in the queue, closes doors, and goes to it.

	if(ElevatorState != ELEVATOR_STATE_IDLE || ElevatorQueue[0] == INVALID_FLOOR)
	    return 0;

	Elevator_CloseDoors();
	Floor_CloseDoors(ElevatorFloor);

	return 1;
}

stock DidPlayerRequestElevator(playerid)
{
	for(new i; i < sizeof(FloorRequestedBy); i ++)
	    if(FloorRequestedBy[i] == playerid)
	        return 1;

	return 0;
}

stock ShowElevatorDialog(playerid)
{
	new string[512];
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(FloorRequestedBy[i] != INVALID_PLAYER_ID)
	        strcat(string, "{FF0000}");

	    strcat(string, FloorNames[i]);
	    strcat(string, "\n");
	}

	ShowPlayerDialog(playerid, DIALOG_ELEVADOR, DIALOG_STYLE_LIST, "Elevador", string, "Aceitar", "Cancelar");

	return 1;
}

stock CallElevator(playerid, floorid)
{
	// Calls the elevator (also used with the elevator dialog).

	if(FloorRequestedBy[floorid] != INVALID_PLAYER_ID || IsFloorInQueue(floorid))
	    return 0;

	FloorRequestedBy[floorid] = playerid;
	AddFloorToQueue(floorid);

	return 1;
}

stock Float:GetElevatorZCoordForFloor(floorid)
    return (GROUND_Z_COORD + FloorZOffsets[floorid] + ELEVATOR_OFFSET); // A small offset for the elevator object itself.

stock Float:GetDoorsZCoordForFloor(floorid)
	return (GROUND_Z_COORD + FloorZOffsets[floorid]);

public SaveBizz(h)
{
    new file[32];
	format(file, sizeof(file), "/RPG/Bizz/%d.ini", h);

	if(!DOF2_FileExists(file))
	    DOF2_CreateFile(file);

    DOF2_SetInt(file, "Level", BizzInfo[h][bLevelNeeded]);
    DOF2_SetString(file, "Dono",bOwner[h]);
	DOF2_SetString(file, "Nome",bMessage[h]);
	DOF2_SetInt(file, "Preço", BizzInfo[h][bBuyPrice]);
	DOF2_SetString(file, "Extorsao",bExtortion[h]);
	DOF2_SetInt(file, "Comprada", BizzInfo[h][bOwned]);
	DOF2_SetFloat(file, "EntradaX", BizzInfo[h][bEntranceX]);
	DOF2_SetFloat(file, "EntradaY", BizzInfo[h][bEntranceY]);
	DOF2_SetFloat(file, "EntradaZ", BizzInfo[h][bEntranceZ]);
	DOF2_SetInt(file, "Cofre", BizzInfo[h][bTill]);
	DOF2_SetInt(file, "Produtos", BizzInfo[h][bProducts]);
	DOF2_SetInt(file, "MaxProd", BizzInfo[h][bMaxProducts]);
	DOF2_SetInt(file, "PreçoProd", BizzInfo[h][bPriceProd]);
 	DOF2_SetInt(file, "BizPriceProd", BizzInfo[h][bBizPriceProd]);

	DOF2_SetBool(file, "CustomSell", BizzInfo[h][bCustomSell]);
	DOF2_SetInt(file, "CustomPrice", BizzInfo[h][bCustomPrice]);
	DOF2_SaveFile();
}

public:do SaveBizzSettings()
{
    new file[64], str[64];

    format(file, sizeof(file), "/RPG/Bizz/Settings/Carros.ini");
    for(new i = 0; i < sizeof(BizCarrosPrice); i++)
    {
        format(str, 64, "P%d", i);
        DOF2_SetInt(file, str, BizCarrosPrice[i]);
    }
    DOF2_SaveFile();

    format(file, sizeof(file), "/RPG/Bizz/Settings/Motos.ini");
    for(new i = 0; i < sizeof(BizMotosPrice); i++)
    {
        format(str, 64, "P%d", i);
        DOF2_SetInt(file, str, BizMotosPrice[i]);
    }
    DOF2_SaveFile();

    format(file, sizeof(file), "/RPG/Bizz/Settings/Aero.ini");
    for(new i = 0; i < sizeof(BizAeroPrice); i++)
    {
        format(str, 64, "P%d", i);
        DOF2_SetInt(file, str, BizAeroPrice[i]);
    }
    DOF2_SaveFile();

    format(file, sizeof(file), "/RPG/Bizz/Settings/Posto.ini");
    DOF2_SetFloat(file, "P0", BizPostoPrice);
    DOF2_SaveFile();

    format(file, sizeof(file), "/RPG/Bizz/Settings/Produtos.ini");
    DOF2_SetInt(file, "P0", BizProdutosPrice);
    DOF2_SaveFile();

    format(file, sizeof(file), "/RPG/Bizz/Settings/Anuncios.ini");
    DOF2_SetInt(file, "P0", BizAnunciosPrice);
    DOF2_SaveFile();

    format(file, sizeof(file), "/RPG/Bizz/Settings/Pedagio.ini");
    DOF2_SetInt(file, "P0", BizPedagioPrice);
    DOF2_SaveFile();

    format(file, sizeof(file), "/RPG/Bizz/Settings/Loterica.ini");
    DOF2_SetInt(file, "P0", BizLotericaPrice);
    DOF2_SaveFile();

    format(file, sizeof(file), "/RPG/Bizz/Settings/Telefonica.ini");
    DOF2_SetFloat(file, "P0", BizTelefonicaPrice);
    DOF2_SaveFile();

    format(file, sizeof(file), "/RPG/Bizz/Settings/PaintBall.ini");
    DOF2_SetInt(file, "P0", BizPaintBallPrice);
    DOF2_SetBool(file, "F", BizPaintBallLock);
    DOF2_SaveFile();

    format(file, sizeof(file), "/RPG/Bizz/Settings/Ammu1.ini");
    DOF2_SetInt(file, "P0", BizAmmu1Price);
    DOF2_SetBool(file, "F", BizAmmu1Lock);
    DOF2_SaveFile();

    format(file, sizeof(file), "/RPG/Bizz/Settings/Ammu2.ini");
    DOF2_SetInt(file, "P0", BizAmmu2Price);
    DOF2_SetBool(file, "F", BizAmmu2Lock);
    DOF2_SaveFile();
    return 1;
}

forward SaveAll();
public SaveAll()
{
    for(new h = 0; h < MAX_HOUSES; h++)
    {
	    SaveProperty(h);
    }

    for(new h = 0; h < MAX_BIZ; h++)
    {
		SaveBizz(h);
    }

    SaveBizzSettings();
    return true;
}

new bool:AllowPayday = true;
public SyncTime()
{
    if(ClockTime[tHour] == 0
    || ClockTime[tHour] == 3
    || ClockTime[tHour] == 6
    || ClockTime[tHour] == 12
    || ClockTime[tHour] == 15
    || ClockTime[tHour] == 18
    || ClockTime[tHour] == 21)
    {
        /*
        new textoHora[32];
        if(ClockTime[tHour] == 0)
            textoHora = "Meia-Noite";
        else if(ClockTime[tHour] == 3)
            textoHora = "3 Horas da Madrugada"
        else if(ClockTime[tHour] == 6)
            textoHora = "6 Horas da Manhã"
        else if(ClockTime[tHour] == 9)
            textoHora = "9 Horas da Manhã"
        else if(ClockTime[tHour] == 12)
            textoHora = "Meio-Dia";
        else if(ClockTime[tHour] == 15)
            textoHora = "3 Horas da Tarde";
        else if(ClockTime[tHour] == 18)
            textoHora = "6 Horas da Tarde";
        else if(ClockTime[tHour] == 21)
            textoHora == "9 Horas da Noite";
        else
            textoHora = "Algumas Horas";*/

        new textoHora[32],
            string[155],
            bool:Abastecimento = false;

        if(ClockTime[tHour] == 0
        || ClockTime[tHour] == 12)
        {
            textoHora = "e Abastecimento ";
            Abastecimento = true;
            if(ClockTime[tHour] == 0)
                actualRG = 0;
        }
        else
            textoHora = "";

        format(string, sizeof(string), "[Administração]: Teremos reset automaticamente %sde veículos dentro de 1 minuto.", textoHora);
        SendClientMessageToAll(COLOR_ADMIN, string);

        SetTimerEx("RespawnBot", 60*1000, false, "b", Abastecimento);
	}
    if(ClockTime[tHour] == 6)
    {
        PodeGuerraOrg[0] = true;
        PodeGuerraOrg[1] = true;
        SendClientMessageToAll(SERVER_INFO, "[BLS]: {FFFFFF}São 6 da manhã! Bom dia Brasil {FF0000}Life {FFFFFF}Simulation RPG!");
    }
	if(ClockTime[tHour] >= 18 && ClockTime[tHour] < 20)
	{
	    SetWorldTime(ClockTime[tHour] + 4);
	}
	else if(ClockTime[tHour] >= 20)
	{
	    SetWorldTime(ClockTime[tHour] - 20);
	}
	else
	{
	    SetWorldTime(ClockTime[tHour]);
	}
}

forward RespawnBot(bool:Abastecimento);
public RespawnBot(bool:Abastecimento)
{
	new bool:unwanted[MAX_VEHICLES];
	foreach(new player: Player)
       	if(IsPlayerInAnyVehicle(player))
			unwanted[GetPlayerVehicleID(player)] = true;
    unwanted[VeiculosMateriais[3]] = true;

	for(new car = 1; car < MAX_VEHICLES; car++)
    	if(!unwanted[car])
			SetVehicleToRespawn(car);

    BroadCast(COLOR_ADMIN, "[Administração]: Veículos inutilizados resetados pelo Sistema.");

    if(Abastecimento)
    {
        new fuelAmount = 0;
    	for(new c = 1; c < sizeof(VehicleInfo); c++)
        {
            fuelAmount += GasMax - VehicleInfo[c][vGas];
    		VehicleInfo[c][vGas] = GasMax;
            VehicleInfo[c][vGasTemp] = 0;
        }
        GiveBizMoneyEx(Biz_Posto, floatround(fuelAmount * BizPostoPrice));

        BroadCast(COLOR_ADMIN, "[Administração]: Todos os veículos foram reabastecidos pelo Sistema.");
    }
    return 1;
}

new thestring[256];
/*forward RainStarter();
public RainStarter()
{
	new CurrentStats[3];
	GetTimeFix(CurrentStats[0], CurrentStats[1], CurrentStats[2]);

	foreach(new i: Player)
        SetPlayerTime(i, CurrentStats[0], CurrentStats[1]);

    ScoreUpdate();

    if(!allowRain)
        return 1;

	if(CurrentStats[1] == 15) //Finalizar Chuva
	{
		if(CurrentWeather == ClimaChuva[0] || CurrentWeather == ClimaChuva[1])
		{
			new TrocarTempo = random(sizeof(ClimasNormais));
			ChangeWeather(ClimasNormais[TrocarTempo]);
			SendClientMessageToAll(COLOR_OOC, "[Atenção]: A chuva passou.");
		}
	}
	else if(CurrentStats[1] == 45) //Talvez Iniciar Chuva
	{
		if(CurrentWeather != ClimaChuva[0] && CurrentWeather != ClimaChuva[1])
		{
			new TrocarTempo = SortearNumero(10);
			if(TrocarTempo == 1)
			{
			    new NomeClima[32];
				TrocarTempo = random(sizeof(ClimaChuva));
				ChangeWeather(ClimaChuva[TrocarTempo]);

				if(TrocarTempo == 0) format(NomeClima, 32, "uma tempestade");
				else format(NomeClima, 32, "a Chover");

				format(thestring, 256, "[Atenção]: Começou %s! Fique abrigado para não ficar doente!", NomeClima);
				SendClientMessageToAll(COLOR_OOC, thestring);
			}
		}
	}
	return 1;
}*/

forward CheckPayDay();
public CheckPayDay()
{
	new CurrentStats[3];
	GetTimeFix(CurrentStats[0], CurrentStats[1], CurrentStats[2]);

	if(CurrentStats[1] == 0 && AllowPayday)
	{
		new text[24];
		if(CurrentStats[0] >= 0 && CurrentStats[0] < 6)
		    text = "Madrugada";
		else if(CurrentStats[0] >= 6 && CurrentStats[0] < 12)
		    text = "Manhã";
		else if(CurrentStats[0] >= 12 && CurrentStats[0] < 18)
		    text = "Tarde";
		else
		    text = "Noite";

		format(thestring, sizeof(thestring), "|Life Simulation|: Hora do pagamento (%d da %s)",ClockTime[tHour], text);
		BroadCast(COLOR_MARINE,thestring);
		//SetWorldTime(ClockTime[tHour] + 3);

	    AllowPayday = false;
		SetTimer("AllowPD",  5 * 60 * 1000, false);
        SetTimer("SyncTime", 7 *      1000, false);

		PayDay();
        BizPayDay();
	}
	return 1;
}

/*forward ChecarChuva();
public ChecarChuva()
{
	new Float:pPos[4], Gripe;
	foreach(new playerid: Player)
	{
	    if(GetPlayerInterior(playerid) != 0) continue;
	    else if(IsPlayerInAnyVehicle(playerid) && !IsABike(GetVehicleModel(GetPlayerVehicleID(playerid)))) continue;

	    GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
	    MapAndreas_FindZ_For2DCoord(pPos[0], pPos[1], pPos[3]);

	    if(pPos[2] > pPos[3])
	    {
	        if(Player[playerid][pCapaChuva]) Gripe = random(40);
	        else Gripe = random(20);

	        if(Gripe == 10)
	        {
	            SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você pegou Gripe. Procure um Médico.");
	            Player[playerid][pDoenca] = DoencaGripe;
	        }
	    }
	}
	return 1;
}*/

forward AllowPD();
public AllowPD()
{
    AllowPayday = true;
}

public SaveServer()
{
    SaveConfig();
	SaveZones();
	SaveAll();
	SavePix();
	SaveGangDrugs();
	SaveIrc();
    SaveGuerra();
    SaveEleicao();
    SavePlantacao();

    foreach(new i: Player)
	{
	    Player[i][pAdjustable]=1;
		OnPlayerSave(i);
 	}
}

public IsPlayerInTurf(playerid, turfid)
{
	if(IsPlayerConnected(playerid))
	{
		if(turfid == -1)
			return 0;

		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid,x,y,z);
		if(x >= TurfsCoords[turfid][zMinX] && x < TurfsCoords[turfid][zMaxX] && y >= TurfsCoords[turfid][zMinY] && y < TurfsCoords[turfid][zMaxY])
	 		return true;
	}
	return 0;
}


public CurarDorga(i)
{
	if(IsPlayerConnected(i))
	{
	    if(PlayerDrunk[i] > 0)
		{
			PlayerDrunk[i] = 0;
			PlayerDrunkTime[i] = 0;
			SendClientMessage(i, COLOR_YELLOW, "Você curou do Alcool MANOLO.");
			KillTimer(DrunkTime[i]);
			SetCameraBehindPlayer(i);
		}
	    if(PlayerStoned[i] > 0)
		{
			SetPlayerWeather(i, CurrentWeather);
			PlayerStoned[i] = 0;
			SendClientMessage(i, COLOR_YELLOW, "O efeito loko das DORGAS ja elvis, Manolo.");
			SetCameraBehindPlayer(i);
		}
 	}
 	return 1;
}

public DateProp(playerid)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	new curdate = getdate();
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(strcmp(playername, hOwner[h], true) == 0)
		{
			HouseInfo[h][hDate] = curdate;
			OnPropUpdate();
		}
	}
	return true;
}

public Checkprop()
{
	new olddate;
	new string[200];
	new curdate = getdate();
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(HouseInfo[h][hOwned] == 1 && HouseInfo[h][hDate] > 9)
		{
			olddate = HouseInfo[h][hDate];
			if(curdate-olddate >= 7)
			{
			    new file[64];
				format(file, sizeof(file), "/RPG/users/%s.ini",hOwner[h]);
			    format(string, sizeof(string), "A casa %d teve seu tempo excedido, agora ela está disponível para a compra por R$%d (Ex-proprietário: %s)", h, HouseInfo[h][hValue],hOwner[h]);
			    SendClientMessageToAll(COLOR_COCONUT, string);
				HouseInfo[h][hHel] = 0;
				HouseInfo[h][hArm] = 0;
				HouseInfo[h][hLock] = 1;
				HouseInfo[h][hOwned] = 0;
				HouseInfo[h][hVec] = 405;
				HouseInfo[h][hVcol1] = -1;
				HouseInfo[h][hVcol2] = -1;
				HouseInfo[h][hRentabil] = 1;
				HouseInfo[h][hVpos][0] = 0.0;

				DestroyVehicle(CarroCasa[h]);
				CarroCasa[h] = AddStaticVehicleEx(HouseInfo[h][hVec], HouseCarSpawns[h][0], HouseCarSpawns[h][1], HouseCarSpawns[h][2], HouseCarSpawns[h][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);

                new numPlate[32];
                format(numPlate, 32, "{FF0000}BLS {000000}%04d", CarroCasa[h]);
                SetVehicleNumberPlateEx(CarroCasa[h], numPlate);

				for(new b = 0; b < MAX_BIZ; b++)
				{
		       		if(strcmp(hOwner[h],bOwner[b],true)==0)
		       		{
						BizzInfo[b][bOwned] = 0;
						strmid(bOwner[b], "Governo", 0, strlen("Governo"), 255);
						strmid(bExtortion[b], "---", 0, strlen("---"), 255);
						format(string, sizeof(string), "%s também perdeu sua empresa. (%d)", hOwner[h], b+100);
						BizzInfo[b][bTill] = 0;
					}
				}
				DOF2_SetInt(file, "House", 255);
				DOF2_SetInt(file, "Bizz", 255);
				strmid(hOwner[h], "Governo", 0, strlen("Governo"), 255);
				DOF2_SaveFile();
				OnPropUpdate();
			}
		}
	}
	return true;
}

stock SortearNumero(maximo) return (random(maximo) + 1);

forward SortearLoteria();
public SortearLoteria()
{
	SendClientMessageToAll(-1, "   "); SendClientMessageToAll(-1, "   ");
	SendClientMessageToAll(COLOR_LIGHTBLUE, "Lotérica: {FFFFFF}O resultado da loteria acabou de sair!");

	new NumeroSorteado = SortearNumero(LOTTO_NUM);
	//new NumeroSorteado = 1;
	new NumeroGanhadores = 0, GanhadoresId[10];

    SendClientMessageToAll(COLOR_GREEN, "-----------------------------------------------------------------");

	format(thestring, 256, "Loteria: {FFFFFF}O número sorteado foi: %d.", NumeroSorteado);
	SendClientMessageToAll(COLOR_GROOVE, thestring);

	foreach(new pId: Player)
	{
	    if(Player[pId][pLottoNr] == NumeroSorteado)
	    {
	        Player[pId][pLottoNr] = 0;
	        GanhadoresId[NumeroGanhadores] = pId;
	        NumeroGanhadores ++;
			SendClientMessage(pId, COLOR_GROOVE, "Loteria: {FFFFFF}Você ganhou na Loteria! Você saberá o valor abaixo.");
	    }
	    else
	    {
	        Player[pId][pLottoNr] = 0;
	        SendClientMessage(pId, COLOR_GROOVE, "Loteria: {FFFFFF}Você não ganhou na Loteria.");
	    }
	}
    if(NumeroGanhadores == 1)
	{
	    new pId = GanhadoresId[0];
	    //GivePlayerGP(pId, Jackpot);
        Player[pId][pBank] += Jackpot;
	    format(thestring, 256, "Loteria: {FFFFFF}%s ganhou {009900}R$%d{FFFFFF} na loteria!", Player[pId][pName], Jackpot);
	    SendClientMessageToAll(COLOR_GROOVE, thestring);
	    LottoLog(NumeroSorteado, thestring, Jackpot);
	    AddLoteria(true);
	    return 1;
	}
    else if(NumeroGanhadores > 1)
    {
        new ValorPorPlayer = Jackpot / NumeroGanhadores, LottoString[64], LottoAdd[8];
        format(thestring, 256, "{FF0000}[Info]:{FFFFFF} Ganhadores: ");

        new pId;
	    for(new Numero = 0; Numero < NumeroGanhadores; Numero ++)
	    {
	        pId = GanhadoresId[Numero];

	        //GivePlayerGP(pId, ValorPorPlayer);
            Player[pId][pBank] += ValorPorPlayer;

	        if(Numero == NumeroGanhadores - 2) format(LottoAdd, 8, " e ");
	        else if(Numero == NumeroGanhadores - 1) format(LottoAdd, 8, ".");
	        else format(LottoAdd, 8, ", ");

	        format(LottoString, 64, "%s%s", Player[pId][pName], LottoAdd);
	        strcat(thestring, LottoString, 256);
		}
		SendClientMessageToAll(COLOR_YELLOW, thestring);
		LottoLog(NumeroSorteado, thestring, Jackpot);
		format(thestring, 256, "Loteria: {FFFFFF}Cada um ganhou {009900}R$%d{FFFFFF}.", ValorPorPlayer);
		SendClientMessageToAll(COLOR_GROOVE, thestring);
	 	AddLoteria(true);
		return 1;
    }
    SendClientMessageToAll(COLOR_GROOVE, "Loteria: {FFFFFF}Ninguém ganhou na loteria.");
    AddLoteria(false);
 	return 1;
}

stock AddLoteria(bool:Ganhou)
{
	if(Ganhou)
	{
	    Jackpot = random(5000) + 9000;
        GiveBizMoney(Biz_Loterica, 5000 + random(5000));

	    format(thestring, 256, "Loteria: {FFFFFF}A loteria iniciou com o valor de {009900}R$%d{FFFFFF}.", Jackpot);
	    SendClientMessageToAll(COLOR_GROOVE, thestring);
	    SendClientMessageToAll(COLOR_GREEN, "-----------------------------------------------------------------");
	    SendClientMessageToAll(-1, "   ");
	    return 1;
	}
	if(Jackpot > 500000)
	{
        GiveBizMoney(Biz_Loterica, 2500 + random(2500));

	    format(thestring, 256, "Loteria: {FFFFFF}A loteria não acumulou. Valor: {009900}%d{FFFFFF}.", Jackpot);
	    SendClientMessageToAll(COLOR_GROOVE, thestring);
	    SendClientMessageToAll(COLOR_GREEN, "-----------------------------------------------------------------");
	    SendClientMessageToAll(-1, "   ");
	    return 1;
	}
    new NovoNumero = random(4000) + 2000;
    Jackpot += NovoNumero;
    GiveBizMoney(Biz_Loterica, 1000 + random(4000));

    format(thestring, 256, "Loteria: {FFFFFF}A loteria acumulou com o valor de {009900}R$%d{FFFFFF}.", Jackpot);
    SendClientMessageToAll(COLOR_GROOVE, thestring);
    SendClientMessageToAll(COLOR_GREEN, "-----------------------------------------------------------------");
    SendClientMessageToAll(-1, "   ");
    return 1;
}

public PayDay()
{
	new string[128], key, rent, nxtlevel, expamount;
	foreach(new i: Player)
	{
	    AtualizarTextDraws(i);
	    if(Player[i][pLevel] > 0 && Player[i][pLogedTime] >= 840)
	    {
	        //Checar se Esta em Divida
		    if(MoneyMessage[i] == 1 && Player[i][pJailTime] == 0)
			{
			    SendClientMessage(i, COLOR_RED, "Você devia ter debitado suas dívidas, lhe enviaram um pedido de prisão.");
			    GameTextForPlayer(i, "~r~apreendido!", 2000, 1);
			    SetPlayerInterior(i, 6);
		   		SafeSetPlayerPos(i, 264.6288,77.5742,1001.0391);
	            Player[i][pJailed] = 1;
	            ResetPlayerWeapons(i);
				WantedPoints[i] = 0;
				Player[i][pJailTime] = 180;
				Player[i][pJailTimetotal] = 180;
				format(string, sizeof(string), "Você foi preso por %d segundos.", Player[i][pJailTime]);
				SendClientMessage(i, COLOR_LIGHTBLUE, string);
			}
			//Verificar Aluguel
			key = Player[i][pHouseKey];
			rent = 0;
			if(key != 255)
			{
				rent = HouseInfo[key][hRent];
				if(strcmp(Player[i][pName], hOwner[key], true) == 0)
					rent = 0;
				else if(rent > GetPlayerGP(i))
				{
					Player[i][pHouseKey] = 255;
					Player[i][pPaluguelkey] = 255;
					SendClientMessage(i, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você foi despejado.");
					rent = 0;
				}
				else
					HouseInfo[key][hTakings] += rent;
			}
            //Verificar VIP
			if(Player[i][pVIP] != 0 && PegarIntHoje() == Player[i][pVIP])
			{
			    if(ClockTime[tHour] >= Player[i][pHoraVIP])
			    {
		        	SendClientMessage(i, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Seu VIP expirou.");
		        	Player[i][pDonateRank] = 0;
		        	Player[i][pVIP] = 0;
			        Player[i][pHoraVIP] = 0;
                    Player[i][pAutoBelt] = false;
			    }
			}
			//Resetar Tempo Logado
            Player[i][pLogedTime] = 0;
            //?
		    ConsumingMoney[i] = 1;
			PlayerPlayMusic(i);
		    //Respeito
            switch(Player[i][pDonateRank])
            {
                case 1: Player[i][pExp] += 2;
                case 2: Player[i][pExp] += 3;
                case 3: Player[i][pExp] += 4;
                default: Player[i][pExp] += 1;
            }
            if(Player[i][pBonusExp] > 0) {
                Player[i][pExp] += 1;
                Player[i][pBonusExp] --;
            }
            //Mostrar Informações
			SendClientMessage(i, COLOR_WHITE, "|_________ EXTRATO DO BANCO _________|");
			if(Player[i][pBank] >= 0)
				format(string, sizeof(string), "Balanço atual: {FFFF00}R$%d", Player[i][pBank]);
			else
				format(string, sizeof(string), "Balanço atual: {FF0000}R$%d", Positivar(Player[i][pBank]));

			SendClientMessage(i, COLOR_GREY, string);
			//Aluguel
			if(rent > 0)
			{
				format(string, sizeof(string), "Aluguel: R${FF0000}%d", rent);
				SendClientMessage(i, COLOR_GREY, string);
				Player[i][pBank] -= rent;
			}
			//Salario
			if(Player[i][pMember] == DESEMPREGADO && Player[i][pJob] != DESEMPREGADO)
			{
			    format(string, sizeof(string), "Salário: {009900}R$%d", JOB_SAL);
			    SendClientMessage(i, COLOR_GREY, string);
				Player[i][pBank] += JOB_SAL;
			}
			else if(Player[i][pMember] != DESEMPREGADO && Player[i][pRank] <= 6)
			{
			  	format(string, sizeof(string), "Salário: {009900}R$%d", OrgsSalaries[Player[i][pMember]][Player[i][pRank]]);
			  	SendClientMessage(i, COLOR_GREY, string);
				Player[i][pBank] += OrgsSalaries[Player[i][pMember]][Player[i][pRank]];
			}
			//Seguro
            if(Player[i][pJob] == DESEMPREGADO && Player[i][pMember] == DESEMPREGADO)
			{
			    Player[i][pBank] += 350;
			    SendClientMessage(i, COLOR_GREY, "Seguro Desemprego: {009900}R$350");
			    GiveOrgMoney(TEAM_PREF, -350);
            }
            if(IsACop(i))
			{
				Player[i][pBank] += 700;
			    SendClientMessage(i, COLOR_GREY, "Seguro Governo: {009900}R$700");
            }
            //Casa
			if(key != 255)
			{
                new divisor = 1;
                if(strcmp(Player[i][pName], hOwner[key], true) == 0)
                    divisor = 1;
                else
                    divisor = 4;

			    new ChaveEmpresa = Player[i][pBizKey];
			    if(ChaveEmpresa != Biz_Eletrica)
				{
				    new ebill = (HouseInfo[key][hValue]/10000)*(HouseInfo[key][hLevel] - 2);
                    ebill /= divisor;

				    Player[i][pBank] -= ebill;

				    format(string, sizeof(string), "Taxa elétrica: {FF0000}R$%d", ebill);
					SendClientMessage(i, COLOR_GREY, string);

                    GiveBizMoney(Biz_Eletrica, ebill);
				}
			    if(ChaveEmpresa != Biz_Agua)
				{
				    new wbill = (HouseInfo[key][hValue]/12000)*(HouseInfo[key][hLevel] - 2);
                    wbill /= divisor;

			    	Player[i][pBank] -= wbill;

				    format(string, sizeof(string), "Taxa de água: {FF0000}R$%d", wbill);
					SendClientMessage(i, COLOR_GREY, string);

                    GiveBizMoney(Biz_Agua, wbill);
				}
			    SendClientMessage(i, COLOR_GREY, "IPTU: {FF0000}R$100");
				Player[i][pBank] -= 100;
                GiveOrgMoney(TEAM_PREF, 100);
			}
			//Impostos
			if(Tax > 0)
			{
				format(string, sizeof(string), "Taxa de Impostos: {FF0000}R$%d", Tax);
				SendClientMessage(i, COLOR_GREY, string);
				Player[i][pBank] -= Tax;
				GiveOrgMoney(TEAM_PREF, Tax);
			}
			//Informações
			SendClientMessage(i, COLOR_GREY, "|--------------------------------------|");
			if(Player[i][pBank] >= 0)
				format(string, sizeof(string), "Novo balanço: {FFFF00}R$%d", Player[i][pBank]);
			else
				format(string, sizeof(string), "Novo balanço: {FF0000}R$%d", Positivar(Player[i][pBank]));

			SendClientMessage(i, COLOR_GREY, string);
			GameTextForPlayer(i, "~y~dia de~n~~w~pagamento", 5000, 1);
			//Level Up
   			nxtlevel = Player[i][pLevel] + 1;
		    expamount = nxtlevel * levelexp;
	    	if(Player[i][pExp] >= expamount)
	    	{
	    	    format(thestring, sizeof(thestring), "~g~Level Up: ~w~%d", nxtlevel);
				PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
				PlayerPlayMusic(i);
				Player[i][pLevel] ++;
			    Player[i][pExp] -= expamount;
				Player[i][gPupgrade] += 2;
				GameTextForPlayer(i, thestring, 5000, 1);
				format(thestring, 128, "{FF0000}[Info]:{FFFFFF} Você passou para o nível %d.", nxtlevel);
				SendClientMessage(i, SERVER_INFO, thestring);
				format(thestring, 128, "{FF0000}[Info]:{FFFFFF} Você tem %d pontos de atualizacão.", Player[i][gPupgrade]);
				SendClientMessage(i, SERVER_INFO, thestring);
			}
			//Ultimas Variaveis
		    Player[i][pPayDayHad] += 1;
		}
		else
		    SendClientMessage(i, COLOR_WHITE, "Você não jogou tempo suficiente para obter seu pagamento.");
	}
	SendClientMessageToAll(COLOR_LIGHTBLUE, "Lotérica:{FFFFFF} A loteria será sorteada em 1 minuto.");
	SetTimer("SortearLoteria", (60*1000), false);
	Checkprop();
    ABroadCast(COLOR_YELLOW, "PayDay concluido com Sucesso.", 1);
	return true;
}

strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

public split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc))
	{
	    if(strsrc[i]==delimiter || i==strlen(strsrc))
		{
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return true;
}

public OnPlayerRegister(playerid, password[], cleanpw[])
{
	if(IsPlayerConnected(playerid))
	{
		new file[128], pci[64];
		format(file, sizeof(file), "/RPG/users/%s.ini", Player[playerid][pName]);
		if(DOF2_FileExists(file))
		    return SendClientMessage(playerid, COLOR_RED, "Conta já registrada");

		gpci(playerid, pci, sizeof(pci));

		Player[playerid][pLevel] = 1;
		Player[playerid][pSHealth] = 0.0;
		Player[playerid][pHealth] = 100.0;
		Player[playerid][pInt] = 0;
		Player[playerid][pLocal] = 255;
		Player[playerid][pModel] = 60;

		Player[playerid][pPnumber] = DOF2_GetInt(ConfigFile,"PhoneNumbers")+1;
		DOF2_SetInt(ConfigFile, "PhoneNumbers", DOF2_GetInt(ConfigFile,"PhoneNumbers")+1);
		DOF2_SaveFile();
		Player[playerid][pHouseKey] = 255;
		Player[playerid][pPaluguelkey] = 255;
		Player[playerid][pFMember] = 255;
		Player[playerid][pBizKey] = 255;
		Player[playerid][pBank] = 2000;
		Player[playerid][pReg] = 1;
		Player[playerid][pMoney] = 0;
		Player[playerid][pBLSCash] = 0;
		Player[playerid][pHoraVIP] = 0;
		Player[playerid][pVIP] = 0;
		GivePlayerGP(playerid, 2000);
		DOF2_SetInt(file, "GMBuilt", BUILT);

		SendClientMessage(playerid,SERVER_INFO,"[Aviso]: {FFFFFF}Você ganhou R$2.000 em mãos e no banco para iniciar sua nova vida!");
		SendClientMessage(playerid,COLOR_WHITE,"{FF0000}[BLS]: {FFFFFF}Temos um pacote de Edição de RG para novatos! {FFFF00}/pacoteiniciante{FFFFFF}!!");
		SendClientMessage(playerid,COLOR_WHITE,"{FF0000}[BLS]: {FFFFFF}Lembre-se de completar as missões iniciais, usando o comando {FFFF00}/missoes{FFFFFF}.");

		DOF2_CreateFile(file);
		DOF2_SetString(file,"Password", cleanpw);
		DOF2_SetString(file, "Key", password);
		Player[playerid][pMoney] = GetPlayerGP(playerid);

		new year,day,month;
		getdate(year, month, day);

		new str[24];
		format(str, 24,"%02d/%02d/%d",day,month,year);
		DOF2_SetString(file,"RegisterDate",str);

        format(Player[playerid][pRG], 64, "%02d%02d%02d%04d", year, month, day, actualRG);
        actualRG++;

        new ssstttrrr[24];
        for(new v = 0; v < 5; v++)
		{
		    format(ssstttrrr, sizeof(ssstttrrr), "Carro%d", v);
		    DOF2_SetInt(file, ssstttrrr, INVALID_VEHICLE_ID);
		}

			// Milestones
		DOF2_SetInt(file, "NonRepTask0", Player[playerid][pCompletedNonRepTask][0]);
		DOF2_SetInt(file, "NonRepTask1", Player[playerid][pCompletedNonRepTask][1]);
		DOF2_SetInt(file, "NonRepTask2", Player[playerid][pCompletedNonRepTask][2]);
		DOF2_SetInt(file, "NonRepTask3", Player[playerid][pCompletedNonRepTask][3]);
		DOF2_SetInt(file, "NonRepTask4", Player[playerid][pCompletedNonRepTask][4]);

		// Boombox
		DOF2_SetBool(file, "Boombox", Player[playerid][pBoombox]);

		DOF2_SetInt(file, "Créditos", Player[playerid][pCreditos]);

        DOF2_SetInt(file, "Pacote", Pacote[playerid]);
		DOF2_SetInt(file, "Level", Player[playerid][pLevel]);
		DOF2_SetInt(file, "AdminLevel", Player[playerid][pAdmin]);
		DOF2_SetInt(file, "DonateRank", Player[playerid][pDonateRank]);

		DOF2_SetInt(file, "UpgradePoints", Player[playerid][gPupgrade]);
		DOF2_SetInt(file, "ConnectedTime", Player[playerid][pConnectTime]);
		DOF2_SetInt(file, "Registered", Player[playerid][pReg]);
		DOF2_SetInt(file, "Sex", Player[playerid][pSex]);
		DOF2_SetInt(file, "Age", Player[playerid][pAge]);
		DOF2_SetInt(file, "Origin", Player[playerid][pOrigin]);
		DOF2_SetInt(file, "Respect", Player[playerid][pExp]);
		DOF2_SetInt(file, "Money", Player[playerid][pMoney]);
		DOF2_SetInt(file, "Bank", Player[playerid][pBank]);
		DOF2_SetInt(file, "Crimes", Player[playerid][pCrimes]);
		DOF2_SetInt(file, "Crimes2", WantedPoints[playerid]);
		DOF2_SetInt(file, "Kills", Player[playerid][pKills]);
		DOF2_SetInt(file, "Morto", Player[playerid][pMorto]);

		DOF2_SetInt(file, "Deaths", Player[playerid][pDeaths]);
		DOF2_SetInt(file, "Arrested", Player[playerid][pArrested]);
		DOF2_SetInt(file, "WantedDeaths", Player[playerid][pWantedDeaths]);
		DOF2_SetInt(file, "Phone", Player[playerid][pPhone]);
		DOF2_SetInt(file, "Phonebook", Player[playerid][pPhoneBook]);
		DOF2_SetInt(file, "LottoNr", Player[playerid][pLottoNr]);
		DOF2_SetInt(file, "Fishes", Player[playerid][pFishes]);
		DOF2_SetInt(file, "BiggestFish", Player[playerid][pBiggestFish]);
		DOF2_SetInt(file, "Job", Player[playerid][pJob]);
		DOF2_SetInt(file, "Paycheck",0);
		DOF2_SetInt(file, "HeadValue", Player[playerid][pHeadValue]);
		DOF2_SetInt(file, "Jailed", Player[playerid][pJailed]);
		DOF2_SetInt(file, "JailTime", Player[playerid][pJailTime]);
		DOF2_SetInt(file, "Materials", Player[playerid][pMats]);
		DOF2_SetInt(file, "Drugs", Player[playerid][pDrugs]);
		DOF2_SetInt(file, "Cigarro", Player[playerid][pCigarro]);
		DOF2_SetInt(file, "PC", Player[playerid][pPC]);
		DOF2_SetInt(file, "NBook", Player[playerid][pNBook]);
		DOF2_SetInt(file, "3G", Player[playerid][p3G]);
		DOF2_SetInt(file, "Luta", Player[playerid][pLuta]);
		DOF2_SetInt(file, "Corda", Player[playerid][pCorda]);
		DOF2_SetInt(file, "Plano", Player[playerid][pPlano]);
		DOF2_SetInt(file, "Votou", Player[playerid][pVotou]);
		DOF2_SetInt(file, "Ban", Player[playerid][pBan]);
		DOF2_SetInt(file, "Leader", Player[playerid][pLeader]);
		DOF2_SetInt(file, "Member", Player[playerid][pMember]);
		DOF2_SetInt(file, "FMember", Player[playerid][pFMember]);
		DOF2_SetInt(file, "Rank", Player[playerid][pRank]);
		//DOF2_SetInt(file, "Char", Player[playerid][pChar]);
		DOF2_SetInt(file, "ContractTime", Player[playerid][pContractTime]);
		DOF2_SetInt(file, "DetSkill", Player[playerid][pDetSkill]);
		DOF2_SetInt(file, "SexSkill", Player[playerid][pSexSkill]);
		DOF2_SetInt(file, "BoxSkill", Player[playerid][pBoxSkill]);
		DOF2_SetInt(file, "LawSkill", Player[playerid][pLawSkill]);
		DOF2_SetInt(file, "MechSkill", Player[playerid][pMechSkill]);
		DOF2_SetInt(file, "JackSkill", Player[playerid][pJackSkill]);
		DOF2_SetInt(file, "CarSkill", Player[playerid][pCarSkill]);
		DOF2_SetInt(file, "NewsSkill", Player[playerid][pNewsSkill]);
		DOF2_SetInt(file, "DrugsSkill", Player[playerid][pDrugsSkill]);
		DOF2_SetInt(file, "CookSkill", Player[playerid][pCookSkill]);
		DOF2_SetInt(file, "FishSkill", Player[playerid][pFishSkill]);
		DOF2_SetFloat(file, "pHealth",Player[playerid][pHealth]);
		DOF2_SetFloat(file, "pSHealth",Player[playerid][pSHealth]);
		DOF2_SetFloat(file, "LocalX",Player[playerid][pLocalX]);
		DOF2_SetFloat(file, "LocalY",Player[playerid][pLocalY]);
		DOF2_SetFloat(file, "LocalZ",Player[playerid][pLocalZ]);
		GetPlayerHealth(playerid,Player[playerid][pHealth]);
		DOF2_SetInt(file, "Int", Player[playerid][pInt]);
		DOF2_SetInt(file, "Local", Player[playerid][pLocal]);
		DOF2_SetInt(file, "Model", Player[playerid][pModel]);
		DOF2_SetInt(file, "PhoneNr", Player[playerid][pPnumber]);
		DOF2_SetInt(file, "House", Player[playerid][pHouseKey]);
		DOF2_SetInt(file, "Aluguel", Player[playerid][pPaluguelkey]);
		DOF2_SetInt(file, "Atendimentos", Player[playerid][pAtend]);
		DOF2_SetInt(file, "Nota", Player[playerid][pNota]);
		DOF2_SetInt(file, "LocalSpawn", Player[playerid][pLocalSpawn]);
		DOF2_SetInt(file, "Enigma", Player[playerid][pEnigma]);
		DOF2_SetInt(file, "Bizz", Player[playerid][pBizKey]);
		DOF2_SetInt(file, "Crimes", Player[playerid][pCrimes]);
		DOF2_SetInt(file, "Crimes2", WantedPoints[playerid]);
		DOF2_SetInt(file, "CarLic", Player[playerid][pCarLic]);
		DOF2_SetInt(file, "CarLicPoints", Player[playerid][pCarLicPoints]);
        DOF2_SetInt(file, "FlyLic", Player[playerid][pFlyLic]);
		DOF2_SetInt(file, "BoatLic", Player[playerid][pBoatLic]);
		DOF2_SetInt(file, "FishLic", Player[playerid][pFishLic]);
		DOF2_SetInt(file, "GunLic", Player[playerid][pGunLic]);
		DOF2_SetInt(file, "PacoteArmas", Player[playerid][pPacoteArmas]);
		DOF2_SetInt(file, "Gun1", Player[playerid][pGun1]);
		DOF2_SetInt(file, "Gun2", Player[playerid][pGun2]);
		DOF2_SetInt(file, "Gun3", Player[playerid][pGun3]);
		DOF2_SetInt(file, "Gun4", Player[playerid][pGun4]);
		DOF2_SetInt(file, "Ammo1", Player[playerid][pAmmo1]);
		DOF2_SetInt(file, "Ammo2", Player[playerid][pAmmo2]);
		DOF2_SetInt(file, "Ammo3", Player[playerid][pAmmo3]);
		DOF2_SetInt(file, "Ammo4", Player[playerid][pAmmo4]);
		DOF2_SetInt(file, "CarTime", Player[playerid][pCarTime]);
//		DOF2_SetInt(file, "InvWeapon", Player[playerid][pInvWeapon]);
//		DOF2_SetInt(file, "InvAmmo", Player[playerid][pInvAmmo]);
		DOF2_SetInt(file, "PayDayHad", Player[playerid][pPayDayHad]);
		DOF2_SetInt(file, "CDPlayer", Player[playerid][pCDPlayer]);
		DOF2_SetInt(file, "Wins", Player[playerid][pWins]);
		DOF2_SetInt(file, "Loses", Player[playerid][pLoses]);
		DOF2_SetInt(file, "AlcoholPerk", Player[playerid][pAlcoholPerk]);
		DOF2_SetInt(file, "DrugPerk", Player[playerid][pDrugPerk]);
		DOF2_SetInt(file, "MiserPerk", Player[playerid][pMiserPerk]);
		DOF2_SetInt(file, "PainPerk", Player[playerid][pPainPerk]);
		DOF2_SetInt(file, "TraderPerk", Player[playerid][pTraderPerk]);
		DOF2_SetInt(file, "Tutorial", Player[playerid][pTut]);
		DOF2_SetInt(file, "Warnings", Player[playerid][pWarns]);
		DOF2_SetInt(file, "Adjustable", Player[playerid][pAdjustable]);
		DOF2_SetInt(file, "Fuel", Player[playerid][pFuel]);
		DOF2_SetInt(file, "Married", Player[playerid][pMarried]);
		DOF2_SetString(file, "Prisao",Player[playerid][JailReason]);
		DOF2_SetString(file, "MarriedTo",pMarriedTo[playerid]);
		DOF2_SetString(file, "Dest",Player[playerid][pDest]);
		DOF2_SetString(file, "Aviso1",Player[playerid][pAviso1]);
		DOF2_SetString(file, "Aviso2",Player[playerid][pAviso2]);
		DOF2_SetString(file, "LU",Player[playerid][pLastLogin]);
		DOF2_SetInt(file, "LS", Player[playerid][pLastSave]);
		DOF2_SetInt(file, "LogedTime", Player[playerid][pLogedTime]);

		DOF2_SetInt(file, "DrogasD",Player[playerid][pDrogasGuardadas]);
		DOF2_SetInt(file, "Pastilhas",Player[playerid][pPastilhas]);
		DOF2_SetInt(file, "JogadorRouco",FicarRoco[playerid]);
		DOF2_SetInt(file, "Doenca",Player[playerid][pDoenca]);
		DOF2_SetBool(file, "TemMascara",Player[playerid][pTemMascara]);
		DOF2_SetBool(file, "CapaChuva",Player[playerid][pCapaChuva]);
		DOF2_SetString(file, "PciDeRegistro", pci);
		DOF2_SetInt(file, "IntVIP", Player[playerid][pVIP]);
		DOF2_SetBool(file, "Explosivo", Player[playerid][pExplosivo]);
		DOF2_SetString(file, "RG", Player[playerid][pRG]);

   		DOF2_SetInt(file, "UltimaEleicao", Player[playerid][pVoto]);
		DOF2_SaveFile();

		new string[128];
		format(string,sizeof(string),"{FFFFFF}Conta {FF0000}%s {FFFFFF}registrada com sucesso.\nPara começar a jogar re-digite sua senha.",Player[playerid][pName]);
		ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,"{FF0000}Life {FFFFFF}Simulation RPG - 1º Login",string,"Logar","Sair");
	}
	return true;
}

public OnPlayerSave(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(gPlayerLogged[playerid])
		{
			new file[128];
			new sttr[12];
			format(file, sizeof(file), "/RPG/users/%s.ini", Player[playerid][pName]);

			// Milestones
			DOF2_SetInt(file, "NonRepTask0", Player[playerid][pCompletedNonRepTask][0]);
			DOF2_SetInt(file, "NonRepTask1", Player[playerid][pCompletedNonRepTask][1]);
			DOF2_SetInt(file, "NonRepTask2", Player[playerid][pCompletedNonRepTask][2]);
			DOF2_SetInt(file, "NonRepTask3", Player[playerid][pCompletedNonRepTask][3]);
			DOF2_SetInt(file, "NonRepTask4", Player[playerid][pCompletedNonRepTask][4]);

			// Boombox
			DOF2_SetBool(file, "Boombox", Player[playerid][pBoombox]);

			// Multas
			DOF2_SetInt(file, "Multa", multa[playerid]);
			DOF2_SetInt(file, "Multas", multas[playerid]);

			DOF2_SetInt(file, "Créditos", Player[playerid][pCreditos]);
			DOF2_SetInt(file, "Pacote", Pacote[playerid]);
			DOF2_SetInt(file, "Level", Player[playerid][pLevel]);
			//DOF2_SetString(file, "Referral", Player[playerid][pReferral]);
			DOF2_SetBool(file, "AutoCinto", Player[playerid][pAutoBelt]);
			DOF2_SetInt(file, "AdminLevel", Player[playerid][pAdmin]);
			DOF2_SetInt(file, "DonateRank", Player[playerid][pDonateRank]);
			DOF2_SetInt(file, "UpgradePoints", Player[playerid][gPupgrade]);
			DOF2_SetInt(file, "ConnectedTime", Player[playerid][pConnectTime]);
			DOF2_SetInt(file, "Registered", Player[playerid][pReg]);
			DOF2_SetInt(file, "Sex", Player[playerid][pSex]);
			DOF2_SetInt(file, "Age", Player[playerid][pAge]);
			DOF2_SetInt(file, "Origin", Player[playerid][pOrigin]);
			DOF2_SetInt(file, "Respect", Player[playerid][pExp]);
			DOF2_SetInt(file, "Money", Player[playerid][pMoney]);
			DOF2_SetInt(file, "BLS Cash", Player[playerid][pBLSCash]);
            DOF2_SetInt(file, "Hora VIP", Player[playerid][pHoraVIP]);
			DOF2_SetInt(file, "Bank", Player[playerid][pBank]);
			DOF2_SetInt(file, "Crimes", Player[playerid][pCrimes]);
			DOF2_SetInt(file, "Crimes2", WantedPoints[playerid]);
			DOF2_SetInt(file, "Kills", Player[playerid][pKills]);
			DOF2_SetInt(file, "Morto", Player[playerid][pMorto]);

			DOF2_SetInt(file, "bonusXP", Player[playerid][pBonusExp]);

			DOF2_SetInt(file, "Deaths", Player[playerid][pDeaths]);
			DOF2_SetInt(file, "Arrested", Player[playerid][pArrested]);
			DOF2_SetInt(file, "WantedDeaths", Player[playerid][pWantedDeaths]);
			DOF2_SetInt(file, "Phone", Player[playerid][pPhone]);
			DOF2_SetInt(file, "Phonebook", Player[playerid][pPhoneBook]);
			DOF2_SetInt(file, "LottoNr", Player[playerid][pLottoNr]);
			DOF2_SetInt(file, "Fishes", Player[playerid][pFishes]);
			DOF2_SetInt(file, "BiggestFish", Player[playerid][pBiggestFish]);
			DOF2_SetInt(file, "Job", Player[playerid][pJob]);
			DOF2_SetInt(file, "Paycheck",0);
			DOF2_SetInt(file, "HeadValue", Player[playerid][pHeadValue]);
			DOF2_SetInt(file, "Jailed", Player[playerid][pJailed]);
			DOF2_SetInt(file, "JailTime", Player[playerid][pJailTime]);
			DOF2_SetInt(file, "Materials", Player[playerid][pMats]);
			DOF2_SetInt(file, "Drugs", Player[playerid][pDrugs]);
			DOF2_SetInt(file, "Cigarro", Player[playerid][pCigarro]);
			DOF2_SetInt(file, "PC", Player[playerid][pPC]);
			DOF2_SetInt(file, "NBook", Player[playerid][pNBook]);
			DOF2_SetInt(file, "3G", Player[playerid][p3G]);
			DOF2_SetInt(file, "Luta", Player[playerid][pLuta]);
			DOF2_SetInt(file, "Corda", Player[playerid][pCorda]);
			DOF2_SetInt(file, "Plano", Player[playerid][pPlano]);
			DOF2_SetInt(file, "Votou", Player[playerid][pVotou]);
			DOF2_SetInt(file, "Ban", Player[playerid][pBan]);
			DOF2_SetInt(file, "Leader", Player[playerid][pLeader]);
			DOF2_SetInt(file, "Member", Player[playerid][pMember]);
			DOF2_SetInt(file, "FMember", Player[playerid][pFMember]);
			DOF2_SetInt(file, "Rank", Player[playerid][pRank]);
			//DOF2_SetInt(file, "Char", Player[playerid][pChar]);
			DOF2_SetInt(file, "ContractTime", Player[playerid][pContractTime]);
			DOF2_SetInt(file, "DetSkill", Player[playerid][pDetSkill]);
			DOF2_SetInt(file, "SexSkill", Player[playerid][pSexSkill]);
			DOF2_SetInt(file, "BoxSkill", Player[playerid][pBoxSkill]);
			DOF2_SetInt(file, "LawSkill", Player[playerid][pLawSkill]);
			DOF2_SetInt(file, "MechSkill", Player[playerid][pMechSkill]);
			DOF2_SetInt(file, "JackSkill", Player[playerid][pJackSkill]);
			DOF2_SetInt(file, "CarSkill", Player[playerid][pCarSkill]);
			DOF2_SetInt(file, "NewsSkill", Player[playerid][pNewsSkill]);
			DOF2_SetInt(file, "DrugsSkill", Player[playerid][pDrugsSkill]);
			DOF2_SetInt(file, "CookSkill", Player[playerid][pCookSkill]);
			DOF2_SetInt(file, "FishSkill", Player[playerid][pFishSkill]);
			DOF2_SetFloat(file, "pSHealth",Player[playerid][pSHealth]);
			DOF2_SetFloat(file, "LocalX",Player[playerid][pLocalX]);
			DOF2_SetFloat(file, "LocalY",Player[playerid][pLocalY]);
			DOF2_SetFloat(file, "LocalZ",Player[playerid][pLocalZ]);
			GetPlayerHealth(playerid,Player[playerid][pHealth]);
			DOF2_SetFloat(file, "pHealth",Player[playerid][pHealth]);
			DOF2_SetInt(file, "Int", Player[playerid][pInt]);
			DOF2_SetInt(file, "Local", Player[playerid][pLocal]);
			DOF2_SetInt(file, "Model", Player[playerid][pModel]);
			DOF2_SetInt(file, "PhoneNr", Player[playerid][pPnumber]);
			DOF2_SetInt(file, "House", Player[playerid][pHouseKey]);
			DOF2_SetInt(file, "Aluguel", Player[playerid][pPaluguelkey]);
			DOF2_SetInt(file, "Atendimentos", Player[playerid][pAtend]);
			DOF2_SetInt(file, "Nota", Player[playerid][pNota]);
			DOF2_SetInt(file, "LocalSpawn", Player[playerid][pLocalSpawn]);
			DOF2_SetInt(file, "Enigma", Player[playerid][pEnigma]);
			DOF2_SetInt(file, "Bizz", Player[playerid][pBizKey]);
			DOF2_SetInt(file, "CarLic", Player[playerid][pCarLic]);
			DOF2_SetInt(file, "CarLicPoints", Player[playerid][pCarLicPoints]);
	        DOF2_SetInt(file, "FlyLic", Player[playerid][pFlyLic]);
			DOF2_SetInt(file, "BoatLic", Player[playerid][pBoatLic]);
			DOF2_SetInt(file, "FishLic", Player[playerid][pFishLic]);
			DOF2_SetInt(file, "GunLic", Player[playerid][pGunLic]);
            DOF2_SetInt(file, "PacoteArmas", Player[playerid][pPacoteArmas]);
			DOF2_SetInt(file, "Gun1", Player[playerid][pGun1]);
			DOF2_SetInt(file, "Gun2", Player[playerid][pGun2]);
			DOF2_SetInt(file, "Gun3", Player[playerid][pGun3]);
			DOF2_SetInt(file, "Gun4", Player[playerid][pGun4]);
			DOF2_SetInt(file, "Ammo1", Player[playerid][pAmmo1]);
			DOF2_SetInt(file, "Ammo2", Player[playerid][pAmmo2]);
			DOF2_SetInt(file, "Ammo3", Player[playerid][pAmmo3]);
			DOF2_SetInt(file, "Ammo4", Player[playerid][pAmmo4]);
			DOF2_SetInt(file, "CarTime", Player[playerid][pCarTime]);
//			DOF2_SetInt(file, "InvWeapon", Player[playerid][pInvWeapon]);
//			DOF2_SetInt(file, "InvAmmo", Player[playerid][pInvAmmo]);
			DOF2_SetInt(file, "PayDayHad", Player[playerid][pPayDayHad]);
			DOF2_SetInt(file, "CDPlayer", Player[playerid][pCDPlayer]);
			DOF2_SetInt(file, "Wins", Player[playerid][pWins]);
			DOF2_SetInt(file, "Loses", Player[playerid][pLoses]);
			DOF2_SetInt(file, "AlcoholPerk", Player[playerid][pAlcoholPerk]);
			DOF2_SetInt(file, "DrugPerk", Player[playerid][pDrugPerk]);
			DOF2_SetInt(file, "MiserPerk", Player[playerid][pMiserPerk]);
			DOF2_SetInt(file, "PainPerk", Player[playerid][pPainPerk]);
			DOF2_SetInt(file, "TraderPerk", Player[playerid][pTraderPerk]);
			DOF2_SetInt(file, "Tutorial", Player[playerid][pTut]);
			DOF2_SetInt(file, "Warnings", Player[playerid][pWarns]);
			DOF2_SetInt(file, "Adjustable", Player[playerid][pAdjustable]);
			DOF2_SetInt(file, "Fuel", Player[playerid][pFuel]);
			DOF2_SetInt(file, "Married", Player[playerid][pMarried]);
			DOF2_SetString(file, "MarriedTo",pMarriedTo[playerid]);
			DOF2_SetString(file, "Dest",Player[playerid][pDest]);
			DOF2_SetString(file, "Aviso1",Player[playerid][pAviso1]);
			DOF2_SetString(file, "Aviso2",Player[playerid][pAviso2]);
			DOF2_SetString(file, "Prisao",Player[playerid][JailReason]);
			DOF2_SetString(file, "LU",Player[playerid][pLastLogin]);
			DOF2_SetInt(file, "LS", Player[playerid][pLastSave]);
			DOF2_SetInt(file, "LogedTime", Player[playerid][pLogedTime]);
			DOF2_SetInt(file, "Skin", GetPlayerSkin(playerid));

			DOF2_SetInt(file, "DrogasD",Player[playerid][pDrogasGuardadas]);
			DOF2_SetInt(file, "Pastilhas",Player[playerid][pPastilhas]);
			DOF2_SetInt(file, "JogadorRouco",FicarRoco[playerid]);
			DOF2_SetInt(file, "Doenca",Player[playerid][pDoenca]);
			DOF2_SetBool(file, "TemMascara",Player[playerid][pTemMascara]);
			DOF2_SetBool(file, "CapaChuva",Player[playerid][pCapaChuva]);
			DOF2_SetInt(file, "IntVIP", Player[playerid][pVIP]);
            DOF2_SetBool(file, "Explosivo", Player[playerid][pExplosivo]);
            DOF2_SetBool(file, "Desbugou", Player[playerid][pDesbugou]);
			for(new v = 0; v < 5; v++)
			{
			    format(sttr, sizeof(sttr), "Carro%d", v);
			    DOF2_SetInt(file, sttr, Player[playerid][pCar][v]);
                //printf("sttr = %s && Player[%d][%d][%d] = %d", sttr, playerid, pCar, v, Player[playerid][pCar][v]);
       			// Player[playerid][pCar][0] = DOF2_GetInt(file, "Carro0");
			}

            SaveAdminTimes(playerid, file);
			DOF2_SetInt(file, "UltimaEleicao", Player[playerid][pVoto]);

			DOF2_SaveFile();
			SendClientMessage(playerid, COLOR_MARINE,"Sua conta foi salva pelo servidor!");
		}
	}
	return true;
}

stock IsStringSame(const string1[], const string2[], len) {
	for(new i = 0; i < len; i++) {
	    if(string1[i]!=string2[i])
	        return 0;
		if(string1[i] == 0 || string1[i] == '\n')
		    return true;
	}
	return true;
}

public OnPlayerLogin(playerid,password[], cleanpw[])
{
	new file[60];
	format(file, sizeof(file), "/RPG/users/%s.ini", Player[playerid][pName]);

	StopAudioStreamForPlayer(playerid);
	if(DOF2_FileExists(file))
	{
		format(Player[playerid][pKey], 128, "%s", DOF2_GetString(file, "Key"));
		format(Player[playerid][pPass], 128, "%s", DOF2_GetString(file, "Password"));
		if(IsStringSame(Player[playerid][pKey],password, 128) || IsStringSame(Player[playerid][pPass], cleanpw, 128))
		{
		    DOF2_SetString(file,"Password", cleanpw);
		    Player[playerid][pMorto] = 0;
		    new built = DOF2_GetInt(file, "GMBuilt");
	        DOF2_SetInt(file, "Online", 1);
	        DOF2_SaveFile();

	        // Milestones
			Player[playerid][pCompletedNonRepTask][0] = DOF2_GetInt(file, "NonRepTask0");
			Player[playerid][pCompletedNonRepTask][1] = DOF2_GetInt(file, "NonRepTask1");
			Player[playerid][pCompletedNonRepTask][2] = DOF2_GetInt(file, "NonRepTask2");
			Player[playerid][pCompletedNonRepTask][3] = DOF2_GetInt(file, "NonRepTask3");
			Player[playerid][pCompletedNonRepTask][4] = DOF2_GetInt(file, "NonRepTask4");

	        // Boombox
	        Player[playerid][pBoombox] = DOF2_GetBool(file, "Boombox");

	        // Multas
			multa[playerid] = DOF2_GetInt(file, "Multa");
			multas[playerid] = DOF2_GetInt(file, "Multas");

	        Player[playerid][pCreditos] = DOF2_GetInt(file, "Créditos");
	        Pacote[playerid] = DOF2_GetInt(file, "Pacote");
			Player[playerid][pLevel] = DOF2_GetInt(file, "Level");
			//format(Player[playerid][pReferral], MAX_PLAYER_NAME, DOF2_GetString(file, "Referral"));
			//AutoCinto
			Player[playerid][pAutoBelt] = DOF2_GetBool(file, "AutoCinto");
			Player[playerid][pAdmin] = DOF2_GetInt(file, "AdminLevel");
			Player[playerid][pDonateRank] = DOF2_GetInt(file, "DonateRank");
			Player[playerid][gPupgrade] = DOF2_GetInt(file, "UpgradePoints");
			Player[playerid][pConnectTime] = DOF2_GetInt(file, "ConnectedTime");
			Player[playerid][pReg] = DOF2_GetInt(file, "Registered");
			Player[playerid][pSex] = DOF2_GetInt(file, "Sex");
			Player[playerid][pAge] = DOF2_GetInt(file, "Age");
			Player[playerid][pOrigin] = DOF2_GetInt(file, "Origin");
			Player[playerid][pExp] = DOF2_GetInt(file, "Respect");
			Player[playerid][pMoney] = DOF2_GetInt(file, "Money");
			Player[playerid][pBLSCash] = DOF2_GetInt(file, "BLS Cash");
			Player[playerid][pHoraVIP] = DOF2_GetInt(file, "Hora VIP");
			Player[playerid][pBank] = DOF2_GetInt(file, "Bank");
			Player[playerid][pCrimes] = DOF2_GetInt(file, "Crimes");
			WantedPoints[playerid] = DOF2_GetInt(file, "Crimes2");
			Player[playerid][pKills] = DOF2_GetInt(file, "Kills");


			Player[playerid][pDeaths] = DOF2_GetInt(file, "Deaths");
			Player[playerid][pArrested] = DOF2_GetInt(file, "Arrested");
			Player[playerid][pWantedDeaths] = DOF2_GetInt(file, "WantedDeaths");
			Player[playerid][pPhoneBook] = DOF2_GetInt(file, "Phonebook");
			Player[playerid][pPhone] = DOF2_GetInt(file, "Phone");
			Player[playerid][pLottoNr] = DOF2_GetInt(file, "LottoNr");
			Player[playerid][pFishes] = DOF2_GetInt(file, "Fishes");
			Player[playerid][pBiggestFish] = DOF2_GetInt(file, "BiggestFish");
			Player[playerid][pJob] = DOF2_GetInt(file, "Job");
			Player[playerid][pHeadValue] = DOF2_GetInt(file, "HeadValue");
			Player[playerid][pJailed] = DOF2_GetInt(file, "Jailed");
			Player[playerid][pJailTime] = DOF2_GetInt(file, "JailTime");
			Player[playerid][pMats] = DOF2_GetInt(file, "Materials");
			Player[playerid][pDrugs] = DOF2_GetInt(file, "Drugs");
			Player[playerid][pCigarro] = DOF2_GetInt(file, "Cigarro");
			Player[playerid][pPC] = DOF2_GetInt(file, "PC");
			Player[playerid][pNBook] = DOF2_GetInt(file, "NBook");
			Player[playerid][p3G] = DOF2_GetInt(file, "3G");
			Player[playerid][pLuta] = DOF2_GetInt(file, "Luta");
			Player[playerid][pCorda] = DOF2_GetInt(file, "Corda");
			Player[playerid][pPlano] = DOF2_GetInt(file, "Plano");
			Player[playerid][pVotou] = DOF2_GetInt(file, "Votou");
			Player[playerid][pBan] = DOF2_GetInt(file, "Ban");
			Player[playerid][pLeader] = DOF2_GetInt(file, "Leader");
			Player[playerid][pMember] = DOF2_GetInt(file, "Member");
			Player[playerid][pFMember] = DOF2_GetInt(file, "FMember");
			Player[playerid][pRank] = DOF2_GetInt(file, "Rank");
			//Player[playerid][pChar] = DOF2_GetInt(file, "Char");
			Player[playerid][pContractTime] = DOF2_GetInt(file, "ContractTime");
			Player[playerid][pDetSkill] = DOF2_GetInt(file, "DetSkill");
			Player[playerid][pSexSkill] = DOF2_GetInt(file, "SexSkill");
			Player[playerid][pBoxSkill] = DOF2_GetInt(file, "BoxSkill");
			Player[playerid][pLawSkill] = DOF2_GetInt(file, "LawSkill");
			Player[playerid][pMechSkill] = DOF2_GetInt(file, "MechSkill");
			Player[playerid][pJackSkill] = DOF2_GetInt(file, "JackSkill");
			Player[playerid][pCarSkill] = DOF2_GetInt(file, "CarSkill");
			Player[playerid][pNewsSkill] = DOF2_GetInt(file, "NewsSkill");
			Player[playerid][pDrugsSkill] = DOF2_GetInt(file, "DrugsSkill");
			Player[playerid][pCookSkill] = DOF2_GetInt(file, "CookSkill");
			Player[playerid][pFishSkill] = DOF2_GetInt(file, "FishSkill");
			Player[playerid][pSHealth] = DOF2_GetFloat(file, "pSHealth");
			Player[playerid][pHealth] = DOF2_GetFloat(file, "pHealth");
			Player[playerid][pLocalX] = DOF2_GetFloat(file, "LocalX");
			Player[playerid][pLocalY] = DOF2_GetFloat(file, "LocalY");
			Player[playerid][pLocalZ] = DOF2_GetFloat(file, "LocalZ");
			Player[playerid][pInt] = DOF2_GetInt(file, "Int");
			Player[playerid][pLocal] = DOF2_GetInt(file, "Local");
			Player[playerid][pModel] = DOF2_GetInt(file, "Model");
			Player[playerid][pPnumber] = DOF2_GetInt(file, "PhoneNr");
			Player[playerid][pHouseKey] = DOF2_GetInt(file, "House");
			Player[playerid][pPaluguelkey] = DOF2_GetInt(file, "Aluguel");
			Player[playerid][pAtend] = DOF2_GetInt(file, "Atendimentos");
			Player[playerid][pNota] = DOF2_GetInt(file, "Nota");
			Player[playerid][pLocalSpawn] = DOF2_GetInt(file, "LocalSpawn");
			Player[playerid][pEnigma] = DOF2_GetInt(file, "Enigma");
			Player[playerid][pBizKey] = DOF2_GetInt(file, "Bizz");
			Player[playerid][pCarLic] = DOF2_GetInt(file, "CarLic");
			Player[playerid][pCarLicPoints] = DOF2_GetInt(file, "CarLicPoints");
			Player[playerid][pFlyLic] = DOF2_GetInt(file, "FlyLic");
			Player[playerid][pBoatLic] = DOF2_GetInt(file, "BoatLic");
			Player[playerid][pFishLic] = DOF2_GetInt(file, "FishLic");
			Player[playerid][pGunLic] = DOF2_GetInt(file, "GunLic");
			Player[playerid][pPacoteArmas] = DOF2_GetInt(file, "PacoteArmas");
			Player[playerid][pGun1] = DOF2_GetInt(file, "Gun1");
			Player[playerid][pGun2] = DOF2_GetInt(file, "Gun2");
			Player[playerid][pGun3] = DOF2_GetInt(file, "Gun3");
			Player[playerid][pGun4] = DOF2_GetInt(file, "Gun4");
			Player[playerid][pAmmo1] = DOF2_GetInt(file, "Ammo1");
			Player[playerid][pAmmo2] = DOF2_GetInt(file, "Ammo2");
			Player[playerid][pAmmo3] = DOF2_GetInt(file, "Ammo3");
			Player[playerid][pAmmo4] = DOF2_GetInt(file, "Ammo4");
			//Player[playerid][pInvWeapon] = DOF2_GetInt(file, "InvWeapon");
			//Player[playerid][pInvAmmo] = DOF2_GetInt(file, "InvAmmo");
			Player[playerid][pCarTime] = DOF2_GetInt(file, "CarTime");
			Player[playerid][pPayDayHad] = DOF2_GetInt(file, "PayDayHad");
			Player[playerid][pCDPlayer] = DOF2_GetInt(file, "CDPlayer");
			Player[playerid][pWins] = DOF2_GetInt(file, "Wins");
			Player[playerid][pLoses] = DOF2_GetInt(file, "Loses");
			Player[playerid][pAlcoholPerk] = DOF2_GetInt(file, "AlcoholPerk");
			Player[playerid][pDrugPerk] = DOF2_GetInt(file, "DrugPerk");
			Player[playerid][pMiserPerk] = DOF2_GetInt(file, "MiserPerk");
			Player[playerid][pPainPerk] = DOF2_GetInt(file, "PainPerk");
			Player[playerid][pTraderPerk] = DOF2_GetInt(file, "TraderPerk");
			Player[playerid][pTut] = DOF2_GetInt(file, "Tutorial");
			Player[playerid][pWarns] = DOF2_GetInt(file, "Warnings");
			Player[playerid][pAdjustable] = DOF2_GetInt(file, "Adjustable");
			Player[playerid][pFuel] = DOF2_GetInt(file, "Fuel");
			Player[playerid][pMarried] = DOF2_GetInt(file, "Married");
			format(pMarriedTo[playerid],128,"%s", DOF2_GetString(file, "MarriedTo"));
			format(Player[playerid][pDest],32,"%s", DOF2_GetString(file, "Dest"));
			format(Player[playerid][pAviso1],32,"%s", DOF2_GetString(file, "Aviso1"));
			format(Player[playerid][pAviso2],32,"%s", DOF2_GetString(file, "Aviso2"));
			format(Player[playerid][JailReason],92,"%s", DOF2_GetString(file, "Prisao"));

			format(Player[playerid][pLastLogin],24,"%s", DOF2_GetString(file, "LU"));
			Player[playerid][pLastSave] = DOF2_GetInt(file, "LS");
			Player[playerid][pLogedTime] = DOF2_GetInt(file, "LogedTime");

			Player[playerid][pDrogasGuardadas] = DOF2_GetInt(file, "DrogasD");
			Player[playerid][pPastilhas] = DOF2_GetInt(file, "Pastilhas");
			FicarRoco[playerid] = DOF2_GetInt(file, "JogadorRouco");
			Player[playerid][pDoenca] = DOF2_GetInt(file, "Doenca");
			Player[playerid][pTemMascara] = DOF2_GetBool(file, "TemMascara");
			Player[playerid][pCapaChuva] = DOF2_GetBool(file, "CapaChuva");
			Player[playerid][pVIP] = DOF2_GetInt(file, "IntVIP");

			Player[playerid][pCar][0] = DOF2_GetInt(file, "Carro0");
			Player[playerid][pCar][1] = DOF2_GetInt(file, "Carro1");
			Player[playerid][pCar][2] = DOF2_GetInt(file, "Carro2");
			Player[playerid][pCar][3] = DOF2_GetInt(file, "Carro3");
			Player[playerid][pCar][4] = DOF2_GetInt(file, "Carro4");

            Player[playerid][pExplosivo] = DOF2_GetBool(file, "Explosivo");
            format(Player[playerid][pRG], 32, "%s", DOF2_GetString(file, "RG"));

            LoadAdminTimes(playerid, file);
			Player[playerid][pVoto] = DOF2_GetInt(file, "UltimaEleicao");

            new bonusXP = DOF2_GetInt(file, "bonusXP");
            Player[playerid][pBonusExp] = bonusXP>4?4:bonusXP;
			new sleeptime;
			DOF2_GetInt(file, "sleep");
			if(sleeptime == 0) goto enda;
			sleeptime -= gettime();
			sleeptime = floatround(sleeptime / 60 / 60 / 4);
            Player[playerid][pBonusExp] = (bonusXP + sleeptime) > 4 ?4:(bonusXP + sleeptime);
			enda:
            if(Player[playerid][pBonusExp] > 0) {
                new strin[128];
                format(strin, 128, "{FF0000}[Info]:{FFFFFF} Você receberá %d paydays com XP dobrado.", Player[playerid][pBonusExp]);
                SendClientMessage(playerid, COLOR_RED, strin);
            }

		    if(built < BUILT)
		    {
				if(built < 20170116)
				{
				    if(Pacote[playerid] != 0)
				    {
				        CompletarNonRepMilestone(playerid, 0);
				    }
				    if(Player[playerid][pJob] != DESEMPREGADO)
				    {
						CompletarNonRepMilestone(playerid, 1);
						CompletarNonRepMilestone(playerid, 2);
				    }
				    if(Player[playerid][pCarLic] == 1)
				    {
						CompletarNonRepMilestone(playerid, 3);
				    }
				    if(Player[playerid][pMember] != 0 || Player[playerid][pLeader] != 0)
				    {
						CompletarNonRepMilestone(playerid, 4);
				    }
				}

                SendClientMessage(playerid, 0xFFFF00FF, "[Update]: {FFFFFF}Sua conta foi atualizada de acordo com a nova versão do servidor.");
				DOF2_SetInt(file, "GMBuilt", BUILT);
                DOF2_SaveFile();
			}
			gPlayerLogged[playerid] = 1;
		}
		else
		{
		    if(gPlayerLogTries[playerid] >= MAX_LOGIN_FAILS)
				Kick(playerid);  //mexer

			gPlayerLogTries[playerid] += 1;
			new string[256];
			format(string,sizeof(string),"{FFFFFF}Você errou a senha!\n\nA senha inserida está incorreta.\nSe você não registrou a conta {FF0000}%s {FFFFFF}re-conecte com outro nick.\nErros consecutivos implicarão em ban do seu IP (%d/%d)",Player[playerid][pName],gPlayerLogTries[playerid],MAX_LOGIN_FAILS);
			ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,"{FF0000}Life {FFFFFF}Simulation RPG - Senha Incorreta",string,"Logar","Sair");
	        return true;
		}

		if(Player[playerid][pBizKey] != 255)
	        if(strfind(bOwner[Player[playerid][pBizKey]], Player[playerid][pName], true) != 0)
				Player[playerid][pBizKey] = 255;

		if(Player[playerid][pVIP] != 0 && JaPassouDia(Player[playerid][pVIP])) //Ja Passou
		{
        	Player[playerid][pDonateRank] = 0;
        	SendClientMessage(playerid, SERVER_INFO,"{FF0000}{FF0000}[Info]:{FFFFFF}{FFFFFF} Seu VIP expirou.");
        	Player[playerid][pVIP] = 0;
        	Player[playerid][pHoraVIP] = 0;
		}
		else if(Player[playerid][pVIP] != 0 && PegarIntHoje() == Player[playerid][pVIP]) //Vai Acabar Hoje
		{
		    if(ClockTime[tHour] > Player[playerid][pHoraVIP])
		    {
	        	SendClientMessage(playerid, SERVER_INFO,"{FF0000}{FF0000}[Info]:{FFFFFF}{FFFFFF} Seu VIP expirou.");
	        	Player[playerid][pDonateRank] = 0;
	        	Player[playerid][pVIP] = 0;
	        	Player[playerid][pHoraVIP] = 0;
		    }
		    else
		    {
		        new HorasRestantes = Player[playerid][pHoraVIP] - ClockTime[tHour];
		        if(HorasRestantes == 1) SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Seu VIP expira no próximo PayDay.");
		        else
		        {
		            new VipString[128];
		            format(VipString, 128, "Seu VIP expira em %d horas.", HorasRestantes);
		            SendClientMessage(playerid, COLOR_RED, VipString);
		        }
		    }
		}

		if(Player[playerid][pBLSCash] > 0)
		    ComprouCash[playerid] = 1;
		else
		    ComprouCash[playerid] = 0;

		Player[playerid][pAdjustable] = 0;
		ResetPlayerMoney(playerid);
		Morrendo[playerid] = 0;
		Hospital[playerid] = 0;
		ConsumingMoney[playerid] = 1;
		GivePlayerMoney(playerid, Player[playerid][pMoney]);

		//Text Draws Login
		TextDrawHideForPlayer(playerid, TextDrawLogin0);
		TextDrawHideForPlayer(playerid, TextDrawLogin1);
		TextDrawHideForPlayer(playerid, TextDrawLogin2);
		TextDrawHideForPlayer(playerid, TextDrawLogin3);
		TextDrawHideForPlayer(playerid, TextDrawLogin4);
		TextDrawHideForPlayer(playerid, TextDrawLogin5);
		TextDrawHideForPlayer(playerid, TextDrawLogin6);
		TextDrawHideForPlayer(playerid, TextDrawLogin7);
		TextDrawHideForPlayer(playerid, TextDrawLogin8);
		TextDrawHideForPlayer(playerid, TextDrawLogin9);
		TextDrawHideForPlayer(playerid, TextDrawLogin10);
		TextDrawHideForPlayer(playerid, TextDrawLogin11);
		TextDrawHideForPlayer(playerid, TextDrawLogin12);
		TextDrawHideForPlayer(playerid, TextDrawLogin13);

		new Info[6][10];
	    split(Player[playerid][pLastLogin],Info,'/');

	    new string[128], IPPlayer[24];
    	GetPlayerIp(playerid,IPPlayer,sizeof(IPPlayer));

		if(strval(Info[0])==0)
			format(string, sizeof(string), "[Life Simulation]: Bem vindo %s!",Player[playerid][pName]);
		else
			format(string, sizeof(string), "[Life Simulation]: Bem vindo %s. Seu último login foi no dia %02d/%02d/%d às %02d:%02d:%02d",Player[playerid][pName],strval(Info[0]),strval(Info[1]),strval(Info[2]),strval(Info[3]),strval(Info[4]),strval(Info[5]));

		SendClientMessage(playerid, COLOR_WHITE, string);

		if(Player[playerid][pLastSave] > 7200)
		    Player[playerid][pLastSave] = 7200;

  		if(Player[playerid][pLastSave] <= 20)
		{
            Player[playerid][pLastSave] = 2*3600;
	        format(string, sizeof(string), "%s : Banco:%d | Mão:%d | Nível:%d | Respeito:%d | Casa:%d | Empresa:%d", Player[playerid][pName], Player[playerid][pBank],
			Player[playerid][pMoney], Player[playerid][pLevel], Player[playerid][pExp], Player[playerid][pHouseKey], Player[playerid][pBizKey]);
  		}

  		format(Player[playerid][pLastLogin], 24,"%d/%d/%d/%d/%d/%d",ClockTime[dDay],ClockTime[dMonth],ClockTime[dYear],ClockTime[tHour],ClockTime[tMinute],ClockTime[tSecond]);

		FormatLog("logins", "%s logou no servidor. IP: %s",Player[playerid][pName],IPPlayer);
        format(thestring, sizeof(thestring), "-OperServ-: %s logou no servidor. IP: %s", Player[playerid][pName],IPPlayer);
        ABroadCast(COLOR_BARRAS, thestring, 6);

        foreach(new pl: Player)
        	SetPlayerMarkerForPlayer(pl, playerid, 0xFFFFFF00);

//		SetPlayerColor(playerid, OrgsColors[Player[playerid][pMember]]); // Cor no Nick

		if(Player[playerid][pAdmin] > 0)
		{
			format(string, sizeof(string), "{E9ED00}[Life Simulation]: Você está logado como %s (nível %d) em modo Jogador.",AccountName(playerid), Player[playerid][pAdmin]);
            SendClientMessage(playerid, 0xE9ED19FF,string);

            if(Player[playerid][pAdmin] != 1)
            {
    			AdminDuty[playerid] = MODOSA_JOGANDO;
    			SetAdminWorking(playerid, true);
            }
            else
            {
    			AdminDuty[playerid] = MODOSA_RPG;
    			SetAdminWorking(playerid, false);
            }
		}

        SendClientMessage(playerid, COLOR_LIGHTBLUE,"Encontrou algum bug? Relate pelo comando /bug.");
        SetSpawnInfo(playerid, 0, Player[playerid][pModel], CivilSpawns[0], CivilSpawns[1], CivilSpawns[2], 1.0, -1, -1, -1, -1, -1, -1);

    	new tmphour, tmpminute, tmpsecond;
    	GetTimeFix(tmphour, tmpminute, tmpsecond);

    	SetPlayerTime(playerid, tmphour, tmpminute);

		Player[playerid][pMorto] = 0;
		SpawnPlayer(playerid);

		SetTimerEx("Reloguer", 5000, false, "i", playerid);
		BigSms[playerid] = 1;
		BigCW[playerid] = 1;
		BigMp[playerid] = 1;

		if(LiderIrc(playerid) != -1)
		{
		    new Lider = LiderIrc(playerid);
			format(thestring, 256, "[Irc]: {FFFFFF}Bem-Vindo. Auto-Connect no Canal %d.", Lider + 1);
			SendClientMessage(playerid, COLOR_YELLOW, thestring);

			Player[playerid][pIrcId] = Lider;
			format(thestring, 256, "[Irc]: {FFFFFF}%s entrou no Chat.", Player[playerid][pName]);
			SendIrcMessage(Lider, thestring);

			IrcInfo[Lider][IrcConnectedPlayers] ++;
		}

		SetCameraBehindPlayer(playerid);
		format(string, sizeof(string), "~w~Bem Vindo ~n~~h~~b~   %s", Player[playerid][pName]);
		DateProp(playerid);
		GameTextForPlayer(playerid, string, 5000, 1);

		if(Player[playerid][pMember] == TEAM_BOMBE && Player[playerid][pLeader] == TEAM_BOMBE)
			for(new j=0; j<50; j++)
				if(fogo[j] > 0)
		    		SetPlayerMapIcon(playerid, 50 + j, fogoposX[j],fogoposY[j],fogoposZ[j],20,2,MAPICON_GLOBAL);

		SetPlayerColor(playerid, 0xFFFFFF00);
		ShowAdminsOnMap(playerid);
		if(USE_MASK)
            TimerNome();

        DisablePlayerRaceCheckpoint(playerid);
        AtualizarTextDraws(playerid);

		new files[64];
		format(files, 64, "/RPG/Reset/%s.ini", Player[playerid][pName]);
		if(!DOF2_FileExists(files))
		{
		    DOF2_CreateFile(files);
		    DOF2_SetBool(files, "Resetado", true);
		    for(new i = 0; i < 5; i++)
		    {
				Player[playerid][pCar][i] = INVALID_VEHICLE_ID;
		    }
		    Player[playerid][pMats] = 0;
		    Player[playerid][pDrugs] = 0;
		    Player[playerid][pMoney] = 0;
		    GivePlayerGP(playerid, 2000);
		    Player[playerid][pBank] = 2000;
		    Player[playerid][pExplosivo] = false;
		    Player[playerid][pCreditos] = 0;
		    Player[playerid][pBLSCash] = 0;

			new resp = Player[playerid][pConnectTime] / 3600;
			if(resp > 125)
			    resp = 120;

			new lvl = ((resp - 30)/4);
			Player[playerid][pLevel] = lvl;
			if(Player[playerid][pLevel] < 1)
			    Player[playerid][pLevel] = 1;

			Player[playerid][pExp] = 0;
			Player[playerid][pCDPlayer] = 0;
			Player[playerid][pPhone] = 0;
			Player[playerid][p3G] = 0;
			Player[playerid][pNBook] = 0;
			Condom[playerid] = 0;
			Player[playerid][pHouseKey] = 255;
			Player[playerid][pPaluguelkey] = 255;
			Player[playerid][pBizKey] = 255;
			Player[playerid][pPC] = 0;
			Pacote[playerid] = 0;
			DOF2_SaveFile();
			SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[BLS]:{FFFFFF} Sua conta foi setada. Boa sorte em sua nova vida.");
		}
		format(files, 64, "/RPG/Reset2/%s.ini", Player[playerid][pName]);
		if(!DOF2_FileExists(files))
		{
		    DOF2_CreateFile(files);
		    DOF2_SetBool(files, "Resetado", true);
			Player[playerid][pHeadValue] = 0;
			DOF2_SaveFile();
		}
	}

 	new VIP[24], Donate, string[128];
    format(string, sizeof(string), "/RPG/users/%s.ini", Player[playerid][pName]);
    Donate = DOF2_GetInt(string, "DonateRank");
    if(Donate==0)
    {
        VIP= "{FFFFFF}Jogador Comum";
    }
    else if(Donate==1)
    {
        VIP= "{B03060}VIP Bronze";
    }
    else if(Donate==2)
    {
        VIP= "{BEBEBE}VIP Prata";
    }
    else if(Donate==3)
    {
        VIP= "{FFD700}VIP Ouro";
    }

	new str1[128],str2[1200];
    format(str1,600,"{FFF832}Informações da Conta\n\n");
    strcat(str2,str1);
    format(str1,600,"{00D900}Registro geral: {FFFFFF}%s\n", Player[playerid][pRG]);
    strcat(str2,str1);
    format(str1,600,"{00D900}Nome do jogador: {FFFFFF}%s\n", Player[playerid][pName]);
    strcat(str2,str1);
    format(str1,600,"{00D900}Tempo jogado: {FFFFFF}%s\n", Convert(Player[playerid][pConnectTime]));
    strcat(str2,str1);
    format(str1,600,"{00D900}Donate Rank: %s\n\n", VIP);
    strcat(str2,str1);
    format(str1,600,"{FFF832}Informações da Organização\n\n");
    strcat(str2,str1);
    format(str1,600,"{00D900}Organização: {FFFFFF}%s\n", OrgsNames[GetPlayerOrg(playerid)]);
    strcat(str2,str1);
    format(str1,600,"{00D900}Cargo na organização: {FFFFFF}%s\n", GetPlayerRank(playerid));
    strcat(str2,str1);
    format(str1,600,"{00D900}IP do TeamSpeak 3: {FFFFFF}ts.blsrpg.com.br\n\n");
    strcat(str2,str1);
    format(str1,600,"{1E90FF}Dica: use /novidades para ver as ultimas atualizações.");
    strcat(str2,str1);
    ShowPlayerDialog(playerid, 10977,DIALOG_STYLE_MSGBOX,"{FFFFFF}Brasil{FF0000} Life{FFFFFF} Simulation",str2,"Ok","");

	LoadPlayerToys(playerid);
	SetPlayerToys(playerid);
	return true;
}

public OnPlayerRequestSpawn(playerid) return true;

public OnPropUpdate()
{
	new label[382];
	for(new h=0;h<MAX_HOUSES;h++)
	{
		if(HouseInfo[h][hOwned] == 1)
		{
			if(HouseInfo[h][hRentabil] == 0)
				format(label, sizeof(label), "{FFFFFF}Proprietário: {00FFFF}%s \n{FFFFFF}Nível: {00FFFF}%d \n{FFFFFF}Descrição: {00FFFF}%s",hOwner[h],HouseInfo[h][hLevel], hDiscription[h]);

			else
				format(label, sizeof(label), "{FFFFFF}Proprietário: {00FFFF}%s \n{FFFFFF}Aluguel: {009900}R$%d \n{FFFFFF}Nível: {00FFFF}%d \n{FFFFFF}Descrição: {00FFFF}%s \n{FFFFFF}Digite {00FFFF}/alugarcasa {FFFFFF}para alugar um quarto",hOwner[h],HouseInfo[h][hRent],HouseInfo[h][hLevel], hDiscription[h]);

			Update3DTextLabelText(HouseInfo[h][HouseLabel], COLOR_COCONUT, label);
		}
		else if(HouseInfo[h][hOwned] == 0)
		{
 			format(label, sizeof(label), "{FFFFFF}A casa está a venda \n {FFFFFF}Descrição: {00FFFF}%s \n {FFFFFF}Preço: {009900}R$%d \n {FFFFFF}Nível : {00FFFF}%d\n {FFFFFF}Para comprar digite {00FFFF}/comprarcasa",hDiscription[h],HouseInfo[h][hValue],HouseInfo[h][hLevel]);
			Update3DTextLabelText(HouseInfo[h][HouseLabel], COLOR_COCONUT, label);
		}
	}

	for(new b = 0; b < MAX_BIZ; b++)
		Update3DTextLabelText(BizzInfo[b][BizzLabel], 0xFFFFFFF, GetBizString(b));
	return true;
}


public BroadCast(color,const string[])
{
	SendClientMessageToAll(color, string);
	return true;
}

public LerMP(color,const string[])
{
	FormatLog("mp", "%s", string);
	foreach(new i: Player)
	{
		if(GetAdminLevel(i) == 7 && BigMp[i] == 1)
		{
			SendClientMessage(i, color, string);
		}
 	}
	return true;
}

public LerCW(color,const string[])
{
	FormatLog("cw", "%s", string);
	foreach(new i: Player)
	{
		if(GetAdminLevel(i) == 7 && BigCW[i] == 1)
		{
			SendClientMessage(i, color, string);
		}
 	}
	return true;
}

public LerSMS(color,const string[])
{
	FormatLog("sms", "%s", string);
	foreach(new i: Player)
	{
		if(GetAdminLevel(i) >= 4 && BigSms[i] == 1)
		{
			SendClientMessage(i, color, string);
		}
 	}
	return true;
}

public ABroadCast(color,const string[],level)
{
	FormatLog("abroadcast", "%s", string);
	foreach(new i: Player)
	{
		if(Player[i][pAdmin] >= level || Player[i][pEnigma] > 0)
		{
			SendClientMessage(i, color, string);
		}
 	}
	return true;
}

stock SendRelato(from, const string[], level)
{
	FormatLog("Relatos", "%s", string);
	foreach(new i: Player)
		if((Player[i][pAdmin] >= level || Player[i][pEnigma] > 0) && !IgnorarRelato[i][from])
			SendClientMessage(i, COLOR_KINGS, string);
	return true;
}

public OOCNews(color,const string[])
{
	FormatLog("oocnews", "%s", string);
	foreach(new i: Player)
	{
		SendClientMessage(i, color, string);
	}
}

public SendTeamMessage(member, color, string[])
{
	foreach(new i: Player)
	{
    	if(Player[i][pMember] == member || Player[i][pLeader] == member)
		{
			SendClientMessage(i, color, string);
		}
	}
}

public SendCopMessage(color, string[])
{
	foreach(new i: Player)
	{
    	if(IsACop(i))
	    {
			SendClientMessage(i, color, string);
		}
  	}
}


public SendJobMessage(job, color, string[])
{
	foreach(new i: Player)
	{
	    if(Player[i][pJob] == job)
	    {
			SendClientMessage(i, color, string);
		}
 	}
}

public SendPointMessage(color, string[])
{
	foreach(new i: Player)
	{
	    if(PlayerToPoint(8.0, i, 2021.8811,2240.7681,2103.9536) || GetVehicleModel(GetPlayerVehicleID(i)) == 437)
	    {
			SendClientMessage(i, color, string);
		}
 	}
}

public SendDoadorMessage(color, string[])
{
	foreach(new i: Player)
	    if(Player[i][pDonateRank] > 0 || GetAdminLevel(i) > 0)
	        if(DoadorChat[i] == 1)
				SendClientMessage(i, color, string);
}

public SendAdminMessage(color, string[])
{
	foreach(new i: Player)
	    if(Player[i][pAdmin] >= 1 || Player[i][pEnigma] > 0)
			SendClientMessage(i, color, string);
}

public PlayerPlayMusic(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetTimerEx("StopMusic", 5000, false,"i", playerid);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

public StopMusic(id)
{
	PlayerPlaySound(id, 1069, 0.0, 0.0, 0.0);
}

stock ShowAjuda(playerid, help[], bool:voltar = true)
{
	new string[3800];
	new title[24];
	new entry[256];
	format(title,24,"Ajuda %s", help);
	new str[48];
	format(str,48,"/RPG/help/%s.txt", help);
	new File:file = fopen(str, io_read);
	if(file)
	{
	    while(fread(file, entry))
	    {
	        format(string,sizeof(string),"%s%s", string,entry);
	    }
	}
	if(voltar)
        ShowPlayerDialog(playerid, 100, DIALOG_STYLE_MSGBOX, title, string, "Ok", "Voltar");
    else
        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, title, string, "Fechar", "");
    return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new sendername[MAX_PLAYER_NAME];
	new string[512];

	if(dialogid == DIALOG_NEON)
	{
	    new vehid = GetPlayerVehicleID(playerid);
	    new veh = GetOwnedVehicleID(vehid);

		if(response)
		{
			if(listitem == 5)
			{
			    if(CarInfo[veh][cHasNeon] != 0)
			    {
			        if(GetPlayerGP(playerid) < 300)
			        {
	   				    DescerNeon(playerid);
						return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem o dinheiro necessário.");
					}
					GivePlayerGP(playerid, -300);
					GiveBizMoney(Biz_Tunning, 300);

				    DestroyObject(CarInfo[veh][cNeon][0]);
				    DestroyObject(CarInfo[veh][cNeon][1]);
				    CarInfo[veh][cHasNeon] = 0;
				    SetEngine(vehid, false);
	            	GameTextForPlayer(playerid, "~w~Removendo neon", 3500, 5);
	            	SetTimerEx("NeonRemoved", 4000, false, "ii", vehid, playerid);
	            	return true;
			    }
			    DescerNeon(playerid);
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Seu carro não possui neon.");
            }
            if(veh == INVALID_VEHICLE_ID)
		    {
  			    DescerNeon(playerid);
		        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode colocar neon em carros que não sejam próprios.");
		    }
		    if(CarInfo[veh][cHasNeon] != 0)
		    {
  			    DescerNeon(playerid);
		        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já tem neon no seu carro. Desinstale-o primeiro.");
			}
		    if(listitem == 0)
		    {
		        if(GetPlayerGP(playerid) < 2000)
				{
   				    DescerNeon(playerid);
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem o dinheiro necessário.");
				}
				GivePlayerGP(playerid, -2000);
				GiveBizMoney(Biz_Tunning, 2000);

		        CarInfo[veh][cHasNeon] = 18648;
            	CarInfo[veh][cNeon][0] = CreateObject(18648,0,0,0,0,0,0);
            	CarInfo[veh][cNeon][1] = CreateObject(18648,0,0,0,0,0,0);
            	AttachObjectToVehicle(CarInfo[veh][cNeon][0], vehid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	AttachObjectToVehicle(CarInfo[veh][cNeon][1], vehid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SetEngine(vehid, false);
            	GameTextForPlayer(playerid, "~w~Adicionando neon~b~ azul", 3500, 5);
            	SetTimerEx("NeonAdded", 4000, false, "ii", vehid, playerid);
			}
			if(listitem == 1)
			{
   				if(GetPlayerGP(playerid) < 2000)
   				{
   				    DescerNeon(playerid);
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem o dinheiro necessário.");
				}
				GivePlayerGP(playerid, -2000);
				GiveBizMoney(Biz_Tunning, 2000);

		        CarInfo[veh][cHasNeon] = 18649;
            	CarInfo[veh][cNeon][0] = CreateObject(18649,0,0,0,0,0,0);
            	CarInfo[veh][cNeon][1] = CreateObject(18649,0,0,0,0,0,0);
            	AttachObjectToVehicle(CarInfo[veh][cNeon][0], vehid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	AttachObjectToVehicle(CarInfo[veh][cNeon][1], vehid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SetEngine(vehid, false);
            	GameTextForPlayer(playerid, "~w~Adicionando neon~g~ verde", 3500, 5);
            	SetTimerEx("NeonAdded", 4000, false, "ii", vehid, playerid);
			}
			if(listitem == 2)
			{
			    if(GetPlayerGP(playerid) < 2000)
   				{
   				    DescerNeon(playerid);
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem o dinheiro necessário.");
				}
				GivePlayerGP(playerid, -2000);
				GiveBizMoney(Biz_Tunning, 2000);

		        CarInfo[veh][cHasNeon] = 18650;
            	CarInfo[veh][cNeon][0] = CreateObject(18650,0,0,0,0,0,0);
            	CarInfo[veh][cNeon][1] = CreateObject(18650,0,0,0,0,0,0);
            	AttachObjectToVehicle(CarInfo[veh][cNeon][0], vehid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	AttachObjectToVehicle(CarInfo[veh][cNeon][1], vehid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SetEngine(vehid, false);
            	GameTextForPlayer(playerid, "~w~Adicionando neon~y~ amarelo", 3500, 5);
            	SetTimerEx("NeonAdded", 4000, false, "ii", vehid, playerid);
			}
			if(listitem == 3)
			{
   				if(GetPlayerGP(playerid) < 3500)
   				{
   				    DescerNeon(playerid);
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem o dinheiro necessário.");
				}
				GivePlayerGP(playerid, -3500);
				GiveBizMoney(Biz_Tunning, 3500);

		        CarInfo[veh][cHasNeon] = 18652;
            	CarInfo[veh][cNeon][0] = CreateObject(18652,0,0,0,0,0,0);
            	CarInfo[veh][cNeon][1] = CreateObject(18652,0,0,0,0,0,0);
            	AttachObjectToVehicle(CarInfo[veh][cNeon][0], vehid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	AttachObjectToVehicle(CarInfo[veh][cNeon][1], vehid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SetEngine(vehid, false);
            	GameTextForPlayer(playerid, "~w~Adicionando neon~w~ branco", 3500, 5);
            	SetTimerEx("NeonAdded", 4000, false, "ii", vehid, playerid);
			}
			if(listitem == 4)
			{
   				if(GetPlayerGP(playerid) < 3500)
   				{
   				    DescerNeon(playerid);
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem o dinheiro necessário.");
				}
				GivePlayerGP(playerid, -3500);
				GiveBizMoney(Biz_Tunning, 3500);

		        CarInfo[veh][cHasNeon] = 18651;
            	CarInfo[veh][cNeon][0] = CreateObject(18651,0,0,0,0,0,0);
            	CarInfo[veh][cNeon][1] = CreateObject(18651,0,0,0,0,0,0);
            	AttachObjectToVehicle(CarInfo[veh][cNeon][0], vehid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	AttachObjectToVehicle(CarInfo[veh][cNeon][1], vehid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				SetEngine(vehid, false);
            	GameTextForPlayer(playerid, "~w~Adicionando neon~p~ rosa", 3500, 5);
            	SetTimerEx("NeonAdded", 4000, false, "ii", vehid, playerid);
			}
		}
		else
		{
			DescerNeon(playerid);
		}
		return true;
 	}
	if(dialogid == DIALOG_MILESTONES)
	{
		if(!response)
		    return true;

		if(listitem == 0)
		{
		    new sstring[64];
			for(new i = 0; i < 5; i ++)
			{
			    if(Player[playerid][pCompletedNonRepTask][i] == 1)
					format(sstring, 64, "{00FF00}%s\n", MilNonRepeatTasks[i][milTask]);
				else
				    format(sstring, 64, "{FF0000}%s\n", MilNonRepeatTasks[i][milTask]);

				strcat(string, sstring);
			}
			ShowPlayerDialog(playerid, DIALOG_REPMILESTONE, DIALOG_STYLE_LIST, "Missões Iniciais", string, "Ver", "Fechar");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este sistema está em fase de implementação. Aguarde até a próxima versão.");
		}
	    return true;
	}
	if(dialogid == DIALOG_REPMILESTONE)
	{
	    if(!response)
	        return true;

		new completed[] = "{00FF00}Completado";
		new uncompleted[] = "{FF0000}Não completado";

		format(string, 512, "{FFFFFF}\nInformações da missão:\n\n\"%s\"\n\n%s\n\nRecompensas: R${FFFF00}%d{FFFFFF}, {FFFF00}%d {FFFFFF}Respeitos e BLS${FFFF00}%d{FFFFFF}.\n\nStatus: %s{FFFFFF}.", MilNonRepeatTasks[listitem][milTask], MilNonRepeatTasks[listitem][milHint], Mil1Grana, Mil1Resp, Mil1Cash, (Player[playerid][pCompletedNonRepTask][listitem] == 1 ? completed : uncompleted));
		ShowPlayerDialog(playerid, DIALOG_INFMILESTONE, DIALOG_STYLE_MSGBOX, "Missão Inicial", string, "Ok", "");
	}
	if(dialogid == DIALOG_BOOMBOX)
	{
		if(!response)
			return true;

		switch(listitem)
  		{
    		case 0:
      		{
			  	foreach(Player, i)
					if(IsPlayerInDynamicArea(i, Player[playerid][pDynamicBBArea]))
						PlayAudioStreamForPlayer(i, "http://live.hunterfm.com/live", Player[playerid][pDynamicBBX], Player[playerid][pDynamicBBY], Player[playerid][pDynamicBBZ], 15.0, 1);

		  		format(Player[playerid][pDynamicBBStation], 128, "http://live.hunterfm.com/live");
            }
            case 1:
            {
			  	foreach(Player, i)
					if(IsPlayerInDynamicArea(i, Player[playerid][pDynamicBBArea]))
						PlayAudioStreamForPlayer(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1034744", Player[playerid][pDynamicBBX], Player[playerid][pDynamicBBY], Player[playerid][pDynamicBBZ], 15.0, 1);

		  		format(Player[playerid][pDynamicBBStation], 128, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1034744");
            }
            case 2:
            {
			  	foreach(Player, i)
					if(IsPlayerInDynamicArea(i, Player[playerid][pDynamicBBArea]))
						PlayAudioStreamForPlayer(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1147026", Player[playerid][pDynamicBBX], Player[playerid][pDynamicBBY], Player[playerid][pDynamicBBZ], 15.0, 1);

		  		format(Player[playerid][pDynamicBBStation], 128, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1147026");
            }
            case 3:
            {
			  	foreach(Player, i)
					if(IsPlayerInDynamicArea(i, Player[playerid][pDynamicBBArea]))
						PlayAudioStreamForPlayer(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=883552", Player[playerid][pDynamicBBX], Player[playerid][pDynamicBBY], Player[playerid][pDynamicBBZ], 15.0, 1);

		  		format(Player[playerid][pDynamicBBStation], 128, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=883552");
			}
			case 4:
			{
			  	foreach(Player, i)
					if(IsPlayerInDynamicArea(i, Player[playerid][pDynamicBBArea]))
						PlayAudioStreamForPlayer(i, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1304518", Player[playerid][pDynamicBBX], Player[playerid][pDynamicBBY], Player[playerid][pDynamicBBZ], 15.0, 1);

		  		format(Player[playerid][pDynamicBBStation], 128, "http://yp.shoutcast.com/sbin/tunein-station.pls?id=1304518");
			}
			case 5:
			{
			    ShowPlayerDialog(playerid, DIALOG_BOOMBOX1, DIALOG_STYLE_INPUT, "URL para a Boombox", "Digite uma URL para tocar na Boombox", "OK", "Cancelar");
			}
			case 6:
			{
                if(IsValidDynamicArea(Player[playerid][pDynamicBBArea]))
			    {
					format(string, sizeof(string), "%s desligou a Boombox.", Player[playerid][pName]);
					ProxDetectorEx(15, playerid, string, COLOR_PURPLE);
			        foreach(Player, i)
			            if(IsPlayerInDynamicArea(i, Player[playerid][pDynamicBBArea]))
							StopAudioStreamForPlayer(i);

					Player[playerid][pDynamicBBArea] = 0;
				}
				return SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você desligou a sua Boombox.");
			}
		}
		return SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você escolheu a rádio da sua Boombox.");
	}
	if(dialogid == DIALOG_BOOMBOX1)
	{
		if(response)
		{
		    if(isnull(inputtext))
		        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não digitou uma URL.");

			if(Player[playerid][pDynamicBB] != 0)
			{
			    foreach(Player, i)
					if(IsPlayerInDynamicArea(i, Player[playerid][pDynamicBBArea]))
						PlayAudioStreamForPlayer(i, inputtext, Player[playerid][pDynamicBBX], Player[playerid][pDynamicBBY], Player[playerid][pDynamicBBZ], 15, 1);

				format(Player[playerid][pDynamicBBStation], 128, inputtext);
				return 1;
			}
		}
		return 1;
	}
	else if(dialogid == 6601)
	{
	    if(!response)
        {
            RemovePlayerFromVehicle(playerid);
            Descongelar(playerid);
            return 1;
        }
	    new Veiculo = TransportVehicle(GetPlayerVehicleID(playerid));
	    if(Veiculo == 3)
	    {
		    if(GetPlayerGP(playerid) < 10000) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem R$10.000.");
		    GivePlayerGP(playerid, -10000);
		    VeiculoMaterialAlugado[Veiculo][0] = GetPlayerOrg(playerid);
		    VeiculoMaterialAlugado[Veiculo][1] = TEMPO_ALUGUEL;
		    SetEngine(VeiculosMateriais[Veiculo], true);
		    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você alugou este veículo por R$10.000. Em 30 Minutos irá Respawnar.");
		    return 1;
	    }
	    if(GetPlayerGP(playerid) < 5000) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem R$5.000.");
	    GivePlayerGP(playerid, -5000);
	    VeiculoMaterialAlugado[Veiculo][0] = GetPlayerOrg(playerid);
	    VeiculoMaterialAlugado[Veiculo][1] = TEMPO_ALUGUEL;
	    SetEngine(VeiculosMateriais[Veiculo], true);
	    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você pagou R$5.000 para mais 30 Minutos.");
	    return 1;
	}
	else if(dialogid == 6602)
	{
        new Veiculo = TransportVehicle(GetPlayerVehicleID(playerid));
        if(!IsAnTransportVehicle(Veiculo))
        {
            Veiculo = TransportVehicle(Player[playerid][LastVeh]);
            if(!IsAnTransportVehicle(Veiculo))
                return 1;
        }

	    if(!response)
        {
		    SetVehicleToRespawn(VeiculosMateriais[Veiculo]);
		    AddVehicleMaterial(VeiculosMateriais[Veiculo], 0);
		    TrunkInfo[VeiculosMateriais[Veiculo]][TrunkMateriais] = 0;
		    VeiculoMaterialAlugado[Veiculo][0] = 0;
		    VeiculoMaterialAlugado[Veiculo][1] = 0;
            return 1;
        }
	    if(Veiculo == 3)
	    {
		    if(GetPlayerGP(playerid) < 20000) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem R$20000.");
		    GivePlayerGP(playerid, -20000);
		    VeiculoMaterialAlugado[Veiculo][0] = GetPlayerOrg(playerid);
		    VeiculoMaterialAlugado[Veiculo][1] = TEMPO_ALUGUEL;
		    SetEngine(VeiculosMateriais[Veiculo], true);
		    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você pagou R$20.000 para mais 30 Minutos.");
		    return 1;
	    }
	    if(GetPlayerGP(playerid) < 10000) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem R$10.000.");
	    GivePlayerGP(playerid, -10000);
	    VeiculoMaterialAlugado[Veiculo][0] = GetPlayerOrg(playerid);
	    VeiculoMaterialAlugado[Veiculo][1] = TEMPO_ALUGUEL;
	    SetEngine(VeiculosMateriais[Veiculo], true);
	    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você pagou R$10.000 para mais 30 Minutos.");
	    return 1;
	}
	else if(dialogid == 6540 || dialogid == 6541 || dialogid == 6542 || dialogid == 6543)
	{
	    if(!response) return 1;
	    new Org = GetPlayerOrg(playerid), Materiais = 0;
		/*
		6540 = format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Taco de Golf\t10\n3 - {FFFFFF}+ AK-47\t\t25\n4 - {FFFFFF}+ ShotGun\t\t25\n5 - {FFFFFF}+ Rifle\t\t35");
		6541 = format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Bastão\t\t10\n3 - {FFFFFF}+ AK-47\t\t25\n4 - {FFFFFF}+ ShotGun\t\t25\n5 - {FFFFFF}+ Rifle\t\t35");
		6542 = format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Katana\t\t20\n3 - {FFFFFF}+ AK-47\t\t25\n4 - {FFFFFF}+ ShotGun\t\t25\n5 - {FFFFFF}+ Rifle\t\t35");
		6543 = format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Soco Englês\t15\n3 - {FFFFFF}+ M4\t\t\t35\n4 - {FFFFFF}+ Sniper\t\t40\n5 - {FFFFFF}+ C4\t\t\t50\n6 - {FFFFFF}+ Bazooca\t\t75");
		*/
		if(listitem == 0) //Colete para Todos
		{
		    if(EquipouColete[playerid]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já pegou colete.");
		    if(CofreOrg[Org][cfDrogas] >= 18) Materiais = 18;
		    else if(CofreOrg[Org][cfDrogas] > 0) Materiais = CofreOrg[Org][cfDrogas];
			else return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Sua organização não tem drogas suficientes no cofre.");

			CofreOrg[Org][cfDrogas] -= Materiais;
			AddColete(playerid, (Materiais * 5), 90.0);
            EquipouColete[playerid] = true;
			FalarEx(playerid, "pegou o colete.", 30.0);
			return 1;
		}

		if(listitem > Player[playerid][pRank] && Player[playerid][pLeader] == 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem o cargo necessário para se equipar com estas armas.");
        if(Equipou[playerid]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já se equipou.");

		if(listitem >= 1) //Eagle e MP5 para Todos
		{
		    if(CofreOrg[Org][cfMat] < Materiais + 50) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Sua organização não tem materiais suficientes no cofre.");
		    Materiais += 50;
		    CofreOrg[Org][cfMat] -= 50;
		    SafeGivePlayerWeapon(playerid, 24, (7*20));
		    SafeGivePlayerWeapon(playerid, 29, (30*20));
		}
		if(listitem >= 2)
		{
		    if(dialogid == 6540)
		    {
			    if(CofreOrg[Org][cfMat] < Materiais + 10) goto SemMateriais;
			    Materiais += 10;
			    CofreOrg[Org][cfMat] -= 10;
			    SafeGivePlayerWeapon(playerid, 2, 1);
		    }
		    else if(dialogid == 6541)
		    {
			    if(CofreOrg[Org][cfMat] < Materiais + 10) goto SemMateriais;
			    Materiais += 10;
			    CofreOrg[Org][cfMat] -= 10;
			    SafeGivePlayerWeapon(playerid, 41, 750);
		    }
		    else if(dialogid == 6542)
		    {
			    if(CofreOrg[Org][cfMat] < Materiais + 20) goto SemMateriais;
			    Materiais += 20;
			    CofreOrg[Org][cfMat] -= 20;
			    SafeGivePlayerWeapon(playerid, 8, 1);
		    }
		    else
		    {
			    if(CofreOrg[Org][cfMat] < Materiais + 15) goto SemMateriais;
			    Materiais += 15;
			    CofreOrg[Org][cfMat] -= 15;
			    SafeGivePlayerWeapon(playerid, 1, 1);
		    }
		}
		if(listitem >= 3)
		{
		    if(dialogid != 6543)
		    {
			    if(CofreOrg[Org][cfMat] < Materiais + 25) goto SemMateriais;
			    Materiais += 25;
			    CofreOrg[Org][cfMat] -= 25;
			    SafeGivePlayerWeapon(playerid, 30, (30*10));
		    }
		    else
		    {
			    if(CofreOrg[Org][cfMat] < Materiais + 35) goto SemMateriais;
			    Materiais += 35;
			    CofreOrg[Org][cfMat] -= 35;
			    SafeGivePlayerWeapon(playerid, 31, (50*10));
		    }
		}
		if(listitem >= 4)
		{
		    if(dialogid != 6543)
		    {
			    if(CofreOrg[Org][cfMat] < Materiais + 25) goto SemMateriais;
			    Materiais += 25;
			    CofreOrg[Org][cfMat] -= 25;
			    SafeGivePlayerWeapon(playerid, 25, 50);
		    }
		    else
		    {
			    if(CofreOrg[Org][cfMat] < Materiais + 40) goto SemMateriais;
			    Materiais += 40;
			    CofreOrg[Org][cfMat] -= 40;
			    SafeGivePlayerWeapon(playerid, 34, 250);
		    }
		}
		if(listitem >= 5)
		{
		    if(dialogid != 6543)
		    {
			    if(CofreOrg[Org][cfMat] < Materiais + 35) goto SemMateriais;
			    Materiais += 35;
			    CofreOrg[Org][cfMat] -= 35;
			    SafeGivePlayerWeapon(playerid, 33, 25);
		    }
		    else
		    {
			    if(CofreOrg[Org][cfMat] < Materiais + 50) goto SemMateriais;
			    Materiais += 50;
			    CofreOrg[Org][cfMat] -= 50;
			    SafeGivePlayerWeapon(playerid, 39, 5);
		    }
		}
		if(listitem == 6)
		{
		    if(dialogid != 6543)
		    {
			    if(CofreOrg[Org][cfMat] < Materiais + 50) goto SemMateriais;
			    Materiais += 50;
			    CofreOrg[Org][cfMat] -= 50;
			    SafeGivePlayerWeapon(playerid, 16, 5);
		    }
		    else
		    {
			    if(CofreOrg[Org][cfMat] < Materiais + 75) goto SemMateriais;
			    Materiais += 75;
			    CofreOrg[Org][cfMat] -= 75;
			    SafeGivePlayerWeapon(playerid, 36, 5);
		    }
		}
		goto Fim;
		SemMateriais:
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Sua organização não possui materiais suficientes no cofre.");
		Fim:
		Equipou[playerid] = true;
		FalarEx(playerid, "pegou as Armas.", 30.0);
		return 1;
	}
    else if(dialogid == 10001) //Abrir Evento
    {
        if(response)
            AbrirEvento(playerid, true);
        else
            AbrirEvento(playerid, false);
    }
	else if(dialogid == 9850) //Porta Malas Armas
	{
	    if(!response) return 1;
		TrunkPlayer[playerid][1] = listitem;
		if(TrunkInfo[TrunkPlayer[playerid][0]][TrunkArmas][listitem] == 0)
		{
		    format(string, 256, "{FFFFFF}Você deseja guardar esta arma no seu porta malas?\n\n{FFFFFF}Arma:{FF0000} %s\n{FFFFFF}Balas:{FFFF00} %d.", GetWeaponNameEx(GetPlayerWeapon(playerid)), GetPlayerAmmo(playerid));
		    ShowPlayerDialog(playerid, 9859, DIALOG_STYLE_MSGBOX, "Guardar Arma:", string, "Sim", "Nao");
		    return 1;
		}
		else
		{
		    ShowPlayerDialog(playerid, 9851, DIALOG_STYLE_LIST, "Arma:", "Guardar\nRetirar", "Selecionar", "Sair");
		    return 1;
		}
	}
	else if(dialogid == 9851) //Guardar / Retirar Arma
	{
	    if(!response) return 1;

		new VeiculoId = TrunkPlayer[playerid][0];
		new SlotId = TrunkPlayer[playerid][1];
		if(listitem == 0)
		{
		    if(GetPlayerWeapon(playerid) != TrunkInfo[VeiculoId][TrunkArmas][SlotId])
		    {
		        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Slot ocupado.");
		        return 1;
		    }
			TrunkInfo[VeiculoId][TrunkBalas][SlotId] = GetPlayerAmmo(playerid);
		    RemovePlayerWeapon(playerid, GetPlayerWeapon(playerid));
			FalarEx(playerid, "colocou algo no Porta-Malas.", 30.0);
		}
		else if(listitem == 1)
		{
		    SafeGivePlayerWeapon(playerid, TrunkInfo[VeiculoId][TrunkArmas][SlotId], TrunkInfo[VeiculoId][TrunkBalas][SlotId]);
			TrunkInfo[VeiculoId][TrunkArmas][SlotId] = 0;
			TrunkInfo[VeiculoId][TrunkBalas][SlotId] = 0;
			FalarEx(playerid, "retirou algo do Porta-Malas.", 30.0);
		}
        if(GetOwnedVehicleID(VeiculoId) != INVALID_VEHICLE_ID) SaveTrunkEx(Player[playerid][pName], VeiculoId, CarInfo[GetOwnedVehicleID(VeiculoId)][cTrunkID]);
		else SaveTrunk(VeiculoId);
		return 1;
	}
	else if(dialogid == 9859) //Colocar Arma
	{
	    if(!response) return 1;

		new VeiculoId = TrunkPlayer[playerid][0];
		new SlotId = TrunkPlayer[playerid][1];

		TrunkInfo[VeiculoId][TrunkArmas][SlotId] = GetPlayerWeapon(playerid);
		TrunkInfo[VeiculoId][TrunkBalas][SlotId] = GetPlayerAmmo(playerid);

        RemovePlayerWeapon(playerid, GetPlayerWeapon(playerid));
		FalarEx(playerid, "colocou algo no Porta-Malas.", 30.0);

        if(GetOwnedVehicleID(VeiculoId) != INVALID_VEHICLE_ID) SaveTrunkEx(Player[playerid][pName], VeiculoId, CarInfo[GetOwnedVehicleID(VeiculoId)][cTrunkID]);
		else SaveTrunk(VeiculoId);
		return 1;
	}
	else if(dialogid == 9860) //Drogas
	{
	    if(!response || listitem == 0) return 1;

	    if(listitem == 1) ShowPlayerDialog(playerid, 9861, DIALOG_STYLE_INPUT, "Drogas:", "Quantas Drogas deseja Colocar?", "Colocar", "Sair");
	    else if(listitem == 2) ShowPlayerDialog(playerid, 9862, DIALOG_STYLE_INPUT, "Drogas:", "Quantas Drogas deseja Retirar?", "Retirar", "Sair");
	    return 1;
	}
	else if(dialogid == 9861) //Colocar Drogas
	{
	    if(!response || !strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) <= 0) return 1;
		new Quantidade = strval(inputtext),
		    VeiculoId = TrunkPlayer[playerid][0];
		if(Quantidade > Player[playerid][pDrugs]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem tantas Drogas.");
		TrunkInfo[VeiculoId][TrunkDrogas] += Quantidade;
		Player[playerid][pDrugs] -= Quantidade;
		FalarEx(playerid, "colocou algo no Porta-Malas.", 30.0);

        if(GetOwnedVehicleID(VeiculoId) != INVALID_VEHICLE_ID) SaveTrunkEx(Player[playerid][pName], VeiculoId, CarInfo[GetOwnedVehicleID(VeiculoId)][cTrunkID]);
		else SaveTrunk(VeiculoId);
		return 1;
	}
	else if(dialogid == 9862) //Retirar Drogas
	{
	    if(!response || !strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) <= 0) return 1;
		new Quantidade = strval(inputtext),
			VeiculoId = TrunkPlayer[playerid][0];
		if(Quantidade > TrunkInfo[VeiculoId][TrunkDrogas]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Porta-Malas não tem tantas Drogas.");
		Player[playerid][pDrugs] += Quantidade;
		TrunkInfo[VeiculoId][TrunkDrogas] -= Quantidade;
		FalarEx(playerid, "retirou algo do Porta-Malas.", 30.0);

        if(GetOwnedVehicleID(VeiculoId) != INVALID_VEHICLE_ID) SaveTrunkEx(Player[playerid][pName], VeiculoId, CarInfo[GetOwnedVehicleID(VeiculoId)][cTrunkID]);
		else SaveTrunk(VeiculoId);
		return 1;
	}
	else if(dialogid == 9870) //Materiais
	{
	    if(!response || listitem == 0) return 1;

	    if(listitem == 1) ShowPlayerDialog(playerid, 9871, DIALOG_STYLE_INPUT, "Materiais:", "Quantos Materiais deseja Colocar?", "Colocar", "Sair");
	    else if(listitem == 2) ShowPlayerDialog(playerid, 9872, DIALOG_STYLE_INPUT, "Materiais:", "Quantos Materiais deseja Retirar?", "Retirar", "Sair");
	}
	else if(dialogid == 9871) //Colocar Materiais
	{
	    if(!response || !strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) <= 0) return 1;
	    new VeiculoId = TrunkPlayer[playerid][0];
	    if(GetMaxVehMaterial(VeiculoId) < 1) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode colocar materiais neste Veiculo.");

		new Quantidade = strval(inputtext);
		if(Quantidade > Player[playerid][pMats]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem tantos materiais.");
		else if((Quantidade + TrunkInfo[VeiculoId][TrunkMateriais]) > GetMaxVehMaterial(VeiculoId))
		{
		    format(thestring, 256, "[ERRO]:{FFFFFF} O limite máximo de materiais é %d.", GetMaxVehMaterial(VeiculoId));
		    SendClientMessage(playerid, COLOR_RED, thestring);
		    return 1;
		}
		Player[playerid][pMats] -= Quantidade;
		TrunkInfo[VeiculoId][TrunkMateriais] += Quantidade;

		format(thestring, sizeof(thestring), "Materiais: %d/%d", TrunkInfo[VeiculoId][TrunkMateriais], GetMaxVehMaterial(VeiculoId));
		SendClientMessage(playerid, -1, thestring);
		FalarEx(playerid, "colocou algo no Porta-Malas.", 30.0);

		AddVehicleMaterial(VeiculoId, TrunkInfo[VeiculoId][TrunkMateriais]);

        if(GetOwnedVehicleID(VeiculoId) != INVALID_VEHICLE_ID) SaveTrunkEx(Player[playerid][pName], VeiculoId, CarInfo[GetOwnedVehicleID(VeiculoId)][cTrunkID]);
		else SaveTrunk(VeiculoId);
	}
	else if(dialogid == 9872) //Remover Materiais
	{
	    if(!response || !strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) <= 0) return 1;
	    new VeiculoId = TrunkPlayer[playerid][0];
	    if(GetMaxVehMaterial(VeiculoId) < 1) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode retirar materiais neste veículo.");

		new Quantidade = strval(inputtext);
		if(Quantidade > TrunkInfo[VeiculoId][TrunkMateriais]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não possui tantos materiais.");
		if(Quantidade + Player[playerid][pMats] > 1000) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você só pode carregar 1000 materiais.");
		Player[playerid][pMats] += Quantidade;
		TrunkInfo[VeiculoId][TrunkMateriais] -= Quantidade;

		format(thestring, sizeof(thestring), "Materiais: %d/%d", TrunkInfo[VeiculoId][TrunkMateriais], GetMaxVehMaterial(VeiculoId));
		SendClientMessage(playerid, -1, thestring);
		FalarEx(playerid, "retirou algo do Porta-Malas.", 30.0);

		RemoveVehicleMaterial(VeiculoId, TrunkInfo[VeiculoId][TrunkMateriais]);

        if(GetOwnedVehicleID(VeiculoId) != INVALID_VEHICLE_ID) SaveTrunkEx(Player[playerid][pName], VeiculoId, CarInfo[GetOwnedVehicleID(VeiculoId)][cTrunkID]);
		else SaveTrunk(VeiculoId);
	}
	else if(dialogid == 9880) //Cordas
	{
	    if(!response || listitem == 0) return 1;

	    if(listitem == 1) ShowPlayerDialog(playerid, 9881, DIALOG_STYLE_INPUT, "Cordas:", "Quantas Cordas deseja Colocar?", "Colocar", "Sair");
	    else if(listitem == 2) ShowPlayerDialog(playerid, 9882, DIALOG_STYLE_INPUT, "Materiais:", "Quantas Cordas deseja Retirar?", "Retirar", "Sair");
	}
	else if(dialogid == 9881) //Colocar Cordas
	{
	    if(!response || !strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) <= 0) return 1;
	    new VeiculoId = TrunkPlayer[playerid][0],
			Quantidade = strval(inputtext);

		if(Quantidade > Player[playerid][pCorda]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem tantas Cordas.");
		Player[playerid][pCorda] -= Quantidade;
		TrunkInfo[VeiculoId][TrunkCordas] += Quantidade;
		FalarEx(playerid, "colocou algo no Porta-Malas.", 30.0);

        if(GetOwnedVehicleID(VeiculoId) != INVALID_VEHICLE_ID) SaveTrunkEx(Player[playerid][pName], VeiculoId, CarInfo[GetOwnedVehicleID(VeiculoId)][cTrunkID]);
		else SaveTrunk(VeiculoId);
	}
	else if(dialogid == 9882) //Retirar Cordas
	{
	    if(!response || !strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) <= 0) return 1;
	    new VeiculoId = TrunkPlayer[playerid][0],
			Quantidade = strval(inputtext);

		if(Quantidade > TrunkInfo[VeiculoId][TrunkCordas]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem tantas Cordas.");
		Player[playerid][pCorda] += Quantidade;
		TrunkInfo[VeiculoId][TrunkCordas] -= Quantidade;
		FalarEx(playerid, "retirou algo do Porta-Malas.", 30.0);

        if(GetOwnedVehicleID(VeiculoId) != INVALID_VEHICLE_ID) SaveTrunkEx(Player[playerid][pName], VeiculoId, CarInfo[GetOwnedVehicleID(VeiculoId)][cTrunkID]);
		else SaveTrunk(VeiculoId);
	}
    else if(dialogid == 4992) //Apreender
    {
        if(!response)
            return 1;

        new VeiculoId = TrunkPlayer[playerid][0];
        if(listitem != 8)
        {
            if(listitem < 5)
            {
                TrunkInfo[VeiculoId][TrunkArmas][listitem] = 0;
                TrunkInfo[VeiculoId][TrunkBalas][listitem] = 0;
            }
            else if(listitem == 5)
                TrunkInfo[VeiculoId][TrunkDrogas] = 0;
            else if(listitem == 6)
                TrunkInfo[VeiculoId][TrunkMateriais] = 0;
            else if(listitem == 7)
                TrunkInfo[VeiculoId][TrunkCordas] = 0;

            FalarEx(playerid, "apreendeu algo do Porta-Malas.", 30.0);
            return 1;
        }
        for(new i = 0; i < 5; i++)
        {
            TrunkInfo[VeiculoId][TrunkArmas][i] = 0;
            TrunkInfo[VeiculoId][TrunkBalas][i] = 0;
        }
        TrunkInfo[VeiculoId][TrunkDrogas] = 0;
        TrunkInfo[VeiculoId][TrunkMateriais] = 0;
        TrunkInfo[VeiculoId][TrunkCordas] = 0;

        FalarEx(playerid, "apreendeu tudo do Porta-Malas.", 30.0);
        return 1;
    }
	else if(dialogid == 1547) //Cofre da Org
	{
	    if(!response) return 1;
	    else if(listitem == 0) //Dinheiro
	    {
	    	if(Player[playerid][pRank] < 5 && Player[playerid][pLeader] == 0)
			{
			    format(thestring, 256, "{FFFFFF}Sua Org tem {009900}R$%d{FFFF00} no Cofre.", GetOrgMoney(GetPlayerOrg(playerid)));
			    ShowPlayerDialog(playerid, 2099, DIALOG_STYLE_MSGBOX, "{009900}Dinheiro:", thestring, "Voltar", "");
			}
	    	else
			{
			    format(thestring, 256, "{FFFFFF}Quantidade: {009900}R$%d{FFFF00}.\n{FFFFFF}Sacar\n{FFFFFF}Depositar", GetOrgMoney(GetPlayerOrg(playerid)));
			    ShowPlayerDialog(playerid, 2096, DIALOG_STYLE_LIST, "{009900}Dinheiro:", thestring, "Selecionar", "Voltar");
			}
			return 1;
	    }
	    else if(listitem == 1)
	    {
	    	if(Player[playerid][pRank] < 5 && Player[playerid][pLeader] == 0)
			{
			    format(thestring, 256, "{FFFFFF}Sua Org tem {FF0000}%dgr{FFFFFF} de Drogas no Cofre.", CofreOrg[GetPlayerOrg(playerid)][cfDrogas]);
			    ShowPlayerDialog(playerid, 2099, DIALOG_STYLE_MSGBOX, "{FF0000}Drogas:", thestring, "Voltar", "");
			}
	    	else
			{
			    format(thestring, 256, "{FFFFFF}Quantidade: {FF0000}%dgr{FFFFFF}.\n{FFFFFF}Sacar\n{FFFFFF}Depositar", CofreOrg[GetPlayerOrg(playerid)][cfDrogas]);
			    ShowPlayerDialog(playerid, 2097, DIALOG_STYLE_LIST, "{FF0000}Drogas:", thestring, "Selecionar", "Voltar");
			}
			return 1;
	    }
	    else if(listitem == 2)
	    {
	    	if(Player[playerid][pRank] < 5 && Player[playerid][pLeader] == 0)
			{
			    format(thestring, 256, "{FFFFFF}Sua Org tem {CCCCCC}%d{FFFFFF} Materiais no Cofre.", CofreOrg[GetPlayerOrg(playerid)][cfMat]);
			    ShowPlayerDialog(playerid, 2099, DIALOG_STYLE_MSGBOX, "{FF0000}Drogas:", thestring, "Voltar", "");
			}
	    	else
			{
			    format(thestring, 256, "{FFFFFF}Quantidade: {CCCCCC}%d{FFFFFF}.\n{FFFFFF}Sacar\n{FFFFFF}Depositar", CofreOrg[GetPlayerOrg(playerid)][cfMat]);
			    ShowPlayerDialog(playerid, 2098, DIALOG_STYLE_LIST, "{CCCCCC}Materiais:", thestring, "Selecionar", "Voltar");
			}
			return 1;
	    }
	    return 1;
	}
	else if(dialogid == 2099) return ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");
	else if(dialogid == 2096) //Cofre da Org > Dinheiro
	{
	    if(!response || listitem == 0) return ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");
		else if(listitem == 1) ShowPlayerDialog(playerid, 2196, DIALOG_STYLE_INPUT, "{009900}Dinheiro:", "Sacar:", "Sacar", "Voltar");
		else if(listitem == 2) ShowPlayerDialog(playerid, 2296, DIALOG_STYLE_INPUT, "{009900}Dinheiro:", "Depositar:", "Depositar", "Voltar");
	}
	else if(dialogid == 2097) //Cofre da Org > Drogas
	{
	    if(!response || listitem == 0) return ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");
		else if(listitem == 1) ShowPlayerDialog(playerid, 2197, DIALOG_STYLE_INPUT, "{FF0000}Drogas:", "Retirar:", "Retirar", "Voltar");
		else if(listitem == 2) ShowPlayerDialog(playerid, 2297, DIALOG_STYLE_INPUT, "{FF0000}Drogas:", "Guardar:", "Guardar", "Voltar");
	}
	else if(dialogid == 2098) //Cofre da Org > Materiais
	{
	    if(!response || listitem == 0) return ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");
		else if(listitem == 1) ShowPlayerDialog(playerid, 2198, DIALOG_STYLE_INPUT, "{CCCCCC}Materiais:", "Retirar:", "Retirar", "Voltar");
		else if(listitem == 2) ShowPlayerDialog(playerid, 2298, DIALOG_STYLE_INPUT, "{CCCCCC}Materiais:", "Guardar:", "Guardar", "Voltar");
	}
	else if(dialogid == 2196) //Cofre da Org > Sacar Dinheiro
	{
	    if(!response || !strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) <= 0) return ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");
		new Quantidade = strval(inputtext);
		if(Quantidade > GetOrgMoney(GetPlayerOrg(playerid))) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O cofre não possui essa quantia.");
		else if(GetOrgMoney(GetPlayerOrg(playerid)) - Quantidade < 10000) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você deve deixar R$ 10.000 no Cofre.");
		GiveOrgMoney(GetPlayerOrg(playerid), -Quantidade);
		GivePlayerGP(playerid, Quantidade);
		ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");

        format(string, sizeof(string), "%s sacou R$%d do cofre da org %s.", ReturnPlayer(playerid), Quantidade, OrgsNames[GetPlayerOrg(playerid)]);
        WriteLog("cofreorg", string);
	    return 1;
	}
	else if(dialogid == 2197) //Cofre da Org > Retirar Drogas
	{
	    if(!response || !strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) <= 0) return ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");
		new Quantidade = strval(inputtext);
		if(Quantidade > CofreOrg[GetPlayerOrg(playerid)][cfDrogas]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O cofre não possui essa quantidade de drogas.");
		else if(CofreOrg[GetPlayerOrg(playerid)][cfDrogas] - Quantidade < 1000) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você deve deixar 1.000g de Drogas no cofre.");
		CofreOrg[GetPlayerOrg(playerid)][cfDrogas] -= Quantidade;
		Player[playerid][pDrugs] += Quantidade;
		ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");

        format(string, sizeof(string), "%s retirou %dgr de drogas do cofre da org %s.", ReturnPlayer(playerid), Quantidade, OrgsNames[GetPlayerOrg(playerid)]);
        WriteLog("cofreorg", string);
	    return 1;
	}
	else if(dialogid == 2198) //Cofre da Org > Retirar Materiais
	{
	    if(!response || !strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) <= 0) return ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");
		new Quantidade = strval(inputtext);
		if(Quantidade > CofreOrg[GetPlayerOrg(playerid)][cfMat]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O cofre não possui essa quantidade de materiais.");
		else if(CofreOrg[GetPlayerOrg(playerid)][cfMat] - Quantidade < 10000) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você deve deixar 10.000 Materiais no cofre.");
		else if(Quantidade + Player[playerid][pMats] > 1000) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você só pode carregar 1000 materiais.");
		CofreOrg[GetPlayerOrg(playerid)][cfMat] -= Quantidade;
		Player[playerid][pMats] += Quantidade;
		ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");

        format(string, sizeof(string), "%s retirou %d materiais do cofre da org %s.", ReturnPlayer(playerid), Quantidade, OrgsNames[GetPlayerOrg(playerid)]);
        WriteLog("cofreorg", string);
	    return 1;
	}
	else if(dialogid == 2296) //Cofre da Org > Depositar Dinheiro
	{
	    if(!response || !strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) <= 0) return ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");
		new Quantidade = strval(inputtext);
		if(Quantidade > GetPlayerGP(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não possui essa quantia de dinheiro.");
		GiveOrgMoney(GetPlayerOrg(playerid), Quantidade);
		GivePlayerGP(playerid, -Quantidade);
		ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");

        format(string, sizeof(string), "%s colocou R$%d no cofre da org %s.", ReturnPlayer(playerid), Quantidade, OrgsNames[GetPlayerOrg(playerid)]);
        WriteLog("cofreorg", string);
	    return 1;
	}
	else if(dialogid == 2297) //Cofre da Org > Guardar Drogas
	{
	    if(!response || !strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) <= 0) return ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");
		new Quantidade = strval(inputtext);
		if(Quantidade > Player[playerid][pDrugs]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não possui essa quantia de drogas.");
		CofreOrg[GetPlayerOrg(playerid)][cfDrogas] += Quantidade;
		Player[playerid][pDrugs] -= Quantidade;
		ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");

        format(string, sizeof(string), "%s guardou %dgr de drogas no cofre da org %s.", ReturnPlayer(playerid), Quantidade, OrgsNames[GetPlayerOrg(playerid)]);
        WriteLog("cofreorg", string);
	    return 1;
	}
	else if(dialogid == 2298) //Cofre da Org > Guardar Materiais
	{
	    if(!response || !strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) <= 0) return ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");
		new Quantidade = strval(inputtext);
		if(Quantidade > Player[playerid][pMats]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não possui essa quantia de materiais.");
		CofreOrg[GetPlayerOrg(playerid)][cfMat] += Quantidade;
		Player[playerid][pMats] -= Quantidade;
		ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");

        format(string, sizeof(string), "%s guardou %d materiais no cofre da org %s.", ReturnPlayer(playerid), Quantidade, OrgsNames[GetPlayerOrg(playerid)]);
        WriteLog("cofreorg", string);
	    return 1;
	}
    else if(dialogid == 9547) //Cofre Público
    {
        if(Player[playerid][pLeader] != TEAM_PREF || !response)
            return 1;

        ShowPlayerDialog(playerid, 9548, DIALOG_STYLE_LIST, "Cofre da Org", "Depositar Dinheiro\nSacar Dinheiro", "Selecionar", "Cancelar");
        return 1;
    }
    else if(dialogid == 9548) //Cofre Público > Alterar
    {
        if(Player[playerid][pLeader] != TEAM_PREF || !response)
            return 1;

        new datString[128];
        if(CofreOrg[TEAM_PREF][cfDinheiro] > -1)
            format(datString, 128, "{FFFFFF}Cofre Público: {009900}R$%d{FFFF00}.", CofreOrg[TEAM_PREF][cfDinheiro]);
        else
            format(datString, 128, "{FFFFFF}Cofre Público: {FF0000}R$%d{FFFFFF}.", CofreOrg[TEAM_PREF][cfDinheiro] * -1);

        if(listitem == 0)
            strcat(datString, "\nDepositar:", 128);
        else if(listitem == 1)
            strcat(datString, "\nSacar:", 128);
        else
            return 1;

        ShowPlayerDialog(playerid, 9549 + listitem, DIALOG_STYLE_INPUT, "Cofre da Org", datString, "Confirmar", "Voltar");
        return 1;
    }
    else if(dialogid == 9549) //Cofre Público > Depositar
    {
        if(!response || !strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) <= 0)
            return ShowPlayerDialog(playerid, 9548, DIALOG_STYLE_LIST, "Cofre da Org", "Depositar Dinheiro\nSacar Dinheiro", "Selecionar", "Cancelar");

		new Quantidade = strval(inputtext);
		if(Quantidade > GetPlayerGP(playerid))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não possui essa quantia.");

		GiveOrgMoney(TEAM_PREF, Quantidade);
		GivePlayerGP(playerid, -Quantidade);

        ShowPlayerDialog(playerid, 9548, DIALOG_STYLE_LIST, "Cofre da Org", "Depositar Dinheiro\nSacar Dinheiro", "Selecionar", "Cancelar");

        format(string, sizeof(string), "%s colocou R$%d no cofre.", ReturnPlayer(playerid), Quantidade);
        WriteLog("CofrePublico", string);
        return 1;
    }
    else if(dialogid == 9550) //Cofre Público > Sacar
    {
	    if(!response || !strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) <= 0)
            return ShowPlayerDialog(playerid, 9548, DIALOG_STYLE_LIST, "Cofre da Org", "Depositar Dinheiro\nSacar Dinheiro", "Selecionar", "Cancelar");

		new Quantidade = strval(inputtext);
		if(Quantidade > GetOrgMoney(GetPlayerOrg(playerid)))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O cofre não possui essa quantia.");

		else if(GetOrgMoney(GetPlayerOrg(playerid)) - Quantidade < 100000)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você deve deixar R$ 100.000 no cofre.");

		GiveOrgMoney(GetPlayerOrg(playerid), -Quantidade);
		GivePlayerGP(playerid, Quantidade);

        ShowPlayerDialog(playerid, 9548, DIALOG_STYLE_LIST, "Cofre da Org", "Depositar Dinheiro\nSacar Dinheiro", "Selecionar", "Cancelar");

        format(string, sizeof(string), "%s sacou R$%d do cofre.", ReturnPlayer(playerid), Quantidade);
        WriteLog("CofrePublico", string);
        return 1;
    }
    else if(dialogid == 1264) //Troca de Skin PM/PRF/ROCAM/FT
    {
        if(listitem == 0)
            Player[playerid][pChar] = 280;
        else if(listitem == 1)
            Player[playerid][pChar] = 281;
        else if(listitem == 2)
            Player[playerid][pChar] = 282;
        else if(listitem == 3)
            Player[playerid][pChar] = 284;
        else if(listitem == 4)
            Player[playerid][pChar] = 283;
        else if(listitem == 5)
            Player[playerid][pChar] = 288;
        else if(listitem == 6)
            Player[playerid][pChar] = 266;
        else if(listitem == 7)
            Player[playerid][pChar] = 267;

        SetPlayerSkin(playerid, Player[playerid][pChar]);
        return 1;
    }
    else if(dialogid == 1265) //Troca de Skin PC
    {
        if(listitem == 0)
            Player[playerid][pChar] = 165;
        else if(listitem == 1)
            Player[playerid][pChar] = 166;

        SetPlayerSkin(playerid, Player[playerid][pChar]);
        return 1;
    }
    else if(dialogid == 1266) //Troca de Skin FA
    {
        if(listitem == 0)
            Player[playerid][pChar] = 287;
        else if(listitem == 1)
            Player[playerid][pChar] = 61;
        else if(listitem == 2)
            Player[playerid][pChar] = 179;
        else if(listitem == 3)
            Player[playerid][pChar] = 250;
        else if(listitem == 4)
            Player[playerid][pChar] = 191;

        SetPlayerSkin(playerid, Player[playerid][pChar]);
        return 1;
    }
    else if(dialogid == DIALOG_ELEVADOR)
    {
        if(!response)
            return 0;

        if(FloorRequestedBy[listitem] != INVALID_PLAYER_ID || IsFloorInQueue(listitem))
            GameTextForPlayer(playerid, "~r~O elevador ja esta na espera.", 3500, 4);
		else if(DidPlayerRequestElevator(playerid))
		    GameTextForPlayer(playerid, "~r~Voce ja chamou o elevador.", 3500, 4);
		else
	        CallElevator(playerid, listitem);

		return 1;
    }
	else if(dialogid == BAR_DIALOG)
	{
	    if(!response)
	    {
	        BarDialog[playerid] = 0;
	        BarDialogInfo[playerid][_bdItem] = 0;
	        BarDialogInfo[playerid][_bdSabor] = 0;
	        BarDialogInfo[playerid][_bdTamanho] = 0;
	        return 1;
	    }
	    return BarResponse(playerid, BarDialog[playerid], listitem);
	}
	else if(dialogid == 1453)
	{
	    if(ModoSA_Dialog[playerid] == 1)
	    {
	        new OldState = AdminDuty[playerid];
	        if(!response || Player[playerid][pAdmin] < 1)
	        {
			    ModoSA_Dialog[playerid] = 0;
			    return true;
	        }

            if(Player[playerid][pAdmin] == 1)
                listitem++;

			if(listitem == AdminDuty[playerid])
			{
			    if(Player[playerid][pAdmin] != 1)
                    ShowPlayerDialog(playerid, 1453, DIALOG_STYLE_LIST, "Servico Admin:", "{FF0000}- Jogando\n{FFFF00}- Trabalhando\n{0066FF}- Modo RPG\n- Informacoes", "Selecionar", "Sair");
                else
                    ShowPlayerDialog(playerid, 1453, DIALOG_STYLE_LIST, "Servico Admin:", "{FFFF00}- Trabalhando\n{0066FF}- Modo RPG\n- Informacoes", "Selecionar", "Sair");
			    return 1;
			}
	        else if(listitem == 0)
	        {
			    AdminDuty[playerid] = MODOSA_JOGANDO;
			    SetAdminWorking(playerid, true);
	            if(OldState == MODOSA_TRABALHANDO)
	            {
	                ShowPlayerDialog(playerid, 1453, DIALOG_STYLE_MSGBOX, "Servico Admin:", "Deseja Voltar a Posição Anterior?", "Sim", "Não");
				    ModoSA_Dialog[playerid] = 3;
	                return 1;
	            }

				if(ModoSA_Info[playerid][SA_Vida][0] < 1) SetPlayerHealth(playerid, 100);
				else SetPlayerHealth(playerid, ModoSA_Info[playerid][SA_Vida][0]);
		        SetPlayerArmour(playerid, ModoSA_Info[playerid][SA_Vida][1]);

				if(Player[playerid][pAdmin] != 1)
                    format(thestring, sizeof(thestring), "[Administração]: O Administrador {FFFFFF}%s {008080}está Jogando.", Player[playerid][pName]);
                else
                    format(thestring, sizeof(thestring), "[Administração]: O Operador {FFFFFF}%s {008080}está Jogando.", Player[playerid][pName]);
				SendClientMessageToAll(COLOR_ADMIN, thestring);

				AdminMapUpdate(playerid);
				SetAdminColor(playerid);
	        }
	        else if(listitem == 1)
	        {
			    AdminDuty[playerid] = MODOSA_TRABALHANDO;
			    SetAdminWorking(playerid, true);

	            GetPlayerHealth(playerid, ModoSA_Info[playerid][SA_Vida][0]);
	            GetPlayerArmour(playerid, ModoSA_Info[playerid][SA_Vida][1]);
	            ModoSA_Info[playerid][SA_Int][0] = GetPlayerInterior(playerid);
	            GetPlayerFacingAngle(playerid, ModoSA_Info[playerid][SA_Pos][3]);
	            ModoSA_Info[playerid][SA_Int][1] = GetPlayerVirtualWorld(playerid);
	            GetPlayerPos(playerid, ModoSA_Info[playerid][SA_Pos][0], ModoSA_Info[playerid][SA_Pos][1], ModoSA_Info[playerid][SA_Pos][2]);

	            AdminMSGForPlayer(playerid);
				SetTimerEx("AdminMSGForPlayer", 10000, 1, "i", playerid);

				if(Player[playerid][pSex] == 1) SetPlayerSkin(playerid,217);
				else SetPlayerSkin(playerid,211);

		        SetPlayerArmour(playerid, 90);
				SetPlayerHealth(playerid, 100);

                if(!HiddenAdmin[playerid])
                {
    				if(Player[playerid][pAdmin] != 1)
                        format(thestring, sizeof(thestring), "[Administração]: O Administrador {FFFFFF}%s {008080}está Trabalhando.", Player[playerid][pName]); //{FF0000}[%s] {FFFFFF}%s: {008080}%s
                    else
                        format(thestring, sizeof(thestring), "[Administração]: O Operador {FFFFFF}%s {008080}está Trabalhando.", Player[playerid][pName]);
				    SendClientMessageToAll(COLOR_ADMIN, thestring);
                }

				AdminMapUpdate(playerid);
				SetAdminColor(playerid);
	        }
	        else if(listitem == 2)
	        {
			    AdminDuty[playerid] = MODOSA_RPG;
			    SetAdminWorking(playerid, false);

	            if(OldState == MODOSA_TRABALHANDO)
	            {
	                ShowPlayerDialog(playerid, 1453, DIALOG_STYLE_MSGBOX, "Servico Admin:", "Deseja voltar para a posição anterior?", "Sim", "Não");
				    ModoSA_Dialog[playerid] = 3;
	                return 1;
	            }

				if(ModoSA_Info[playerid][SA_Vida][0] < 1) SetPlayerHealth(playerid, 100);
				else SetPlayerHealth(playerid, ModoSA_Info[playerid][SA_Vida][0]);
		        SetPlayerArmour(playerid, ModoSA_Info[playerid][SA_Vida][1]);

                if(!HiddenAdmin[playerid])
                {
    				if(Player[playerid][pAdmin] != 1)
                        format(thestring, sizeof(thestring), "[Administração]: O Administrador {FFFFFF}%s {008080}está em Modo RPG.", Player[playerid][pName]);
                    else
                        format(thestring, sizeof(thestring), "[Administração]: O Operador {FFFFFF}%s {008080}está em Modo RPG.", Player[playerid][pName]);
    				SendClientMessageToAll(COLOR_ADMIN, thestring);
                }

				AdminMapUpdate(playerid);
				SetAdminColor(playerid);
	        }
	        else if(listitem == 3)
	        {
	            ModoSA_Dialog[playerid] = 2;
                if(Player[playerid][pAdmin] != 1)
                    ShowPlayerDialog(playerid, 1453, DIALOG_STYLE_MSGBOX, "Informacoes", "{FFFFFF}Informações do Serviço Admin:\n\n{FF0000}- Jogando:{FFFFFF} Comandos Liberados, Relatorios e Sem Obrigação de Atender Pedidos de Ajuda.\n{FFFF00}- Trabalhando:{FFFFFF} Comandos Liberados, Relatorios e deve Atender Relatorios e Pedidos de Ajuda.\n{0066FF}- Modo RPG:{FFFFFF} Jogando como um Jogador Normal. Sem Comandos Admins Liberados.", "Voltar", "Sair");
                else
                    ShowPlayerDialog(playerid, 1453, DIALOG_STYLE_MSGBOX, "Informacoes", "{FFFFFF}Informações do Serviço Admin:\n\n{FFFF00}- Trabalhando:{FFFFFF} Comandos Liberados, Relatorios e deve Atender Relatorios e Pedidos de Ajuda.\n{0066FF}- Modo RPG:{FFFFFF} Jogando como um Jogador Normal. Sem Comandos Admins Liberados.", "Voltar", "Sair");
                return 1;
	        }
	        ModoSA_Dialog[playerid] = 0;
	        return 1;
	    }
	    else if(ModoSA_Dialog[playerid] == 2)
	    {
	        if(!response)
	        {
			    ModoSA_Dialog[playerid] = 0;
			    return true;
	        }
	        else
	        {
                if(Player[playerid][pAdmin] != 1)
                    ShowPlayerDialog(playerid, 1453, DIALOG_STYLE_LIST, "Servico Admin:", "{FF0000}- Jogando\n{FFFF00}- Trabalhando\n{0066FF}- Modo RPG\n- Informacoes", "Selecionar", "Sair");
                else
                    ShowPlayerDialog(playerid, 1453, DIALOG_STYLE_LIST, "Servico Admin:", "{FFFF00}- Trabalhando\n{0066FF}- Modo RPG\n- Informacoes", "Selecionar", "Sair");
			    ModoSA_Dialog[playerid] = 1;
			    return true;
	        }
	    }
	    else if(ModoSA_Dialog[playerid] == 3)
	    {
	        if(response)
	        {
			    SetPlayerPos(playerid, ModoSA_Info[playerid][SA_Pos][0], ModoSA_Info[playerid][SA_Pos][1], ModoSA_Info[playerid][SA_Pos][2]);
			    SetPlayerVirtualWorld(playerid, ModoSA_Info[playerid][SA_Int][0]);
			    SetPlayerFacingAngle(playerid, ModoSA_Info[playerid][SA_Pos][3]);
			    SetPlayerInterior(playerid, ModoSA_Info[playerid][SA_Int][0]);
	        }
			if(ModoSA_Info[playerid][SA_Vida][0] < 1) SetPlayerHealth(playerid, 100);
			else SetPlayerHealth(playerid, ModoSA_Info[playerid][SA_Vida][0]);
	        SetPlayerArmour(playerid, ModoSA_Info[playerid][SA_Vida][1]);

			if(!IsACopEx(playerid) || !OnDuty[playerid])
                SetPlayerSkin(playerid, Player[playerid][pModel]);
            else
                SetPlayerSkin(playerid, Player[playerid][pChar]);

            if(!HiddenAdmin[playerid])
            {
        		if(AdminDuty[playerid] == MODOSA_JOGANDO)
                    format(thestring, sizeof(thestring), "[Administração]: O Administrador {FFFFFF}%s {008080}está Jogando.", Player[playerid][pName]);
        		else
                    format(thestring, sizeof(thestring), "[Administração]: O Operador {FFFFFF}%s {008080}está Jogando.", Player[playerid][pName]);
        		SendClientMessageToAll(COLOR_ADMIN, thestring);
            }

			AdminMapUpdate(playerid);
			SetAdminColor(playerid);
	    }
	    return 1;
	}
	else if(dialogid == 1452)
	{
	    if(PizzaDialog[playerid] == 1)
	    {
		    //0,5,6,7
		    if(!response)
			{
			    PizzaDialog[playerid] = 0;
			    return true;
			}
		    if(listitem == 0 || listitem == 5)
		    {
		        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
		        return 1;
		    }
		    else if(listitem == 1 || listitem == 2 || listitem == 3 || listitem == 4)
		    {
				PizzaDialog[playerid] = listitem + 1;
				ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Sabores:\n- Frango\n- Calabresa\n- Presunto\n- Portuguesa\n- Queijo", "Comprar", "Sair");
				return 1;
			}
			else if(listitem == 6)
			{
			    if(GetPlayerGP(playerid) < 3)
			    {
			        SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem R$3.");
			        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
				    PizzaDialog[playerid] = 1;
			        return true;
			    }

			    format(string, sizeof(string), "* %s bebeu Sprunk 150ml.", PlayerGetName(playerid));
                ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);
		        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
			    GivePlayerGP(playerid, -3);
                GiveBizMoney(Biz_Bebidas, 9);

			    new Float:Health;
			    GetPlayerHealth(playerid, Health);
			    if(Health+3 > 100) SetPlayerHealth(playerid, 100.0);
			    else SetPlayerHealth(playerid, Health+3);
			}
			else if(listitem == 7)
			{
			    if(GetPlayerGP(playerid) < 5)
			    {
			        SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem R$5.");
			        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
				    PizzaDialog[playerid] = 1;
			        return true;
			    }

			    format(string, sizeof(string), "* %s bebeu Sprunk Lata.", PlayerGetName(playerid));
                ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);
		        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
			    GivePlayerGP(playerid, -5);
                GiveBizMoney(Biz_Bebidas, 15);

			    new Float:Health;
			    GetPlayerHealth(playerid, Health);
			    if(Health+5 > 100) SetPlayerHealth(playerid, 100.0);
			    else SetPlayerHealth(playerid, Health+5);
			}
			else if(listitem == 8)
			{
			    if(GetPlayerGP(playerid) < 8)
			    {
			        SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem R$8.");
			        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
				    PizzaDialog[playerid] = 8;
			        return true;
			    }

			    format(string, sizeof(string), "* %s bebeu Sprunk 600ml.", PlayerGetName(playerid));
                ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);
		        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
			    GivePlayerGP(playerid, -8);
                GiveBizMoney(Biz_Bebidas, 24);

			    new Float:Health;
			    GetPlayerHealth(playerid, Health);
			    if(Health+8 > 100) SetPlayerHealth(playerid, 100.0);
			    else SetPlayerHealth(playerid, Health+8);
			}
			else if(listitem == 9)
			{
			    if(GetPlayerGP(playerid) < 15)
			    {
			        SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem R$15.");
			        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
				    PizzaDialog[playerid] = 1;
			        return true;
			    }

			    format(string, sizeof(string), "* %s bebeu Sprunk 2l.", PlayerGetName(playerid));
                ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);
		        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
			    GivePlayerGP(playerid, -15);
                GiveBizMoney(Biz_Bebidas, 45);

			    new Float:Health;
			    GetPlayerHealth(playerid, Health);
			    if(Health+15 > 100) SetPlayerHealth(playerid, 100.0);
			    else SetPlayerHealth(playerid, Health+15);
			}
			return 1;
		}
		else if(PizzaDialog[playerid] == 2)
		{
		    if(GetPlayerGP(playerid) < 15)
		    {
		        SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem R$15.");
		        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
			    PizzaDialog[playerid] = 1;
		        return true;
		    }
		    if(!response)
		    {
		        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
			    PizzaDialog[playerid] = 1;
		        return true;
		    }
		    if(listitem == 0)
		    {
				ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Sabores:\n- Frango\n- Calabresa\n- Presunto\n- Portuguesa\n- Queijo", "Comprar", "Voltar");
		        return 1;
		    }
		    format(string, sizeof(string), "* %s comeu uma Mini-Pizza de %s.", PlayerGetName(playerid), PizzaSabores[listitem-1]);
            ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);
	        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
		    PizzaDialog[playerid] = 1;
		    GivePlayerGP(playerid, -15);
            GiveBizMoney(Biz_Alimentos, 15);

		    new Float:Health;
		    GetPlayerHealth(playerid, Health);
		    if(Health+15 > 100) SetPlayerHealth(playerid, 100.0);
		    else SetPlayerHealth(playerid, Health+15);
            return 1;
		}
		else if(PizzaDialog[playerid] == 3)
		{
		    if(GetPlayerGP(playerid) < 30)
		    {
		        SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem R$30.");
		        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
			    PizzaDialog[playerid] = 1;
		        return true;
		    }
		    if(!response)
		    {
		        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
			    PizzaDialog[playerid] = 1;
		        return true;
		    }
		    if(listitem == 0)
		    {
				ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Sabores:\n- Frango\n- Calabresa\n- Presunto\n- Portuguesa\n- Queijo", "Comprar", "Voltar");
		        return 1;
		    }
		    format(string, sizeof(string), "* %s comeu uma Pizza Media de %s.", PlayerGetName(playerid), PizzaSabores[listitem-1]);
            ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);
	        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
		    PizzaDialog[playerid] = 1;
		    GivePlayerGP(playerid, -30);
            GiveBizMoney(Biz_Alimentos, 90);

		    new Float:Health;
		    GetPlayerHealth(playerid, Health);
		    if(Health+30 > 100) SetPlayerHealth(playerid, 100.0);
		    else SetPlayerHealth(playerid, Health+30);
            return 1;
		}
		else if(PizzaDialog[playerid] == 4)
		{
		    if(GetPlayerGP(playerid) < 45)
		    {
		        SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem R$45.");
		        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
			    PizzaDialog[playerid] = 1;
		        return true;
		    }
		    if(!response)
		    {
		        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
			    PizzaDialog[playerid] = 1;
		        return true;
		    }
		    if(listitem == 0)
		    {
				ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Sabores:\n- Frango\n- Calabresa\n- Presunto\n- Portuguesa\n- Queijo", "Comprar", "Voltar");
		        return 1;
		    }
		    format(string, sizeof(string), "* %s comeu uma Pizza Grande de %s.", PlayerGetName(playerid), PizzaSabores[listitem-1]);
            ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);
	        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
		    PizzaDialog[playerid] = 1;
		    GivePlayerGP(playerid, -45);
            GiveBizMoney(Biz_Alimentos, 135);

		    new Float:Health;
		    GetPlayerHealth(playerid, Health);
		    if(Health+45 > 100) SetPlayerHealth(playerid, 100.0);
		    else SetPlayerHealth(playerid, Health+45);
            return 1;
		}
		else if(PizzaDialog[playerid] == 5)
		{
		    if(GetPlayerGP(playerid) < 200)
		    {
		        SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem R$200.");
		        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
			    PizzaDialog[playerid] = 1;
		        return true;
		    }
		    if(!response)
		    {
		        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
			    PizzaDialog[playerid] = 1;
		        return true;
		    }
		    if(listitem == 0)
		    {
				ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Sabores:\n- Frango\n- Calabresa\n- Presunto\n- Portuguesa\n- Queijo", "Comprar", "Voltar");
		        return 1;
		    }
		    format(string, sizeof(string), "* %s comeu uma Pizza Familia de %s.", PlayerGetName(playerid), PizzaSabores[listitem-1]);
            ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);
	        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
		    PizzaDialog[playerid] = 1;
		    GivePlayerGP(playerid, -200);
            GiveBizMoney(Biz_Alimentos, 600);

		    SetPlayerHealth(playerid, 100.0);
		    //SetPlayerArmour(playerid, 90.0);
            return 1;
		}
	}
	if(dialogid == DIALOG_HELP)
	{
	    if(!response)
	        return true;
		else
		{
		    switch (listitem)
			{
				case 0: ShowAjuda(playerid, "Geral"); // REFAZER
				case 1: ShowAjuda(playerid, "Irc");
				case 2: ShowAjuda(playerid, "Banco");
				case 3: ShowAjuda(playerid, "Casa");
				case 4: ShowAjuda(playerid, "Celular");
				case 5: ShowAjuda(playerid, "Emprego");
                case 6: ShowAjuda(playerid, "Empresa");
				case 7: ShowAjuda(playerid, "Organizações");
				case 8: {
					if(Player[playerid][pLeader]!=0) ShowAjuda(playerid, "Lideranças");
					else ShowPlayerDialog(playerid,100, DIALOG_STYLE_MSGBOX, "Ajuda - Área restrita!", "{FF0000}Erro!{FFFFFF}\nVocê precisa ser um líder para ver esta seção.", "Ok", "Voltar");
				}
				case 9: ShowAjuda(playerid, "Pesca");
 				case 10: ShowAjuda(playerid, "Alimentação");
				case 11: ShowOrgHelp(playerid);
				case 12: ShowJobHelp(playerid);
				case 13: ShowAjuda(playerid, "Boombox");
			}
		}
		return true;
	}
	else if(dialogid == DIALOG_TOYS)
    {
		if (!response)
			return 0;
	  	switch  (listitem) {
			case 0: {
				new str[1024];
				new slots;
	            if(IsAVip(playerid))
		            slots = MAX_VIP_TOYS;
                else
		            slots = MAX_FREE_TOYS;
			    for (new i; i < slots; i++) {
                    new tmp[64];
					strcat(tmp, GetToyNameByModel(PlayerToys[playerid][i][ptModelID]));
					if (PlayerToys[playerid][i][ptModelID] && PlayerToys[playerid][i][ptWearing]) {
                        if (PlayerToys[playerid][i][ptWearing])
					        strcat(tmp, " {00A500}(Vestindo)");
					}
					strcat(tmp, "\n");
					strcat(str, tmp);
				}
				ShowPlayerDialog(playerid, DIALOG_TOYS_ATTACH, DIALOG_STYLE_LIST, "{FFFFFF}Accessórios >>> {EEE471}Meus acessórios {FFFFFF}>>> Vestir/Tirar", str, "Selecionar", "Voltar");
			}
			case 1: {
				new str[1024];
				new slots;
	            if(IsAVip(playerid))
		            slots = MAX_VIP_TOYS;
                else
		            slots = MAX_FREE_TOYS;
			    for (new i; i < slots; i++) {
                    new tmp[64];
					strcat(tmp, GetToyNameByModel(PlayerToys[playerid][i][ptModelID]));
					strcat(tmp, "\n");
					strcat(str, tmp);
				}
				ShowPlayerDialog(playerid, DIALOG_TOYS_EDIT, DIALOG_STYLE_LIST, "{FFFFFF}Accessórios >>> {EEE471}Meus acessórios {FFFFFF}>>> Editar", str, "Selecionar", "Voltar");
			}
			case 2: {
				new str[1024];
				new slots;
	            if(IsAVip(playerid))
		            slots = MAX_VIP_TOYS;
                else
		            slots = MAX_FREE_TOYS;
			    for (new i; i < slots; i++) {
                    new tmp[64];
					strcat(tmp, GetToyNameByModel(PlayerToys[playerid][i][ptModelID]));
					strcat(tmp, "\n");
					strcat(str, tmp);
				}
				ShowPlayerDialog(playerid, DIALOG_TOYS_DELETE, DIALOG_STYLE_LIST, "{FFFFFF}Accessórios >>> {EEE471}Meus acessórios {FFFFFF}>>> Descartar", str, "Selecionar", "Voltar");
			}
		}
	}
	else if(dialogid == DIALOG_BUY_TOYS)
	{
		if (!response)
			return 0;
		new str[1024], header[320];
		for (new i; i < sizeof AttachmentObjects; i++)
			if (AttachmentObjects[i][attachtype] == listitem)
				format(str, sizeof str, "%sR$%d\t\t%s\n", str, AttachmentObjects[i][attachprice], AttachmentObjects[i][attachname]);

        PlayerBuyingType[playerid] = listitem;
		format(header, sizeof header, "{FFFFFF}Comprar meu Accessório >>> {BAEE71}%s", AttachmentHeaders[listitem]);
		ShowPlayerDialog(playerid, DIALOG_BUY_TOYS_SELECT, DIALOG_STYLE_LIST, header, str, "Selecionar", "Voltar");
	}
	else if(dialogid == DIALOG_BUY_TOYS_SELECT)
	{
		if (!response)
			return cmd_compraracessorios(playerid, " ");
		new str[128], count, id;
        for (new i; i < sizeof AttachmentObjects; i++) {
			if(AttachmentObjects[i][attachtype] == PlayerBuyingType[playerid])
				count ++;
			if(count > listitem) {
				id = i;
				break;
			}
        }
        PlayerBuyingModel[playerid] = id;
        format(str, sizeof str, "{FFFFFF}Realmente deseja comprar um {FFD734}%s{FFFFFF} por {00D734}R$%d{FFFFFF}?", AttachmentObjects[id][attachname], AttachmentObjects[id][attachprice]);
        ShowPlayerDialog(playerid, DIALOG_BUY_TOYS_CONF, DIALOG_STYLE_MSGBOX, "{FFFFFF}Comprar meu Accessório >>> {BAEE71}Adquirindo", str, "Sim", "Não");
	}
	else if(dialogid == DIALOG_BUY_TOYS_CONF)
	{
		if (!response)
		    return OnDialogResponse(playerid, DIALOG_BUY_TOYS, true, PlayerBuyingType[playerid], " ");

		new atvip = IsPlayerInRangeOfPoint(playerid, 3.0, 1802.8955,-1564.9987,1732.4159);
        if (!atvip)
            if(BizzInfo[Biz_Binco][bProducts] == 0) {
		        GameTextForPlayer(playerid, "~r~empresa sem produtos", 5000, 1);
		        return OnDialogResponse(playerid, DIALOG_BUY_TOYS, true, PlayerBuyingType[playerid], " ");
		    }
		new index = getFreeToySlot(playerid);
		if (index == -1) {
			SendClientMessage(playerid, COLOR_YELLOW, "[Acessórios]:{FFFFFF} Você já possui muitos acessórios.");
			return OnDialogResponse(playerid, DIALOG_BUY_TOYS, true, PlayerBuyingType[playerid], " ");
		}
		new id = PlayerBuyingModel[playerid];
		new price = AttachmentObjects[id][attachprice];
		if (GetPlayerGP(playerid) < price) {
			SendClientMessage(playerid, COLOR_YELLOW, "[Acessórios]:FFFFFF} Você não tem dinheiro suficiente para comprar este acessório!");
			return OnDialogResponse(playerid, DIALOG_BUY_TOYS, true, PlayerBuyingType[playerid], " ");
		}
		GivePlayerGP(playerid, -price);
		if(!atvip) {
		    if(BizzInfo[Biz_Binco][bProducts] > 0) {
                GiveBizMoneyEx(Biz_Binco, price);
		        BizzInfo[Biz_Binco][bProducts]--;
		    }
		}
		new type = PlayerBuyingType[playerid];
		PlayerToys[playerid][index][ptModelID] = AttachmentObjects[id][attachmodel];
		PlayerToys[playerid][index][ptBoneID] = AttachmentDefaultOffsets[type][dBoneid];
        PlayerToys[playerid][index][ptOffsetX] = AttachmentDefaultOffsets[type][dOffSets][0];
        PlayerToys[playerid][index][ptOffsetY] = AttachmentDefaultOffsets[type][dOffSets][1];
        PlayerToys[playerid][index][ptOffsetZ] = AttachmentDefaultOffsets[type][dOffSets][2];
        PlayerToys[playerid][index][ptRotX] = AttachmentDefaultOffsets[type][dOffSets][3];
        PlayerToys[playerid][index][ptRotY] = AttachmentDefaultOffsets[type][dOffSets][4];
        PlayerToys[playerid][index][ptRotZ] = AttachmentDefaultOffsets[type][dOffSets][5];
        PlayerToys[playerid][index][ptWearing] = true;
        SetPlayerAttachedObject(playerid,index,PlayerToys[playerid][index][ptModelID],PlayerToys[playerid][index][ptBoneID],PlayerToys[playerid][index][ptOffsetX],PlayerToys[playerid][index][ptOffsetY],
        PlayerToys[playerid][index][ptOffsetZ],PlayerToys[playerid][index][ptRotX],PlayerToys[playerid][index][ptRotY],PlayerToys[playerid][index][ptRotZ],1,1,1);
		new str[110];
		format(str, sizeof str, "[Acessórios]:{FFFFFF} Você adquiriu um %s(ID:%d) por {C0C0C0}R$%d{FFFFFF}.", GetToyNameByModel(PlayerToys[playerid][index][ptModelID]), index + 1, price);
		SendClientMessage(playerid, COLOR_YELLOW, str);
		SendClientMessage(playerid, COLOR_YELLOW, "[Acessórios]:{FFFFFF} Gerencie seu acessório através do {C0C0C0}/acessorios{FFFFFF}.");
	}
	else if(dialogid == DIALOG_TOYS_ATTACH)
	{
		if (!response)
			return cmd_acessorios(playerid, " ");
		new max_slots = IsAVip(playerid) ? (MAX_VIP_TOYS) : (MAX_FREE_TOYS);
		if (PlayerToys[playerid][listitem][ptModelID] == 0 || listitem >= max_slots) {
			SendClientMessage(playerid, COLOR_YELLOW, "[Acessórios]:{FFFFFF} Você não possui nenhum acessório neste espaço ou não pode usá-lo!");
			return OnDialogResponse(playerid, DIALOG_TOYS, true, 0, " ");
		}
		new str[110];
		if (!PlayerToys[playerid][listitem][ptWearing]) {
            PlayerToys[playerid][listitem][ptWearing] = true;
            SetPlayerAttachedObject(playerid,listitem,PlayerToys[playerid][listitem][ptModelID],PlayerToys[playerid][listitem][ptBoneID],PlayerToys[playerid][listitem][ptOffsetX],PlayerToys[playerid][listitem][ptOffsetY],
            PlayerToys[playerid][listitem][ptOffsetZ],PlayerToys[playerid][listitem][ptRotX],PlayerToys[playerid][listitem][ptRotY],PlayerToys[playerid][listitem][ptRotZ],1,1,1);
            format(str, sizeof str, "[Acessórios]:{FFFFFF} Agora você está vestindo seu %s(ID:%d).", GetToyNameByModel(PlayerToys[playerid][listitem][ptModelID]), listitem + 1);
		} else {
            PlayerToys[playerid][listitem][ptWearing] = false;
            RemovePlayerAttachedObject(playerid, listitem);
            format(str, sizeof str, "[Acessórios]:{FFFFFF} Você removeu seu %s(ID:%d) de seu corpo.", GetToyNameByModel(PlayerToys[playerid][listitem][ptModelID]), listitem + 1);
		}
		SendClientMessage(playerid, COLOR_YELLOW, str);
		OnDialogResponse(playerid, DIALOG_TOYS, true, 0, " ");
	}
	else if(dialogid == DIALOG_TOYS_EDIT)
	{
		if (!response)
			return cmd_acessorios(playerid, " ");
		new max_slots = IsAVip(playerid) ? (MAX_VIP_TOYS) : (MAX_FREE_TOYS);
		if (PlayerToys[playerid][listitem][ptModelID] == 0 || listitem >= max_slots) {
			SendClientMessage(playerid, COLOR_YELLOW, "[Acessórios]:{FFFFFF} Você não possui nenhum acessório neste espaço ou não pode editá-lo!");
			return OnDialogResponse(playerid, DIALOG_TOYS, true, 1, " ");
		}
		PlayerEditingToyID[playerid] = listitem;
		new str[110];
		format(str, sizeof str, "[Acessórios]:{FFFFFF} Você está editando seu %s(ID:%d).", GetToyNameByModel(PlayerToys[playerid][listitem][ptModelID]), listitem + 1);
		SendClientMessage(playerid, COLOR_YELLOW, str);
		//format(str, sizeof str, "Posição\nParte do Corpo {EEE471}(%s)", AttachmentBones[PlayerToys[playerid][listitem][ptBoneID]]);
		ShowPlayerDialog(playerid, DIALOG_TOYS_EDIT_TYPE, DIALOG_STYLE_LIST, "{FFFFFF}Accessórios >>> {EEE471}Meus acessórios {FFFFFF}>>> Posição/Parte", "Posição\nParte do Corpo", "Selecionar", "Voltar");
	}
	else if(dialogid == DIALOG_TOYS_EDIT_TYPE)
	{
		if (!response)
		    return OnDialogResponse(playerid, DIALOG_TOYS, true, 1, " ");
		new index = PlayerEditingToyID[playerid];
		if (listitem == 0) {
            SetPlayerAttachedObject(playerid,index,PlayerToys[playerid][index][ptModelID],PlayerToys[playerid][index][ptBoneID],PlayerToys[playerid][index][ptOffsetX],PlayerToys[playerid][index][ptOffsetY],
            PlayerToys[playerid][index][ptOffsetZ],PlayerToys[playerid][index][ptRotX],PlayerToys[playerid][index][ptRotY],PlayerToys[playerid][index][ptRotZ],1,1,1);
            EditAttachedObject(playerid, index);
            SendClientMessage(playerid, COLOR_YELLOW, "[Acessórios]:{FFFFFF} Pressione {C0C0C0}ESC{FFFFFF} para finalizar a edição.");
		} else {
			new str[650];
			for (new i; i < sizeof AttachmentBones; i++) {
				strcat(str, AttachmentBones[i]);
				if (i == PlayerToys[playerid][index][ptBoneID])
					strcat(str, " {00A500}(Em Uso)");
				strcat(str, "\n");
			}
			ShowPlayerDialog(playerid, DIALOG_TOYS_EDIT_BONE, DIALOG_STYLE_LIST, "{FFFFFF}Accessórios >>> {EEE471}Meus acessórios {FFFFFF}>>> Parte do Corpo", str, "Selecionar", "Voltar");
		}
	}
	else if(dialogid == DIALOG_TOYS_EDIT_BONE)
	{
		if (!response)
			return ShowPlayerDialog(playerid, DIALOG_TOYS_EDIT_TYPE, DIALOG_STYLE_LIST, "{FFFFFF}Accessórios >>> {EEE471}Meus acessórios {FFFFFF}>>> Posição/Parte", "Posição\nParte do Corpo", "Selecionar", "Voltar");
		new str[110], index = PlayerEditingToyID[playerid];
		format(str, sizeof str, "[Acessórios]:{FFFFFF} Você ajustou a parte do corpo de seu %s(ID:%d) para %s.", GetToyNameByModel(PlayerToys[playerid][index][ptModelID]), index + 1, AttachmentBones[listitem]);
		SendClientMessage(playerid, COLOR_YELLOW, str);
		PlayerToys[playerid][index][ptBoneID] = listitem;
		if (PlayerToys[playerid][index][ptWearing]) {
            SetPlayerAttachedObject(playerid,index,PlayerToys[playerid][index][ptModelID],PlayerToys[playerid][index][ptBoneID],PlayerToys[playerid][index][ptOffsetX],PlayerToys[playerid][index][ptOffsetY],
            PlayerToys[playerid][index][ptOffsetZ],PlayerToys[playerid][index][ptRotX],PlayerToys[playerid][index][ptRotY],PlayerToys[playerid][index][ptRotZ],1,1,1);
		}
 		format(str, sizeof str, "Posição\nParte do Corpo {EEE471}(%s)", AttachmentBones[listitem]);
		ShowPlayerDialog(playerid, DIALOG_TOYS_EDIT_TYPE, DIALOG_STYLE_LIST, "{FFFFFF}Accessórios >>> {EEE471}Meus acessórios {FFFFFF}>>> Posição/Parte", str, "Selecionar", "Voltar");
	}
	else if(dialogid == DIALOG_TOYS_DELETE)
	{
		if (!response)
			return cmd_acessorios(playerid, " ");
		if (PlayerToys[playerid][listitem][ptModelID] == 0) {
            SendClientMessage(playerid, COLOR_YELLOW, "[Acessórios]:{FFFFFF} Você não possui nenhum acessório neste espaço!");
            return OnDialogResponse(playerid, DIALOG_TOYS, true, 2, " ");
		}
        PlayerDeletingID[playerid] = listitem;
        new str[130];
        format(str, sizeof str, "{FFFFFF}Realmente deseja descartar seu {FFD734}%s{FFFFFF}(ID:%d)?", GetToyNameByModel(PlayerToys[playerid][listitem][ptModelID]), listitem + 1);
        ShowPlayerDialog(playerid, DIALOG_TOYS_DELETE_CONF, DIALOG_STYLE_MSGBOX, "{FFFFFF}Accessórios >>> {EEE471}Meus acessórios {FFFFFF}>>> Descartar", str, "Sim", "Não");
	}
	else if(dialogid == DIALOG_TOYS_DELETE_CONF)
	{
		if (!response)
			return OnDialogResponse(playerid, DIALOG_TOYS, true, 2, " ");

		new str[110], index = PlayerDeletingID[playerid];
		format(str, sizeof str, "[Acessórios]:{FFFFFF} Você descartou seu %s(ID:%d).", GetToyNameByModel(PlayerToys[playerid][index][ptModelID]), index + 1);
		SendClientMessage(playerid, COLOR_YELLOW, str);
		PlayerToys[playerid][index][ptModelID] = 0;
		if (PlayerToys[playerid][index][ptWearing]) {
		    RemovePlayerAttachedObject(playerid, index);
		    PlayerToys[playerid][index][ptWearing] = false;
		}
		OnDialogResponse(playerid, DIALOG_TOYS, true, 2, " ");
	}
	else if(dialogid == 100)
	{
	    if(response)
	        return true;
		else
		{
			new msg[512];
		    msg = "- Geral\n- Irc\n- Banco\n- Casa\n- Celular\n- Emprego\n- Empresa\n- Organização\n- Lideranças\n- Pesca\n- Alimentação\n- Minha ORG\n- Meu Emprego\n- Boombox";
			ShowPlayerDialog(playerid,DIALOG_HELP, DIALOG_STYLE_LIST,"** Escolha um tipo de ajuda para obter:",msg,"OK","Cancelar");
		    return true;
		}
	}
	else if(dialogid == DIALOG_SELECIONARCARRO)
	{
	    if(response)
	    {
            if(Player[playerid][pCar][listitem] == INVALID_VEHICLE_ID) return cmd_carmenu(playerid);
		    PlayerGerenciando[playerid] = Player[playerid][pCar][listitem];
		    new listitems[] = "Estacionar\nLocalizar Carro\nTrancar\nDestrancar\nVender\nResetar Tuning\nAbrir/Fechar Capô\nAbrir/Fechar Porta-Malas\nLigar/Desligar Alarme\nLigar/Desligar Farol\n";
			ShowPlayerDialog(playerid, DIALOG_CARMENU, DIALOG_STYLE_LIST, "Menu do Carro:", listitems, "Selecionar", "Sair");
		}
	}
	else if(dialogid == 957)
	{
		Kick(playerid);
 	}
	else if(dialogid == 1 || dialogid == DIALOG_LOGIN)
	{
	    if(response)
	    {
		    if(strlen(inputtext))
		    {
	   			new tmppass[64];
				strmid(tmppass, inputtext, 0, strlen(inputtext), 255);
			    Encrypt(tmppass);
				OnPlayerLogin(playerid, tmppass, inputtext);
			}
			else
			{
				format(string,sizeof(string),"SENHA INCORRETA\n\nInsira uma senha.\nSe você não registrou a conta %s re-conecte com outro nick.\nErros consecutivos implicarão ban do seu IP (%d/%d)",Player[playerid][pName],gPlayerLogTries[playerid],MAX_LOGIN_FAILS);
				ShowPlayerDialog(playerid,DIALOG_LOGIN,DIALOG_STYLE_PASSWORD,"{FF0000}Life {FFFFFF}Simulation RPG - LOGIN",string,"Logar","Sair");
			}
        }
		else
        {
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "\n\n\n\n\n\n\n\nVocê cancelou o login e foi kickado. Volte sempre.");
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Adicione nosso IP nos seus favoritos : server.blsrpg.com.br:6678");
            Kick(playerid);
		}
	}
	else if(dialogid == DIALOG_REGISTER)
	{
	    if(strlen(inputtext))
	    {
			format(string, sizeof(string), "/RPG/users/%s.ini", Player[playerid][pName]);
			if(DOF2_FileExists(string))
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Esta conta já existe em nosso sistema de registros, por favor escolha outro.");

			else
			{
    			new tmppass[128];
				strmid(tmppass, inputtext, 0, strlen(inputtext), 128);
			    Encrypt(tmppass);
			    //WriteLog("Senha", tmppass);
				OnPlayerRegister(playerid,tmppass, inputtext);
			}
		}
		else
		{
    		new regstring[128];
			new regname[64];
			GetPlayerName(playerid,regname,sizeof(regname));
			format(regstring,sizeof(regstring),"Bem Vindo ao {FF0000}Life {FFFFFF}Simulation RPG.\nA conta %s não está registrada.\nPor favor insira uma senha para registrá-la:",Player[playerid][pName]);
			ShowPlayerDialog(playerid,DIALOG_REGISTER,DIALOG_STYLE_PASSWORD,"{FF0000}Life {FFFFFF}Simulation RPG - REGISTRO",regstring,"Registrar","Sair");
		}
	}
	else if(dialogid == DIALOG_ATM)
	{
	    if(!response)
	        return 0;
		else
		{
		    switch (listitem)
			{
				case 0:
				{
				    new str[128];
					format(str,128,"Seu saldo no banco é de R$ %d", Player[playerid][pBank]);
					ShowPlayerDialog(playerid,DIALOG_SALDO,DIALOG_STYLE_MSGBOX,"Caixa Rápido", str,"Sair","Voltar");
				}
			    case 1:	ShowPlayerDialog(playerid,DIALOG_SACAR,DIALOG_STYLE_INPUT,"Caixa Rápido","Digite um valor para sacar:","Sacar","Voltar");
			    case 2: ShowPlayerDialog(playerid,DIALOG_DEPOSITAR,DIALOG_STYLE_INPUT,"Caixa Rápido","Digite um valor para depositar:","Depositar","Voltar");
			    case 3: ShowPlayerDialog(playerid,DIALOG_TRANSFERIR1,DIALOG_STYLE_INPUT,"Caixa Rápido","Digite o id/nick do jogador para transferir:","Próximo","Voltar");
			}
		}
	}
	else if(dialogid == DIALOG_SALDO)
	{
		if(!response)
		    return 	ShowPlayerDialog(playerid,DIALOG_ATM,DIALOG_STYLE_LIST,"Caixa Rápido","-Ver Saldo \n-Sacar \n-Depositar \n-Transferir","Selecionar","Voltar");
		else
		    return 0;
	}
	else if(dialogid == DIALOG_SACAR)
	{
		if(!response)
		    return ShowPlayerDialog(playerid,DIALOG_ATM,DIALOG_STYLE_LIST,"Caixa Rápido","-Ver Saldo \n-Sacar \n-Depositar \n-Transferir","Selecionar","Voltar");
		else
		{
		    new value = strval(inputtext);
		    if(value < 0 || value > Player[playerid][pBank])
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Quantia inválida.");

			else
   			{
			    GivePlayerGP(playerid, value);
			    Player[playerid][pBank] -= value;
				new str[128];
				format(str,128,"[BANCO]: Você retirou R$%d de sua conta.", value);
			    SendClientMessage(playerid, COLOR_GOLD,str);
			    format(str, sizeof(str), "[BANCO]: %s retirou R$%d de sua conta.", Player[playerid][pName], value);
			    WriteLog("bank", str);
			    ABroadCast(COLOR_GOLD, str, 1);
			}
		    return ShowPlayerDialog(playerid,DIALOG_ATM,DIALOG_STYLE_LIST,"Caixa Rápido","-Ver Saldo \n-Sacar \n-Depositar \n-Transferir","Selecionar","Voltar");
		}
	}
	else if(dialogid == DIALOG_MINHACONTA)
	{
		if(response)
		{
		    if(listitem==0)
			{
                return ShowPlayerDialog(playerid,DIALOG_MEUNOME,DIALOG_STYLE_INPUT,"{FF0000}Life {FFFFFF}Simulation RPG - Meu nome","{FFFFFF}Custo:\n\t{FFFF00}1500 BLS Cash\n\t{FFFFFF}e {009900}R$100.000\n{FFFFFF}Digite o seu novo nome:","OK","Cancelar");
			}
			else if(listitem==1)
			{
			    return ShowPlayerDialog(playerid,DIALOG_MINHASENHA,DIALOG_STYLE_PASSWORD,"{FF0000}Life {FFFFFF}Simulation RPG - Minha Senha","Digite sua nova senha:","OK","Cancelar");
   			}
   			else if(listitem==2)
			{
			    return OnPlayerSave(playerid);
   			}
   			else if(listitem==3)
			{
			    return cmd_vendercasa(playerid);
   			}
   			else if(listitem==4)
   			{
   			    return cmd_venderempresa(playerid);
			}
			else if(listitem==5)
			{
			    return cmd_carmenu(playerid);
			}
		}
	}
 	else if(dialogid == DIALOG_MEUNOME)
	{
	    //Condicoes Inicials
	    if(!response) return 1;
	    if(playerid == INVALID_PLAYER_ID || !IsPlayerConnected(playerid)) return 1;

		for(new v = 0; v < 5; v++)
	        if(Player[playerid][pCar][v] != INVALID_VEHICLE_ID)
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Venda todos os seus veículos antes de trocar o seu nick.");

        if(!gPlayerLogged[playerid])
        {
		    SetPlayerName(playerid, inputtext);
		    return 1;
        }
        if(GetPlayerGP(playerid) < 100000)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem R$100.000.");
        if(Player[playerid][pBLSCash] < 1500)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem 1.500 BLS Cash.");
		if(strlen(inputtext) > 24)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Tamanho máximo do Nome: 24 Caracteres.");
		if(strlen(inputtext) < 6)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Tamanho mínimo do Nome: 6 Caracteres.");
		if(strfind(inputtext, "_") == -1)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nome proíbido.");

        //Verificar Caracteres
        for(new i = 0; i < strlen(inputtext); i++)
            if(!(inputtext[i] >= 'A' && inputtext[i] <= 'z') && inputtext[i] != '_')
                return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Há caracteres inválidos.");

		//Arquivos
		new file[64];
		format(file, 64, "/RPG/users/%s.ini", inputtext);

		new nome[MAX_PLAYER_NAME];
        GetPlayerName(playerid, nome, sizeof(nome));

		new oldfile[64];
		format(oldfile, 64, "/RPG/users/%s.ini", nome);
		//Condicoes de Arquivos
		if(!DOF2_FileExists(oldfile))
			return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} A conta antiga não existe.");
		else if(DOF2_FileExists(file))
			return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} A nova conta já existe.");

		format(Player[playerid][pName], 32, "%s", inputtext);//TESTE TESTE
		//Verificar Org
		if(GetPlayerOrg(playerid) != 0)
		{
			new org[128];
   			format(org, 128, "/RPG/orgs/%s.ini", OrgsNamesSmall[GetPlayerOrg(playerid)]);

			for(new i = 0; i < sizeof(OrgsCargos); i++)
			{
		   	   	if(!strcmp(DOF2_GetString(org, OrgsCargos[i]), nome, true))
		   	   	{
		    		DOF2_SetString(org, OrgsCargos[i], inputtext);
		    		DOF2_SaveFile();
		    		break;
				}
			}
		}
		//Verificar Casa
		if(Player[playerid][pHouseKey] != 255)
		{
		    new h = Player[playerid][pHouseKey];
		    if(!strcmp(nome, hOwner[h], true))
		   		format(hOwner[h], MAX_PLAYER_NAME, "%s", inputtext);
		}
		//Verificar Empresa
		if(Player[playerid][pBizKey] != 255)
		{
		    new b = Player[playerid][pBizKey];
	    	if(!strcmp(nome, bOwner[b], true))
				format(bOwner[b], MAX_PLAYER_NAME, "%s", inputtext);
		}
		//Verificar Extorcao
		for(new i = 0; i < MAX_BIZ; i++)
		    if(!strcmp(bExtortion[i], nome, true))
				format(bExtortion[i], MAX_PLAYER_NAME, "%s", inputtext);

		//Atualizar Propriedades
		SetPlayerName(playerid, inputtext);
		format(Player[playerid][pName], MAX_PLAYER_NAME, "%s", inputtext);
		OnPropUpdate();
		//Mostrar Informacoes
		format(thestring, 256, "{FF0000}[Info]:{FFFFFF} Você renomeou sua conta '%s' para '%s'.", nome, inputtext);
		SendClientMessage(playerid, SERVER_INFO, thestring);
		//Executar Processo
        GivePlayerGP(playerid, -100000);
        Player[playerid][pBLSCash] -= 1500;
		//Atualizar e Salvar
		RenameFile(oldfile, file);
        OnPlayerSave(playerid);

        DOF2_RemoveFile(oldfile);
        //Log
        format(string, sizeof(string), "%s trocou o nome para %s", nome, inputtext);
        WriteLog("TrocaNome", string);
		SetTimerEx("OnKick",500,false, "i", playerid);
		//Mudar também a senha
		//ShowPlayerDialog(playerid, DIALOG_MINHASENHA, DIALOG_STYLE_PASSWORD, "{FF0000}Life {FFFFFF}Simulation RPG - Minha Senha","NÃO CANCELE ESSA MENSAGEM, SENÃO SUA CONTA IRÁ BUGAR,\nSEM POSSIBILIDADE DE CORREÇÃO!!!\n\nDigite sua senha:", "OK", "");
		return true;
	}
	else if(dialogid == DIALOG_CREDITOS)
	{
	    if(response)
		{
		    new creditos = strval(inputtext);
		    new preco = floatround(creditos * BizTelefonicaPrice);
			if(preco > GetPlayerGP(playerid))
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem dinheiro suficiente.");
            if(creditos < 1 || creditos > 1000)
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você pode adicionar até 1000 créditos por vez.");

			Extorquir(playerid, Biz_Telefonica, preco);
			Player[playerid][pCreditos] += creditos;
			format(string, 64, "Você comprou %d créditos por R$%d.", creditos, preco);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return true;
		}
		return true;
	}
	else if(dialogid == DIALOG_MINHASENHA)
	{
	    if(response)
		{
            if(strlen(inputtext) < 1)
                return ShowPlayerDialog(playerid,DIALOG_MINHASENHA,DIALOG_STYLE_PASSWORD,"{FF0000}Life {FFFFFF}Simulation RPG - Minha Senha","Digite sua nova senha:","OK","Cancelar");

		    new nome[24];
      		GetPlayerName(playerid, nome, sizeof nome);
			new file[256];
			format(file,256,"/RPG/users/%s.ini",nome);

			if(!DOF2_FileExists(file))
				return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} A conta não existe.");

			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você alterou sua senha.");
			SendClientMessage(playerid, COLOR_RED, "Para evitar bugs, relogue.");
			new tmppass[128];
			strmid(tmppass, inputtext, 0, strlen(inputtext), 128);
		    Encrypt(tmppass);
			DOF2_SetString(file, "Key", tmppass);
			DOF2_SaveFile();
			OnPlayerSave(playerid);
			gPlayerLogged[playerid] = 0;
			Kick(playerid);

            format(thestring, sizeof(thestring), "%s alterou a senha para %s.", nome, tmppass);
            WriteLog("Senha", thestring);
		}
		return true;
	}
	else if(dialogid == DIALOG_DEPOSITAR)
	{
		if(!response)
		    return ShowPlayerDialog(playerid,DIALOG_ATM,DIALOG_STYLE_LIST,"Caixa Rápido","-Ver Saldo \n-Sacar \n-Depositar \n-Transferir","Selecionar","Voltar");
		else
		{
		    new value = strval(inputtext);
		    if(value < 0 || value > Player[playerid][pMoney])
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Quantia inválida.");

			else
			{
			    GivePlayerGP(playerid, -value);
			    Player[playerid][pBank] += value;
				new str[128];
				format(str,128,"[BANCO]: Você depositou R$%d em sua conta.", value);
			    SendClientMessage(playerid, COLOR_GOLD,str);
			    WriteLog("bank", str);
			}
		    return 	ShowPlayerDialog(playerid,DIALOG_ATM,DIALOG_STYLE_LIST,"Caixa Rápido","-Ver Saldo \n-Sacar \n-Depositar \n-Transferir","Selecionar","Voltar");
		}
	}
	else if(dialogid == DIALOG_TRANSFERIR1)
	{
		if(!response)
		    return ShowPlayerDialog(playerid,DIALOG_ATM,DIALOG_STYLE_LIST,"Caixa Rápido","-Ver Saldo \n-Sacar \n-Depositar \n-Transferir","Selecionar","Voltar");
		else
		{
		    new user = ReturnUser(inputtext);
		    if(Player[playerid][pLevel] < 4)
		        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Por motivos de segurança, você deve ter nível 4 para transferir.");

		    if(Player[user][Spawned] == false || user == playerid)
			{
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
	  		    return 	ShowPlayerDialog(playerid,DIALOG_ATM,DIALOG_STYLE_LIST,"Caixa Rápido","-Ver Saldo \n-Sacar \n-Depositar \n-Transferir","Selecionar","Voltar");
			}
			else
			{
				Player[playerid][TransferID] = user;
 				new str[128];
				format(str,128,"[BANCO]: Jogador %s escolhido para a transferência. Agora selecione a quantia.", Player[user][pName]);
			    SendClientMessage(playerid, COLOR_GOLD,str);
			    return ShowPlayerDialog(playerid,DIALOG_TRANSFERIR2,DIALOG_STYLE_INPUT,"Caixa Rápido","Escolha quantia para transferir:","Transferir","Voltar");
			}
		}
	}
	else if(dialogid == DIALOG_TRANSFERIR2)
	{
		if(!response)
		    return ShowPlayerDialog(playerid,DIALOG_TRANSFERIR1,DIALOG_STYLE_INPUT,"Caixa Rápido","Digite o id/nick do jogador para transferir:","Próximo","Voltar");
		else
		{
		    new value = strval(inputtext);
      		if(value < 0 || value > Player[playerid][pBank])
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Quantia inválida.");

			else
			{
			    if(gPlayerLogged[Player[playerid][TransferID]])
			    {
				    Player[Player[playerid][TransferID]][pBank] += value;
				    Player[playerid][pBank] -= value;
					new str[128];
					format(str,128,"[BANCO]: Você transferiu R$%d de sua conta para a conta de %s.", value, Player[Player[playerid][TransferID]][pName]);
				    SendClientMessage(playerid, COLOR_GOLD,str);
					format(str,128,"[BANCO]: %s transferiu R$%d para a sua conta.", Player[playerid][pName], value);
				    SendClientMessage(Player[playerid][TransferID], COLOR_GOLD,str);
				    format(str,128,"[BANCO]: %s(%d) transferiu R$%d para %s(%d).", Player[playerid][pName],playerid, value, ReturnPlayer(Player[playerid][TransferID]),Player[playerid][TransferID]);
				    WriteLog("bank", str);
					ABroadCast(COLOR_GOLD,str,1);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GOLD, "[BANCO]: O jogador não está mais conectado.");
				}
			}
		    return 	ShowPlayerDialog(playerid,DIALOG_ATM,DIALOG_STYLE_LIST,"Caixa Rápido","-Ver Saldo \n-Sacar \n-Depositar \n-Transferir","Selecionar","Voltar");
		}
	}
	else if(dialogid == 2424)
	{
    	if(response)
		{
        	if(listitem == 0)
			{
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://198.20.99.90:8976");//Radio BLS
				SendClientMessage(playerid, SERVER_INFO, "[BLS]: {FFFFFF}Radio BLS - Oficial Ligada! Epere Alguns Segundos Para Tocar!");
        	}
        	else if(listitem == 1)
			{
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid,"http://stream.radiohunter.com.br:7070/listen.pls");//Radio Hunter
				SendClientMessage(playerid, SERVER_INFO, "[BLS]: {FFFFFF}Radio Hunter Ligada! Epere Alguns Segundos Para Tocar!");
        	}
        	else if(listitem == 2)
			{
        		StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid,"http://radiosupermix.com.br:7585");// SUPER MIX
        		SendClientMessage(playerid, SERVER_INFO, "[BLS]: {FFFFFF}Radio Super Mox Ligada! Epere Alguns Segundos Para Tocar!");
  			}
        	else if(listitem == 3)
			{
		        StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid,"http://66.90.101.54:8120");//Radio PureDJ
		        SendClientMessage(playerid, SERVER_INFO, "[BLS]: {FFFFFF}Radio PureDJ Ligada! Epere Alguns Segundos Para Tocar!");
        	}
	        else if(listitem == 4)
			{
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid,"http://69.162.90.148:7080/");//Nova Web
			    SendClientMessage(playerid, SERVER_INFO, "[BLS]: {FFFFFF}Radio Nova Web Ligada! Epere Alguns Segundos Para Tocar!");
	        }
	        else if(listitem == 5)
	        {
		        StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid,"http://streaming15.brlogic.com:8084/live");//Radio Electro Vibe
		        SendClientMessage(playerid, SERVER_INFO, "[BLS]: {FFFFFF}Radio Electro Vibe Ligada! Epere Alguns Segundos Para Tocar!");
	        }
	        else if(listitem == 6)
	        {
		        StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid,"http://64.31.30.91:9980");//Team Expert
		        SendClientMessage(playerid, SERVER_INFO, "[BLS]: {FFFFFF}Radio Team Expert Ligada! Epere Alguns Segundos Para Tocar!");
	        }
	        else if(listitem == 7)
			{
		        StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid,"http://streaming18.brlogic.com:8204/live");//Relax
		        SendClientMessage(playerid, SERVER_INFO, "[BLS]: {FFFFFF}Radio Relax Ligada! Epere Alguns Segundos Para Tocar!");
	        }
	        else if(listitem == 8)
			{
		        StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid,"http://63.143.33.99:8000");//Brasil Hits
		        SendClientMessage(playerid, SERVER_INFO, "[BLS]: {FFFFFF}Radio Brasil Hits Ligada! Epere Alguns Segundos Para Tocar!");
	        }
	        else if(listitem == 9)
			{
		        StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid,"http://63.143.33.99:8000");//Brasil Hits
		        SendClientMessage(playerid, SERVER_INFO, "[BLS]: {FFFFFF}Radio Brasil Hits Ligada! Epere Alguns Segundos Para Tocar!");
	        }
    	}
   	}
   	else if(dialogid == 769)
	{
    	if(response)
	 	{
			if(Player[playerid][pDonateRank]>0)
			{
			    Descongelar(playerid);
			    SendClientMessage(playerid,SERVER_INFO, "[BLS]: {FFFFFF}Dirija com cuidado! Bom Jogo.");
			}
			else
			{
			    RemovePlayerFromVehicle(playerid);
			    Descongelar(playerid);
			    SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é um jogador VIP.");
			}
		}
		else
		{
		    RemovePlayerFromVehicle(playerid);
		    Descongelar(playerid);
			SendClientMessage(playerid,SERVER_INFO,"Você saiu do carro VIP.");
		}
    }
	else if(dialogid == DIALOG_MP3)
	{
	    new Msg[160];
    	if(response)
	 	{
			if(listitem == sizeof(Musicas))
			{
			    ShowPlayerDialog(playerid, 2424, DIALOG_STYLE_LIST, "Brasil {FF0000}Life {FFFFFF}Simulation Rádios", "{FFFFFF}Rádio BLS - Oficial\nRadio Hunter\nRadio Super Mix\nRadio PureDJ\nRadio Nova Web\nRadio Electro Vibe\nRadio Team Expert\nRadio Relax", "OK", "Cancelar");
			}
			else if(listitem == sizeof(Musicas) + 1)
			{
			    StopAudioStreamForPlayer(playerid);
				SendClientMessage(playerid,SERVER_INFO,"{FF0000}{FF0000}[Info]:{FFFFFF}{FFFFFF} iPod desligado!");
				OuvindoIPod[playerid] = false;
				if(IsPlayerInAnyVehicle(playerid))
				    PlayAudioStreamForPlayer(playerid, VehicleInfo[GetPlayerVehicleID(playerid)][vRadio]);
				else
				{
				    foreach(Player, x)
				    {
				        if(IsValidDynamicArea(Player[x][pDynamicBBArea]))
				        {
				            if(IsPlayerInDynamicArea(playerid, Player[x][pDynamicBBArea]))
				            {
				                PlayAudioStreamForPlayer(playerid, Player[x][pDynamicBBStation], Player[x][pDynamicBBX], Player[x][pDynamicBBY], Player[x][pDynamicBBZ], 15, 1);
				            }
				        }
				    }
				}
			}
			else if(listitem <= sizeof(Musicas) - 1)
			{
				StopAudioStreamForPlayer(playerid);
				format(Msg, 160, "http://blsrpg.com.br/iPod/%s", URL[listitem]);
				PlayAudioStreamForPlayer(playerid, Msg);
				format(Msg,sizeof(Msg),"{FF0000}[Info]:{FFFFFF} iPod tocando agora: %s!", Musicas[listitem]);
				SendClientMessage(playerid, SERVER_INFO, Msg);
				OuvindoIPod[playerid] = true;
			}
		}
		return true;
    }// 03/05/2012
	else if(dialogid == DIALOG_RADIO)
	{
	    new Msg[128];
    	if(response)
	 	{
			if(listitem < sizeof(Radios))
			{
			    StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, UrlRadio[listitem]);
				VehicleInfo[GetPlayerVehicleID(playerid)][vRadio] = UrlRadio[listitem];
				foreach(new i: Player)
			    	if(GetPlayerState(i) == PLAYER_STATE_PASSENGER && GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
		    		    PlayAudioStreamForPlayer(i, UrlRadio[listitem]);

				format(Msg,sizeof(Msg),"O motorista %s mudou a rádio para %s.", PlayerGetName(playerid), Radios[listitem]);
            	ProxDetector(25.0, playerid, Msg, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else if(listitem == sizeof(Radios))
			{
			    format(VehicleInfo[GetPlayerVehicleID(playerid)][vRadio], 128, "");
				StopAudioStreamForPlayer(playerid);
				foreach(new i: Player)
			    	if(GetPlayerState(i) == PLAYER_STATE_PASSENGER && GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
		    		    StopAudioStreamForPlayer(i);

                format(Msg,sizeof(Msg),"O motorista %s desligou o rádio.", PlayerGetName(playerid));
            	ProxDetector(25.0, playerid, Msg, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
  		}
		return true;
    }
    else if(dialogid == DIALOG_TOPS)
    {
        if(response)
        {
            if(listitem == 0)
            {
                new str[128];
                format(str, 128, "{FFFFFF}O Primeiro jogador a atingir o nível 70 no servidor foi: {FF0000}%s{FFFFFF}.\nParabéns a ele!", TopLevelName);
				ShowPlayerDialog(playerid, DIALOG_TOPLEVEL, DIALOG_STYLE_MSGBOX, "Top Level", str, "OK", "");
            }
        }
    }
    else if(dialogid == DIALOG_VIP)
	{
	    if(response)
	    {
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, DIALOG_VIP1, DIALOG_STYLE_INPUT, "Digitar Serial", "Digite o serial do seu BLSCash:", "OK", "Cancelar");
			}
			else if(listitem == 1)
			{
				ShowPlayerDialog(playerid, DIALOG_VIP2, DIALOG_STYLE_LIST, "Pacotes VIP", "VIP Bronze (BLS$10.000)\nVIP Prata (BLS$20.000)\nVIP Ouro (BLS$50.000)\n", "OK", "Cancelar");
			}
			else if(listitem == 2)
			{
				ShowPlayerDialog(playerid, DIALOG_VIP6, DIALOG_STYLE_LIST, "Pacotes de Armas", "O que são pacotes de armas?\nPacote Bronze\nPacote Prata\nPacote Ouro\n", "OK", "Cancelar");
			}
			else if(listitem == 3)
			{
                ShowPlayerDialog(playerid, DIALOG_VIP14, DIALOG_STYLE_LIST, "Pacotes de Níveis", "+1 Nível (BLS$7.500)\n+2 Níveis (BLS$15.000)\n+3 Níveis (BLS$22.500)\n", "OK", "Cancelar");
			}
			else if(listitem == 4)
			{
                ShowPlayerDialog(playerid, DIALOG_VIP11, DIALOG_STYLE_LIST, "Carros Temporários", "Infernus (BLS$1.500)\nBullet (BLS$1.000)\nCheetah (BLS$1.000)\nBanshee (BLS$1.500)\nTurismo (BLS1.000)\nNRG-500 (BLS1.000)\n", "OK", "Cancelar");
			}
			else if(listitem == 5)
			{
                ShowPlayerDialog(playerid, DIALOG_VIP12, DIALOG_STYLE_INPUT,
                                 "Trocar Cash por Dinheiro",
                                 "{FFFFFF}Troca de {FFFF00}Cash{FFFFFF} por {008800}Dinheiro{FFFFFF}:\n{FF0000}- {FFFF00}1 Cash{FFFFFF} = {008800}R$10\n{FFFFFF}Quantos {FFFF00}Cash{FFFFFF} você deseja transformar em {008800}Dinheiro{FFFFFF}?",
                                 "Trocar", "Cancelar");
			}
			else if(listitem == 6) //resetar KD
			{
			    ShowPlayerDialog(playerid, DIALOG_VIP15, DIALOG_STYLE_MSGBOX,
                                 "Resetar K/D",
                                 "{FFFFFF}Quer resetar suas Kills/Deaths?\nPreço: BLS${FF0000}10.000\n\n{FFFFFF}Não use o botão \"ESC\" para sair dessa janela!",
                                 "Resetar", "Cancelar");
			}
		}
		return true;
    }
    else if(dialogid == DIALOG_VIP1)
    {
		if(response)
		{
			new ss[72];
			format(ss, sizeof(ss), "%s/Comprado - %s.ini", PastaSeriais, inputtext);
			if(!DOF2_FileExists(ss))
			    return SendClientMessage(playerid, 0xFFFFFFFF, "[ERRO]:{FFFFFF} Esse serial não existe ou já foi usado.");

			new tipo;
			tipo = DOF2_GetInt(ss, "Tipo");
			new sstring[160];
			switch(tipo)
			{
			    case 0:
				{
					GivePlayerCash(playerid, PrecoTipo0);
					format(sstring, sizeof(sstring), "{FF0000}[Info]:{FFFFFF} Você ativou seus BLS$%d. Novo Balanço: BLS${00FF00}%d{FFFFFF}.", PrecoTipo0, Player[playerid][pBLSCash]);
				}
			    case 1:
				{
					GivePlayerCash(playerid, PrecoTipo1);
					format(sstring, sizeof(sstring), "{FF0000}[Info]:{FFFFFF} Você ativou seus BLS$%d. Novo Balanço: BLS${00FF00}%d{FFFFFF}.", PrecoTipo1, Player[playerid][pBLSCash]);
				}
			    case 2:
				{
					GivePlayerCash(playerid, PrecoTipo2);
					format(sstring, sizeof(sstring), "{FF0000}[Info]:{FFFFFF} Você ativou seus BLS$%d. Novo Balanço: BLS${00FF00}%d{FFFFFF}.", PrecoTipo2, Player[playerid][pBLSCash]);
				}
			}
			SendClientMessage(playerid, 0xFFFFFFFF, sstring);
			DOF2_RemoveFile(ss);
	        return true;
        }
        else
        {
            cmd_lojabls(playerid);
        }
    }
    else if(dialogid == DIALOG_VIP2)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
				new str[1024];
				for(new i = 0; i < sizeof(VIPBronze); i++)
				{
					format(str, sizeof(str), "%s\n%s", str, VIPBronze[i]);
				}
				ShowPlayerDialog(playerid, DIALOG_VIP3, DIALOG_STYLE_MSGBOX, "Vip Bronze (BLS$10.000)", str, "Comprar", "Cancelar");
	        }
	        else if(listitem == 1)
	        {
				new str[1024];
				for(new i = 0; i < sizeof(VIPPrata); i++)
				{
					format(str, sizeof(str), "%s\n%s", str, VIPPrata[i]);
				}
				ShowPlayerDialog(playerid, DIALOG_VIP4, DIALOG_STYLE_MSGBOX, "Vip Prata (BLS$20.000)", str, "Comprar", "Cancelar");
	        }
   	        else if(listitem == 2)
	        {
				new str[1024];
				for(new i = 0; i < sizeof(VIPOuro); i++)
				{
					format(str, sizeof(str), "%s\n%s", str, VIPOuro[i]);
				}
				ShowPlayerDialog(playerid, DIALOG_VIP5, DIALOG_STYLE_MSGBOX, "Vip Ouro (BLS$50.000)", str, "Comprar", "Cancelar");
	        }
	    }
	    else
	    {
	        cmd_lojabls(playerid);
	    }
	}
	else if(dialogid == DIALOG_VIP3)
    {
        if(response)
        {
            if(GetPlayerCash(playerid) >= 10000)
            {
                new Dia, Mes, Ano;
                getdate(Ano, Mes, Dia);
				CalcularVIP(Dia, Mes, Ano);

                Player[playerid][pDonateRank] = 1;
                Player[playerid][pVIP] = PegarIntDia(Dia, Mes, Ano);
                Player[playerid][pHoraVIP] = ClockTime[tHour];

                format(thestring, 256, "{FF0000}[Info]:{FFFFFF} Seu VIP Bronze dura até %02d/%02d/%04d.", Dia, Mes, Ano);
                SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você comprou VIP Bronze por 1 mês.");
                SendClientMessage(playerid, COLOR_WHITE, "Use o comando {E9ED19}/MenuCash {FFFFFF}para ativar/desativar o chat VIP!");
                SendClientMessage(playerid, SERVER_INFO, thestring);
                GivePlayerCash(playerid, -10000);
			}
			else
			{
			    SendClientMessage(playerid,COLOR_RED,"[ERRO]:{FFFFFF} Você não tem cash suficiente.");
			}
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_VIP2, DIALOG_STYLE_LIST, "Pacotes VIP", "VIP Bronze (BLS$10.000)\nVIP Prata (BLS$20.000)\nVIP Ouro (BLS$50.000)\n", "OK", "Voltar");
		}
	}
	else if(dialogid == DIALOG_VIP4)
    {
        if(response)
        {
            if(GetPlayerCash(playerid) >= 20000)
            {
                new Dia, Mes, Ano;
                getdate(Ano, Mes, Dia);
				CalcularVIP(Dia, Mes, Ano);

                Player[playerid][pDonateRank] = 2;
                Player[playerid][pVIP] = PegarIntDia(Dia, Mes, Ano);
                Player[playerid][pHoraVIP] = ClockTime[tHour];

                format(thestring, 256, "{FF0000}[Info]:{FFFFFF} Seu VIP Prata dura até %02d/%02d/%04d.", Dia, Mes, Ano);
                SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você comprou VIP Prata por 1 mês.");
                SendClientMessage(playerid, COLOR_WHITE, "Use o comando {E9ED19}/MenuCash {FFFFFF}para ativar/desativar o chat VIP!");
                SendClientMessage(playerid, SERVER_INFO, thestring);
                GivePlayerCash(playerid, -20000);
			}
			else
			{
			    SendClientMessage(playerid,COLOR_RED,"[ERRO]:{FFFFFF} Você não tem cash suficiente.");
			}
		}
		else
		{
   		    ShowPlayerDialog(playerid, DIALOG_VIP2, DIALOG_STYLE_LIST, "Pacotes VIP", "VIP Bronze (BLS$10.000)\nVIP Prata (BLS$20.000)\nVIP Ouro (BLS$50.000)\n", "OK", "Voltar");
		}
	}
	else if(dialogid == DIALOG_VIP5)
    {
        if(response)
        {
            if(GetPlayerCash(playerid) >= 50000)
            {
                new Dia, Mes, Ano;
                getdate(Ano, Mes, Dia);
				CalcularVIP(Dia, Mes, Ano);
                Player[playerid][pDonateRank] = 3;
                Player[playerid][pVIP] = PegarIntDia(Dia, Mes, Ano);
                Player[playerid][pHoraVIP] = ClockTime[tHour];

                format(thestring, 256, "{FF0000}[Info]:{FFFFFF} Seu VIP Ouro dura até %02d/%02d/%04d.", Dia, Mes, Ano);
                SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você comprou VIP Ouro por 1 mês.");
                SendClientMessage(playerid, COLOR_WHITE, "Use o comando {E9ED19}/MenuCash {FFFFFF}para ativar/desativar o chat VIP!");
                SendClientMessage(playerid, SERVER_INFO, thestring);
                GivePlayerCash(playerid, -50000);
			}
			else
			{
			    SendClientMessage(playerid,COLOR_RED,"[ERRO]:{FFFFFF} Você não tem cash suficiente.");
			}
		}
		else
		{
   		    ShowPlayerDialog(playerid, DIALOG_VIP2, DIALOG_STYLE_LIST, "Pacotes VIP", "VIP Bronze (BLS$10.000)\nVIP Prata (BLS$20.000)\nVIP Ouro (BLS$20.000)\n", "OK", "Voltar");
		}
	}
	else if(dialogid == DIALOG_VIP6)
	{
	    if(response)
		{
		    if(listitem == 0)
		    {
		        new str[1024];
				for(new i = 0; i < sizeof(PacotesDeArmas); i++)
				{
					format(str, sizeof(str), "%s\n%s", str, PacotesDeArmas[i]);
				}
		        ShowPlayerDialog(playerid, DIALOG_VIP7, DIALOG_STYLE_MSGBOX, "Pacotes de Armas", str, "OK", "");
		    }
		    else if(listitem == 1)
			{
                new str[512];
				for(new i = 0; i < sizeof(PacoteBronze); i++)
				{
					format(str, sizeof(str), "%s\n%s", str, PacoteBronze[i]);
				}
		        ShowPlayerDialog(playerid, DIALOG_VIP8, DIALOG_STYLE_MSGBOX, "Pacote Bronze", str, "Comprar", "Cancelar");
			}
			else if(listitem == 2)
			{
                new str[512];
				for(new i = 0; i < sizeof(PacotePrata); i++)
				{
					format(str, sizeof(str), "%s\n%s", str, PacotePrata[i]);
				}
		        ShowPlayerDialog(playerid, DIALOG_VIP9, DIALOG_STYLE_MSGBOX, "Pacote Prata", str, "Comprar", "Cancelar");
			}
			else if(listitem == 3)
			{
                new str[512];
				for(new i = 0; i < sizeof(PacoteOuro); i++)
				{
					format(str, sizeof(str), "%s\n%s", str, PacoteOuro[i]);
				}
		        ShowPlayerDialog(playerid, DIALOG_VIP10, DIALOG_STYLE_MSGBOX, "Pacote Ouro", str, "Comprar", "Cancelar");
			}
		}
		else
		{
			cmd_lojabls(playerid);
		}
	}
	else if(dialogid == DIALOG_VIP7)
	{
	    ShowPlayerDialog(playerid, DIALOG_VIP6, DIALOG_STYLE_LIST, "Pacotes de Armas", "O que são pacotes de armas?\nPacote Bronze\nPacote Prata\nPacote Ouro\n", "OK", "Cancelar");
	}
	else if(dialogid == DIALOG_VIP8)
	{
	    if(response)
	    {
	        if(GetPlayerCash(playerid) < 15000)
	        {
	            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem cash suficiente.");
	            return cmd_lojabls(playerid);
	        }
	        if(Player[playerid][pPacoteArmas] == 1)
	        {
		        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já tem esse pacote.");
		        return cmd_lojabls(playerid);
	        }
	        Player[playerid][pGun1] = 1;
	        Player[playerid][pAmmo1] = 1;
	        Player[playerid][pGun2] = 22;
	        Player[playerid][pAmmo2] = 200;
	        Player[playerid][pGun3] = 29;
	        Player[playerid][pAmmo3] = 700;
	        Player[playerid][pPacoteArmas] = 1;
	        GivePlayerCash(playerid, -15000);
	        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você comprou o pacote Bronze de armas.");
	    }
	    else
	    {
			ShowPlayerDialog(playerid, DIALOG_VIP6, DIALOG_STYLE_LIST, "Pacotes de Armas", "O que são pacotes de armas?\nPacote Bronze\nPacote Prata\nPacote Ouro\n", "OK", "Cancelar");
	    }
	}
	else if(dialogid == DIALOG_VIP9)
	{
	    if(response)
	    {
	        if(GetPlayerCash(playerid) < 25000)
	        {
	            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem cash suficiente.");
	            return cmd_lojabls(playerid);
	        }
	        if(Player[playerid][pPacoteArmas] == 2)
	        {
		        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já tem esse pacote.");
		        return cmd_lojabls(playerid);
	        }
	        Player[playerid][pGun1] = 2;
	        Player[playerid][pAmmo1] = 1;
	        Player[playerid][pGun2] = 24;
	        Player[playerid][pAmmo2] = 200;
	        Player[playerid][pGun3] = 31;
	        Player[playerid][pAmmo3] = 700;
	        Player[playerid][pGun4] = 33;
	        Player[playerid][pAmmo4] = 250;
	        Player[playerid][pPacoteArmas] = 2;
	        GivePlayerCash(playerid, -25000);
	        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você comprou o pacote Prata de armas.");
	    }
	    else
	    {
			ShowPlayerDialog(playerid, DIALOG_VIP6, DIALOG_STYLE_LIST, "Pacotes de Armas", "O que são pacotes de armas?\nPacote Bronze\nPacote Prata\nPacote Ouro\n", "OK", "Cancelar");
	    }
	}
	else if(dialogid == DIALOG_VIP10)
	{
	    if(response)
	    {
	        if(GetPlayerCash(playerid) < 40000)
	        {
	            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem cash suficiente.");
	            return cmd_lojabls(playerid);
	        }
	        if(Player[playerid][pPacoteArmas] == 3)
	        {
		        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já tem esse pacote.");
		        return cmd_lojabls(playerid);
	        }
	        Player[playerid][pGun1] = 8;
	        Player[playerid][pAmmo1] = 1;
	        Player[playerid][pGun2] = 24;
	        Player[playerid][pAmmo2] = 200;
	        Player[playerid][pGun3] = 30;
	        Player[playerid][pAmmo3] = 700;
	        Player[playerid][pGun4] = 34;
	        Player[playerid][pAmmo4] = 250;
	        Player[playerid][pPacoteArmas] = 3;
	        GivePlayerCash(playerid, -40000);
	        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você comprou o pacote Ouro de armas.");
	    }
	    else
	    {
			ShowPlayerDialog(playerid, DIALOG_VIP6, DIALOG_STYLE_LIST, "Pacotes de Armas", "O que são pacotes de armas?\nPacote Bronze\nPacote Prata\nPacote Ouro\n", "OK", "Cancelar");
	    }
	}
	else if(dialogid == DIALOG_VIP11)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(GetPlayerCash(playerid) < 1500)
	            {
	                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem cash suficiente.");
	            	return cmd_lojabls(playerid);
	            }
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
				DestroyVehicle(VipCar[playerid]);
	            VipCar[playerid] = CreateVehicle(411, x, y, z+1, 0, 0, 0, -1);
	            SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você spawnou seu Infernus. Você só pode ter um carro VIP spawnado.");
				GivePlayerCash(playerid, -1500);
	        }
	        else if(listitem == 1)
	        {
	            if(GetPlayerCash(playerid) < 1000)
	            {
	                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem cash suficiente.");
	            	return cmd_lojabls(playerid);
	            }
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
				DestroyVehicle(VipCar[playerid]);
	            VipCar[playerid] = CreateVehicle(541, x, y, z+1, 0, 0, 0, -1);
	            SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você spawnou seu Bullet. Você só pode ter um carro VIP spawnado.");
				GivePlayerCash(playerid, -1000);
	        }
	    	else if(listitem == 2)
	        {
	            if(GetPlayerCash(playerid) < 1000)
	            {
	                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem cash suficiente.");
	            	return cmd_lojabls(playerid);
	            }
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
				DestroyVehicle(VipCar[playerid]);
	            VipCar[playerid] = CreateVehicle(415, x, y, z+1, 0, 0, 0, -1);
	            SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você spawnou seu Cheetah. Você só pode ter um carro VIP spawnado.");
				GivePlayerCash(playerid, -1000);
	        }
	        else if(listitem == 3)
	        {
	            if(GetPlayerCash(playerid) < 1500)
	            {
	                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem cash suficiente.");
	            	return cmd_lojabls(playerid);
	            }
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
				DestroyVehicle(VipCar[playerid]);
	            VipCar[playerid] = CreateVehicle(429, x, y, z+1, 0, 0, 0, -1);
	            SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você spawnou seu Banshee. Você só pode ter um carro VIP spawnado.");
				GivePlayerCash(playerid, -1500);
	        }
	        else if(listitem == 4)
	        {
	            if(GetPlayerCash(playerid) < 1000)
	            {
	                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem cash suficiente.");
	            	return cmd_lojabls(playerid);
	            }
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
				DestroyVehicle(VipCar[playerid]);
	            VipCar[playerid] = CreateVehicle(451, x, y, z+1, 0, 0, 0, -1);
	            SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você spawnou seu Turismo. Você só pode ter um carro VIP spawnado.");
				GivePlayerCash(playerid, -1000);
	        }
	        else if(listitem == 5)
	        {
	            if(GetPlayerCash(playerid) < 1000)
	            {
	                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem cash suficiente.");
	            	return cmd_lojabls(playerid);
	            }
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
				DestroyVehicle(VipCar[playerid]);
	            VipCar[playerid] = CreateVehicle(522, x, y, z+1, 0, 0, 0, -1);
	            SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você spawnou sua NRG-500. Você só pode ter um carro VIP spawnado.");
				GivePlayerCash(playerid, -1000);
	        }
	    }
	    else
	    {
	        cmd_lojabls(playerid);
	    }
	}
    else if(dialogid == DIALOG_VIP12)
    {
        if(!response)
            return cmd_lojabls(playerid);
        else if(!strlen(inputtext) || !IsNumeric(inputtext) || strval(inputtext) < 1)
        {
            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Quantidade inválida.");
            return cmd_lojabls(playerid);
        }
        else if(strval(inputtext) > 100000)
        {
            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você só pode trocar {FFFF00}C$100.000{AA3333} por vez.");
            return cmd_lojabls(playerid);
        }
        else if(strval(inputtext) > Player[playerid][pBLSCash])
        {
            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem essa quantidade de Cash.");
            return cmd_lojabls(playerid);
        }

        new datString[512],
            quantidade = strval(inputtext);

        TrocandoCash[playerid] = quantidade;

        format(datString, 512, "{FFFFFF}Troca de {FFFF00}Cash{FFFFFF} por {008800}Dinheiro{FFFFFF}:\nVocê deseja transformar {FFFF00}%d Cash{FFFFFF} em {008800}R$%d{FFFFFF}?", quantidade, quantidade * 10);
        ShowPlayerDialog(playerid, DIALOG_VIP13, DIALOG_STYLE_MSGBOX, "Trocar Cash por Dinheiro", datString, "Sim", "Não");
        return 1;
    }
    else if(dialogid == DIALOG_VIP13)
    {
        if(!response)
            return cmd_lojabls(playerid);
        else if(TrocandoCash[playerid] > Player[playerid][pBLSCash])
        {
            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem essa quantidade de {FFFF00}Cash{AA3333}.");
            return cmd_lojabls(playerid);
        }

        Player[playerid][pBLSCash] -= TrocandoCash[playerid];
        GivePlayerGP(playerid, TrocandoCash[playerid] * 10);

        new datString[155];
        format(datString, 155, "{FF0000}[Info]:{FFFFFF} Você trocou {FFFF00}%d Cash{FFFFFF} em {008800}R$%d{FFFFFF}.", TrocandoCash[playerid], TrocandoCash[playerid] * 10);
        SendClientMessage(playerid, SERVER_INFO, datString);

        cmd_lojabls(playerid);

        format(datString, sizeof(datString), "%s trocou %d cash em %d reais", Player[playerid][pName], TrocandoCash[playerid], TrocandoCash[playerid] * 10);
        WriteLog("cashtomoney", datString);

        AtualizarTextDraws(playerid);
        return 1;
    }
    else if(dialogid == DIALOG_VIP14)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(GetPlayerCash(playerid) < 7500)
	            {
	                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem cash suficiente.");
	            	return cmd_lojabls(playerid);
	            }
	            Player[playerid][pLevel]++;
	            SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você comprou 1 nível.");
				GivePlayerCash(playerid, -7500);
	        }
	        else if(listitem == 1)
	        {
	            if(GetPlayerCash(playerid) < 15000)
	            {
	                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem cash suficiente.");
	            	return cmd_lojabls(playerid);
	            }
	            Player[playerid][pLevel] += 2;
	            SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você comprou 2 níveis.");
				GivePlayerCash(playerid, -15000);
	        }
	    	else if(listitem == 2)
	        {
	            if(GetPlayerCash(playerid) < 22500)
	            {
	                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem cash suficiente.");
	            	return cmd_lojabls(playerid);
	            }
	            Player[playerid][pLevel] += 3;
	            SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você comprou 3 níveis.");
				GivePlayerCash(playerid, -22500);
	        }
	    }
	    else
	    {
	        cmd_lojabls(playerid);
	    }
	}
	else if(dialogid == DIALOG_VIP15)
	{
	    if(!response)
			return cmd_lojabls(playerid);

		if(GetPlayerCash(playerid) < 10000)
		{
		    SendClientMessage(playerid, 0xFFFFFFFF, "[ERRO]:{FFFFFF} Você não tem cash suficiente.");
		    return cmd_lojabls(playerid);
		}
		else
		{
   		    Player[playerid][pKills] = 0;
		    Player[playerid][pDeaths] = 0;
		    GivePlayerCash(playerid, -10000);
		    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você resetou sua taxa K/D! Tente não morrer muito ;)");
		}

	}
	else if(dialogid == 4)
	{
		if(response)
			if(listitem == 0)
				ShowPlayerDialog(playerid,6, DIALOG_STYLE_LIST, "Estilos de luta", "Elbow\nBoxe\nGrab and kick\nStreet fight\nKungFu\nNormal", "Selecionar", "Cancelar");

		return true;
	}
    else if(dialogid == 5)
	{
		if(response)
		{
			if(listitem == 0)
				return ShowPlayerDialog(playerid,13, DIALOG_STYLE_LIST, "Rodas", "Shadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAccess", "Selecionar", "Sair");

			else if(listitem == 1)
			{
				if(GetPlayerGP(playerid) < 200)
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não possui dinheiro suficiente.");
				else if(!IsPlayerInAnyVehicle(playerid))
				    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um veículo!");
				else
				{
				    if(IsPlayerInCar(playerid))
			  		{
						AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
		 				SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou nitro no seu carro por R$200!");
						GivePlayerGP(playerid,-200);
                        GiveBizMoney(Biz_Mecanica, 200);
					}
					else
						return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode colocar nitro nesse veículo.");
				}
            }
			else if(listitem == 2)
			{
	  			if(GetPlayerGP(playerid) < 300)
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não possui dinheiro suficiente.");
				else if(!IsPlayerInAnyVehicle(playerid))
				    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um veículo.");
				else
				{
				    if(IsPlayerInCar(playerid))
			  		{
						AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
		 				SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou suspensão hidráulica no seu carro por R$300!");
						GivePlayerGP(playerid,-300);
                        GiveBizMoney(Biz_Mecanica, 300);
					}
					else
						return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode colocar suspensão nesse veículo.");
				}
            }
   		}
   		return true;
	}
    else if(dialogid == 7)
	{
        //:gps
        if(!response)
            return 1;

        if(listitem < MAX_GPS)
        {
            new string_[2048], str[64], caption[128];

            for(new i = 0; i < sizeof(GPSList[]); i++)
            {
                if(!strcmp(GPSList[listitem][i][GPSName], "Nenhum", true))
                    break;

                format(str, 64, "%s\n", GPSList[listitem][i][GPSName]);
                strcat(string_, str, 2048);
            }
            format(caption, 128, "GPS - %s", GPSListNames[listitem]);

            ShowPlayerDialog(playerid, 5600 + listitem, DIALOG_STYLE_LIST, caption, string_, "Selecionar", "Voltar");
            return 1;
        }
        else if(listitem == MAX_GPS)
        {
            new string_[2048], str[128];

            for(new i = 0; i < MAX_BIZ; i++)
            {
                if(BizzInfo[i][bOwned])
                    format(str, 64, "(%02d) %s - %s\n", i, bMessage[i], bOwner[i]);
                else
                    format(str, 64, "(%02d) %s - R$%d\n", i, bMessage[i], BizzInfo[i][bBuyPrice]);

                strcat(string_, str, 2048);
            }

            ShowPlayerDialog(playerid, 8, DIALOG_STYLE_LIST, "GPS - Locais de Empresa:", string_, "Selecionar", "Voltar");
            return 1;
        }
        new string_[2048], str[128];

        GPSHouses[playerid] = 0;

        new _max = GPSHouses[playerid] + 15;
        if(_max >= MAX_HOUSES)
            _max = MAX_HOUSES -1;

        for(new i = GPSHouses[playerid]; i < _max; i++)
        {
            if(HouseInfo[i][hOwned])
                format(str, 128, "(%03d) %s - %s\r\n", i, hDiscription[i], hOwner[i]);
            else
                format(str, 128, "(%03d) %s - R$%d\r\n", i, hDiscription[i], HouseInfo[i][hValue]);

            strcat(string_, str, 2048);
        }
        strcat(string_, "(>>>) Proximo", 2048);

        ShowPlayerDialog(playerid, 9, DIALOG_STYLE_LIST, "GPS - Locais de Casas:", string_, "Selecionar", "Voltar");
        return 1;
	}
    else if(dialogid >= 5600 && dialogid < 5600 + MAX_GPS)
    {
        if(!response)
            return ShowGPSDialog(playerid);

        new list = dialogid - 5600;

        if(GPSTeleport[playerid])
        {
            MovePlayer(playerid, GPSList[list][listitem][GPSPos][0], GPSList[list][listitem][GPSPos][1], GPSList[list][listitem][GPSPos][2]);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
            return 1;
        }

        format(string, sizeof(string), "GPS ligado. Destino: %s.", GPSList[list][listitem][GPSName]);
        SendClientMessage(playerid, COLOR_WHITE, string);

        SetPlayerCheckpoint(playerid, GPSList[list][listitem][GPSPos][0], GPSList[list][listitem][GPSPos][1], GPSList[list][listitem][GPSPos][2], 6.0);
        return 1;
    }
    else if(dialogid == 8)
    {
        if(!response)
            return ShowGPSDialog(playerid);

        if(GPSTeleport[playerid])
        {
            MovePlayer(playerid, BizzInfo[listitem][bEntranceX], BizzInfo[listitem][bEntranceY], BizzInfo[listitem][bEntranceZ]);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
            return 1;
        }
        format(string, sizeof(string), "GPS Ligado Localizacão: %s.", bMessage[listitem]);
        SendClientMessage(playerid, COLOR_YELLOW, string);

        SetPlayerCheckpoint(playerid, BizzInfo[listitem][bEntranceX], BizzInfo[listitem][bEntranceY], BizzInfo[listitem][bEntranceZ], 6.0);
        return 1;
    }
    else if(dialogid == 9)
    {
        if(!response)
            return ShowGPSDialog(playerid);

        //Voltar
        if(listitem == 0 && GPSHouses[playerid] != 0)
        {
            GPSHouses[playerid] -= 15;

            new string_[2048], str[128];

            if(GPSHouses[playerid] != 0)
                strcat(string_, "(<<<) Voltar\r\n", 2048);

            new _max = GPSHouses[playerid] + 15;
            if(_max >= MAX_HOUSES)
                _max = MAX_HOUSES -1;

            for(new i = GPSHouses[playerid]; i < _max; i++)
            {
                if(HouseInfo[i][hOwned])
                    format(str, 128, "(%03d) %s - %s\r\n", i, hDiscription[i], hOwner[i]);
                else
                    format(str, 128, "(%03d) %s - R$%d\r\n", i, hDiscription[i], HouseInfo[i][hValue]);

                strcat(string_, str, 2048);
            }

            if(_max == GPSHouses[playerid] + 15 && _max != MAX_HOUSES)
                strcat(string_, "(>>>) Proximo", 2048);

            ShowPlayerDialog(playerid, 9, DIALOG_STYLE_LIST, "GPS - Locais de Casas:", string_, "Selecionar", "Voltar");
            return 1;
        }
        //Proximo
        if(listitem == 16
        ||(listitem == 15 && GPSHouses[playerid] == 0))
        {
            GPSHouses[playerid] += 15;

            new string_[2048], str[128];

            if(GPSHouses[playerid] != 0)
                strcat(string_, "(<<<) Voltar\r\n", 2048);

            new _max = GPSHouses[playerid] + 15;
            if(_max > MAX_HOUSES)
                _max = MAX_HOUSES;

            for(new i = GPSHouses[playerid]; i < _max; i++)
            {
                if(HouseInfo[i][hOwned])
                    format(str, 128, "(%03d) %s - %s\r\n", i, hDiscription[i], hOwner[i]);
                else
                    format(str, 128, "(%03d) %s - R$%d\r\n", i, hDiscription[i], HouseInfo[i][hValue]);

                strcat(string_, str, 2048);
            }

            if(_max == GPSHouses[playerid] + 15 && _max != MAX_HOUSES)
                strcat(string_, "(>>>) Proximo", 2048);

            ShowPlayerDialog(playerid, 9, DIALOG_STYLE_LIST, "GPS - Locais de Casas:", string_, "Selecionar", "Voltar");
            return 1;
        }

        if(GPSHouses[playerid] != 0)
            listitem --;

        new hId = GPSHouses[playerid] + listitem;

        if(GPSTeleport[playerid])
        {
            MovePlayer(playerid, HouseInfo[hId][hEntrancex], HouseInfo[hId][hEntrancey], HouseInfo[hId][hEntrancez]);
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid, 0);
            return 1;
        }

        if(HouseInfo[hId][hOwned])
            format(string, 155, "GPS Ligado Localizacão: (%03d) %s - %s", hId, hDiscription[hId], hOwner[hId]);
        else
            format(string, 155, "GPS Ligado Localizacão: (%03d) %s - R$%d", hId, hDiscription[hId], HouseInfo[hId][hValue]);
        SendClientMessage(playerid, COLOR_YELLOW, string);

        SetPlayerCheckpoint(playerid, HouseInfo[hId][hEntrancex], HouseInfo[hId][hEntrancey], HouseInfo[hId][hEntrancez], 6.0);
        return 1;
    }
	else if(dialogid == 6)
	{
		if(response)
		{
			if(listitem == 0)
			{
                Player[playerid][pLuta] = 1;
				SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
				SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[Info]:{FFFFFF} Você escolheu o estilo de luta, Cotovelo de Aço.");
			}
			if(listitem == 1)
			{
                Player[playerid][pLuta] = 2;
				SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
				SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[Info]:{FFFFFF} Você escolheu o estilo de luta, Boxe.");
			}
			if(listitem == 2)
			{
                Player[playerid][pLuta] = 3;
				SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
				SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[Info]:{FFFFFF} Você escolheu o estilo de luta, Aprendiz.");
			}
			if(listitem == 3)
			{
                Player[playerid][pLuta] = 4;
				SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
				SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[Info]:{FFFFFF} Você escolheu o estilo de luta, Luta de Rua.");
			}
			if(listitem == 4)
			{
                Player[playerid][pLuta] = 5;
				SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
				SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[Info]:{FFFFFF} Você escolheu o estilo de luta, Kung Fu.");
			}
			if(listitem == 5)
			{
                Player[playerid][pLuta] = 6;
				SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
				SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[Info]:{FFFFFF} Você escolheu o estilo de luta, Normal.");
			}
		}
		return true;
	}
    else if(dialogid == 456)
	{
	    if(response)
	    {
	        switch(listitem)
        	{
				case 0: ShowPlayerDialog(playerid,457, 2, "Compro", "Compro Casa.\nCompro Mansão.\nCompro Empresa.\nCompro Veiculo.\nCompro Materiais.\nCompro Drogas.\nCompro Localização.\nCompro Casamento.\nCompro Carona.\nCompro Segurança.\nCompro Matador.\nCompro Terrorista.", "Anunciar", "Sair");
				case 1: ShowPlayerDialog(playerid,458, 2, "Vendo", "Vendo Casa.\nVendo Mansão.\nVendo Empresa.\nVendo Veiculo.\nVendo Materiais.\nVendo Drogas.\nVendo Localização.\nVendo Casamento.\nVendo Carona.\nVendo Segurança.\nVendo Matador.\nVendo Terrorista.", "Anunciar", "Sair");
				case 2: ShowPlayerDialog(playerid,459, 2, "Procuro", "Procuro ORG/GG/MAFIA.\nProcuro Advogado.\nProcuro Mecânico.\nProcuro Pizzaboy.\nProcuro Casa.\nProcuro Prostituta.\nProcuro Alguem para casar.\nProcuro Segurança\nProcuro Policial.\nProcuro Matador.\nProcuro Terrorista.\nProcuro Localização.\nProcuro Festa.", "Anunciar", "Sair");
				case 3: ShowPlayerDialog(playerid,460, 2, "Outros", "Festa Alhambra.\nFesta na minha casa.\nFesta na minha mansão.", "Anunciar", "Sair");
				case 4: ShowPlayerDialog(playerid,461, DIALOG_STYLE_INPUT, "Escreva", "{FFFFFF}Escreva seu anúncio", "Anunciar", "Sair");
			}
		}
		return true;
	}
	else if(dialogid == 457)
	{
		if(response)
		{
		    if(listitem == 0)
			{
				format(string, 128, "[Anúncio]: Compro Casa. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 1)
			{
			    format(string, 128, "[Anúncio]: Compro Mansão. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 2)
			{
			    format(string, 128, "[Anúncio]: Compro Empresa. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 3)
			{
			    format(string, 128, "[Anúncio]: Compro Veiculo. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 4)
			{
			    format(string, 128, "[Anúncio]: Compro Materiais. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 5)
			{
			    format(string, 128, "[Anúncio]: Compro Drogas. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 6)
			{
			    format(string, 128, "[Anúncio]: Compro Localização. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 7)
			{
			    format(string, 128, "[Anúncio]: Compro Casamento. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 8)
			{
			    format(string, 128, "[Anúncio]: Compro Carona. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 9)
			{
			    format(string, 128, "[Anúncio]: Compro Segurança. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 10)
			{
			    format(string, 128, "[Anúncio]: Compro Matador. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 11)
			{
				format(string, 128, "[Anúncio]: Compro Terrorista. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
            format(string, sizeof(string), "Custo do Anúncio: R$%d,00", BizAnunciosPrice);
            SendClientMessage(playerid, COLOR_VERDE, string);
            GivePlayerGP(playerid, -BizAnunciosPrice);
            GiveBizMoney(Biz_Anuncios, BizAnunciosPrice);
		}
		return true;
	}
	else if(dialogid == 458)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    format(string, 128, "[Anúncio]: Vendo Casa. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 1)
			{
			    format(string, 128, "[Anúncio]: Vendo Mansão. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 2)
			{
			    format(string, 128, "[Anúncio]: Vendo Empresa. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 3)
			{
			    format(string, 128, "[Anúncio]: Vendo Veiculo. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 4)
			{
			    format(string, 128, "[Anúncio]: Vendo Materiais. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 5)
			{
			    format(string, 128, "[Anúncio]: Vendo Drogas. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 6)
			{
			    format(string, 128, "[Anúncio]: Vendo Localização. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 7)
			{
			    format(string, 128, "[Anúncio]: Vendo Casamento. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 8)
			{
			    format(string, 128, "[Anúncio]: Vendo Carona. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 9)
			{
			    format(string, 128, "[Anúncio]: Vendo Segurança. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 10)
			{
			    format(string, 128, "[Anúncio]: Vendo Matador. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 11)
			{
			    format(string, 128, "[Anúncio]: Vendo Terrorista. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
            format(string, sizeof(string), "Custo do Anúncio: R$%d,00", BizAnunciosPrice);
            SendClientMessage(playerid, COLOR_VERDE, string);
            GivePlayerGP(playerid, -BizAnunciosPrice);
            GiveBizMoney(Biz_Anuncios, BizAnunciosPrice);
		}
		return true;
	}
	else if(dialogid == 459)
	{
	    if(response)
		{
		    if(listitem == 0)
		    {
		        format(string, 128, "[Anúncio]: Procuro ORG/GG/MAFIA. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 1)
   			{
				format(string, 128, "[Anúncio]: Procuro Advogado. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 2)
   			{
				format(string, 128, "[Anúncio]: Procuro Mecânico. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 3)
			{
				format(string, 128, "[Anúncio]: Procuro Pizzaboy. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 4)
			{
				format(string, 128, "[Anúncio]: Procuro Casa. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 5)
			{
				format(string, 128, "[Anúncio]: Procuro Prostituta. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 6)
			{
				format(string, 128, "[Anúncio]: Procuro Alguém para Casar. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 7)
			{
				format(string, 128, "[Anúncio]: Procuro Segurança. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			/*else if(listitem == 8)
			{
				format(string, 128, "[Anúncio]: Procuro PRF para Emplacar/Desapreender. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}*/
            listitem ++;
			if(listitem == 9)
			{
				format(string, 128, "[Anúncio]: Procuro Policial. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 10)
			{
				format(string, 128, "[Anúncio]: Procuro Matador. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 11)
			{
				format(string, 128, "[Anúncio]: Procuro Terrorista. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 12)
			{
				format(string, 128, "[Anúncio]: Procuro Festa. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
            format(string, sizeof(string), "Custo do Anúncio: R${FF0000}%d,00", BizAnunciosPrice);
            SendClientMessage(playerid, COLOR_VERDE, string);
            GivePlayerGP(playerid, -BizAnunciosPrice);
            GiveBizMoney(Biz_Anuncios, BizAnunciosPrice);
		}
		return true;
	}
	else if(dialogid == 460)
	{
		if(response)
		{
			if(listitem == 0)
		    {
		        format(string, 128, "[Anúncio]: Festa Alhambra. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 1)
			{
			    format(string, 128, "[Anúncio]: Festa na minha Casa. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
			else if(listitem == 2)
			{
			    format(string, 128, "[Anúncio]: Festa na minha Mansão. Contato: %s. Celular: %d",Player[playerid][pName],Player[playerid][pPnumber]);
				SendClientMessageToAll(COLOR_VERDE,string);
			}
            format(string, sizeof(string), "Custo do Anúncio: R${FF0000}%d,00", BizAnunciosPrice);
            SendClientMessage(playerid, COLOR_VERDE, string);
            GivePlayerGP(playerid, -BizAnunciosPrice);
            GiveBizMoney(Biz_Anuncios, BizAnunciosPrice);
		}
		return true;
  	}
  	else if(dialogid == 461)
	{
		if(response)
		{
		    if(Player[playerid][pLevel] < 3)
		    {
		        return SendClientMessage(playerid,COLOR_RED,"[ERRO]:{FFFFFF} Você precisa ser nível 3.");
			}
			else
			{
			    if(GetPlayerGP(playerid) >= 100)
			    {
				    format(string, 256,"[Anúncio]: %s. Contato: %s. Celular: %d.",inputtext,Player[playerid][pName],Player[playerid][pPnumber]);
		        	SendClientMessageToAll(COLOR_VERDE, string);
                    format(string, sizeof(string), "Custo do Anúncio: R$%d,00", BizAnunciosPrice);
                    SendClientMessage(playerid, COLOR_VERDE, string);
                    GivePlayerGP(playerid, -BizAnunciosPrice);
                    GiveBizMoney(Biz_Anuncios, BizAnunciosPrice);
			    }
			    else
				{
			        return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não tem dinheiro suficiente!");
				}
			}
		}
		return true;
  	}
	else if(dialogid == 13)
    {
        if(response == 1)
		{
            new vehicleid = GetPlayerVehicleID(playerid);
			if(vehicleid!=999)
			{
				if(listitem == 0)
				{
					AddVehicleComponent(vehicleid, 1073);
					SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou a roda Shadow no seu carro.");
				}
  				else if(listitem == 1)
		  		{
				  	AddVehicleComponent(vehicleid, 1074);
				  	SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou a roda Mega no seu carro.");
		  		}
				else if(listitem == 2)
				{
					AddVehicleComponent(vehicleid, 1075);
					SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou a roda RimShine no seu carro.");
				}
				else if(listitem == 3)
				{
					AddVehicleComponent(vehicleid, 1076);
					SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou a roda Wires no seu carro.");
				}
				else if(listitem == 4)
				{
					AddVehicleComponent(vehicleid, 1077);
					SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou a roda Classic no seu carro.");
				}
				else if(listitem == 5)
				{
					AddVehicleComponent(vehicleid, 1078);
					SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou a roda Twist no seu carro.");
				}
				else if(listitem == 6)
				{
					AddVehicleComponent(vehicleid, 1079);
					SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou a roda Cutter no seu carro.");
				}
				else if(listitem == 7)
				{
					AddVehicleComponent(vehicleid, 1080);
					SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou a roda Switch no seu carro.");
				}
				else if(listitem == 8)
				{
					AddVehicleComponent(vehicleid, 1081);
					SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou a roda Groove no seu carro.");
				}
				else if(listitem == 9)
				{
					AddVehicleComponent(vehicleid, 1082);
					SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou a roda Import no seu carro.");
				}
				else if(listitem == 10)
				{
					AddVehicleComponent(vehicleid, 1083);
					SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou a roda Dollar no seu carro.");
				}
				else if(listitem == 11)
				{
					AddVehicleComponent(vehicleid, 1084);
					SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou a roda Trance no seu carro.");
				}
				else if(listitem == 12)
				{
					AddVehicleComponent(vehicleid, 1085);
					SendClientMessage(playerid,COLOR_YELLOW, "Oficina: Você adicionou a roda Atomic no seu carro.");
				}
				else if(listitem == 13)
				{
					AddVehicleComponent(vehicleid, 1096);
					SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou a roda Ahab no seu carro.");
				}
				else if(listitem == 14)
				{
					AddVehicleComponent(vehicleid, 1097);
					SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou a roda Virtual no seu carro.");
				}
				else if(listitem == 15)
				{
					AddVehicleComponent(vehicleid, 1098);
					SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou a roda Access no seu carro.");
				}
                GivePlayerGP(playerid, -200);
                GiveBizMoney(Biz_Mecanica, 200);
			}
		}
		return true;
	}

	if(dialogid == 14)
	{
		if(response == 1)
		{
              Player[playerid][pSex] = 1;
			  SetPlayerSkin(playerid, 240);
              ShowPlayerDialog(playerid,15, DIALOG_STYLE_MSGBOX, "Sexo:", "Você é do Sexo Masculino", "OK","Sair");
	          return 0;
	    }
		else if(response == 0)
		{
			  Player[playerid][pSex] = 2;
			  SetPlayerSkin(playerid, 56);
              ShowPlayerDialog(playerid,16, DIALOG_STYLE_MSGBOX, "Sexo:", "Você é do Sexo Feminino", "OK","Sair");
	          return 0;
        }
        else
        {
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "");
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "");
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "");
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "");
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "");
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "");
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você cancelou o tutorial e foi kickado. Volte sempre.");
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Adicione nosso IP nos seus favoritos : 94.23.98.56:7777");
            Kick(playerid);
		}
        return 0;
	}
	else if(dialogid == 15 || dialogid == 16)
	{
	  	ShowPlayerDialog(playerid,17, DIALOG_STYLE_MSGBOX, "Atenção", "Qual a sua Origem?", "Brasil", "Outro");
        return 0;
	}
	else if(dialogid == 17)
	{
		TogglePlayerControllable(playerid, true);
		if(response == 1)
		{
            new stringt[sizeof(Tutorial1)*128];
			for(new i = 0; i <sizeof(Tutorial1); i ++)
			    format(stringt,sizeof(stringt),"%s\n - %s",stringt,Tutorial1[i]);

			ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX,"\t{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation Tutorial: Parte 1", stringt, "Cancelar", "Parte 2");
            Player[playerid][pOrigin] = 1;
	        return 0;
	    }
		else if(response == 0)
		{
		    new stringt[sizeof(Tutorial1)*128];
			for(new i = 0; i <sizeof(Tutorial1); i ++)
			    format(stringt,sizeof(stringt),"%s\n - %s",stringt,Tutorial1[i]);

			ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX,"\t{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation Tutorial: Parte 1", stringt, "Cancelar", "Parte 2");
			Player[playerid][pOrigin] = 2;
	        return 0;
        }
        return 0;
	}

	else if(dialogid == DIALOG_EMPREGO)
	{
		if(response)
		{
			if(listitem == 0)   //detetive
			{
                new Job = DETETIVE;

                if(!AllowedJob(playerid, Job))
                    return ShowAllowedOrgs(playerid, Job);

		        Player[playerid][pJob] = Job;
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Contrato de detetive feito. Agora você pode procurar suspeitos usando /encontrar");
			}
			else if(listitem == 1)  //advogado
			{
                new Job = ADVOGADO;

                if(!AllowedJob(playerid, Job))
                    return ShowAllowedOrgs(playerid, Job);

		        Player[playerid][pJob] = Job;
          		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Contrato de advogado feito. Digite /ajuda para mais informações.");
            }
			else if(listitem == 2) //mecânico
			{
                new Job = MECANICO;

                if(!AllowedJob(playerid, Job))
                    return ShowAllowedOrgs(playerid, Job);

		        Player[playerid][pJob] = Job;
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Contrato de mecânico feito. Digite /ajuda para mais informações.");
            }
			else if(listitem == 3) //lutador
			{
                new Job = LUTADOR;

                if(!AllowedJob(playerid, Job))
                    return ShowAllowedOrgs(playerid, Job);

		        Player[playerid][pJob] = Job;
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Contrato de lutador feito. Digite /ajuda para mais informações.");
            }
			else if(listitem == 4) //taxista
			{
                new Job = TAXISTA;

                if(!AllowedJob(playerid, Job))
                    return ShowAllowedOrgs(playerid, Job);

		        Player[playerid][pJob] = Job;
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "Contrato de taxista feito. Digite /ajuda para mais informações.");
            }
			else if(listitem == 5) //jornaleiro
			{
                new Job = JORNALEIRO;

                if(!AllowedJob(playerid, Job))
                    return ShowAllowedOrgs(playerid, Job);

		        Player[playerid][pJob] = Job;
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "Contrato de jornaleiro feito. Digite /ajuda para mais informações.");
            }
			if(listitem == 6) //caminhoneiro
			{
                new Job = CAMINHONEIRO;

                if(!AllowedJob(playerid, Job))
                    return ShowAllowedOrgs(playerid, Job);

		        Player[playerid][pJob] = Job;
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "Contrato de caminhoneiro feito. Digite /ajuda para mais informações.");
            }
			else if(listitem == 7) //médico
			{
                new Job = MEDICO;

                if(!AllowedJob(playerid, Job))
                    return ShowAllowedOrgs(playerid, Job);

		        Player[playerid][pJob] = Job;
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Contrato de médico feito. Digite /ajuda para mais informações.");
	            SendClientMessage(playerid, COLOR_WHITE, "Dica: GangZones são repletas de feridos, você pode aumentar seu lucro estando perto de uma.");
            }
			else if(listitem == 8) //entregador
			{
                new Job = ENTREGADOR;

                if(!AllowedJob(playerid, Job))
                    return ShowAllowedOrgs(playerid, Job);

		        Player[playerid][pJob] = Job;
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "Contrato de entregador feito. Digite /ajuda para mais informações.");
            }
			else if(listitem == 9) //motorista
			{
                new Job = MOTORISTA;

                if(!AllowedJob(playerid, Job))
                    return ShowAllowedOrgs(playerid, Job);

		        Player[playerid][pJob] = Job;
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Contrato de motorista de ônibus feito. Digite /ajuda para mais informações.");

            }
			else if(listitem == 10) //epizza
			{
                new Job = EPIZZA;

                if(!AllowedJob(playerid, Job))
                    return ShowAllowedOrgs(playerid, Job);

		        Player[playerid][pJob] = Job;
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Contrato de entregador de pizza feito. Digite /ajuda para mais informações.");
            }
			else if(listitem == 11) //lixeiro
			{
                new Job = LIXEIRO;

                if(!AllowedJob(playerid, Job))
                    return ShowAllowedOrgs(playerid, Job);

		        Player[playerid][pJob] = Job;
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Contrato de lixeiro feito. Digite /ajuda para mais informações.");
            }
			else if(listitem == 12) //ag.funerário
			{
                new Job = FUNERARIO;

                if(!AllowedJob(playerid, Job))
                    return ShowAllowedOrgs(playerid, Job);

		        Player[playerid][pJob] = Job;
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Contrato de agente funerário feito. Digite /ajuda para mais informações.");
            }
            else if(listitem == 13) //taxista aereo
			{
                new Job = TAXISTAAEREO;

                if(!AllowedJob(playerid, Job))
                    return ShowAllowedOrgs(playerid, Job);

		        Player[playerid][pJob] = Job;
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Contrato taxista aéreo feito. Digite /ajuda para mais informações.");
            }
            /*else if(listitem == 14) //bombeiro
			{
                new Job = BOMBE;

                if(!AllowedJob(playerid, Job))
                    return ShowAllowedOrgs(playerid, Job);

		        Player[playerid][pJob] = Job;
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Contrato de bombeiro feito. Digite /ajuda para mais informações.");

                //Mostrar no Mapa
    			for(new j = 0; j < 50; j++)
    				if(fogo[j] > 0)
    		    		SetPlayerMapIcon(playerid, 50 + j, fogoposX[j], fogoposY[j], fogoposZ[j], 20, 2, MAPICON_GLOBAL);
            }*/

            if(GetPlayerOrg(playerid) == 0)
                OnDialogResponse(playerid, DIALOG_EMPREGO + 1, 1, 0, "");
            else
                ShowPlayerDialog(playerid, DIALOG_EMPREGO + 1, DIALOG_STYLE_MSGBOX, "Emprego:", "{FFFFFF}Você deseja usar a Skin do emprego?", "Sim", "Não");

            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Emprego confirmado, você começou um contrato.");
            CompletarNonRepMilestone(playerid, 2);
            return 1;
    	}
	}
    else if(dialogid == DIALOG_EMPREGO + 1)
    {
        if(!response)
            return 1;

        if(Player[playerid][pJob] == DETETIVE)
            SetPlayerSkinEx(playerid, 33);
        else if(Player[playerid][pJob] == ADVOGADO)
            SetPlayerSkinEx(playerid, 17);
        else if(Player[playerid][pJob] == MECANICO)
            SetPlayerSkinEx(playerid, 50);
        else if(Player[playerid][pJob] == LUTADOR)
            SetPlayerSkinEx(playerid, 80);
        else if(Player[playerid][pJob] == TAXISTA)
            SetPlayerSkinEx(playerid, 61);
        else if(Player[playerid][pJob] == JORNALEIRO)
            SetPlayerSkinEx(playerid, 60);
        else if(Player[playerid][pJob] == CAMINHONEIRO)
            SetPlayerSkinEx(playerid, 236);
        else if(Player[playerid][pJob] == MEDICO)
            SetPlayerSkinEx(playerid, 274);
        else if(Player[playerid][pJob] == ENTREGADOR)
            SetPlayerSkinEx(playerid, 202);
        else if(Player[playerid][pJob] == MOTORISTA)
            SetPlayerSkinEx(playerid, 16);
        else if(Player[playerid][pJob] == EPIZZA)
            SetPlayerSkinEx(playerid, 155);
        else if(Player[playerid][pJob] == LIXEIRO)
            SetPlayerSkinEx(playerid, 133);
        else if(Player[playerid][pJob] == FUNERARIO)
            SetPlayerSkinEx(playerid, 133);

        Descongelar(playerid);
        return 1;
    }
    else if(dialogid == DIALOG_EMPREGO + 2)
    {
        if(!response)
            return 1;

        cmd_pegaremprego(playerid);
        return 1;
    }
	else if(dialogid == 19)
	{
		if(response)
		{
			if(listitem == 0)
			{
              SafeSetPlayerPos(playerid, 1.7269,27.6299,1199.5938);
              SetPlayerFacingAngle(playerid, 0.0);
              SetCameraBehindPlayer(playerid);
	          GivePlayerGP(playerid,-250);
			  SetPlayerInterior(playerid,1);
			  SendClientMessage(playerid, COLOR_YELLOW, "Você está viajando para Los Santos aguarde 40 segundos.");
              Descongelar(playerid);
			}
			else if(listitem == 1)
			{
			  SafeSetPlayerPos(playerid, 1.7269,27.6299,1199.5938);
	          GivePlayerGP(playerid,-250);
			  SetPlayerInterior(playerid,1);
			  SetPlayerFacingAngle(playerid, 0.0);
              SetCameraBehindPlayer(playerid);
              SendClientMessage(playerid, COLOR_YELLOW, "Você está viajando para San Fierro aguarde 40 segundos.");
              Descongelar(playerid);
            }
			else if(listitem == 2)
			{
			  SafeSetPlayerPos(playerid, 1.7269,27.6299,1199.5938);
	          GivePlayerGP(playerid,-250);
			  SetPlayerInterior(playerid,1);
			  SetPlayerFacingAngle(playerid, 0.0);
              SetCameraBehindPlayer(playerid);
              SendClientMessage(playerid, COLOR_YELLOW, "Você está viajando para Las Venturas aguarde 40 segundos.");
              Descongelar(playerid);
            }
            SetTimerEx("Viajar",40000,false, "ii", playerid, listitem);
   		}
 	}
    else if(dialogid == DIALOG_CARMENU)
	{
		if(response)
		{
		    new vehicleid = PlayerGerenciando[playerid];
			if(listitem == 0)
			{
  				/*if(CarInfo[vehicleid][cPRFLock] == 1)
  					return SendClientMessage(playerid, COLOR_RED, "Você não pode usar este comando pois seu carro foi apreendido.");*/

		      	GetVehiclePos(CarInfo[vehicleid][cID], CarInfo[vehicleid][cX], CarInfo[vehicleid][cY], CarInfo[vehicleid][cZ]);
		      	GetVehicleZAngle(CarInfo[vehicleid][cID], CarInfo[vehicleid][cA]);
		      	format(string, sizeof(string), "** Você estacionou seu %s **", CarInfo[vehicleid][cName]);
                CarInfo[vehicleid][cEstacionou] = true;
		      	SendClientMessage(playerid, COLOR_MARINE, string);
		    }
			else if(listitem == 1)
			{
              	//GetVehiclePos(CarInfo[vehicleid][cID], VehicleInfo[CarInfo[vehicleid][cID]][vX], VehicleInfo[CarInfo[vehicleid][cID]][vY], VehicleInfo[CarInfo[vehicleid][cID]][vZ]);

                new Float:posX, Float:posY, Float:posZ;
                GetVehiclePos(CarInfo[vehicleid][cID], posX, posY, posZ);
                SetPlayerCheckpoint(playerid, posX, posY, posZ, 6.0);
			  	SendClientMessage(playerid, COLOR_MARINE, "** Siga o checkpoint para encontrar seu carro. **");
            }
			else if(listitem == 2)
			{
              	//new engine,lights,alarm,doors,bonnet,boot,objective;
		      	/*if(CarInfo[vehicleid][cPRFLock] == 1)
				  	return SendClientMessage(playerid, COLOR_RED, "Você não pode usar este comando pois seu carro foi apreendido.");*/

		      	format(string, sizeof string, "** Seu %s foi trancado com sucesso. **", CarInfo[vehicleid][cName]);
		      	SendClientMessage(playerid, COLOR_MARINE, string);
                LockCar(CarInfo[vehicleid][cID]);
		      	CarInfo[vehicleid][cLock] = true;
			  	PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
            }
			else if(listitem == 3)
			{
			  	//new engine,lights,alarm,doors,bonnet,boot,objective;
		      	/*if(CarInfo[vehicleid][cPRFLock] == 1)
				  	return SendClientMessage(playerid, COLOR_RED, "Você não pode usar este comando pois seu carro foi apreendido.");*/

				format(string, sizeof string, "** Seu %s foi destrancado com sucesso. **", CarInfo[vehicleid][cName]);
		      	SendClientMessage(playerid, COLOR_MARINE, string);
		      	UnLockCar(CarInfo[vehicleid][cID]);
		      	CarInfo[vehicleid][cLock] = false;
		      	PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		    }
			else if(listitem == 4)
			{
                new Preco = 0, Cash = 0;

				for(new c = 0; c < sizeof(ConceCars); c++)
				{
				    if(CarInfo[vehicleid][cModel] == ConceCars[c][vModel])
				    {
	                    if(ConceCars[c][vPreco] != 0)
	    			        Preco = (ConceCars[c][vPreco] / 100) * 80;

	                    if(ConceCars[c][vCash] != 0)
	                        Cash = (ConceCars[c][vCash] / 100) * 75;

						break;
                    }
				}
				format(string, 512, "{FFFFFF}Tem certeza que deseja vender o seu veículo?\nVocê receberá de volta {008800}R$%d {FFFFFF}e {00FF00}BLS$%d{FFFFFF}.", Preco, Cash);
              	ShowPlayerDialog(playerid, DIALOG_VENDERCARRO, DIALOG_STYLE_MSGBOX, "Concessionária", string, "Vender", "Voltar");
		    }
			else if(listitem == 5)
			{
		      	new count;
		      	for(new m = 0; m < MAX_MODS; m++)
		      	{
		          	if(CarInfo[vehicleid][cMod][m] > 0)
		          	{
		              	RemoveVehicleComponent(CarInfo[vehicleid][cID], CarInfo[vehicleid][cMod][m]);
		              	CarInfo[vehicleid][cMod][m] = 0;
		              	count++;
		          	}
		      	}
		      	format(string, sizeof string, "** Você removeu %d componentes de seu %s **", count, CarInfo[vehicleid][cName]);
		      	SendClientMessage(playerid, COLOR_MARINE, string);
		    }
		    else if(listitem == 6)
			{
				new vid = CarInfo[vehicleid][cID];
		  		new engine,lights,alarm,doors,bonnet,boot,objective;

	            GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);

	            if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
				{
			    	SetVehicleParamsEx(vid,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
			        SendClientMessage(playerid,COLOR_ORANGE,"** Capô aberto! **");
           		}
			    else
			    {
			    	SetVehicleParamsEx(vid,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
			        SendClientMessage(playerid,COLOR_ORANGE,"** Capô fechado! **");
		      	}
		    }
		    else if(listitem == 7)
			{
				new vid = CarInfo[vehicleid][cID];
			    new engine,lights,alarm,doors,bonnet,boot,objective;

			    GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);

		        if(boot == VEHICLE_PARAMS_OFF)
				{
		            SetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
		            SendClientMessage(playerid,COLOR_ORANGE,"** Porta-malas aberto! **");
		        }
		        else
		        {
		            SetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
		            SendClientMessage(playerid,COLOR_ORANGE,"** Porta-malas fechado! **");
		        }
		    }
		    else if(listitem == 8)
			{
				new vid = CarInfo[vehicleid][cID];
			    new engine,lights,alarm,doors,bonnet,boot,objective;

			    GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);

		        if(alarm == VEHICLE_PARAMS_OFF || alarm == VEHICLE_PARAMS_UNSET)
				{
		            SetVehicleParamsEx(vid,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
		            SendClientMessage(playerid,COLOR_ORANGE,"** Alarme ligado! **");
		        }
		        else
		        {
		            SetVehicleParamsEx(vid,engine,lights,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective);
		            SendClientMessage(playerid,COLOR_ORANGE,"** Alarme desligado! **");
		        }
		    }
		    else if(listitem == 9)
			{
				new vid = CarInfo[vehicleid][cID];
			    new engine,lights,alarm,doors,bonnet,boot,objective;

			    GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);

		        if(lights == VEHICLE_PARAMS_OFF || lights == VEHICLE_PARAMS_UNSET)
				{
		            SetVehicleParamsEx(vid,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
		            SendClientMessage(playerid,COLOR_ORANGE,"** Farol ligado! **");
		        }
		        else
		        {
		            SetVehicleParamsEx(vid,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
		            SendClientMessage(playerid,COLOR_ORANGE,"** Farol desligado! **");
		        }
		    }
        }
        else
        {
            PlayerGerenciando[playerid] = INVALID_VEHICLE_ID;
		}
	}
	else if(dialogid == DIALOG_VENDERCARRO) //CARMENU
	{
		if(response)
		{
		   	new vehicleid = PlayerGerenciando[playerid];
	        new stringe[128];
		    format(stringe,128,"%s - %s",GetVehicleNumberPlate(CarInfo[vehicleid][cID]),CarInfo[vehicleid][cOwner]);
		    for(new i = 0; i < sizeof(Apreendido); i++)
		    {
                if(IsStringSame(stringe, DOF2_GetString(APRE_FILE, Apreendido[i]), 128))
		        {
	    	        return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você precisa quitar seus débitos antes de vender o veículo.");
				}
			}
			for(new c = 0; c < sizeof(ConceCars); c++)
			{
			    if(CarInfo[vehicleid][cModel] == ConceCars[c][vModel])
			    {
                    new Preco = 0,
                        Cash = 0;

                    if(ConceCars[c][vPreco] != 0)
                    {
    			        Preco = (ConceCars[c][vPreco] / 100) * 80;
    			        GivePlayerGP(playerid, Preco);
                    }
                    if(ConceCars[c][vCash] != 0)
                    {
                        Cash = (ConceCars[c][vCash] / 100) * 75;
    			        GivePlayerCash(playerid, Cash);
                    }

			        CarInfo[vehicleid][cModel] = 0;
					CarInfo[vehicleid][cX] = 0;
					CarInfo[vehicleid][cY] = 0;
					CarInfo[vehicleid][cZ] = 0;
					CarInfo[vehicleid][cA] = 0;
					CarInfo[vehicleid][cColor1] = -1;
					CarInfo[vehicleid][cColor2] = -1;
					CarInfo[vehicleid][cPaintjob] = 3;
					format(CarInfo[vehicleid][cName], 32, "Nenhum");
					format(CarInfo[vehicleid][cOwner], MAX_PLAYER_NAME, "Nenhum");
					//CarInfo[vehicleid][cPRFLock] = 0;
                    //SetVehiclePRFUnlocked(CarInfo[vehicleid][cID]);
					CarInfo[vehicleid][cLock] = false;
					VehicleInfo[CarInfo[vehicleid][cID]][vCustom] = false;

                    CleanTrunkInfo(CarInfo[vehicleid][cID]);

					for(new v = 0; v < 5; v++)
					    if(vehicleid == Player[playerid][pCar][v])
					        Player[playerid][pCar][v] = INVALID_VEHICLE_ID;

					for(new m = 0; m < MAX_MODS; m++)
						CarInfo[vehicleid][cMod][m] = 0;

					// Neon
					if(CarInfo[vehicleid][cHasNeon] != 0)
					{
					    DestroyObject(CarInfo[vehicleid][cNeon][0]);
					    DestroyObject(CarInfo[vehicleid][cNeon][1]);
					    CarInfo[vehicleid][cHasNeon] = 0;
					}

					format(stringe, sizeof(stringe), "%s%d.ini", PastaConce, vehicleid);
				    DOF2_RemoveFile(stringe);

                    DestroyVehicle(CarInfo[vehicleid][cID]);
                    CarInfo[vehicleid][cID] = INVALID_VEHICLE_ID;

					format(stringe, sizeof(stringe), "** Você vendeu seu %s", vehName[ConceCars[c][vModel] - 400]);
                    if(Preco != 0 && Cash != 0)
                        format(stringe, sizeof(stringe), "%s por {008800}R$%d {FFFFFF}e {00FF00}C$%d{FFFFFF} **", stringe, Preco, Cash);
                    else if(Preco != 0)
                        format(stringe, sizeof(stringe), "%s por {008800}R$%d{FFFFFF} **", stringe, Preco);
                    else if(Cash != 0)
                        format(stringe, sizeof(stringe), "%s por {00FF00}C$%d {FFFFFF}**", stringe, Cash);
                    else
                        format(stringe, sizeof(stringe), "%s **", stringe);

					SendClientMessage(playerid, COLOR_WHITE, stringe);
					break;
				}
			}
        }
        else
        {
            new listitems[] = "Estacionar\nLocalizar Carro\nTrancar\nDestrancar\nVender\nResetar Tuning\nAbrir/Fechar Capô\nAbrir/Fechar Porta-Malas\nLigar/Desligar Alarme\nLigar/Desligar Farol\n";
			ShowPlayerDialog(playerid, DIALOG_CARMENU, DIALOG_STYLE_LIST, "Menu do Carro:", listitems, "Selecionar", "Sair");
	    	return true;
		}
	}
	else if(dialogid == 22)
	{
		if(response)
		{
			if(listitem == 0)
			{
              Descongelar(playerid);
			}
			else if(listitem == 1)
			{
			  Descongelar(playerid);
            }
			else if(listitem == 2)
			{
			  Descongelar(playerid);
            }
			else if(listitem == 3)
			{
			  Descongelar(playerid);
            }
			else if(listitem == 4)
			{
			  Descongelar(playerid);
	        }
			else if(listitem == 5)
			{
			  Descongelar(playerid);
     		}
        }
    }
	else if(dialogid == 23)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
		        if(GetPlayerGP(playerid) >= 700)
		        {
		            if(!Player[playerid][pBoombox])
		            {
		                GiveBizMoney(Biz_247, 700);
		                Player[playerid][pBoombox] = true;
		                GivePlayerGP(playerid, -700);
						GameTextForPlayer(playerid, "~r~R$ 700", 5000, 1);
						SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você comprou uma Boombox por R$700.");
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já tem uma Boombox.");
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem dinheiro suficiente.");
		        }
		    }
		    else if(listitem == 1)
		    {
		        if(GetPlayerGP(playerid) >= 1500)
		        {
				    if(Player[playerid][pNBook] == 0)
				    {
                        GiveBizMoney(Biz_247, 1500);

						Player[playerid][pNBook] = 1;
			        	GivePlayerGP(playerid, -1500);
			        	format(string, sizeof(string), "~r~R$ %d", 1500);
						GameTextForPlayer(playerid, string, 5000, 1);
						SendClientMessage(playerid, SERVER_INFO,"{FF0000}{FF0000}[Info]:{FFFFFF}{FFFFFF} Você comprou um NoteBook por R$1500.");
					}
					else
					{
					    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já tem um NoteBook.");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED,"[ERRO]:{FFFFFF} Você não tem dinheiro suficiente.");
				}
			}
		    else if(listitem == 2)
		    {
		        if(GetPlayerGP(playerid) >= 300)
		        {
				    if(Player[playerid][p3G] == 0)
				    {
                        GiveBizMoney(Biz_247, 300);

						Player[playerid][p3G] = 1;
			        	GivePlayerGP(playerid, -300);
			        	format(string, sizeof(string), "~r~R$ %d", 300);
						GameTextForPlayer(playerid, string, 5000, 1);
						SendClientMessage(playerid, SERVER_INFO,"{FF0000}{FF0000}[Info]:{FFFFFF}{FFFFFF} Você comprou Internet 3G por R$300.");
					}
					else
					{
					    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já tem internet 3G!");
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED,"[ERRO]:{FFFFFF} Você não tem dinheiro suficiente.");
				}
			}
			else if(listitem == 3)
			{
                if(Player[playerid][pTraderPerk] > 0)
			    {
					new skill = 450 / 100;
					new price = (skill)*(Player[playerid][pTraderPerk]);
					new payout = 450 - price;
					if(GetPlayerGP(playerid) < payout)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
					    return true;
					}
			        format(string, sizeof(string), "~r~R$ %d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
					GivePlayerGP(playerid, -payout);
                    GiveBizMoney(Biz_247, payout);
			    }
			    else
			    {
			        if(GetPlayerGP(playerid) < 450)
					    return SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");

			        format(string, sizeof(string), "~r~R$ %d", 450);
					GameTextForPlayer(playerid, string, 5000, 1);
					GivePlayerGP(playerid, -450);
                    GiveBizMoney(Biz_247, 450);
			    }

				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new randphone = 10000 + random(89999);//minimum 1000  max 9999
				Player[playerid][pPnumber] = randphone;
                Player[playerid][pPhone] = 1;
				format(string, sizeof(string), "Você comprou um celular com número: %d", randphone);
				SendClientMessage(playerid, COLOR_GREY, string);
				SendClientMessage(playerid, COLOR_GREY, "Você pode checar o número qualquer hora no /inv");
				SendClientMessage(playerid, COLOR_WHITE, "DICA: Você pode digitar /ajuda para saber comandos do celular");
				Descongelar(playerid);
			}
			else if(listitem == 4)
			{
			    if(GetPlayerGP(playerid) < 250)
				    return SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar isto.");
				if(Player[playerid][pTemMascara])
				    return SendClientMessage(playerid, COLOR_GREY, "Você já tem uma Máscara.");
				if(Player[playerid][pLevel] < 5)
                    return SendClientMessage(playerid, COLOR_GREY, "Apenas jogadores nível 5 podem comprar uma máscara.");

				GivePlayerGP(playerid, -250);
				Player[playerid][pTemMascara] = true;
				SendClientMessage(playerid, COLOR_GREY, "Você comprou uma Mascara. Use /Mascara para utiliza-la.");
				GameTextForPlayer(playerid, "~r~R$ 250", 5000, 1);

                GiveBizMoney(Biz_247, 250);
				return 1;
			}
			else if(listitem == 5)
			{
                if(Player[playerid][pTraderPerk] > 0)
			    {
					new skill = 5 / 100;
					new price = (skill)*(Player[playerid][pTraderPerk]);
					new payout = 5 - price;
					if(GetPlayerGP(playerid) < payout)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
					    return true;
					}
					GivePlayerGP(playerid,- payout);
                    GiveBizMoney(Biz_247, payout);
					format(string, sizeof(string), "~r~R$ %d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    if(GetPlayerGP(playerid) < 5)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
					    return true;
					}
				    GivePlayerGP(playerid,-5);
                    GiveBizMoneyEx(Biz_247, 5);
					format(string, sizeof(string), "~r~R$ %d", 1000);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new prize;
				new symb1[32]; new symb2[32]; new symb3[32];
				new randcard1 = random(10);//minimum 1000  max 9999
				new randcard2 = random(10);//minimum 1000  max 9999
				new randcard3 = random(10);//minimum 1000  max 9999
				if(randcard1 >= 5)
				{
					format(symb1, sizeof(symb1), "~b~]");
					randcard1 = 1;
				}
				else if(randcard1 <= 4 && randcard1 >= 2)
				{
					format(symb1, sizeof(symb1), "~g~]");
					randcard1 = 2;
				}
				else if(randcard1 < 2)
				{
					format(symb1, sizeof(symb1), "~y~]");
					randcard1 = 3;
				}
				if(randcard2 >= 5)
				{
					format(symb2, sizeof(symb2), "~b~]");
					randcard2 = 1;
				}
				else if(randcard2 <= 4 && randcard2 >= 2)
				{
					format(symb2, sizeof(symb2), "~g~]");
					randcard2 = 2;
				}
				else if(randcard2 < 2)
				{
					format(symb2, sizeof(symb2), "~y~]");
					randcard2 = 3;
				}
				if(randcard3 >= 5)
				{
					format(symb3, sizeof(symb3), "~b~]");
					randcard3 = 1;
				}
				else if(randcard3 <= 4 && randcard3 >= 2)
				{
					format(symb3, sizeof(symb3), "~g~]");
					randcard3 = 2;
				}
				else if(randcard3 < 2)
				{
					format(symb3, sizeof(symb3), "~y~]");
					randcard3 = 3;
				}
				if(randcard1 == randcard2 && randcard1 == randcard3)
				{
					if(randcard1 > 5)
					{
						prize = 50;
					}
					if(randcard1 <= 4 && randcard1 >= 2)
					{
						prize = 40;
					}
					if(randcard1 < 2)
					{
						prize = 20;
					}
					GivePlayerGP(playerid, prize);
					format(string, sizeof(string), "%s %s %s ~n~~n~~w~~g~R$ %d",symb1,symb2,symb3, prize);
				}
				else
				{
					format(string, sizeof(string), "%s %s %s ~n~~n~~w~~r~R$0",symb1,symb2,symb3);
				}
				GameTextForPlayer(playerid, string, 3000, 3);
				return true;
            }
			else if(listitem == 6)
			{
			    if(Player[playerid][pTraderPerk] > 0)
			    {
					new skill = 10 / 100;
					new price = (skill)*(Player[playerid][pTraderPerk]);
					new payout = 10 - price;
					if(GetPlayerGP(playerid) < payout)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
					    return true;
					}
					GivePlayerGP(playerid,- payout);
                    GiveBizMoneyEx(Biz_247, payout);
					format(string, sizeof(string), "~r~R$ %d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    if(GetPlayerGP(playerid) < 10)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
					    return true;
					}
				    GivePlayerGP(playerid,-10);
                    GiveBizMoneyEx(Biz_247, 10);
					format(string, sizeof(string), "~r~R$ %d", 5000);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                Player[playerid][pPhoneBook] = 1;
				format(string, sizeof(string), "Agenda telefônica comprada, agora você pode ver os números dos jogadores !");
				SendClientMessage(playerid, COLOR_GREY, string);
				SendClientMessage(playerid, COLOR_WHITE, "DICA: Digite /tel(efone) [playerid/Parte-do-Nick]");
				return true;
            }
			else if(listitem == 7)
			{
			    if(Player[playerid][pTraderPerk] > 0)
			    {
					new skill = 5 / 100;
					new price = (skill)*(Player[playerid][pTraderPerk]);
					new payout = 5 - price;
					if(GetPlayerGP(playerid) < payout)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
					    return true;
					}
					GivePlayerGP(playerid,- payout);
                    GiveBizMoneyEx(Biz_247, payout);
					format(string, sizeof(string), "~r~R$ %d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
					if(GetPlayerGP(playerid) < 5)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
					    return true;
					}
				    GivePlayerGP(playerid, -5);
                    GiveBizMoneyEx(Biz_247, 5);
					format(string, sizeof(string), "~r~R$ %d", 500);
					GameTextForPlayer(playerid, string, 5000, 1);
				}

				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				gDice[playerid] = 1;
				format(string, sizeof(string), "Você comprou um dado nas lojas 24-7");
				SendClientMessage(playerid, COLOR_GREY, string);
				SendClientMessage(playerid, COLOR_WHITE, "DICA: Digite /dado ");
				return true;
            }
			else if(listitem == 8)
			{
			    if(Player[playerid][pHouseKey] != 255)
				{
					foreach(new i: Player)
					{
						if(HireCar[Player[playerid][pHouseKey]+1])
						{
							HireCar[i] = 299;
						}
					}
					if(Player[playerid][pTraderPerk] > 0)
			    	{
						new skill = 30 / 100;
						new price = (skill)*(Player[playerid][pTraderPerk]);
						new payout = 30 - price;
						if(GetPlayerGP(playerid) < payout)
						{
					    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
					    	return true;
						}
						GivePlayerGP(playerid,- payout);
                        GiveBizMoney(Biz_247, payout);
						format(string, sizeof(string), "~r~R$ %d", payout);
						GameTextForPlayer(playerid, string, 5000, 1);
					}
					else
					{
					    if(GetPlayerGP(playerid) < 30)
						{
					    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
					    	return true;
						}
					    GivePlayerGP(playerid,-30);
                        GiveBizMoney(Biz_247, 30);
						format(string, sizeof(string), "~r~R$ %d", 10000);
						GameTextForPlayer(playerid, string, 5000, 1);
					}
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "Travas Compradas");
					SendClientMessage(playerid, COLOR_GREY, string);
					SendClientMessage(playerid, COLOR_WHITE, "DICA: Digite /trancar ");
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Você não tem um veículo !");
				}
				return true;
			}
			else if(listitem == 9)
			{
			    if(Player[playerid][pTraderPerk] > 0)
		    	{
					new skill = 5 / 100;
					new price = (skill)*(Player[playerid][pTraderPerk]);
					new payout = 5 - price;
					if(GetPlayerGP(playerid) < payout)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    	return true;
					}
					GivePlayerGP(playerid,- payout);
                    GiveBizMoneyEx(Biz_247, payout);
					format(string, sizeof(string), "~r~R$ %d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    if(GetPlayerGP(playerid) < 5)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    	return true;
					}
				    GivePlayerGP(playerid,-5);
                    GiveBizMoneyEx(Biz_247, 5);
					format(string, sizeof(string), "~r~R$ %d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				Condom[playerid] ++;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Preservativo comprado.");
				SendClientMessage(playerid, COLOR_GREY, string);
				return true;
			}
			else if(listitem == 10)
			{
			    if(Player[playerid][pTraderPerk] > 0)
		    	{
					new skill = 250 / 100;
					new price = (skill)*(Player[playerid][pTraderPerk]);
					new payout = 250 - price;
					if(GetPlayerGP(playerid) < payout)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    	return true;
					}
					GivePlayerGP(playerid, - payout);
                    GiveBizMoneyEx(Biz_247, payout);
					format(string, sizeof(string), "~r~R$ %d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    if(GetPlayerGP(playerid) < 250)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    	return true;
					}
				    GivePlayerGP(playerid, -250);
                    GiveBizMoney(Biz_247, 250);
					format(string, sizeof(string), "~r~R$ %d", 250);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Você comprou um iPod");
				SendClientMessage(playerid, COLOR_GREY, string);
				SendClientMessage(playerid, COLOR_WHITE, "DICA: Digite /iPod");
				Player[playerid][pCDPlayer] = 1;
				return true;
			}
			else if(listitem == 11)
			{
			    if(Groceries[playerid][pChickens] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_RED, "Você já tem muitos Frangos, coma-os antes !");
			        return true;
			    }
			    if(Player[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(Player[playerid][pTraderPerk]);
					new payout = 10 - price;
					if(GetPlayerGP(playerid) < payout)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    	return true;
					}
					GivePlayerGP(playerid, - payout);
                    GiveBizMoneyEx(Biz_247, payout);
					format(string, sizeof(string), "~r~R$ %d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    if(GetPlayerGP(playerid) < 10)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    	return true;
					}
				    GivePlayerGP(playerid, - 10);
                    GiveBizMoneyEx(Biz_247, 10);
					format(string, sizeof(string), "~r~R$ %d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Você comprou um frango.");
				SendClientMessage(playerid, COLOR_GREY, string);
				format(string, sizeof(string), "~r~R$ %d", 10);
				GameTextForPlayer(playerid, string, 5000, 1);
				new rand = random(15);
				Groceries[playerid][pChickens] += 1;
				Groceries[playerid][pChicken] += rand;
				return true;
			}
			else if(listitem == 12)
			{
			    if(Groceries[playerid][pHamburgers] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Você já tem muitos hamburgueres, consuma-os primeiro !");
			        return true;
			    }
			    if(Player[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(Player[playerid][pTraderPerk]);
					new payout = 10 - price;
					if(GetPlayerGP(playerid) < payout)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    	return true;
					}
					GivePlayerGP(playerid, - payout);
                    GiveBizMoneyEx(Biz_247, payout);
					format(string, sizeof(string), "~r~R$ %d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    if(GetPlayerGP(playerid) < 10)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    	return true;
					}
				    GivePlayerGP(playerid, -10);
                    GiveBizMoneyEx(Biz_247, 10);
					format(string, sizeof(string), "~r~R$ %d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Você comprou um hamburger.");
				SendClientMessage(playerid, COLOR_GREY, string);
				format(string, sizeof(string), "~r~R$ %d", 10);
				GameTextForPlayer(playerid, string, 5000, 1);
				new rand = random(15);
				Groceries[playerid][pHamburgers] += 1;
				Groceries[playerid][pHamburger] += rand;
				return true;
			}
			else if(listitem == 13)
			{
			    if(Groceries[playerid][pPizzas] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Você já tem muitas pizzas !");
			        return true;
			    }
			    if(Player[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(Player[playerid][pTraderPerk]);
					new payout = 10 - price;
					if(GetPlayerGP(playerid) < payout)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    	return true;
					}
					GivePlayerGP(playerid, - payout);
                    GiveBizMoneyEx(Biz_247, payout);
					format(string, sizeof(string), "~r~R$ %d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    if(GetPlayerGP(playerid) < 10)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    	return true;
					}
				    GivePlayerGP(playerid, -10);
                    GiveBizMoneyEx(Biz_247, 10);
					format(string, sizeof(string), "~r~R$ %d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "Você comprou uma pizza congelada.");
				SendClientMessage(playerid, COLOR_GREY, string);
				new rand = random(15);
				Groceries[playerid][pPizzas] += 1;
				Groceries[playerid][pPizza] += rand;
				return true;
			}
			else if(listitem == 14)
			{
			    if(Player[playerid][pCorda] >= 5)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Você já tem muitas cordas  !");
			        return true;
			    }
			    if(Player[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(Player[playerid][pTraderPerk]);
					new payout = 10 - price;
					if(GetPlayerGP(playerid) < payout)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    	return true;
					}
     				GivePlayerGP(playerid, - payout);
                    GiveBizMoneyEx(Biz_247, payout);
					format(string, sizeof(string), "~r~R$ %d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    if(GetPlayerGP(playerid) < 10)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    	return true;
					}
				    GivePlayerGP(playerid, - 10);
                    GiveBizMoneyEx(Biz_247, 10);
					format(string, sizeof(string), "~r~R$ %d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
			    format(string, sizeof(string), "~r~-$%d", 10);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_GREY, "Corda comprada.");
			    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Agora você pode sequestrar alguem e amarrá-lo.");
			    Player[playerid][pCorda] += 1;
			    return true;
			}
			else if(listitem == 15)
			{
			    if(Player[playerid][pCigarro] >= 20)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Você tem muitos maços de cigarro!");
			        return true;
			    }
			    if(Player[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(Player[playerid][pTraderPerk]);
					new payout = 10 - price;
					if(GetPlayerGP(playerid) < payout)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    	return true;
					}
     				GivePlayerGP(playerid, -payout);
                    GiveBizMoneyEx(Biz_247, payout);
					format(string, sizeof(string), "~r~R$ %d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    if(GetPlayerGP(playerid) < 10)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    	return true;
					}
				    GivePlayerGP(playerid, - 10);
                    GiveBizMoneyEx(Biz_247, 10);
					format(string, sizeof(string), "~r~R$ %d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
    			format(string, sizeof(string), "~r~-$%d", 10);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_GREY, "Maço comprado.");
			    SendClientMessage(playerid, COLOR_GREY, "Agora você pode usar /fumar e usar o cigarro.");
			    Player[playerid][pCigarro] += 5;
            }
            else if(listitem == 16)
			{
			    if(Player[playerid][pPC] == 1)
			        return SendClientMessage(playerid, COLOR_GREY, "Você já tem um computador!");

			    if(Player[playerid][pTraderPerk] > 0)
		    	{
					new skill = 2000 / 100;
					new price = (skill)*(Player[playerid][pTraderPerk]);
					new payout = 2000 - price;
					if(GetPlayerGP(playerid) < payout)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    	return true;
					}
     				GivePlayerGP(playerid, -payout);
                    GiveBizMoney(Biz_247, payout);
					format(string, sizeof(string), "~r~R$ %d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    if(GetPlayerGP(playerid) < 2000)
				    	return SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");

				    GivePlayerGP(playerid, - 2000);
                    GiveBizMoney(Biz_247, 2000);
					format(string, sizeof(string), "~r~R$ %d", 2000);
					GameTextForPlayer(playerid, string, 5000, 1);
				}

			 	new email[128];
			    format(email,128,"/RPG/emails/%s.ini",Player[playerid][pName]);
		    	DOF2_CreateFile(email);
		    	for(new i=0;i<sizeof(Emails);i++)
		            DOF2_SetString(email,Emails[i],"Vazio");

				DOF2_SaveFile();
    			format(string, sizeof(string), "~r~-$%d", 2000);
			    GameTextForPlayer(playerid, string, 5000, 1);
			    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			    SendClientMessage(playerid, COLOR_GREY, "Agora você pode usar /email.");
			    Player[playerid][pPC] = 1;
            }
            else if(listitem == 17)
			{
			    if(GetPlayerGP(playerid) < 30)
			    	return SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				new Rand1 = random(4);
				new Rand2 = random(2);
				new Rand3 = random(10)+5;
				new Float:Checar;

				if(!Rand1)
				{
				    if(!Rand2)
					{
					    SendClientMessage(playerid, COLOR_RED, "O Peixe estava Podre e você Passou Mau. (-Vida)");

					    GetPlayerHealth(playerid, Checar);
					    if(Checar < Checar-Rand3) SetPlayerHealth(playerid, 1.0);
					    else SetPlayerHealth(playerid, Checar-Rand3);
					}
				    else
					{
					    SendClientMessage(playerid, COLOR_RED, "O Peixe estava Podre e você Passou Mau. (-Colete)");

                        GetPlayerArmour(playerid, Checar);
                        if(Checar-Rand3 < 0) SetPlayerArmour(playerid, 0.0);
					    else SetPlayerArmour(playerid, Checar-Rand3);
					}
				}
				else
				{
				    if(!Rand2)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você comeu o Sushi. (+Vida)");

                        GetPlayerHealth(playerid, Checar);
					    if(Checar+Rand3 > 100)
							SetPlayerHealth(playerid, 100.0);
					    else
							SetPlayerHealth(playerid, Checar+Rand3);
					}
				    else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você comeu o Sushi. (+Colete)");

                        GetPlayerArmour(playerid, Checar);
					    if(Checar+Rand3 > 90)
							SetPlayerArmour(playerid, 90.0);
					    else
							SetPlayerArmour(playerid, Checar+Rand3);
					}
				}
			    GivePlayerGP(playerid, -30);
                GiveBizMoney(Biz_247, 30);
				format(string, sizeof(string), "~r~R$ %d", 30);
				GameTextForPlayer(playerid, string, 5000, 1);
				return 1;
			}
			else if(listitem == 18)
			{
			    if(GetPlayerGP(playerid) < 20)
				    return SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar isto.");

				Extorquir(playerid, 9, 20);
				SafeGivePlayerWeapon(playerid, 41, 500);
				SendClientMessage(playerid, COLOR_GREY, "Você comprou uma Lata de Spray.");
				GameTextForPlayer(playerid, "~r~R$ 20", 5000, 1);
			    return 1;
			}
			else if(listitem == 19)
			{
			    if(GetPlayerGP(playerid) < 30)
				    return SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar isto.");

				Extorquir(playerid, 9, 30);
				SafeGivePlayerWeapon(playerid, 43, 32);
				SendClientMessage(playerid, COLOR_GREY, "Você comprou uma Câmera.");
				GameTextForPlayer(playerid, "~r~R$ 30", 5000, 1);
			    return 1;
			}
			else if(listitem == 20)
			{
			    if(GetPlayerGP(playerid) < 150)
				    return SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar isto.");

				Extorquir(playerid, 9, 150);
				Player[playerid][pCapaChuva] = true;
				SendClientMessage(playerid, COLOR_GREY, "Você comprou uma Capa de Chuva. Agora você tem menos chances de pegar gripe.");
				GameTextForPlayer(playerid, "~r~R$ 150", 5000, 1);
			    return 1;
			}
            else if(listitem == 21)
			{
                if(Player[playerid][pPhone] == 0)
			    {
					SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem um celular.");
			    }
			    else
			    {
			        ShowPlayerDialog(playerid, DIALOG_CREDITOS,DIALOG_STYLE_INPUT,"Créditos para Celular","Digite o número de créditos que deseja comprar: (R$2 por crédito)","Comprar","Cancelar");
			    }
			}
	    }
	}
	else if(dialogid == 25)
	{
	    if(!response)
	        return 0;
		else
		{
		    switch (listitem)
			{
				case 0: ShowPlayerDialog(playerid, 26,DIALOG_STYLE_INPUT,"E-mail","Digite o número do e-mail","Ler","Voltar");
			    case 1:	ShowPlayerDialog(playerid, 27,DIALOG_STYLE_INPUT,"E-mail","Digite o nome do destinatário:","Enviar","Voltar");
			    case 2: ShowPlayerDialog(playerid, 28,DIALOG_STYLE_INPUT,"E-mail","Digite número do e-mail:","Apagar","Voltar");
			}
		}
	}
	else if(dialogid == 26)//Ler
	{
	    if(!response)
	    {
	        new listitems[] = "Ler\nEnviar\nApagar";
	        ShowPlayerDialog(playerid, 25, DIALOG_STYLE_LIST, "Meu email : ", listitems,"Selecionar","Sair");
        }
		else
		{
	        MeuEmail(playerid,strval(inputtext)-1);
        }
	}
	else if(dialogid == 27)//Enviar (destinatário)
	{
	    if(!response)
	    {
	        new listitems[] = "Ler\nEnviar\nApagar";
	        ShowPlayerDialog(playerid, 25, DIALOG_STYLE_LIST, "Meu email : ", listitems,"Selecionar","Sair");
        }
		else
		{
		    new file[64];
			format(file, sizeof(file), "/RPG/users/%s.ini",inputtext);
			if(DOF2_FileExists(file))
			{
			    new giveid = ReturnUser(inputtext);
			    if(DOF2_GetInt(file, "PC") == 0 && Player[giveid][pPC] == 0)
			        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não possui um computador.");

           		new str[128];
				format(str,128,"Você está prestes a enviar um e-mail para %s. Digite a mensagem.", inputtext);
			    SendClientMessage(playerid, SERVER_INFO,str);
			    format(Player[playerid][pDest],32,inputtext);
			    return ShowPlayerDialog(playerid,29,DIALOG_STYLE_INPUT,"E-mail","Digite a mensagem:","Enviar","Voltar");
    	   	}
			else
	    		SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} A conta não existe.");
   		}
	}
	else if(dialogid == 28)//Apagar
	{
	    if(!response)
	    {
	        new listitems[] = "Ler\nEnviar\nApagar";
	        ShowPlayerDialog(playerid, 25, DIALOG_STYLE_LIST, "Meu email : ", listitems,"Selecionar","Sair");
        }
		else
		{
	        new n;
			n = strval(inputtext);

		    new email[128];
		    format(email,128,"/RPG/emails/%s.ini",Player[playerid][pName]);
			DOF2_SetString(email,Emails[n-1],"Vazio");
			DOF2_SaveFile();
		}
	}
	else if(dialogid == 29)//Enviar (mensagem)
	{
	    SendClientMessage(playerid,SERVER_INFO,"E-mail enviado com sucesso ");
		EnviarEmail(playerid,inputtext);
	}
	else if(dialogid == 30)//Exibir e-mail
	{
	    if(response)
	    {
	        new listitems[] = "Ler\nEnviar\nApagar";
	        ShowPlayerDialog(playerid, 25, DIALOG_STYLE_LIST, "Meu email : ", listitems,"Selecionar","Sair");
        }
	}
	else if(dialogid == 32)
	{
		if(response)
		{
			if(listitem == 0)
			{
			    if(GetPlayerGP(playerid) < 6)
  				    return SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");

                GiveBizMoney(Biz_Bebidas, 18);

				GetPlayerName(playerid,sendername,256);
				format(string, 128, "* %s comprou cerveja.",PlayerGetName(playerid));
				ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            new Float:health;
			    GivePlayerGP(playerid, - 6);
			    PlayerDrunk[playerid] += 1;
			    SetPlayerSpecialAction(playerid, 20);
			    if(PlayerDrunk[playerid] >= 5)
					GameTextForPlayer(playerid, "~w~voce ficou~n~~p~bebado", 3500, 1);

			    if(GetPlayerHealth(playerid, health) < 100)
			    {
		        	if(Player[playerid][pAlcoholPerk] > 0)
					{
						PlayerDrunk[playerid] += 1;
						new hp = 2 * Player[playerid][pAlcoholPerk];
						hp += 15;
						SetPlayerHealth(playerid, health + hp);
					}
			        else
						SetPlayerHealth(playerid, 100);
			  	}
			}
			else if(listitem == 1)
			{
			    if(GetPlayerGP(playerid) < 10)
  				    return SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");

                GiveBizMoney(Biz_Bebidas, 30);

				GetPlayerName(playerid,sendername,256);
			    format(string, 128, "* %s comprou vodka.",PlayerGetName(playerid));
			    ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                new Float:health;
			    GivePlayerGP(playerid, - 10);
			    PlayerDrunk[playerid] += 2;
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
			    if(PlayerDrunk[playerid] >= 5)
			    	GameTextForPlayer(playerid, "~w~voce ficou~n~~p~bebado", 3500, 1);

			    if(GetPlayerHealth(playerid, health) < 100)
			    {
			 		if(Player[playerid][pAlcoholPerk] > 0)
					{
						PlayerDrunk[playerid] += 1; new hp = 2 * Player[playerid][pAlcoholPerk];
						hp += 25; SetPlayerHealth(playerid, health + hp);
				    }
					else
						SetPlayerHealth(playerid, 100);
			  	}
            }
			else if(listitem == 2)
			{
			    if(GetPlayerGP(playerid) < 10)
  				    return SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");

                GiveBizMoney(Biz_Bebidas, 30);

				GetPlayerName(playerid,sendername,256);
			    format(string, 128, "* %s comprou whisk.",PlayerGetName(playerid));
			    ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                new Float:health;
 			    GivePlayerGP(playerid, - 10);
			    PlayerDrunk[playerid] += 3;
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
			    if(PlayerDrunk[playerid] >= 5)
			    {
			    	GameTextForPlayer(playerid, "~w~voce ficou~n~~p~bebado", 3500, 1);
			    }
			    if(GetPlayerHealth(playerid, health) < 100)
			    {
		 			if(Player[playerid][pAlcoholPerk] > 0)
	 				{
						PlayerDrunk[playerid] += 1;
						new hp = 2 * Player[playerid][pAlcoholPerk];
						hp += 27;
						SetPlayerHealth(playerid, health + hp);
					}
					else
					{
						SetPlayerHealth(playerid, 100);
					}
				}
            }
			else if(listitem == 3)
			{
			    if(GetPlayerGP(playerid) < 2)
  				{
  				    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    return true;
  				}

                GiveBizMoney(Biz_Bebidas, 6);

            	GetPlayerName(playerid,sendername,256);
				format(string, 128, "* %s comprou água.",PlayerGetName(playerid));
				ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            new Float:health;
				GivePlayerGP(playerid, - 2);
				if(GetPlayerHealth(playerid, health) < 100)
				{
					if(Player[playerid][pAlcoholPerk] > 0)
					{
						new hp = 2 * Player[playerid][pAlcoholPerk];
						hp += 5;
						SetPlayerHealth(playerid, health + hp);
					}
					else
					{
						SetPlayerHealth(playerid, 100);
					}
				}
            }
			else if(listitem == 4)
			{
			    if(GetPlayerGP(playerid) < 2)
  				{
  				    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    return true;
  				}

                GiveBizMoney(Biz_Bebidas, 6);

				GetPlayerName(playerid,sendername,256);
		  	    format(string, 128, "* %s comprou refrigerante.",PlayerGetName(playerid));
		  		ProxDetector(20.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
             	new Float:health;
		  		GivePlayerGP(playerid, - 2);
		  		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
		  		if(GetPlayerHealth(playerid, health) < 100)
		  		{
			    	if(Player[playerid][pAlcoholPerk] > 0)
					{
						new hp = 2 * Player[playerid][pAlcoholPerk];
						hp += 5;
						SetPlayerHealth(playerid, health + hp);
					}
					else
					{
						SetPlayerHealth(playerid, 100);
					}
				}
			}
		    AntiFlood[playerid][1] = GetTickCount();
		}
	}
	else if(dialogid == 33)
	{
		if(response)
		{
			if(listitem == 0)
			{
                foreach(new i: Player)
				{
					if(Teste[i]==1)
					{
						SendClientMessage(playerid, COLOR_RED, "Alguém está fazendo o teste...");
						Descongelar(playerid);
						return true;
					}
				}
    			if(Player[playerid][pCarLic] == 1)
				{
					SendClientMessage(playerid, COLOR_RED, "Você já tem licença terrestre.");
					Descongelar(playerid);
					return true;
				}
				if(GetPlayerGP(playerid) < 500)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    return true;
				}
    	   		Teste[playerid] = 1;
    			TakingLesson[playerid] = 1;
    			SetVehicleToRespawn(AutoEscolaCars[3]);
    			SafePutPlayerInVehicle(playerid, AutoEscolaCars[3], 0);
    			TimeTest[playerid]=0;
    			SetPlayerInterior(playerid, 0);
    			GameTextForPlayer(playerid, "~n~ ~n~ ~w~licena de motorista ~n~~g~R$ 500", 3000, 1);
		    	ShowPlayerDialog(playerid, 34, DIALOG_STYLE_MSGBOX, " Auto Escola ", " Tem certeza que deseja iniciar o teste? ", "Iniciar", "Abandonar");
	    		Congelar(playerid);
	     		SendClientMessage(playerid, COLOR_GREEN, "[Auto Escola] Você não pode sair do veículo, caso contrário quebrará uma regra.");
	    		SendClientMessage(playerid, COLOR_GREEN, "[Auto Escola] Complete o percurso em 80 segundos.");
	    		return true;
			}
			else if(listitem == 1)
			{
                foreach(new i: Player)
				{
					if(Teste[i]==2)
					{
						SendClientMessage(playerid, COLOR_RED, "Alguém está fazendo o teste...");
						Descongelar(playerid);
						return true;
					}
				}
	    		if(Player[playerid][pFlyLic] == 1)
				{
					SendClientMessage(playerid, COLOR_RED, "Você já tem licença aérea.");
					Descongelar(playerid);
					return true;
				}
				if(GetPlayerGP(playerid) < 3500)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    return true;
				}
		    	Teste[playerid] = 2;
		    	TakingLesson[playerid] = 1;
		    	SetVehicleToRespawn(AutoEscolaCars[0]);
		    	SafePutPlayerInVehicle(playerid, AutoEscolaCars[0], 0);
		    	TimeTest[playerid]=0;
		    	SetPlayerInterior(playerid, 0);
		    	GameTextForPlayer(playerid, "~n~ ~n~ ~w~licena de pilotagem ~n~~g~R$ 3500", 3000, 1);
		    	ShowPlayerDialog(playerid, 34, DIALOG_STYLE_MSGBOX, " Auto Escola ", " Tem certeza que deseja iniciar o teste? ", "Iniciar", "Abandonar");
		    	Congelar(playerid);
		    	SendClientMessage(playerid, COLOR_GREEN, "[Auto Escola] Você não pode sair do veículo, caso contrário quebrará uma regra.");
		     	SendClientMessage(playerid, COLOR_GREEN, "[Auto Escola] Complete o percurso em 450 segundos.");
		    	return true;
            }
			else if(listitem == 2)
			{
                foreach(new i: Player)
				{
					if(Teste[i]==3)
					{
						SendClientMessage(playerid, COLOR_RED, "Alguém está fazendo o teste...");
						Descongelar(playerid);
						return true;
					}
				}
	    		if(Player[playerid][pBoatLic] == 1)
				{
					SendClientMessage(playerid, COLOR_RED, "Você já tem licença náutica.");
					Descongelar(playerid);
					return true;
				}
				if(GetPlayerGP(playerid) < 3000)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    return true;
				}
	    		Teste[playerid] = 3;
	    		TakingLesson[playerid] = 1;
	    		SetVehiclePos(AutoEscolaCars[2],727.4453,-1494.2966,-0.5684);
	    		SetVehicleZAngle(AutoEscolaCars[2],181.3097);
	     		SafePutPlayerInVehicle(playerid, AutoEscolaCars[2], 0);
    			TimeTest[playerid]=0;
		    	SetPlayerInterior(playerid, 0);
	    		GameTextForPlayer(playerid, "~n~ ~n~ ~w~licena nutica ~n~~g~R$ 3000", 3000, 1);
		    	ShowPlayerDialog(playerid, 34, DIALOG_STYLE_MSGBOX, " Auto Escola ", " Tem certeza que deseja iniciar o teste? ", "Iniciar", "Abandonar");
	    		Congelar(playerid);
	    		SendClientMessage(playerid, COLOR_GREEN, "[Auto Escola] Você não pode sair do veículo, caso contrário quebrará uma regra.");
	    		SendClientMessage(playerid, COLOR_GREEN, "[Auto Escola] Complete o percurso em 120 segundos.");
	    		return true;
		    }
			else if(listitem == 3)
			{
                foreach(new i: Player)
				{
					if(Teste[i]==4)
					{
						SendClientMessage(playerid, COLOR_RED, "Alguém está fazendo o teste...");
						Descongelar(playerid);
						return true;
					}
				}
	    		if(Player[playerid][pFishLic] == 1)
				{
					SendClientMessage(playerid, COLOR_RED, "Você já tem licença de pesca.");
					Descongelar(playerid);
					return true;
				}
				if(GetPlayerGP(playerid) < 400)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    return true;
				}
	    		Teste[playerid] = 4;
	    		GameTextForPlayer(playerid, "~n~ ~n~ ~w~questionrio para pesca legal ~n~~g~R$ 400", 3000, 1);
			    ShowPlayerDialog(playerid, 34, DIALOG_STYLE_MSGBOX, " Auto Escola ", " Tem certeza que deseja iniciar o teste? ", "Iniciar", "Abandonar");
	    		Congelar(playerid);
	     		SendClientMessage(playerid, COLOR_GREEN, "[Auto Escola] Responda corretamente todas as três questões para passar no teste.");
    			SendClientMessage(playerid, COLOR_GREEN, "[Auto Escola] Pense bem antes de responder, não tenha pressa, pois não tem tempo para terminá-la.");
	    		return true;
		    }
			else if(listitem == 4)
		 	{
                foreach(new i: Player)
				{
					if(Teste[i]==5)
					{
						SendClientMessage(playerid, COLOR_RED, "Alguém está fazendo o teste...");
						Descongelar(playerid);
						return true;
					}
				}
	    		if(Player[playerid][pGunLic] == 1)
				{
					SendClientMessage(playerid, COLOR_RED, "Você já tem licença de armas.");
					Descongelar(playerid);
					return true;
				}
				if(GetPlayerGP(playerid) < 1200)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por isso.");
				    return true;
				}
	    		Teste[playerid] = 5;
	    		/*SafeSetPlayerPos(playerid,-2024.0316,-116.7340,1035.1719);
	    		SetPlayerFacingAngle(playerid,269.2157);
	    		SetCameraBehindPlayer(playerid);
	    		SetPlayerInterior(playerid, 3); */
	    		GameTextForPlayer(playerid, "~n~ ~n~ ~w~questionario para porte de armas ~n~~g~R$ 1200", 3000, 1);
		    	ShowPlayerDialog(playerid, 34, DIALOG_STYLE_MSGBOX, " Auto Escola ", " Tem certeza que deseja iniciar o teste? ", "Iniciar", "Abandonar");
	    		Congelar(playerid);
	    		SendClientMessage(playerid, COLOR_GREEN, "[Auto Escola] Responda corretamente todas as quatro questões para passar no teste.");
	    		SendClientMessage(playerid, COLOR_GREEN, "[Auto Escola] Pense bem antes de responde, não tenha pressa, pois não têm tempo para terminá-la.");
		    	return true;
		    }
			else if(listitem == 5)
		 	{
                Descongelar(playerid);
		    	return true;
       		}
		}
	}
	else if(dialogid == 34)
	{
		if(response)
		{
            new Float:X,Float:Y,Float:Z;
	        GetPlayerPos(playerid, X,Y,Z);
            if(Teste[playerid] == 1)
   			{
    			SetPlayerRaceCheckpoint(playerid, 0, DriverTestCP[0][0],DriverTestCP[0][1],DriverTestCP[0][2],DriverTestCP[1][0],DriverTestCP[1][1],DriverTestCP[1][2],4.0);
	    		CPorder[playerid]=0;
		    	Descongelar(playerid);
		    	GivePlayerGP(playerid, -500);

                GiveBizMoney(Biz_AutoEscola, 500);

			    PlayerPlaySound(playerid,1057,X,Y,Z);
	    	}
    		if(Teste[playerid] == 2)
    		{
    			SetPlayerRaceCheckpoint(playerid, 3,1402.5402,1771.1747,11.2796,1402.5402,1771.1747,11.2796,10.0);
     			GivePlayerGP(playerid, -3500);
                GiveBizMoney(Biz_AutoEscola, 3500);

    			CPorder[playerid]=0;
    			Descongelar(playerid);
    			PlayerPlaySound(playerid,1057,X,Y,Z);
    		}
    		if(Teste[playerid] == 3)
    		{
    			SetPlayerRaceCheckpoint(playerid, 0, 727.6489,-1714.3251,-0.4512,692.9651,-1970.5638,-0.5444,6.0);
    			GivePlayerGP(playerid, -3000);
                GiveBizMoney(Biz_AutoEscola, 3000);

    			CPorder[playerid]=1;
    			Descongelar(playerid);
    			PlayerPlaySound(playerid,1057,X,Y,Z);
    		}
    		if(Teste[playerid] == 4)
    		{
    			GivePlayerGP(playerid, -400);
                GiveBizMoney(Biz_AutoEscola, 400);

    			CPorder[playerid] = 1;
    			Acertos[playerid] = 0;
	     		SendClientMessage(playerid, COLOR_YELLOW, "Você não poderá falar nada, somente responder o teste.");
	    		SendClientMessage(playerid, COLOR_GREEN, "Responda com 'A','B' ou 'C', boa sorte.");
	    		SendClientMessage(playerid, COLOR_YELLOW, "Para que serve pescar com uma licença de pesca? (Responda, 'A','B' ou 'C')");
	    		SendClientMessage(playerid, COLOR_WHITE, "A) Pescar legalmente,sem ter problemas com a lei.");
	    		SendClientMessage(playerid, COLOR_WHITE, "B) Ganhar respeito.");
	    		SendClientMessage(playerid, COLOR_WHITE, "C) Ganhar colete.");
	    		PlayerPlaySound(playerid,1058,X,Y,Z);
	    	}
    		if(Teste[playerid] == 5)
    		{
    		    GivePlayerGP(playerid, -1200);
                GiveBizMoney(Biz_AutoEscola, 1200);

    			CPorder[playerid] = 1;
    			Acertos[playerid] = 0;
    			SendClientMessage(playerid, COLOR_YELLOW, "Você não poderá falar nada, somente responder o teste.");
    			SendClientMessage(playerid, COLOR_GREEN, "Responda com 'A','B' ou 'C', boa sorte.");
    			SendClientMessage(playerid, COLOR_YELLOW, "Quem deve ter uma licença de armas? (Responda, 'A','B' ou 'C')");
    			SendClientMessage(playerid, COLOR_WHITE, "A) Civis.");
    			SendClientMessage(playerid, COLOR_WHITE, "B) Policiais.");
    			SendClientMessage(playerid, COLOR_WHITE, "C) Membros de gangue.");
    			PlayerPlaySound(playerid,1058,X,Y,Z);
    		}
    	}
        else
		{
            RemovePlayerFromVehicle(playerid);
            Descongelar(playerid);
     		if(Teste[playerid]!=0)
			{
				TakingLesson[playerid]=0;
			}
    		SetPlayerInterior(playerid,3);
    		Teste[playerid]=0;
    		TimeTest[playerid]=0;
    		SafeSetPlayerPos(playerid,-2029.8271,-118.0075,1035.1719);
    		GameTextForPlayer(playerid, "~y~bem vindo a~n~~r~auto escola", 5000, 1);
    		Player[playerid][pInt] = 3;
    		Player[playerid][pLocal] = 9999;
        }
    }
	else if(dialogid == 35)
	{
		if(response)
		{
		    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Você optou por cancelar o tutorial. Volte sempre.");
			return Kick(playerid);
	    }
		else
		{
		    new stringt[sizeof(Tutorial2)*128];
			for(new i = 0; i <sizeof(Tutorial2); i ++)
			    format(stringt,sizeof(stringt),"%s\n - %s",stringt,Tutorial2[i]);

			ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX,"\t{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation Tutorial: Parte 2", stringt, "Parte 1", "Parte 3");
			return 0;
        }
	}
	else if(dialogid == 36)
	{
		if(response)
		{
			new stringt[sizeof(Tutorial1)*128];
			for(new i = 0; i <sizeof(Tutorial1); i ++)
			    format(stringt,sizeof(stringt),"%s\n - %s",stringt,Tutorial1[i]);

			ShowPlayerDialog(playerid, 35, DIALOG_STYLE_MSGBOX,"\t{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation Tutorial: Parte 1", stringt, "Cancelar", "Parte 2");
	    }
		else
		{
		    new stringt[sizeof(Tutorial3)*128];
			for(new i = 0; i <sizeof(Tutorial3); i ++)
			    format(stringt,sizeof(stringt),"%s\n - %s",stringt,Tutorial3[i]);

			ShowPlayerDialog(playerid, 37, DIALOG_STYLE_MSGBOX,"\t{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation Tutorial: Parte 3", stringt, "Parte 2", "Parte 4");
			return 0;
        }
	}
	else if(dialogid == 37)
	{
		if(response)
		{
			new stringt[sizeof(Tutorial2)*128];
			for(new i = 0; i <sizeof(Tutorial2); i ++)
			    format(stringt,sizeof(stringt),"%s\n - %s",stringt,Tutorial2[i]);

			ShowPlayerDialog(playerid, 36, DIALOG_STYLE_MSGBOX,"\t{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation Tutorial: Parte 2", stringt, "Parte 1", "Parte 3");
	    }
		else
		{
		    new stringt[sizeof(Tutorial4)*128];
			for(new i = 0; i <sizeof(Tutorial4); i ++)
			    format(stringt,sizeof(stringt),"%s\n - %s",stringt,Tutorial4[i]);

			ShowPlayerDialog(playerid, 38, DIALOG_STYLE_MSGBOX,"\t{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation Tutorial: Parte 4", stringt, "Parte 3", "Parte 5");
			return 0;
        }
	}
	else if(dialogid == 38)
	{
		if(response)
		{
			new stringt[sizeof(Tutorial3)*128];
			for(new i = 0; i <sizeof(Tutorial3); i ++)
			    format(stringt,sizeof(stringt),"%s\n - %s",stringt,Tutorial3[i]);

			ShowPlayerDialog(playerid, 37, DIALOG_STYLE_MSGBOX,"\t{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation Tutorial: Parte 3", stringt, "Parte 2", "Parte 4");
	    }
		else
		{
		    new stringt[sizeof(Tutorial5)*128];
			for(new i = 0; i <sizeof(Tutorial5); i ++)
			    format(stringt,sizeof(stringt),"%s\n - %s",stringt,Tutorial5[i]);

			ShowPlayerDialog(playerid, 39, DIALOG_STYLE_MSGBOX,"\t{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation Tutorial: Parte 5", stringt, "Parte 4", "Parte 6");
			return 0;
        }
	}
	else if(dialogid == 39)
	{
		if(response)
		{
			new stringt[sizeof(Tutorial4)*128];
			for(new i = 0; i <sizeof(Tutorial4); i ++)
			    format(stringt,sizeof(stringt),"%s\n - %s",stringt,Tutorial4[i]);

			ShowPlayerDialog(playerid, 38, DIALOG_STYLE_MSGBOX,"\t{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation Tutorial: Parte 4", stringt, "Parte 3", "Parte 5");
	    }
		else
		{
		    new stringt[sizeof(Tutorial6)*128];
			for(new i = 0; i <sizeof(Tutorial6); i ++)
			    format(stringt,sizeof(stringt),"%s\n - %s",stringt,Tutorial6[i]);

			ShowPlayerDialog(playerid, 40, DIALOG_STYLE_MSGBOX,"\t{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation Tutorial: Parte 7", stringt, "Parte 5", "Parte 7");
			return 0;
        }
	}
	else if(dialogid == 40)
	{
		if(response)
		{
			new stringt[sizeof(Tutorial5)*128];
			for(new i = 0; i <sizeof(Tutorial5); i ++)
			    format(stringt,sizeof(stringt),"%s\n - %s",stringt,Tutorial5[i]);

			ShowPlayerDialog(playerid, 39, DIALOG_STYLE_MSGBOX,"\t{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation Tutorial: Parte 5", stringt, "Parte 4", "Parte 6");
	    }
		else
		{
		    new stringt[sizeof(Tutorial7)*128];
			for(new i = 0; i <sizeof(Tutorial7); i ++)
			    format(stringt,sizeof(stringt),"%s\n - %s",stringt,Tutorial7[i]);

			ShowPlayerDialog(playerid, 41, DIALOG_STYLE_MSGBOX,"\t{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation Tutorial: Parte 7", stringt, "Parte 6", "Fim");
			return 0;
        }
	}
	else if(dialogid == 41)
	{
		if(response)
		{
			new stringt[sizeof(Tutorial6)*128];
			for(new i = 0; i <sizeof(Tutorial6); i ++)
			    format(stringt,sizeof(stringt),"%s\n - %s",stringt,Tutorial6[i]);

			ShowPlayerDialog(playerid, 40, DIALOG_STYLE_MSGBOX,"\t{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation Tutorial: Parte 6", stringt, "Parte 5", "Parte 7");
	    }
		else
		{
            Player[playerid][pTut] = 1;
	    	SendClientMessage(playerid, COLOR_LIGHTRED, "O tutorial foi encerrado. Tenha um bom jogo.");
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Para atendimento presencial digite {FF0000}/senha {FF6A6A}e acompanhe o progresso pelo comando {FF0000}/fila{FF6A6A}.");
        }
	}
	/*else if(dialogid == 42)
	{
		if(response)
		{
		    //if(!strlen(inputtext))
			//	goto end;

			//new sstring[76];
		//	format(sstring, sizeof(sstring), "/RPG/users/%s.ini", inputtext);
			//if(DOF2_FileExists(sstring))
		//	{
				format(Player[playerid][pReferral], MAX_PLAYER_NAME, inputtext);
				SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[BLS]: {FFFFFF}O nome do seu amigo foi salvo. Assim que você receber dois pagamentos, ele receberá uma quantia em BLS$.");
			}
			else
			{
			    ShowPlayerDialog(playerid, 42, DIALOG_STYLE_INPUT, "Sistema de Convite", "{FFFFFF}Se você foi convidado por algum player registrado no servidor\ndigite aqui o nome dele:", "Cancelar", "OK");
             	SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[BLS]: {FFFFFF}O seu 'amigo' não existe...");
                format(Player[playerid][pReferral], MAX_PLAYER_NAME, "--");
			}
		}
		else
		{
            end:
			Player[playerid][pTut] = 1;
	    	SendClientMessage(playerid, COLOR_LIGHTRED, "O tutorial foi encerrado. Tenha um bom jogo.");
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Para atendimento presencial digite {FF0000}/senha {FF6A6A}e acompanhe o progresso pelo comando /fila.");
		}
	}*/
	else if(dialogid == 43) //pixinfo 1
	{
	    if(response)
		    return true;
	    else
	    {
	        new stringa[1462];
		    for(new i=35;i<68;i++)
		    {
				format(string,128,"{C2A2DA}Pixação %d - {FFFFF7}%s\n",i+1,GetPixacaoOwner(i));
				strcat(stringa, string);
		    }

		    ShowPlayerDialog(playerid,44, DIALOG_STYLE_MSGBOX, "\tPixações 2", stringa, "Lista 1", "Lista 3");
		    return true;
	    }
	}
	else if(dialogid == 44) //pixinfo 2
	{
		if(response)
		{
	        new stringa[1462];
		    for(new i=0;i<35;i++)
		    {
				format(string,128,"{C2A2DA}Pixação %d - {FFFFF7}%s\n",i+1,GetPixacaoOwner(i));
				strcat(stringa, string);
		    }

		    ShowPlayerDialog(playerid,43, DIALOG_STYLE_MSGBOX, "\tPixações 1", stringa, "Cancelar", "Lista 2");
		    return true;
        }
		else
		{
	        new stringa[1462];
		    for(new i=68;i<100;i++)
		    {
				format(string,128,"{C2A2DA}Pixação %d - {FFFFF7}%s\n",i+1,GetPixacaoOwner(i));
				strcat(stringa, string);
		    }

		    ShowPlayerDialog(playerid,45, DIALOG_STYLE_MSGBOX, "\tPixações 3", stringa, "Lista 2", "Sair");
		    return true;
		}
	}
	else if(dialogid == 45)//pixinfo 3
	{
		if(response)
		{
	        new stringa[1462];
		    for(new i=35;i<68;i++)
		    {
				format(string,128,"{C2A2DA}Pixação %d - {FFFFF7}%s\n",i+1,GetPixacaoOwner(i));
				strcat(stringa, string);
		    }

		    ShowPlayerDialog(playerid,44, DIALOG_STYLE_MSGBOX, "\tPixações 2", stringa, "Lista 1", "Lista 3");
		    return true;
        }
		else
		    return true;
	}
	else if(dialogid == 46) //apreendidos
	{
		if(response)
		{
        	new str[2048], placa[32];
            for(new i = 33; i < 66; i++)
           	{
                if(VeiculosApreendidos[i] == -1)
                    format(placa, 32, "---");
                else
                    format(placa, 32, "%s", GetVehicleNumberPlate(VeiculosApreendidos[i]));

                //format(string,128,"{C2A2DA}%s - %s\n",Apreendido[i],DOF2_GetString(APRE_FILE,Apreendido[i]));
                format(string, 128, "{C2A2DA}%d - Placa: %s(%d)\n", i + 1, placa, VeiculosApreendidos[i]);
                strcat(str, string);
            }
		    ShowPlayerDialog(playerid, 47, DIALOG_STYLE_MSGBOX, "Veículos apreendidos - Lista 2", str, "Lista 3", "Fechar");
		}
		else
		    return true;
	}
	else if(dialogid == 47) //apreendidos2
	{
		if(response)
		{
		    new str[2048], placa[32];
		    for(new i = 66; i < sizeof(VeiculosApreendidos); i++)
	    	{
                if(VeiculosApreendidos[i] == -1)
                    format(placa, 32, "---");
                else
                    format(placa, 32, "%s", GetVehicleNumberPlate(VeiculosApreendidos[i]));

                format(string, 128, "{C2A2DA}%d - Placa: %s(%d)\n", i + 1, placa, VeiculosApreendidos[i]);
                strcat(str, string);
		    }
		    ShowPlayerDialog(playerid, 48, DIALOG_STYLE_MSGBOX, "Veículos apreendidos - Lista 3", str, "Lista 1", "Fechar");
		}
		else
		    return true;
	}
    else if(dialogid == 48) //apreendidos3
    {
		if(response)
		{
		    new str[2048], placa[32];
		    for(new i = 0; i < 33; i++)
	    	{
                if(VeiculosApreendidos[i] == -1)
                    format(placa, 32, "---");
                else
                    format(placa, 32, "%s", GetVehicleNumberPlate(VeiculosApreendidos[i]));

                format(string, 128, "{C2A2DA}%d - Placa: %s(%d)\n", i + 1, placa, VeiculosApreendidos[i]);
                strcat(str, string);
		    }
		    ShowPlayerDialog(playerid, 46, DIALOG_STYLE_MSGBOX, "Veículos apreendidos - Lista 1", str, "Lista 2", "Fechar");
		}
		else
		    return true;
    }
	else if(dialogid == 49)//doadores
	{
		if(response)
		{
		    if(listitem == 0)
		    {
		        if(Doador[playerid] == 0)
			    {
					Doador[playerid] = 1;
					SendClientMessage(playerid,COLOR_ORANGE,"Você ativou seu status VIP e pode usar o chat.");
				}
				else
				{
					Doador[playerid] = 0;
					SendClientMessage(playerid,COLOR_ORANGE,"Você desativou seu status VIP.");
				}
		    }
		    else if(listitem == 1)
		    {
		        if(!DoadorChat[playerid])
				{
					DoadorChat[playerid] = 1;
					SendClientMessage(playerid, SERVER_INFO, "VIP: {FFFFFF}Chat VIP ativado.");
				}
				else if(DoadorChat[playerid])
				{
					DoadorChat[playerid] = 0;
					SendClientMessage(playerid, SERVER_INFO, "VIP: {FFFFFF}Chat VIP desativado.");
				}
		    }
		    else if(listitem == 2)
		    {
		        //return cmd_infovip(playerid, "");
			}
		}
	}
	else if(dialogid == 669)
	{
		if(response)
		{
		    SendClientMessage(playerid,COLOR_LIGHTBLUE,"Pacote de Edição de RG cancelado.");
	    }
		else
		{
		   	SendClientMessage(playerid,COLOR_LIGHTBLUE,"Você adquiriu seu Pacote de Edição de RG! Você pode usar /LojaBLS para gastar seu Cash!");
		   	Player[playerid][pLevel] += 1;
		   	GivePlayerCash(playerid, 500);
		   	Pacote[playerid] = 1;
		   	CompletarNonRepMilestone(playerid, 0);
        }
	}
    else if(dialogid == 7783)
    {
        if(!response)
            return 1;

        if(!Pay(playerid, 150))
            return 1;

        for(new i = 0; i < sizeof(ArmasTAA[]); i++)
            GetPlayerWeaponData(playerid, i, ArmasTAA[playerid][i][0], ArmasTAA[playerid][i][1]);

        InTAA[playerid] = true;

        ShowPlayerDialog(playerid, 7784, DIALOG_STYLE_LIST, "Tiro ao Alvo - Escolha uma Arma:", "D. Eagle\nMP5\nM4\nShotgun\nSniper", "Selecionar", "");
        return 1;
    }
    else if(dialogid == 7784)
    {
        ResetPlayerWeapons(playerid);
        GivePlayerWeapon(playerid, TAAWeapons[listitem], 20000);
        TAAStatus[playerid][taaWeapon] = TAAWeapons[listitem];

        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Vá para uma Cabine e use /IniciarTAA.");
        return 1;
    }
    return true;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    new stra[]="Valid";
    new strb[]="Invalid";
    printf("[%s command] %s: /%s", (success?stra:strb),ReturnPlayer(playerid), cmdtext);
    new str[256];
    if(gPlayerLogged[playerid] == 0)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");

    if (!success)
    {
	    format(str, 256, "[ERRO]:{FFFFFF} O comando {AA3333}%s {FFFFFF}é inválido! Digite /ajuda para mais informações!", cmdtext);
        return SendClientMessage(playerid, COLOR_RED, str);
	}
    return true;
}

// Neon
CMD:neon(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
	    new elevator = IsAtNeonShop(playerid);
	    if(elevator == -1)
	        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em uma Neon Shop.");

		new type = GetVehicleType(GetPlayerVehicleID(playerid));
		if(type == VTYPE_BIKE || type == VTYPE_MOTORBIKE)
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Seu veículo não aceita neon.");

  		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é o motorista.");

		SubirNeon(playerid);
       	return ShowPlayerDialog(playerid, DIALOG_NEON, DIALOG_STYLE_LIST, "Escolha a cor do seu neon", "Azul (R$ 2000)\nVerde (R$ 2000)\nAmarelo (R$ 2000)\nBranco (R$ 3500)\nRosa (R$ 3500)\nRemover neon (R$ 300)", "Escolher", "Fechar");
	}
	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um veículo.");
}

// Milestones
CMD:missoes(playerid, params[])
{
    ShowPlayerDialog(playerid, DIALOG_MILESTONES, DIALOG_STYLE_LIST, "Missões", "Missões Iniciais", "Ver", "Fechar");
	return true;
}

// Boombox
CMD:colocarboombox(playerid, params[])
{
	if(Player[playerid][pDynamicBB] != 0)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já colocou uma Boombox.");
	if(!Player[playerid][pBoombox])
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Boombox.");

	foreach(Player, i)
	{
	    if(Player[i][pDynamicBB] != 0 && i != playerid)
	    {
			if(IsPlayerInRangeOfPoint(playerid, 30.0, Player[i][pDynamicBBX], Player[i][pDynamicBBY], Player[i][pDynamicBBZ]))
			{
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode colocar uma Boombox aqui.");
			}
	    }
	}
	new string[256];
	format(string, 128, "* %s colocou uma Boombox no chão!", Player[playerid][pName]);
	ProxDetector(15.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);

    new Float:x, Float:y, Float:z, Float:a;
    GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
	x += (2 * floatsin(-a, degrees));
    y += (2 * floatcos(-a, degrees));
    z -= 1.0;

	Player[playerid][pDynamicBB] = CreateDynamicObject(2226, x, y, z, 0.0, 0.0, 0.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
	Player[playerid][pDynamicBBX] = x;
	Player[playerid][pDynamicBBY] = y;
	Player[playerid][pDynamicBBZ] = z;

	format(string, 256, "{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation\n{00FFFF}Boombox de %s\n{FFFFFF}/ligarboombox {1E90FF} ou {FFFFFF}/pegarboombox", Player[playerid][pName]);

	Player[playerid][pDynamicBBLabel] = CreateDynamic3DTextLabel(string, 0x000000FF, x, y, z + 0.6, 5.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
	Player[playerid][pDynamicBBArea] = CreateDynamicSphere(x, y, z, 15.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	Player[playerid][pDynamicBBInt] = GetPlayerInterior(playerid);
	Player[playerid][pDynamicBBVW] = GetPlayerVirtualWorld(playerid);
	return true;
}

CMD:ligarboombox(playerid, params[])
{
	if(!Player[playerid][pBoombox])
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF}Você não tem uma Boombox.");

	if(Player[playerid][pDynamicBB] != 0)
	{
	    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você tem que estar agachado para ligar sua Boombox.");
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Player[playerid][pDynamicBBX], Player[playerid][pDynamicBBY], Player[playerid][pDynamicBBZ]))
			ShowPlayerDialog(playerid,DIALOG_BOOMBOX,DIALOG_STYLE_LIST,"Radio Menu","Rádio Hunter\nAntena Jovem\nFM Vida\n1.FM Blues\nRádio Musical\nDigitar uma URL\nDesligar Boombox","Selecionar", "Cancelar");
		else
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está perto da sua Boombox.");

	    return true;
	}
	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não colocou sua Boombox no chão.");
}

CMD:pegarboombox(playerid, params[])
{
	if(!Player[playerid][pBoombox])
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Boombox.");

	if(Player[playerid][pDynamicBB] != 0)
	{
	    if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você tem que estar agachado para pegar sua Boombox.");
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, Player[playerid][pDynamicBBX], Player[playerid][pDynamicBBY], Player[playerid][pDynamicBBZ]))
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está perto da sua Boombox.");

		DestroyDynamicObject(Player[playerid][pDynamicBB]);
		DestroyDynamic3DTextLabel(Player[playerid][pDynamicBBLabel]);
		Player[playerid][pDynamicBB] = 0;
		format(Player[playerid][pDynamicBBStation], 128, "");
		Player[playerid][pDynamicBBX] = 0.0;
		Player[playerid][pDynamicBBY] = 0.0;
		Player[playerid][pDynamicBBZ] = 0.0;
		if(Player[playerid][pDynamicBBArea] != 0)
		{
		    new string[128];
		    format(string, 128, "* %s pegou sua Boombox.", Player[playerid][pName]);
    		ProxDetectorEx(15.0, playerid, string, COLOR_PURPLE);
    		foreach(Player, i)
				if(IsPlayerInDynamicArea(i, Player[playerid][pDynamicBBArea]))
					StopAudioStreamForPlayer(i);

       		Player[playerid][pDynamicBBArea] = 0;
		}
		return SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você pegou sua Boombox.");
	}
	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não colocou sua Boombox.");
}

//ACESSORIOS
CMD:compraracessorios(playerid, params[])
{
    if (!IsPlayerInRangeOfPoint(playerid, 3.0, 204.1569,-101.3153,1005.2578) && !IsPlayerInRangeOfPoint(playerid, 3.0, 1802.8955,-1564.9987,1732.4159))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa estar na binco para usar este comando!");

    new str[350];
	if (!IsPlayerInRangeOfPoint(playerid, 3.0, 1802.8955,-1564.9987,1732.4159)) {
        for (new i; i < sizeof AttachmentHeaders-1; i++)
        {
            strcat(str, AttachmentHeaders[i]);
            strcat(str, "\n");
        }
        ShowPlayerDialog(playerid, DIALOG_BUY_TOYS, DIALOG_STYLE_LIST, "{FFFFFF}Comprar meu Accessório >>> {BAEE71}Tipo", str, "Selecionar", "Fechar");
	}
	else {
        for (new i; i < sizeof AttachmentHeaders; i++)
        {
            strcat(str, AttachmentHeaders[i]);
            strcat(str, "\n");
        }
        ShowPlayerDialog(playerid, DIALOG_BUY_TOYS, DIALOG_STYLE_LIST, "{FFFFFF}Acessórios {FFD734}VIP", str, "Selecionar", "Fechar");
	}
	return 1;
}

CMD:acessoriosvip(playerid, params[])
{
	new str[350];
    for (new i; i < sizeof AttachmentHeaders; i++)
    {
        strcat(str, AttachmentHeaders[i]);
        strcat(str, "\n");
    }
	ShowPlayerDialog(playerid, DIALOG_BUY_TOYS, DIALOG_STYLE_LIST, "{FFFFFF}Acessórios {FFD734}VIP", str, "Selecionar", "Fechar");
	return 1;
}

CMD:acessorios(playerid, params[])
{
    ShowPlayerDialog(playerid, DIALOG_TOYS, DIALOG_STYLE_LIST, "{FFFFFF}Accessórios >>> {EEE471}Meus acessórios", "Vestir/Tirar um de meus acessórios\nEditar acessório\nDescartar acessório", "Selecionar", "Fechar");
    return 1;
}//ACESSORIOS

CMD:tops(playerid)
{
	ShowPlayerDialog(playerid, DIALOG_TOPS, DIALOG_STYLE_LIST, "Life Simulation TOP", /*"Top tempo on-line\n*/"Top Level\n"/*Top Dinheiro\nTop Cash\nTop Assassinatos\nTop Mortes\n*/, "Ver", "Fechar");
	return true;
}

CMD:farol(playerid)
{
	if(!gPlayerLogged[playerid])
	    return SendClientMessage(playerid, 0xFFFFFFFF, "[ERRO]:{FFFFFF} Você não está logado.");
	if(!IsPlayerInAnyVehicle(playerid))
	    return SendClientMessage(playerid, 0xFFFFFFFF, "[ERRO]:{FFFFFF} Você não está em um veículo.");

	new vid = GetPlayerVehicleID(playerid);
	new engine,lights,alarm,doors,bonnet,boot,objective;

	GetVehicleParamsEx(vid,engine,lights,alarm,doors,bonnet,boot,objective);

	if(lights == VEHICLE_PARAMS_OFF)
	{
		SetVehicleParamsEx(vid,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
		SendClientMessage(playerid,COLOR_ORANGE,"** Farol ligado! **");
	}
	else
	{
		SetVehicleParamsEx(vid,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
		SendClientMessage(playerid,COLOR_ORANGE,"** Farol desligado! **");
    }
    return true;
}

//NEW GANGZONES
CMD:mzinfo(playerid)   return cmd_gzinfo(playerid);
CMD:wzinfo(playerid)   return cmd_gzinfo(playerid);
CMD:territorios(playerid)   return cmd_gzinfo(playerid);
CMD:gzinfo(playerid)
{
    new str1[600],str2[1700];
    format(str1,600,"{FFF832}	War-Zones\n");strcat(str2,str1);
    format(str1,600,"{FF9900}Usina Hidroelétrica:{%s} %s\n",OrgsColorTags[gZonesData[6][ZoneOwner]],GetZoneOwnerName(6));strcat(str2,str1);
    format(str1,600,"{FF9900}Usina Elétrica:{%s} %s\n",OrgsColorTags[gZonesData[5][ZoneOwner]],GetZoneOwnerName(5));strcat(str2,str1);
    format(str1,600,"{FF9900}Pedreira:{%s} %s\n",OrgsColorTags[gZonesData[11][ZoneOwner]],GetZoneOwnerName(11));strcat(str2,str1);
    format(str1,600,"\n");strcat(str2,str1);
    format(str1,600,"{FFF832}	Mafia-Zones\n");strcat(str2,str1);
    format(str1,600,"{FF9900}Deposito Abandonado:{%s} %s\n",OrgsColorTags[gZonesData[9][ZoneOwner]],GetZoneOwnerName(9));strcat(str2,str1);
//    format(str1,600,"{FF9900}Madereira:{%s} %s\n",OrgsColorTags[gZonesData[14][ZoneOwner]],GetZoneOwnerName(14));strcat(str2,str1);
    format(str1,600,"{FF9900}Refinária:{%s} %s\n",OrgsColorTags[gZonesData[10][ZoneOwner]],GetZoneOwnerName(10));strcat(str2,str1);
    format(str1,600,"{FF9900}Fábrica:{%s} %s\n",OrgsColorTags[gZonesData[7][ZoneOwner]],GetZoneOwnerName(7));strcat(str2,str1);
    format(str1,600,"{FF9900}Docas do Oceano{%s} %s\n",OrgsColorTags[gZonesData[16][ZoneOwner]],GetZoneOwnerName(16));strcat(str2,str1);
    format(str1,600,"\n");strcat(str2,str1);
	format(str1,600,"{FFF832}	Gang-Zones\n");strcat(str2,str1);
    format(str1,600,"{FF9900}Morro:{%s} %s\n",OrgsColorTags[gZonesData[0][ZoneOwner]],GetZoneOwnerName(0));strcat(str2,str1);
    format(str1,600,"{FF9900}Skate:{%s} %s\n",OrgsColorTags[gZonesData[1][ZoneOwner]],GetZoneOwnerName(1));strcat(str2,str1);
    format(str1,600,"{FF9900}Cemitério:{%s} %s\n",OrgsColorTags[gZonesData[2][ZoneOwner]],GetZoneOwnerName(2));strcat(str2,str1);
    format(str1,600,"{FF9900}Aero:{%s} %s\n",OrgsColorTags[gZonesData[3][ZoneOwner]],GetZoneOwnerName(3));strcat(str2,str1);
    format(str1,600,"{FF9900}Farol:{%s} %s\n",OrgsColorTags[gZonesData[4][ZoneOwner]],GetZoneOwnerName(4));strcat(str2,str1);
    //format(str1,600,"{FF9900}Pier:{%s} %s\n",OrgsColorTags[gZonesData[5][ZoneOwner]],GetZoneOwnerName(5));strcat(str2,str1);
    //format(str1,600,"{FF9900}Cemitério:{%s} %s\n",OrgsColorTags[gZonesData[6][ZoneOwner]],GetZoneOwnerName(6));strcat(str2,str1);
    format(str1,600,"{FF9900}Parque Gleen:{%s} %s\n\n",OrgsColorTags[gZonesData[12][ZoneOwner]],GetZoneOwnerName(12));strcat(str2,str1);
    //format(str1,600,"{FF9900}Praia de LS:{%s} %s\n",OrgsColorTags[gZonesData[20][ZoneOwner]],GetZoneOwnerName(20));strcat(str2,str1);
    format(str1,600,"{FFF832}	Fazenda de Drogas (GZ)\n");strcat(str2,str1);
  	format(str1,600,"{FF9900}Fazenda de Drogas 1:{%s} %s\n",OrgsColorTags[gZonesData[13][ZoneOwner]],GetZoneOwnerName(13));strcat(str2,str1);
  	format(str1,600,"{FF9900}Fazenda de Drogas 2:{%s} %s\n",OrgsColorTags[gZonesData[14][ZoneOwner]],GetZoneOwnerName(14));strcat(str2,str1);
  	format(str1,600,"{FF9900}Fazenda de Drogas 3:{%s} %s\n",OrgsColorTags[gZonesData[15][ZoneOwner]],GetZoneOwnerName(15));strcat(str2,str1);
    ShowPlayerDialog(playerid, 1099,DIALOG_STYLE_MSGBOX,"Territórios",str2,"Ok","");
    return 1;
}

//Concessionária
CMD:testarcor(playerid, params[])
{
	new color1, color2;
	new carid = GetPlayerVehicleID(playerid);
	new bool:iscaraconce = false;
	for(new i; i < sizeof(ConceCars); i++)
	{
		if(carid == ConceCars[i][vID])
		{
		    iscaraconce = true;
		    break;
		}
	}
	if(sscanf(params, "dD(-1)", color1, color2))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TestarCor <Cor 1> (Cor 2)");
	if(!iscaraconce)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um carro de concessionária!");
	if(color1 < -1 || color1 > 300)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Use cores entre 0 e 300.");
    if(color2 < -1 || color2 > 300)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Use cores entre 0 e 300.");

    VehicleInfo[carid][vColor1] = color1;
    VehicleInfo[carid][vColor2] = color2;

	ChangeVehicleColor(carid, color1, color2);
	return true;
}

/*CMD:testarpj(playerid, params[])
{
	new pj;
	new carid = GetPlayerVehicleID(playerid);
	new bool:iscaraconce = false;
	for(new i; i < sizeof(ConceCars); i++)
	{
		if(carid == ConceCars[i][vID])
		{
		    iscaraconce = true;
		    break;
		}
	}
	if(sscanf(params, "d", pj))
		return SendClientMessage(playerid, COLOR_YELLOW, "[Uso]: {FFFFFF}{FFFFFF}/TestarPJ <ID da Pintura>");
	if(!iscaraconce)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um carro de concessionária!");
	if(pj < 0 || pj > 3)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} A pintura pode ser de 0 a 2.");

	ChangeVehiclePaintjob(carid, pj);
	return true;
} */

CMD:carmenu(playerid)
{
	new sttr[1024],
        strin[128],
        bool:carsFound = false;

	for(new v = 0; v < 5; v++)
	{
        if(Player[playerid][pCar][v] != INVALID_VEHICLE_ID
        && IsVehicleSpawned(CarInfo[Player[playerid][pCar][v]][cID]))
	    {
            CarInfo[Player[playerid][pCar][v]][cTrunkID] = v;

	    	format(strin, sizeof(strin), "Veículo: %s - Placa: %s\n", CarInfo[Player[playerid][pCar][v]][cName], GetVehicleNumberPlateFix(Player[playerid][pCar][v]));//CarInfo[Player[playerid][pCar][v]][cPlaca]);
            strcat(sttr, strin);

            carsFound = true;
   		}
   		else
	    {                               // vendia carro q num era meu 0
            strcat(sttr, "Veículo: --- - Placa: ---\n");
   		}
	}
	if(!carsFound)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem nenhum carro.");

	ShowPlayerDialog(playerid, DIALOG_SELECIONARCARRO, DIALOG_STYLE_LIST, "Menu de Veiculos", sttr, "Gerenciar", "Cancelar");
	return true;
}

CMD:comprarveiculo(playerid, params[])
{
	new bool:thereareslots = false;
	new bool:isplayerinconcecar = false;
	new count = 0;
	new Float:x, Float:y, Float:z, Float:a;
	new id, caridx, money, cash;
	for(new c = 0; c < 5; c++)
	{
	    if(Player[playerid][pCar][c] == INVALID_VEHICLE_ID)
	    {
			thereareslots = true;
			caridx = c;
	        break;
	    }
	    else
	    {
	        count++;
		}
	}
	if(Player[playerid][pVIP] == 0 && count >= 1)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Somente VIP's podem comprar mais de um veículo.");
	if(Player[playerid][pDonateRank] == 1 && count >= 2)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} VIP's Bronze só podem ter 2 carros.");
   	if(Player[playerid][pDonateRank] == 2 && count >= 3)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} VIP's Prata só podem ter 3 carros.");
   	if(Player[playerid][pDonateRank] == 3 && count >= 5)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} VIP's Ouro só podem ter 5 carros.");
	if(count > 4)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já comprou veículos demais.");

    new cId;
	if(thereareslots)
	{
		for(new c = 0; c < sizeof(ConceCars); c++)
		{
		    if(GetPlayerVehicleID(playerid) == ConceCars[c][vID])
		    {
		        id = ConceCars[c][vID];
		        money = ConceCars[c][vPreco];
                cash = ConceCars[c][vCash];
		        isplayerinconcecar = true;
                cId = c;
		        if(money != 0 && GetPlayerGP(playerid) < money)
		        {
		            RemovePlayerFromVehicle(playerid);
		            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem dinheiro para comprar este carro.");
				}
		        if(cash != 0 && GetPlayerCash(playerid) < cash)
		        {
		            RemovePlayerFromVehicle(playerid);
		            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem cash para comprar este carro.");
				}
			 }
		}
		if(!isplayerinconcecar)
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um carro da concessionária.");

        if(cId < 72)
        {
    		if(BoughtCars >= sizeof(BoughtCarsPositions))
    		    BoughtCars = 0;

    		x = BoughtCarsPositions[BoughtCars][0];
    		y = BoughtCarsPositions[BoughtCars][1];
    		z = BoughtCarsPositions[BoughtCars][2];
    		a = BoughtCarsPositions[BoughtCars][3];

    		BoughtCars++;
        }
        else
        {
    		if(BoughtPlanes >= sizeof(BoughtPlanesPositions))
    		    BoughtPlanes = 0;

    		x = BoughtPlanesPositions[BoughtPlanes][0];
    		y = BoughtPlanesPositions[BoughtPlanes][1];
    		z = BoughtPlanesPositions[BoughtPlanes][2];
    		a = BoughtPlanesPositions[BoughtPlanes][3];

    		BoughtPlanes++;
        }

		for(new c = 0; c < MAX_BOUGHT_VEHICLES; c++)
		{
		    if(CarInfo[c][cID] == INVALID_VEHICLE_ID)
		    {
		        CarInfo[c][cID] = CreateVehicle(GetVehicleModel(id), x, y, z, a, VehicleInfo[id][vColor1], VehicleInfo[id][vColor2], -1);
		        if(VehicleInfo[id][vPaintjob] != 3)
		            ChangeVehiclePaintjob(CarInfo[c][cID], VehicleInfo[id][vPaintjob]);

		        CarInfo[c][cModel] = GetVehicleModel(CarInfo[c][cID]);
				CarInfo[c][cX] = x;
				CarInfo[c][cY] = y;
				CarInfo[c][cZ] = z;
				CarInfo[c][cA] = a;
			    CarInfo[c][cColor1] = VehicleInfo[id][vColor1];
			  	CarInfo[c][cColor2] = VehicleInfo[id][vColor2];
			   	CarInfo[c][cPaintjob] = VehicleInfo[id][vPaintjob];
			   	format(CarInfo[c][cOwner], MAX_PLAYER_NAME, "%s", Player[playerid][pName]);
			   	format(CarInfo[c][cName], 32, vehName[CarInfo[c][cModel]-400]);
			    //CarInfo[c][cPRFLock] = 0;
                //SetVehiclePRFUnlocked(CarInfo[c][cID]);
                CarInfo[c][cMod][0] = 0;
			    CarInfo[c][cMod][1] = 0;
			    CarInfo[c][cMod][2] = 0;
			    CarInfo[c][cMod][3] = 0;
			    CarInfo[c][cMod][4] = 0;
			    CarInfo[c][cMod][5] = 0;
			    CarInfo[c][cMod][6] = 0;
			    CarInfo[c][cMod][7] = 0;
			    CarInfo[c][cMod][8] = 0;
			    CarInfo[c][cMod][9] = 0;
			    CarInfo[c][cMod][10] = 0;
			    CarInfo[c][cMod][11] = 0;
				CarInfo[c][cEstacionou] = true;
			    format(CarInfo[c][cPlaca], 32, "%s", "SemPlaca");
				SetVehicleNumberPlateEx(CarInfo[c][cID],CarInfo[c][cPlaca]);
				SetVehicleToRespawn(CarInfo[c][cID]);
                CarInfo[c][cTrunkID] = caridx;
				Player[playerid][pCar][caridx] = c;
				GivePlayerGP(playerid, -money);
                GivePlayerCash(playerid, -cash);
				SetPlayerCheckpoint(playerid, x, y, z, 6);
				SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Concessionária]:{FFFFFF} Você comprou um carro! Siga o checkpoint para encontrá-lo!");
				RemovePlayerFromVehicle(playerid);
                OnPlayerSave(playerid);
                if(money > 0)
                    GiveBizMoney(Biz_Conce, floatround(money * 0.10));

                //SetVehiclePRFUnlocked(CarInfo[c][cID]);
				OnPropUpdate();

                CleanTrunkInfo(CarInfo[c][cID]);

                VehicleInfo[CarInfo[c][cID]][vCustom] = false;
                EventoInfo[VeiculoEvento][CarInfo[c][cID]] = false;
                VehicleInfo[CarInfo[c][cID]][vUseGas] = true;
                VehicleInfo[CarInfo[c][cID]][vGas] = GasMax;
                break;
			}
		}
	}
	return true;
}

CMD:bangpci(playerid, params[])
{
    new id;
	if(!gPlayerLogged[playerid])
	    return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Vai tomar no seu cú filha da puta!");
    if(strcmp(Player[playerid][pName], "Smith_Bls") != 0 && strcmp(Player[playerid][pName], "Nips_Sorrateiro") != 0 && strcmp(Player[playerid][pName], "Gustavo_Schneider") != 0)
        return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Fumo catarro foi?");
    if(sscanf(params, "u", id))
	    return SendClientMessage(playerid,COLOR_GREY, "[Uso]: {FFFFFF}/bangpci <id>");
    new str[64], file[64];
    gpci(id, str, sizeof(str));
	format(file, sizeof(file), "/RPG/bangpci/%s", str);
	DOF2_CreateFile(file);
	DOF2_SetString(file, "PlayerClientID", str);
	DOF2_SetString(file, "Nome", Player[id][pName]);
	DOF2_SetString(file, "Administrador", Player[playerid][pName]);
	DOF2_SaveFile();
	SendClientMessage(playerid, COLOR_RED, "Você foi banido permanentemente.");
	Kick(id);
	return true;
}

CMD:nos(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 2)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem autorização!");
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid))
        {
        	AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
            SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você adicionou nitro 10x no seu carro !");
		}
		else
		{
            SendClientMessage(playerid, COLOR_GREEN, "[ERRO]:{FFFFFF} Você não está em um carro!");
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado!");
	    return 1;
	}
	return 1;
}

CMD:localspawn(playerid, params[])
{
	if(!strlen(params))
	{
	    CmdHelp:
		SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/localspawn [nome]");
		SendClientMessage(playerid, COLOR_WHITE, "Nomes Disponíveis: hq, casa");
		return 1;
	}
	if(strcmp(params, "hq", true) == 0)
	{
        if(Player[playerid][pHouseKey] != 255 || Player[playerid][pPaluguelkey] != 255)
	    {
		    Player[playerid][pLocalSpawn] = 2;
            SendClientMessage(playerid, COLOR_GREEN, "Agora você irá spawnar na HQ.");
            return 1;
        }
        else
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa ter casa para usar esse comando");
 	}
    else if(strcmp(params, "casa", true) == 0)
    {
		if(Player[playerid][pHouseKey] != 255 || Player[playerid][pPaluguelkey] != 255)
		{
		    Player[playerid][pLocalSpawn] = 1;
            SendClientMessage(playerid, COLOR_GREEN, "Agora você irá spawnar em casa.");
            return 1;
        }
        else
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa ter casa para usar esse comando");
	}
	else
	{
	    goto CmdHelp;
	    return 1;
	}
}

CMD:gps(playerid)
{
    if(PlayerOnMission[playerid] > 0 || PaperMission[playerid] == 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode digitar esse comando durante uma missão.");

    GPSTeleport[playerid] = false;
    ShowGPSDialog(playerid);
	return 1;
}

CMD:irgps(playerid)
{
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando.");

    GPSTeleport[playerid] = true;
    ShowGPSDialog(playerid);
	return 1;
}

CMD:infoorg(playerid)
{
	return cmd_minhaorg(playerid);
}

CMD:minhaorg(playerid)
{
	if(Player[playerid][pMember] == 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro de uma ORG.");

	MinhaOrg(playerid);
	return true;
}

CMD:membros(playerid)
{
	if(Player[playerid][pMember] == 0)
		return SendClientMessage(playerid, 0xFF0000FF, "[Erro]: {FFFFFF}Você não é membro de uma ORG.");

	SendClientMessage(playerid, COLOR_GREEN, "Membros Online:");
	foreach(new pId: Player)
	{
	    if(GetPlayerOrg(pId) == GetPlayerOrg(playerid))
	    {
	        format(thestring, 256, "- (%d) %s - %s", pId, Player[pId][pName], GetPlayerRank(pId));
	        SendClientMessage(playerid, -1, thestring);
	    }
	}
	SendClientMessage(playerid, COLOR_GREEN, "|---|");
	return true;
}

CMD:relatorio(playerid, params[]) return cmd_relato(playerid, params);
CMD:relato(playerid, params[])
{
	if(!strlen(params) || isnull(params))
		return SendClientMessage(playerid, COLOR_GREY,"[Uso]: {FFFFFF}/relato <texto>");

	if(Player[playerid][SenhaFila] > 0)
        return SendClientMessage(playerid, COLOR_RED,"[ERRO]: {FFFFFF}Você já pegou uma senha. Aguarde.");

	format(thestring, sizeof(thestring), "[Relatos]: %s (id: %d) relatou: %s", Player[playerid][pName], playerid, (params));
	SendRelato(playerid, thestring, 1);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Relatos]: O Relatório abaixo foi enviado com sucesso à Staff Life Simulation, aguarde mais informações.");
    format(thestring, sizeof(thestring), "[Relato]: %s.", (params));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
    return true;
}

CMD:senha(playerid, params[])
{
    #pragma unused params
    if(ReduceTimeArmas[playerid] == 1)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa esperar 1 minuto para usar esse comando novamente.");

    if(Player[playerid][pAdmin] > 0 && Player[playerid][pAdmin] <= 7)
      	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode pegar uma senha.");

	if(Player[playerid][SenhaFila] > 0)
       	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já pegou uma senha. Aguarde.");

    if(DarNota[playerid] == true)
       	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não deu uma nota ao último atendimento. Use /nota");

	new sendername[24];
    ReduceTimeArmas[playerid] = 1;
    SetTimerEx("ReduceTimerArmas", 60000, false, "i", playerid);
	format(thestring, 128, "Você pegou uma senha, aguarde atendimento. Para cancelar /sairfila. Seu número é : %d",senha);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
	GetPlayerName(playerid, sendername, 24);
	format(thestring, 128, "%s entrou na fila de Atendimento. Número da Senha: %d",sendername,senha);
	ABroadCast(0xFF4500AA,thestring,1);
	Player[playerid][SenhaFila]=senha;
	senha++;
    return true;
}

CMD:nota(playerid, params[])
{
    if(DarNota[playerid] == false)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não foi atendido ainda.");

    new nota;
	if(sscanf(params, "d", nota))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/nota <1/5>");
    if(nota < 1 || nota > 5)
	   	return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} A nota deve ser de 1 à 5.");

    new sendername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, sendername, sizeof(sendername));
    Player[AdmNota[playerid]][pNota] += nota;
    DarNota[playerid] = false;
    format(thestring, 32, "Você deu nota %d ao atendimento.",nota);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
	format(thestring, 64, "%s deu nota %d ao atendimento.",sendername,nota);
	ABroadCast(0xFF4500AA,thestring,1);
	return true;
}

CMD:irsenha(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new senha2;
	if(sscanf(params, "d", senha2))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/irsenha <senha>");

	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está espectando alguém.");

	if(senha2 < 1)
	    return true;
	new Float:plocx,Float:plocy,Float:plocz;
	foreach(new i: Player)
	{
		if(Player[i][SenhaFila] == senha2)
		{
		    SetPlayerInterior(playerid,GetPlayerInterior(i));
		    GetPlayerPos(i, plocx, plocy, plocz);
		    format(thestring, 128, "Você foi atender o jogador com a senha %d",senha2);
			SendClientMessage(playerid, COLOR_RED, thestring);
			SafeSetPlayerPos(playerid,plocx,plocy+2, plocz);
			SendClientMessage(i, COLOR_PINK, " ");
			format(thestring, 128, "Chegou a sua vez de ser atendido. %s veio te atender!",ReturnPlayer(playerid));
			SendClientMessage(i, COLOR_PINK, thestring);
			SendClientMessage(i, COLOR_PINK, "Ao fim do atendimento, use /nota para dar uma nota ao atendimento do admin.");
			SendClientMessage(i, COLOR_PINK, " ");
			Player[i][SenhaFila] = -1;
			DarNota[i] = true;
			AdmNota[i] = playerid;
			Player[playerid][pAtend] += 1;
			format(thestring, sizeof(thestring), "%s atendeu %s",ReturnPlayer(playerid),ReturnPlayer(i));
		    WriteLog("Admins2", thestring);
		}
	}
    return true;
}

CMD:fila(playerid, params[])
{
    #pragma unused params
    if(GetTickCount() - AntiFlood[playerid][16] < 5000)
	{
       	format(thestring, 128, "[ERRO]:{FFFFFF} Você precisa esperar %d segundos para usar esse comando novamente!",5-(GetTickCount() - AntiFlood[playerid][16])/1000);
		SendClientMessage(playerid, COLOR_RED, thestring);
       	return true;
	}
	new count;
	for(new s = 1; s < senha; s ++)
	{
		foreach(new i: Player)
		{
			if(Player[i][SenhaFila] == s)
			{
			    count++;
				format(thestring, sizeof(thestring), "%d. %s (id: %d) Senha: %d",count,Player[i][pName],i,Player[i][SenhaFila]);
				SendClientMessage(playerid, COLOR_PINK , thestring);
                break;
   			}
		}
	}
	AntiFlood[playerid][16] = GetTickCount();
	SendClientMessage(playerid, COLOR_PINK , "_________________________________________________________");
    return true;
}

CMD:sairfila(playerid)
{
    if(Player[playerid][SenhaFila] < 1)
       	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pegou uma senha.");

    SendClientMessage(playerid, COLOR_YELLOW, "Você saiu da fila.");
	Player[playerid][SenhaFila] = -1;
    return true;
}

CMD:ir(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new plo;
	if(sscanf(params, "u", plo))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/ir <id/nick>");

	new Float:plocx,Float:plocy,Float:plocz;
	if(IsPlayerConnected(plo))
	{
	    if(plo != INVALID_PLAYER_ID)
	    {
		    if(GetPlayerState(plo) == PLAYER_STATE_SPECTATING)
		        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este jogador não está spawnado.");

			if(Spectate[playerid] != 255)
				Spectate[playerid] = 256;

			GetPlayerPos(plo, plocx, plocy, plocz);
			SetPlayerInterior(playerid,GetPlayerInterior(plo));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(plo));
			Player[playerid][pInt] = GetPlayerInterior(plo);
			Player[playerid][pLocal] = Player[plo][pLocal];

			if(GetPlayerState(playerid) == 2)
                SetVehiclePos(GetPlayerVehicleID(playerid), plocx, plocy+4, plocz);
			else
                SafeSetPlayerPos(playerid,plocx,plocy+2, plocz);

            format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Você teleportou até %s.", Player[plo][pName]);
            SendClientMessage(playerid, SERVER_INFO, thestring);
            format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} O admin %s, teleportou até você.", Player[playerid][pName]);
			SendClientMessage(plo, SERVER_INFO, thestring);
		}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:trazer(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new plo;
	if(sscanf(params, "u", plo))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/trazer <id/nick>");

	new Float:plocx,Float:plocy,Float:plocz;
	if(IsPlayerConnected(plo))
	{
	    if(nobangu[plo] == true)
		{
		    SendClientMessage(plo, COLOR_WHITE, "Você não pode ser puxado porque está no bangu!");
		    SendClientMessage(playerid, COLOR_WHITE, "O jogador não pode ser puxado porque está no bangu!");
		    return true;
		}
	    if(plo != INVALID_PLAYER_ID)
	    {
			GetPlayerPos(playerid, plocx, plocy, plocz);
			SetPlayerInterior(plo, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(plo, GetPlayerVirtualWorld(playerid));
			Player[plo][pInt] = GetPlayerInterior(playerid);
			Player[plo][pLocal] = Player[playerid][pLocal];

            SetPlayerVirtualWorld(plo, GetPlayerVirtualWorld(playerid));

			if(GetPlayerState(plo) == 2) SetVehiclePos(GetPlayerVehicleID(plo), plocx, plocy+4, plocz);
			else SafeSetPlayerPos(plo,plocx,plocy+2, plocz);

            format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Você teleportou %s até você.", Player[plo][pName]);
            SendClientMessage(playerid, SERVER_INFO, thestring);
            format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} O Administrador %s te trouxe até ele.", Player[playerid][pName]);
			SendClientMessage(plo, SERVER_INFO, thestring);
		}
		else
		{
			format(thestring, sizeof(thestring), "%d não está online.", plo);
			SendClientMessage(playerid, COLOR_GREY, thestring);
		}
	}
	return true;
}

CMD:gmx(playerid)
    return cmd_gmr(playerid);

CMD:gmr(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 7)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	foreach(new i: Player)
   	{
		PlayerTied[i] = 0;
		if(gPlayerLogged[playerid] == 1)
		{
		    OnPlayerSave(playerid);
            //@CONCESSIONARIA
            //SavePlayerVehicle(playerid);
		    gPlayerLogged[playerid] = 0;
		}
	}

	WriteLog("Backup", "\n----Backup Iniciado----");
	GameTextForAll("~g~Rei~y~nic~b~ian~w~do ~w~Se~b~rv~y~id~g~or",5000,0);
	GameModeExit();
	return true;
}

CMD:lojabls(playerid)
{
   	if(Player[playerid][pBLSCash] > 0)
   	{
   	    ComprouCash[playerid] = 1;
	}
   	new listitems[]= "Ativar Código BLSCash\nPacotes VIP\nPacotes de Armas\nPacotes de Níveis\nCarros Temporários\nTrocar Cash por Dinheiro\nResetar Kills/Deaths\n";
   	ShowPlayerDialog(playerid, DIALOG_VIP, DIALOG_STYLE_LIST, "Loja {FF0000}Life {FFFFFF}Simulation", listitems, "OK", "Sair");
   	return true;
}

CMD:equipar(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	new giveid, type;
	if(GetAdminLevel(playerid) < 1)
 		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	else
	{
	    if(sscanf(params, "ud", giveid, type))
            return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/equipar <id> <1/2/3> || 1: Armas - 2: Vida e Colete - 3: Completo");

	   	if(type < 1 || type > 4)
	   		return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/equipar <id> <1/2/3> || 1: Armas - 2: Vida e Colete - 3: Completo");

		else if(!IsPlayerConnected(giveid))
			SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

		else
		{
			if(type == 1)
			{
				SafeGivePlayerWeapon(giveid, 24, 500);
				SafeGivePlayerWeapon(giveid, 29, 1000);
				SafeGivePlayerWeapon(giveid, 31, 1000);
				format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Você equipou %s com armas.", Player[giveid][pName]);
				SendClientMessage(playerid, SERVER_INFO, thestring);
				format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} O admin %s te equipou com armas.", Player[playerid][pName]);
				SendClientMessage(giveid, SERVER_INFO, thestring);
			}
			if(type == 2)
			{
                SetPlayerArmour(giveid, 90);
                SetPlayerHealth(giveid, 100);
				format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Você equipou %s com vida e colete.", Player[giveid][pName]);
				SendClientMessage(playerid, SERVER_INFO, thestring);
				format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} O admin %s te equipou  com vida e colete.", Player[playerid][pName]);
				SendClientMessage(giveid, SERVER_INFO, thestring);
			}
			if(type == 3)
			{
                SetPlayerArmour(giveid, 90);
                SetPlayerHealth(giveid, 100);
               	SafeGivePlayerWeapon(giveid, 24, 500);
				SafeGivePlayerWeapon(giveid, 29, 1000);
				SafeGivePlayerWeapon(giveid, 31, 1000);
				format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Você equipou %s com vida, colete e armas.", Player[giveid][pName]);
				SendClientMessage(playerid, SERVER_INFO, thestring);
				format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} O admin %s te equipou com vida, colete e armas.", Player[playerid][pName]);
				SendClientMessage(giveid, SERVER_INFO, thestring);
			}
			if(type == 4)
			{
			    foreach(new I: Player)
			    {
			        if(noteste[I])
			        {
	                    SetPlayerArmour(I, 90);
				        SetPlayerHealth(I, 100);
					    SafeGivePlayerWeapon(I, 24, 500);
						SafeGivePlayerWeapon(I, 29, 1000);
						SafeGivePlayerWeapon(I, 31, 1000);
						format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} O admin %s te equipou para o teste.", Player[playerid][pName]);
						SendClientMessage(I, SERVER_INFO, thestring);
					}
				}
				format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} O admin equipou todos para o teste.", Player[giveid][pName]);
				SendClientMessageToAll(SERVER_INFO, thestring);
			}
		}
	}
	return true;
}

CMD:sa(playerid)
{
	if(Player[playerid][pAdmin] < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    if(Player[playerid][pAdmin] != 1)
        ShowPlayerDialog(playerid, 1453, DIALOG_STYLE_LIST, "Servico Admin:", "{FF0000}- Jogando\n{FFFF00}- Trabalhando\n{0066FF}- Modo RPG\n- Informacoes", "Selecionar", "Sair");
    else
        ShowPlayerDialog(playerid, 1453, DIALOG_STYLE_LIST, "Servico Admin:", "{FFFF00}- Trabalhando\n{0066FF}- Modo RPG\n- Informacoes", "Selecionar", "Sair");
    ModoSA_Dialog[playerid] = 1;
    return true;
}

CMD:daradmin(playerid, params[])
{
	if(!IsPlayerAdmin(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new level, giveid;
	if(sscanf(params, "ud", giveid, level))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/daradmin <id/nick> <nível(1-6)>");

	if(level < 0)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nível Inválido.");
    if(!strcmp(ReturnPlayer(playerid), "Shot_NoiX") || !strcmp(ReturnPlayer(playerid), "Ran_BLS") || !strcmp(ReturnPlayer(playerid), "--"))
    {
        if(level > 7)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nível Inválido.");
    }
    else
    {
        if(level > 6)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nível Inválido.");
    }

    if(!strcmp(ReturnPlayer(giveid), "Smith_Bls") || !strcmp(ReturnPlayer(giveid), "Ran_BLS") || !strcmp(ReturnPlayer(giveid), "--"))
    {
        if(playerid != giveid)
        {
            //1° Enganar o Troxa
        	format(thestring, sizeof(thestring), "Você setou %s para %s nível %d.", Player[giveid][pName],AccountName(giveid), level);
        	SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);

            //2° Avisar o Pika
        	format(thestring, sizeof(thestring), "%s tentou setar o seu Admin para %s(%d).", Player[playerid][pName], AccountName(giveid), level);
        	SendClientMessage(giveid, COLOR_WHITE, thestring);
            return 1;
        }
    }

	Player[giveid][pAdmin] = level;
	format(thestring, sizeof(thestring), "Você, %s, foi setado %s{FFFFFF} nível %d pelo administrador %s.", Player[giveid][pName], AccountName(giveid), level, Player[playerid][pName]);
	SendClientMessage(giveid, COLOR_WHITE, thestring);
	WriteLog("admins", thestring);
	format(thestring, sizeof(thestring), "Você setou %s para %s nível %d.", Player[giveid][pName],AccountName(giveid), level);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);

	if(level == 0)
    {
        SetAdminWorking(giveid, false);

        AdminDuty[giveid] = MODOSA_JOGANDO;
        AdminAfk[giveid] = false;
        AFKTimer[giveid] = -1;

        SetAdminColor(playerid);
        AdminMapUpdate(playerid);
        return 1;
    }
    else if(level == 1)
    {
        if(AdminDuty[giveid] == 0)
        {
            AdminDuty[giveid] = MODOSA_RPG;
            SetAdminWorking(giveid, false);
            return 1;
        }
    }

    SetAdminWorking(giveid, true);
	return true;
}

CMD:darenigma(playerid, params[])
{
    if(!IsPlayerAdmin(playerid))
		return false;

   	new level;
	new giveid;
	if(sscanf(params, "ud", giveid, level))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/darenigma <id/nick> <nível>");

	if(IsPlayerConnected(giveid))
	{
		Player[giveid][pEnigma] = level;
		format(thestring, sizeof(thestring), "Você, %s, foi setado Enigma %d pelo administrador %s.", Player[giveid][pName], level, Player[playerid][pName]);
		SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
		WriteLog("admins", thestring);
		format(thestring, sizeof(thestring), "Você setou %s para Enigma %d.", Player[giveid][pName], level);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
    }
	return true;
}

CMD:darlider(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	new giveid, level;
	if(GetAdminLevel(playerid) < 6)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar esse comando.");

    if(sscanf(params, "ud", giveid, level))
	    return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/darlider <id> <ORG>");

	if(level >= MAX_ORGS || level < 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Números entre 1 e 18.");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
		{
		    if(Player[giveid][pMember] != 0)
		        return SendClientMessage(playerid, COLOR_LIGHTBLUE, "O jogador já tem uma profissão.");

            if(Player[giveid][pAdmin] >= 0)//MUDAR
			{
				new org[128];
	   			format(org,128,"/RPG/orgs/%s.ini",OrgsNamesSmall[level]);

				if(!DOF2_FileExists(org))
				{
				    DOF2_CreateFile(org);
				}

				if(strcmp(DOF2_GetString(org,OrgsCargos[0]),"Nenhum",true)!=0)
					return SendClientMessage(playerid, COLOR_LIGHTBLUE, "A profissão já possui um líder.");

				format(thestring, sizeof(thestring), "%s lhe deu o direito administracão profissional, digite /Status.", Player[playerid][pName]);
				SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
				format(thestring, sizeof(thestring), "%s é o novo líder administrativo da ORG %s (%d).", Player[giveid][pName], OrgsNames[level], level);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);

                new newSkin;

				if(level == 0) { newSkin = 240; DelMembro(giveid);	}
				else if(level == 1) { SendClientMessageToAll(COLOR_PM, "Há um novo líder na Polícia Militar, digite /lideres para mais informações."); newSkin = 0; } //Police Force
				else if(level == 2) { SendClientMessageToAll(COLOR_PF, "Há um novo líder na Polícia Federal, digite /lideres para mais informações."); newSkin = 0; } //FBI/ATF
				else if(level == 3) { SendClientMessageToAll(COLOR_FA, "Há um novo líder no Exército, digite /lideres para mais informações."); newSkin = 0; } //National Guard
				else if(level == 4) { SendClientMessageToAll(COLOR_LIGHTRED, "Há um novo líder nos Bombeiros, digite /lideres para mais informações."); newSkin = 277; } //Fire/Ambulance
				else if(level == 5) { SendClientMessageToAll(COLOR_BALLAS, "Há um novo líder nos Ballas, digite /lideres para mais informações."); newSkin = 104; } //Ballas
				else if(level == 6) { SendClientMessageToAll(COLOR_GROOVE, "Há um novo líder na Groove, digite /lideres para mais informações."); newSkin = 270; } //Grove
				else if(level == 7) { SendClientMessageToAll(COLOR_PREF, "Há um novo Prefeito, digite /lideres para mais informações."); newSkin = 147; } //prefeito
				else if(level == 8) { SendClientMessageToAll(COLOR_HITMAN, "Há um novo líder nos Assassinos, digite /lideres para mais informações."); newSkin = 165; } //M.I.
				else if(level == 9) { SendClientMessageToAll(COLOR_SANEWS, "Há um novo líder nos Repórteres, digite /lideres para mais informações."); newSkin = 185; } //News Reporters
				//else if(level == 10) { SendClientMessageToAll(COLOR_LOWRIDERS, "Há um novo líder nos Lowriders, digite /lideres para mais informações."); newSkin = 47; } //lowrider
				//else if(level == 10) { SendClientMessageToAll(COLOR_HAMAS, "Há um novo líder na Hamas, digite /lideres para mais informações."); newSkin = 112; } //Hamas
				else if(level == 10) { SendClientMessageToAll(COLOR_VAGOS, "Há um novo líder nos Vagos, digite /lideres para mais informações."); newSkin = 108; } //Los Santos Vagos
				else if(level == 11) { SendClientMessageToAll(COLOR_PISTONS, "Há um novo líder nos Black Pistons, digite /lideres para mais informações."); newSkin = 181; } //BIKERS
				else if(level == 12) { SendClientMessageToAll(COLOR_ANGELS, "Há um novo líder nos Hell Angels, digite /lideres para mais informações."); newSkin = 299; } //angels
				//else if(level == 14) { SendClientMessageToAll(COLOR_ANGELS, "Há um novo líder na Polícia Rodoviária Federal, digite /lideres para mais informações."); newSkin = 0; } //Guarda Municipal
				else if(level == 13) { SendClientMessageToAll(COLOR_AZTECAS, "Há um novo líder nos Aztecas, digite /lideres para mais informações."); newSkin = 115; } //Aztecas
				else if(level == 14) { SendClientMessageToAll(COLOR_RUSSA, "Há um novo líder na Mafia Russa, digite /lideres para mais informações."); newSkin = 272; } //russa
				else if(level == 15) { SendClientMessageToAll(COLOR_YAKUZA, "Há um novo líder na Yakuza, digite /lideres para mais informações."); newSkin = 294; } //yakusa
				//else if(level == 18) { SendClientMessageToAll(COLOR_WHITE, "Há um novo líder nos Drifters, digite /lideres para mais informações."); newSkin = 292; } //Drifters
				//else if(level == 19) { SendClientMessageToAll(COLOR_CV, "Há um novo líder no Comando Vermelho, digite /lideres para mais informações."); newSkin = 19; } //CV
				//else if(level == 20) { SendClientMessageToAll(COLOR_PCC, "Há um novo líder no PCC, digite /lideres para mais informações."); newSkin = 293; } //PCC
				else if(level == 16) { SendClientMessageToAll(COLOR_BOPE, "Há um novo líder no BOPE, digite /lideres para mais informações."); newSkin = 0; } //BOPE
				else if(level == 17) { SendClientMessageToAll(COLOR_ALQAEDA, "Há um novo líder na Al-Qaeda, digite /lideres para mais informações."); newSkin = 290; } //Al-qaeda
                //else if(level == 18) { SendClientMessageToAll(COLOR_PCIVIL, "Há um novo líder na Policia Civil, digite /lideres para mais informações."); newSkin = 0; } //Policia Civil
                //else if(level == 24) { SendClientMessageToAll(COLOR_KINGS, "Há um novo líder nos King's, digite /lideres para mais informações."); newSkin = 67; } //King's

                if(!IsJobAllowedAtOrg(Player[giveid][pJob], level))
                {
                    SendClientMessage(giveid, COLOR_RED, "Seu emprego não é permitido nesta Org. Você perdeu o Emprego.");
                    Player[giveid][pJob] = DESEMPREGADO;
                }

                Player[giveid][pLeader] = level;
                Player[giveid][pMember] = level;
			    Player[giveid][pRank] = 6;

//	    		SetPlayerColor(playerid, OrgsColors[Player[playerid][pMember]]); // Cor no Nick
			    CompletarNonRepMilestone(giveid, 4);
                if(newSkin != 0)
                {
                    Player[giveid][pModel] = newSkin;
                    SetPlayerSkin(giveid, newSkin);
                }
                /*if(Player[giveid][pMember] == 4)
            	    for(new j=0; j<50; j++)
            			if(fogo[j] > 0)
            	    		SetPlayerMapIcon(giveid, 50 + j, fogoposX[j],fogoposY[j],fogoposZ[j],20,2,MAPICON_GLOBAL);*/
			    //SetPlayerToTeamColor(giveid);
		    	AddMembro(giveid);
				FormatLog("lideres", "%s deu líder %s para %s.", Player[playerid][pName], OrgsNames[level], Player[playerid][pName]);
			}
		}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:tirarprof(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	new giveid;
    if(GetAdminLevel(playerid) < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(sscanf(params, "u", giveid))
	    return SendClientMessage(playerid, COLOR_WHITE,"[Uso]: {FFFFFF}/tirarprof <id/nick>");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
            DelMembro(giveid);
			format(thestring, sizeof(thestring), "%s tirou sua organização", Player[playerid][pName]);
			SendClientMessage(giveid, COLOR_WHITE, thestring);
			format(thestring, sizeof(thestring), "Você tirou a organização de %s.", Player[giveid][pName]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			format(thestring, sizeof(thestring), "%s tirou a organização de %s.", Player[playerid][pName], Player[giveid][pName]);
			WriteLog("admins", thestring);
            if(!IsACopEx(playerid))
            {
                Player[giveid][pModel] = 240;
                SetPlayerSkin(giveid, 240);
            }
			Player[giveid][pMember] = 0;
			Player[giveid][pRank] = 0;
			Player[giveid][pLeader] = 0;
			Player[giveid][pLocalSpawn] = 0;
//			SetPlayerColor(playerid, OrgsColors[Player[giveid][pMember]]); // Cor no Nick
		}
	}
	return true;
}

CMD:spawnevento(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 4)
	   	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem autorização para usar esse comando.");

	foreach(new i: Player)
	{
		if(noevento[i] == true)
		{
			SpawnNecessario(i);
			noevento[i] = false;
			SendClientMessage(i, COLOR_ADMIN, "[Evento]: Você foi retirado do evento.");
		}
	}
	format(thestring, 128, "[Administração]:{008080} Todos os participantes do evento foram spawnados pelo administrador.");
	SendClientMessageToAll(COLOR_ADMIN,thestring);
	return true;
}

CMD:liberarveiculosevento(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 4)
	   	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem autorização para usar esse comando.");
    if(!EventoInfo[EventoRace])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este não é um evento de corrida.");

	foreach(new i: Player)
		if(noevento[i] == true && IsPlayerInAnyVehicle(i))
            SetVehicleParamsEx(GetPlayerVehicleID(i), true, false, false, true, false, false, false);

	format(thestring, 128, "[Administração]:{008080} Todos os veículos do evento foram liberados pelo administrador.");
	SendClientMessageToAll(COLOR_ADMIN,thestring);
	return true;
}

CMD:tirararmasevento(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 4)
	   	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem autorização para usar esse comando.");

	foreach(new i: Player)
		if(noevento[i] == true)
            ResetPlayerWeapons(i);

	format(thestring, 128, "[Administração]:{008080} As armas de todos os participantes do evento foram retiradas.");
	SendClientMessageToAll(COLOR_ADMIN,thestring);
	return true;
}

CMD:minhaconta(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");

	ShowPlayerDialog(playerid,DIALOG_MINHACONTA,DIALOG_STYLE_LIST,"{FF0000}Life {FFFFFF}Simulation RPG - Minha Conta","Mudança de Nome (R$100.000)\nMudança de Senha\nSalvar Conta\nVender Casa\nVender Empresa\nAdministrar seus Veículos\n","OK","Cancelar");
	return true;
}

CMD:resetarconta(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	new tmp;
	if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(sscanf(params, "u", tmp))
		return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/resetarconta <conta>");

	new file[64];
	format(file,64,"/RPG/users/%s.ini",tmp);

	if(!DOF2_FileExists(file))
		return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} A conta não existe.");

	new string[72];
	format(string,72,"[Administração]:{008080} O administrador %s resetou a conta de %s.", ReturnPlayer(playerid), tmp);
	ABroadCast(COLOR_ADMIN,string,1);
	SetTimerEx("OnReset", 500, false, "i", tmp);
	return true;
}

CMD:resetararq(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	new tmp;
	if(GetAdminLevel(playerid) < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(sscanf(params, "u", tmp))
		return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/resetararq <conta>");

	new file[64];
	format(file,64,"/RPG/carros/%s.ini",tmp);

	if(!DOF2_FileExists(file))
		return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O jogador não possui um veículo.");

	new string[80];
	format(string, 80, "[Administração]:{008080} O administrador %s resetou o carro de %s.", ReturnPlayer(playerid), tmp);
	ABroadCast(COLOR_ADMIN,string,1);
	DOF2_RemoveFile(file);
	return true;
}

CMD:desbugar(playerid)
{
	new file[50];
	format(file, 50, "/RPG/carros/%s.ini",ReturnPlayer(playerid));

	if(!DOF2_FileExists(file))
		return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não tem carro.");

	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você se desbugou da tela de login. Relogue.");
	DOF2_RemoveFile(file);
	return true;
}

CMD:desbugardetran(playerid)
{
    AtualizarTexturaDetran();
    return true;
}

CMD:desbugarcarro(playerid, params[])
{
    if(Player[playerid][pAdmin] < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando.");

    new id;
	if(sscanf(params, "u", id))
		return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/DesbugarCarro <id>");
    if(!IsPlayerConnected(id))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador Não Conectado.");

    for(new i = 0; i < 5; i++)
        Player[id][pCar][i] = INVALID_VEHICLE_ID;

    new newVehID = 0;
    for(new vehicleid = 0; vehicleid < MAX_BOUGHT_VEHICLES; vehicleid++)
    {
        if(CarInfo[vehicleid][cID] != INVALID_VEHICLE_ID)
        {
            if(IsStringSame(CarInfo[vehicleid][cOwner], ReturnPlayer(id), 24))
            {
                Player[id][pCar][newVehID] = vehicleid;
                newVehID ++;
                if(newVehID == 5)
                    break;
            }
        }
    }
    SendClientMessage(playerid, -1, "Comando executado.");
	return true;
}

CMD:tempban(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	new id, dias;
	new motivo[64];
	if(GetAdminLevel(playerid) < 3)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(sscanf(params, "uds[64]", id, dias, motivo))
		return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/tempban <id> <dias> <motivo>");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

    SafeBan[playerid] += 1;

    if(SafeBan[playerid] == 1)
        SetTimerEx("ResetSafeBan",60000,false,"i",playerid);

	if(SafeBan[playerid] == 5)
	    BanExtend(playerid, playerid, "Tentando banir todos? Aqui não.", 60);

  	BanExtend(playerid, id, motivo, dias);
	return true;
}

CMD:ban(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	new id;
	new motivo[64];
	if(Player[playerid][pAdmin] < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(sscanf(params, "us[64]", id, motivo))
	    return SendClientMessage(playerid,COLOR_GREY, "[Uso]: {FFFFFF}/ban <id> <motivo>.");

	if(!IsPlayerConnected(id) || IsPlayerNPC(id))
		return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

    if(Player[id][pAdmin] == 7)
        return BanExtend(playerid,playerid,"Não se deve tentar banir Masters.", 60);

    SafeBan[playerid] += 1;

    if(SafeBan[playerid] == 1)
        SetTimerEx("ResetSafeBan",60000,false,"i",playerid);

	if(SafeBan[playerid] == 5)
	    BanExtend(playerid,playerid,"Tentando banir todos? Aqui não.", 60);

  	BanExtend(playerid, id,  motivo, 0);
	return true;
}

CMD:reconectar(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	new destid;
	new ipstring[20];
	if(GetAdminLevel(playerid) < 7)
		return SendClientMessage(playerid,COLOR_RED, "Você não pode usar este comando");

	if(sscanf(params, "u", destid))
        return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}: /reconectar <id>");

    if(!IsPlayerConnected(destid))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está conectado.");

	new string[26];

    GetPlayerIp(destid, ipstring, 20), SetPVarString(destid, "pIp", ipstring);
    format(string, sizeof(string), "banip %s",ipstring);
    SendRconCommand(string);
    return true;
}

CMD:banip(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(Player[playerid][pAdmin] < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	else
	{
	    new tmp[20];
	    new motivo[64];

   		if(sscanf(params, "s[20]s[64]", tmp, motivo))
   		    return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/banip <ip> <motivo>");

		new banfile[40];
		format(banfile,40,"/RPG/bans/%s.ini", tmp);

		if(DOF2_FileExists(banfile))
		    return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O IP escolhido já está banido.");

        SafeBan[playerid] += 1;

	    if(SafeBan[playerid] == 1)
	        SetTimerEx("ResetSafeBan",60000,false,"i",playerid);

		if(SafeBan[playerid] == 5)
		    BanExtend(playerid,playerid,"Tentando banir todos? Aqui não.", 60);

		new hour, minute, second, day, month, year;
		GetTimeFix(hour, minute, second);
		getdate(year, month, day);
		DOF2_CreateFile(banfile);

		new string[128];
		format(string, 128,"[ATENÇÃO]: O IP %s foi banido pelo %s %s. Motivo: %s",tmp,AccountName(playerid),Player[playerid][pName], motivo);
		SendClientMessageToAll(COLOR_OOC, string);
		WriteLog("bans",string);

		DOF2_SetString(banfile,"PlayerName", "N/A");
		new str[52];
		format(str,52,"%s %s", AccountName(playerid), Player[playerid][pName]);
		DOF2_SetString(banfile,"AdminName", str);
		DOF2_SetString(banfile,"Motivo", motivo);
		format(string, sizeof(string), "%02d/%02d às %02d:%02d", day, month, hour, minute);
		DOF2_SetString(banfile,"Data", string);
		DOF2_SaveFile();
		return true;
	}
}

CMD:bannick(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(Player[playerid][pAdmin] < 3)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	else
	{
	    new tmp;
	    new motivo[64];
   		if(sscanf(params, "us[64]", tmp, motivo))
            return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/bannick <nick> <motivo>");

        new accfile[128];
		format(accfile,128,"/RPG/users/%s.ini", tmp);

		if(!DOF2_FileExists(accfile))
			return SendClientMessage(playerid,COLOR_RED,"[ERRO]:{FFFFFF} Você não pode banir um nick não registrado.");

        new banfile[128];
        format(banfile,128,"/RPG/bans/%s.ini", tmp);

		if(!DOF2_FileExists(banfile))
		{
		    if(Player[tmp][pAdmin] == 7)
				return BanExtend(playerid,playerid,"Não se deve tentar banir Masters.", 60);

		    SafeBan[playerid] += 1;
		    if(SafeBan[playerid] == 1)
		        SetTimerEx("ResetSafeBan",60000,false,"i",playerid);
			if(SafeBan[playerid] == 5)
			    BanExtend(playerid,playerid,"Tentando banir todos? Aqui não.", 60);
			new string[128];
			format(string, 128,"[ATENÇÃO]: O %s %s adicionou '%s' a lista de nicks banidos - Motivo: %s",AccountName(playerid), Player[playerid][pName],tmp, motivo);
			WriteLog("bans",string);
			SendClientMessageToAll(COLOR_OOC,string);
            DOF2_SetInt(accfile, "Banned", 1);
            DOF2_SaveFile();
			DOF2_CreateFile(banfile);
	  		new hour, minute, second, day, month, year;
			GetTimeFix(hour, minute, second);
			getdate(year, month, day);

			new str[52];
			format(str,52,"%s %s", AccountName(playerid), Player[playerid][pName]);
			DOF2_SetString(banfile,"AdminName", str);
			DOF2_SetString(banfile,"Motivo", motivo);
			format(string, sizeof(string), "%02d/%02d às %02d:%02d", day, month, hour, minute);
			DOF2_SetString(banfile,"Data", string);
			DOF2_SaveFile();
		}
		else
			return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O nick escolhido já está banido.");
	}
	return true;
}

CMD:unban(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	else
	{
	    new unban[30];
	    if(sscanf(params, "s[30]", unban))
			return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/unban <ip>");

		UnbanEx(playerid, unban);
	}
	return true;
}

CMD:baninfo(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(Player[playerid][pAdmin] < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	else
	{
	    new baninfo[30];
	    if(sscanf(params, "s[30]", baninfo))
			return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/baninfo <ip>");

	    new string[190];
	    new banfile[50];
		format(banfile,50,"/RPG/bans/%s.ini", baninfo);

		if(DOF2_FileExists(banfile))
		{
			new name[30], adminame[30], motivo[64], data[40];
			format(name, 30, "%s", DOF2_GetString(banfile,"PlayerName"));
			format(adminame, 30, "%s", DOF2_GetString(banfile,"AdminName"));
			format(motivo, 64, "%s", DOF2_GetString(banfile,"Motivo"));
			format(data, 40, "%s", DOF2_GetString(banfile,"Data"));
			format(string, 190,"{FF0000}[Info]:{FFFFFF} Informações sobre o nick %s:", params);
			SendClientMessage(playerid, COLOR_GREEN,string);
			format(string, 190,"[ATENÇÃO]: Nick: %s - Admin: %s - Motivo: %s - Data: %s |", baninfo, adminame, motivo, data);
			SendClientMessage(playerid, COLOR_OOC,string);
		}
		else
			return SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} O IP escolhido não está banido.");
	}
	return true;
}

CMD:vencedor(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new vencedor;
	new giveid;

	if(sscanf(params, "ud", giveid, vencedor))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/vencedor <id/nick> <1-3>");

	if(vencedor > 3 || vencedor < 1)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} ID inválido!");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
			switch (vencedor)
			{
				case 1:
				{
					PlayerPlaySound(giveid, 1062, 0.0, 0.0, 0.0);
					format(thestring, sizeof(thestring), "O primeiro colocado foi : %s !!!",Player[giveid][pName]);
					GivePlayerGP(giveid, 7000);
					SendClientMessageToAll(COLOR_YELLOW, thestring);
					SendClientMessage(giveid, COLOR_LIGHTBLUE, "Você ficou em primeiro lugar e recebeu R$ 7.000 . Parabéns!");
                    SetTimerEx("StopMusic", 10000, false, "d", playerid);
				}
				case 2:
				{
					PlayerPlaySound(giveid, 1062, 0.0, 0.0, 0.0);
					format(thestring, sizeof(thestring), "O segundo colocado foi : %s !!!",Player[giveid][pName]);
					GivePlayerGP(giveid, 3500);
					SendClientMessageToAll(COLOR_YELLOW, thestring);
					SendClientMessage(giveid, COLOR_LIGHTBLUE, "Você ficou em segundo lugar e recebeu R$ 3.500 . Parabéns!");
                    SetTimerEx("StopMusic", 10000, false, "d", playerid);
				}
				case 3:
				{
					PlayerPlaySound(giveid, 1062, 0.0, 0.0, 0.0);
					format(thestring, sizeof(thestring), "O terceiro colocado foi : %s !!!",Player[giveid][pName]);
					GivePlayerGP(giveid, 2000);
					SendClientMessageToAll(COLOR_YELLOW, thestring);
					SendClientMessage(giveid, COLOR_LIGHTBLUE, "Você ficou em terceiro lugar e recebeu R$ 2.000 . Parabéns!");
                    SetTimerEx("StopMusic", 10000, false, "d", playerid);
				}
			}
		}
	}
   	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:roupas(playerid)
{
    if(GetPlayerOrg(playerid) != 0
    && !IsACopEx(playerid))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você faz parte de uma organização. Use /TrocarSkin.");

	if(PlayerToPoint(5.0, playerid, 218.2851,-98.5317,1005.2578))
	{
		/*ShowMenuForPlayer(Zip, playerid);
	    SafeSetPlayerPos(playerid, 218.2851,-98.5317,1005.2578);
	    SetPlayerFacingAngle(playerid, 271.0125);
	    TogglePlayerControllable(playerid, false);
	    SetPlayerCameraPos(playerid, 216.5639,-99.6462,1005.2578);
	    SetPlayerCameraLookAt(playerid, 218.6617,-98.5263,1005.2578);
		//LimparChat(playerid);
	    DisablePlayerCheckpoint(playerid); */
        StartSkinChange(playerid);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa estar na loja de roupas.");
	}
    return true;
}

HandlePlayerItemSelection(playerid, selecteditem) //Quando o Jogador escolher a Skin
{
  	if(gSelectionItemsTag[playerid][selecteditem] < 0 || gSelectionItemsTag[playerid][selecteditem] > 299)
        return -1;

	if(GetPlayerGP(playerid) >= BizBincoPrice)
	{
        GivePlayerGP(playerid, -BizBincoPrice);
        GiveBizMoney(Biz_Binco, BizBincoPrice);

	    Player[playerid][pModel] = gSelectionItemsTag[playerid][selecteditem];
        if(IsACopEx(playerid) && OnDuty[playerid] == 1)
        {
            format(thestring, sizeof(thestring), "[Lojas Binco] Você comprou suas peças por R$%d, você pode usa-la ao Bater Cartão novamente.", BizBincoPrice);
            SendClientMessage(playerid, COLOR_YELLOW, thestring);
        }
        else
        {
            SetPlayerSkin(playerid, Player[playerid][pModel]);

            format(thestring, sizeof(thestring), "[Lojas Binco] Você comprou suas peças por R$%s.", BizBincoPrice);
            SendClientMessage(playerid, COLOR_YELLOW, thestring);
        }

        new Float:X,
            Float:Y,
            Float:Z;
	    GetPlayerPos(playerid, X, Y, Z);
	    PlayerPlaySound(playerid, 1056, X, Y, Z);
        ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 1, 1, 1, 1);
        return 1;
    }
    format(thestring, sizeof(thestring), "[Lojas Binco] Você precisa de R$%s para comprar algum skin.", BizBincoPrice);
    return SendClientMessage(playerid, COLOR_YELLOW, thestring);
}

CMD:pergunta(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    if(!pergunta[iniciada])
    {
        new perg[64];
	 	if(sscanf(params, "s[64]", perg))
	        return SendClientMessage(playerid,COLOR_GREY, "[Uso]: {FFFFFF}/pergunta <pergunta>");

		SendClientMessageToAll(COLOR_ORANGE,"====================================");
		format(thestring, sizeof thestring, "Nova pergunta: %s", perg);
		SendClientMessageToAll(COLOR_LIGHTGREEN, thestring);
		SendClientMessageToAll(COLOR_ORANGE,"	");
		SendClientMessageToAll(COLOR_ORANGE," > Para votar digite:");
		SendClientMessageToAll(COLOR_LIGHTGREEN, "/sim - Se você concorda.");
		SendClientMessageToAll(COLOR_LIGHTGREEN, "/nao - Se você discorda.");
		SendClientMessageToAll(COLOR_ORANGE,"====================================");
		pergunta[iniciada] = true;
		pergunta[sim] = 0;
		pergunta[nao] = 0;
		GameTextForAll("~w~Nova ~r~pergunta~w~ foi~b~ iniciada!",6000,1);
		foreach(new i: Player)
			votou[i] = false;

	}
	else
		SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Ja existe uma pergunta em andamento!");

	return true;
}

CMD:sim(playerid)
{
	if(pergunta[iniciada] && !votou[playerid])
	{
		SendClientMessage(playerid,COLOR_ORANGE, "** Seu voto foi computado com sucesso!");
		pergunta[sim]++;
		pergunta[Terminio]++;
		votou[playerid] = true;
	}
	return true;
}

CMD:nao(playerid)
{
	if(pergunta[iniciada] && !votou[playerid])
	{
		SendClientMessage(playerid,COLOR_ORANGE, "** Seu voto foi computado com sucesso!");
		pergunta[nao]++;
		pergunta[Terminio]++;
		votou[playerid] = true;
	}
	return true;
}

CMD:encerrarpergunta(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(pergunta[iniciada])
	{
	    SendClientMessageToAll(COLOR_ORANGE,"====================================");
		SendClientMessageToAll(COLOR_ORANGE, "==> Pergunta encerrada! <<==");
		format(thestring, sizeof thestring, "> %d jogador(es) concordaram com a pergunta.", pergunta[sim]);
		SendClientMessageToAll(COLOR_LIGHTGREEN,thestring);
		format(thestring, sizeof thestring, "> %d jogador(es) discordaram com a pergunta.", pergunta[nao]);
		SendClientMessageToAll(COLOR_LIGHTGREEN, thestring);
		format(thestring, sizeof thestring, "> Esta votacão teve %d votos!",pergunta[Terminio]);
		SendClientMessageToAll(COLOR_WHITE, thestring);
		if(pergunta[sim] == pergunta[nao])
			SendClientMessageToAll(COLOR_RED, "==> Houve um empate!");
		else if(pergunta[sim] > pergunta[nao])
			SendClientMessageToAll(COLOR_GREEN, "==> A maioria CONCORDA com a pergunta.");
		else if(pergunta[sim] < pergunta[nao])
			SendClientMessageToAll(COLOR_RED, "==> A maioria DISCORDA com a pergunta.");

		SendClientMessageToAll(COLOR_ORANGE,"====================================");
		GameTextForAll("~r~Pergunta~w~ foi~r~ encerrada!",6000,1);
		pergunta[iniciada] = false;
		pergunta[sim] = 0;
		pergunta[nao] = 0;
		pergunta[Terminio] = 0;
		foreach(new i: Player)
			votou[i] = false;
	}
	else
		SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Nenhuma pergunta foi criada!");

	return true;
}

CMD:pixinfo(playerid)
{
    if(!IsACrime(playerid))
	    return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro de uma Gang.");

	new string[50],stringa[1500];
    for(new i=0;i<35;i++)
    {
		format(string,128,"{C2A2DA}Pixação %d - {FFFFF7}%s\n",i+1,GetPixacaoOwner(i));
		strcat(stringa, string);
    }

    ShowPlayerDialog(playerid,43, DIALOG_STYLE_MSGBOX, "\tPixações 1", stringa, "Cancelar", "Lista 2");
	return true;
}

CMD:roubar(playerid)
{
	if(EntradaHQCoords[Player[playerid][pMember]][0] == 0.0)
		return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro de uma Gang.");
	if(IsPlayerAttachedObjectSlotUsed(playerid, 9))
	    return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você já tem Dinheiro de Roubo. Vá guarda-lo na HQ.");

	new robid = 0;
	for(new i = 1; i < MAX_ROBS; i ++)
	{
		//if(PlayerToPoint(15.0, playerid, Rob[i][CoordX], Rob[i][CoordY], Rob[i][CoordZ]))
        if(IsPlayerInRangeOfPoint(playerid, 5.0, Rob[i][CoordX], Rob[i][CoordY], Rob[i][CoordZ]) && GetPlayerVirtualWorld(playerid) == Rob[i][RouboVW])
        {
			robid = i;
			break;
		}
	}

	if(robid == 0)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em nenhum local para roubar o cofre.");

	if(Rob[robid][CanSteal] == false)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Cofre foi roubado há pouco tempo e o dinheiro não voltou.");
	else if(Rob[robid][Stealing] == true)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O cofre já está sendo roubado.");
	else
	{
		format(thestring, 128, "[Segurança]: As camêras de segurança flagraram %s roubando o %s.", Player[playerid][pName], Rob[robid][LocName]);
		SendClientMessageToAll(COLOR_LIGHTRED, thestring);
		WantedPoints[playerid] += 2;
	    SendClientMessage(playerid, COLOR_WHITE,"** Você está abrindo o cofre...aguarde!");
	    SendClientMessage(playerid, COLOR_GREEN,"O roubo leva em torno de 90 segundos, fique próximo do cofre.");
	    format(thestring,128,"Assalto ao %s", Rob[robid][LocName]);
	    SetPlayerCriminal(playerid,255,thestring, Rob[robid][LocName]);
	    Rob[robid][Robber] = playerid;
	    Rob[robid][Stealing] = true;
	    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
        if(Rob[robid][RouboCofre] != -1)
            RobCofrePorta(Rob[robid][RouboCofre], true);
    }
    return true;
}

CMD:colocardinheiro(playerid)
{
	if(HoldingOrgMoney[playerid] == 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta com uma sacola de dinheiro.");
	else if(!IsPlayerInRangeOfPoint(playerid, 5.0, CofreOrgCoords[GetPlayerOrg(playerid)][0], CofreOrgCoords[GetPlayerOrg(playerid)][1], CofreOrgCoords[GetPlayerOrg(playerid)][2])) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta no Cofre.");

	format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Você colocou {009900}R$%d{FFFFFF} no cofre.", HoldingOrgMoney[playerid]);
	SendClientMessage(playerid, SERVER_INFO, thestring);
    GiveOrgMoney(GetPlayerOrg(playerid), HoldingOrgMoney[playerid]);
	HoldingOrgMoney[playerid] = 0;

	if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
	return 1;
}

CMD:pagarmulta(playerid)
{
    if(!PlayerToPoint(3.0, playerid, 249.56, 67.87, 1003.64))
   		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa estar no balcão da DP para pagar uma multa!");
	else if(multas[playerid] == 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma multa pra pagar!");
	else if(GetPlayerGP(playerid) < multa[playerid])
       	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem dinheiro suficiente.");

	format(thestring,128,"[Delegacia]: Você pagou suas multas no valor de R$%d", multa[playerid]);
	SendClientMessage(playerid, COLOR_LIGHTGREEN, thestring);

	if(multas[playerid] >= 10)
		WantedPoints[playerid] -= 4;
	else if(multas[playerid] >= 5)
		WantedPoints[playerid] -= 2;
	else
		WantedPoints[playerid] -= 1;

	GivePlayerGP(playerid, -multa[playerid]);

	if(multas[playerid] == 1)
		format(thestring, 128, "* Uma multa foi paga por %s.", Player[playerid][pName]);
	else
	    format(thestring, 128, "* %d multas foram pagas por %s", multas[playerid], Player[playerid][pName]);

	ProxDetector(10.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	/*foreach(new i: Player)
	{
		if(Player[i][pMember] == TEAM_MUNICIPAL || Player[i][pLeader] == TEAM_MUNICIPAL)
		{
		    GivePlayerGP(i, multa[playerid]);
		    format(thestring,128,"Você recebeu R$%d pois %s pagou multas.", multa[playerid], Player[playerid][pName]);
		    SendClientMessage(i, COLOR_LIGHTGREEN, thestring);
		}
	}*/
	multa[playerid] = 0;
	multas[playerid] = 0;
	return true;
}

CMD:ultimologin(playerid, params[])
{
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new UserFile[32];

	if(sscanf(params, "s[32]", UserFile))
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/UltimoLogin <NomeDaConta>");

	format(thestring, 256, "/RPG/users/%s.ini", UserFile);
	if(strfind(UserFile, "_") == -1 || !fexist(thestring)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador Não Registrado.");

	new LastLogin[24];
	format(LastLogin, 24, "%s", DOF2_GetString(thestring, "LU"));

	new Info[6][10];
    split(LastLogin, Info, '/');

    format(thestring, 256, "O Ultimo Login de %s foi em %02d/%02d/%04d as %02d:%02d.", UserFile, strval(Info[0]), strval(Info[1]), strval(Info[2]), strval(Info[3]), strval(Info[4]));
    SendClientMessage(playerid, -1, thestring);
	return 1;
}

CMD:veh(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new car, color1, color2;

	if(sscanf(params, "dD(-1)D(-1)", car, color1, color2))
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/veh <Modelo> (Cor1) (Cor2)");

	if(car < 400 || car > 611)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O número do veículo deve ser de 400 à 611.");

	if(color1 < -1 || color1 > 300)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O número da cor deve ser de -1 à 300.");

	if(color2 < -1 || color2 > 300)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O número da cor deve ser de -1 à 300.");

	new vw = GetPlayerVirtualWorld(playerid);
	new Float:X,Float:Y,Float:Z,Float:R;
	GetPlayerPos(playerid, X,Y,Z);
	GetPlayerFacingAngle(playerid, R);
	new carid = CreateVehicle(car, X,Y,Z, R, color1, color2, -1);
	PutPlayerInVehicle(playerid, carid, 0);
	LinkVehicleToInterior(carid, GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(carid, vw);
	VehicleInfo[carid][vCustom] = true;
    VehicleInfo[carid][vEngine] = true;
    VehicleInfo[carid][vUseGas] = true;
    VehicleInfo[carid][vGas] = 100;
    SetVehicleParamsEx(carid, true, false, false, false, false, false, false);
	new sttr[32];
	format(sttr, sizeof(sttr), "{FF0000}BLS {000000}%04d", carid);
	SetVehicleNumberPlateEx(carid, sttr);
	format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Veículo %d, criado.", carid);
	SendClientMessage(playerid, SERVER_INFO, thestring);
    //SetVehiclePRFUnlocked(carid);
	return true;
}

CMD:vevento(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new car, color1, color2;

	if(sscanf(params, "dD(-1)D(-1)", car, color1, color2))
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/VEvento <Modelo> (Cor1) (Cor2)");

	if(car < 400 || car > 611)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O número do veículo deve ser de 400 à 611.");

	if(color1 < -1 || color1 > 300)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O número da cor deve ser de -1 à 300.");

	if(color2 < -1 || color2 > 300)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O número da cor deve ser de -1 à 300.");

	new Float:X,Float:Y,Float:Z,Float:R;
	GetPlayerPos(playerid, X,Y,Z);
	GetPlayerFacingAngle(playerid, R);
	new carid = CreateVehicle(car, X,Y,Z, R, color1, color2, -1);
	LinkVehicleToInterior(carid, GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(carid, 0);
	VehicleInfo[carid][vCustom] = true;
	EventoInfo[VeiculoEvento][carid] = true;
	new sttr[24];
	format(sttr, sizeof(sttr), "{FF0000}BLS {000000}%04d", carid);
	SetVehicleNumberPlateEx(carid, sttr);
	format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Veículo %d, criado.", carid);
	SendClientMessage(playerid, SERVER_INFO, thestring);
	return true;
}

CMD:ajuda(playerid)
{
	new msg[150];
    msg = "- Geral\n- Irc\n- Banco\n- Casa\n- Celular\n- Emprego\n- Empresa\n- Organização\n- Lideranças\n- Pesca\n- Alimentação\n- Minha ORG\n- Meu Emprego\n- Boombox";
    ShowPlayerDialog(playerid,DIALOG_HELP, DIALOG_STYLE_LIST,"** Escolha um tipo de ajuda para obter:",msg,"OK","Cancelar");
	return true;
}

CMD:ah(playerid)
{
	if(Player[playerid][pAdmin] == 0)// COL
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem autorização para usar esse comando.");

	return ShowAjuda(playerid, "Admin", false);
}

CMD:beber(playerid)
{
	if(PlayerDrunk[playerid] < 10)
	{
	    if(GetTickCount() - AntiFlood[playerid][1] < 20000)
    	{
        	format(thestring, 128, "[ERRO]:{FFFFFF} Você precisa esperar %d segundos para usar esse comando novamente!",20-(GetTickCount() - AntiFlood[playerid][1])/1000);
			SendClientMessage(playerid, COLOR_RED, thestring);
       	 	return true;
       	}
   	}
    else
       	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode beber mais, você vai desmaiar!");

    if(IsAtBar(playerid))
    {
       	new listitems[] = "1\tCerveja(R$6)\n2\tVodka(R$10)\n3\tWhisk(R$10)\n4\tAgua (R$2)\n5\tRefrigerante(R$2)\n";
		ShowPlayerDialog(playerid,32,DIALOG_STYLE_LIST,"Lista de Bebidas: (DICA: Clique para beber.) ",listitems,"Selecionar","Sair");
		return true;
    }
    else
   		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um bar.");
}

CMD:aabasteceremp(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 7)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new prod;

	if(sscanf(params, "d", prod))
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/AAbatecerEmp <produtos>");

	if(prod > 1000 || prod < 1)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Produtos inválidos!");
	else
	{
	    for(new i = 0; i < MAX_BIZ; i++)
	        BizzInfo[i][bProducts] += prod;

	    format(thestring,sizeof(thestring),"Você abasteceu todas empresas com %d produtos.", prod);
	    SendClientMessage(playerid, -1, thestring);
	}
	return true;
}

CMD:addentradahouse(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 7)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new h;
	if(sscanf(params, "d", h))
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/addentradacasa <houseid> - Move a casa até você.");

	if(h > sizeof(HouseInfo) || h < 0)
	    return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O ID da casa deve ser de 0 à 91.");

    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    format(thestring,sizeof(thestring)," %s mudou a entrada da casa %d para %f - %f - %f",Player[playerid][pName],h,X,Y,Z);
    WriteLog("EditLog", thestring);
	ABroadCast(COLOR_YELLOW,thestring,5);
	HouseInfo[h][hEntrancex] = X;
	HouseInfo[h][hEntrancey] = Y;
	HouseInfo[h][hEntrancez] = Z;
	DestroyPickup(HouseInfo[h][hIcon]);
	Delete3DTextLabel(HouseInfo[h][HouseLabel]);
	if(HouseInfo[h][hOwned] == 1)
	{
		HouseInfo[h][hIcon] = CreatePickup(1239, 1, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
	  	if(HouseInfo[h][hRentabil] == 0)
			format(thestring, sizeof(thestring), "Proprietário da casa: %s \nNível : %d",hOwner[h],HouseInfo[h][hLevel]);
		else
			format(thestring, sizeof(thestring), "Proprietário da casa: %s \nAluguel: R$ %d - Nível : %d \nDigite /alugarcasa para alugar um quarto",hOwner[h],HouseInfo[h][hRent],HouseInfo[h][hLevel]);

		HouseInfo[h][HouseLabel] = Create3DTextLabel(thestring ,COLOR_WHITE, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+1.0,30.0,0);
	}
	if(HouseInfo[h][hOwned] == 0)
	{
		HouseInfo[h][hIcon] = CreatePickup(1273, 1, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
		format(thestring, sizeof(thestring), "A casa está a venda \n Descricão: %s \n Preco: R$ %d - Nível : %d\n Para comprar digite /comprarcasa",hDiscription[h],HouseInfo[h][hValue],HouseInfo[h][hLevel]);
		HouseInfo[h][HouseLabel] = Create3DTextLabel(thestring ,COLOR_WHITE, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+1.0,30.0,0);
	}
	SaveProperty(h);
	OnPropUpdate();
	return true;
}

CMD:addhouseint(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 7)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new hId;
	if(sscanf(params, "d", hId))
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/AddHouseInt <HouseID>");

	format(thestring, 256, "%d %d", hId, GetPlayerInterior(playerid));
	cmd_addint(playerid, thestring);
	format(thestring, 256, "%d %d", hId, hId);
	cmd_addvw(playerid, thestring);
	format(thestring, 256, "%d", hId);
	cmd_addspawn(playerid, thestring);

	format(thestring, 256, "Você modificou o Interior da Casa %d.", hId);
	SendClientMessage(playerid, -1, thestring);
	return 1;
}

CMD:addspawn(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 7)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new proplev;
	if(sscanf(params, "d", proplev))
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/addspawn <houseid>");
	if(proplev > sizeof(HouseInfo) || proplev < 0)
	    return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O ID da casa deve ser de 0 à 91.");

    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    format(thestring,sizeof(thestring),"Spawn da casa %d mudado: (%f,%f,%f)",proplev,X,Y,Z);
    WriteLog("EditLog", thestring);
	ABroadCast(COLOR_YELLOW,thestring,5);
	HouseInfo[proplev][hExitx] = X;
	HouseInfo[proplev][hExity] = Y;
	HouseInfo[proplev][hExitz] = Z;
	SaveProperty(proplev);
	OnPropUpdate();
	return true;
}

CMD:movehousecar(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 7)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new proplev;
	if(sscanf(params, "d", proplev))
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/MoveHouseCar <houseid>");
	if(proplev > sizeof(HouseInfo) || proplev < 0)
	    return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O ID da casa deve ser de 0 à 91.");

    if(IsPlayerInAnyVehicle(playerid))
    {
        GetVehiclePos(GetPlayerVehicleID(playerid), HouseCarSpawns[proplev][0], HouseCarSpawns[proplev][1], HouseCarSpawns[proplev][2]);
        GetVehicleZAngle(GetPlayerVehicleID(playerid), HouseCarSpawns[proplev][3]);
    }
    else
    {
        GetPlayerPos(playerid, HouseCarSpawns[proplev][0], HouseCarSpawns[proplev][1], HouseCarSpawns[proplev][2]);
        GetPlayerFacingAngle(playerid, HouseCarSpawns[proplev][3]);
    }

    format(thestring,sizeof(thestring), "Spawn do carro da casa %d trocado: (%f,%f,%f,%f)", proplev, HouseCarSpawns[proplev][0], HouseCarSpawns[proplev][1], HouseCarSpawns[proplev][2], HouseCarSpawns[proplev][3]);
    WriteLog("EditLog", thestring);
	ABroadCast(COLOR_YELLOW,thestring,5);

	DestroyVehicle(CarroCasa[proplev]);
	new h = proplev;
	if(HouseInfo[h][hVpos][0] == 0.0) CarroCasa[h] = AddStaticVehicleEx(HouseInfo[h][hVec], HouseCarSpawns[h][0], HouseCarSpawns[h][1], HouseCarSpawns[h][2], HouseCarSpawns[h][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);
	else CarroCasa[h] = AddStaticVehicleEx(HouseInfo[h][hVec], HouseInfo[h][hVpos][0], HouseInfo[h][hVpos][1], HouseInfo[h][hVpos][2], HouseInfo[h][hVpos][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);
    return 1;
}

CMD:vertodos(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 2)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(vertodos[playerid] == 0)
    {
        foreach(new i: Player)
            SetPlayerMarkerForPlayer(playerid, i, COLOR_YELLOW);

		vertodos[playerid] = 1;
		format(thestring,sizeof(thestring),"%s ativou o /vertodos.",ReturnPlayer(playerid));
	}
	else
	{
	    foreach(new i: Player)
	        SetPlayerMarkerForPlayer(playerid, i, 0xFFFFFF00);

		vertodos[playerid] = 0;
		format(thestring,sizeof(thestring),"%s desativou o /vertodos.",ReturnPlayer(playerid));
	}
	ABroadCast(COLOR_LIGHTRED,thestring,1);
	return true;
}

CMD:addint(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 7)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new proplev, interior;
	if(sscanf(params, "dd", proplev, interior))
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/addint <id da casa> <interior>");

	if(proplev > sizeof(HouseInfo) || proplev < 0)
	    return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O ID da casa deve ser de 0 à 91.");

    format(thestring,sizeof(thestring),"Interior da casa %d mudado para %d.", proplev, interior);
    WriteLog("EditLog", thestring);
	ABroadCast(COLOR_YELLOW,thestring,5);
	HouseInfo[proplev][hInt] = interior;
	SaveProperty(proplev);
	OnPropUpdate();
	return true;
}

CMD:addvw(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 7)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new proplev, vw;
	if(sscanf(params, "dd", proplev, vw))
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/addvw <id da casa> <mundo virtual>");

	if(proplev > sizeof(HouseInfo) || proplev < 0)
	    return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O ID da casa deve ser de 0 à 91.");

    format(thestring,sizeof(thestring),"VirtualWorld da casa %d mudado para %d.",proplev,vw);
    WriteLog("EditLog", thestring);
	ABroadCast(COLOR_YELLOW,thestring,5);
    HouseInfo[proplev][hWorld] = vw;
    SaveProperty(proplev);
    OnPropUpdate();
	return true;
}

CMD:editar(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 5)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new Float:x,Float:y,Float:z,str[128];
	GetPlayerPos(playerid, x,y,z);
	new nome[36];

	if(sscanf(params, "s[36]", nome))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/editar <nome>");

	for(new i=0;i<sizeof(HouseInfo);i++)
	{
		if(PlayerToPoint(3.0,playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]))
		{
			format(str, 128,"Nome da casa '%s' editado para '%s'",hDiscription[i], nome);
			format(hDiscription[i],128,"%s", nome);
			SendClientMessage(playerid, COLOR_WHITE, str);
			SaveProperty(i);
		}
	}
	for(new i=0;i<sizeof(BizzInfo);i++)
	{
		if(PlayerToPoint(3.0,playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]))
		{
			format(str, 128,"Nome da empresa '%s' editado para '%s'", bMessage[i], nome);
			format(bMessage[i],128,"%s", nome);
			SendClientMessage(playerid, COLOR_WHITE, str);
			SaveBizz(i);
		}
	}
	WriteLog("EditLog", str);
	OnPropUpdate();
	return true;
}

CMD:br(playerid)
{
    cmd_barreira(playerid);
    return true;
}

CMD:barreira(playerid)
{
	if(!IsACop(playerid))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um oficial.");
	else if(Player[playerid][pRoadblock] != -1)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você só pode colocar 1 barreira por vez, use /rbr para retirar a outra.");
    else if(GetPlayerInterior(playerid) != 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode colocar uma barreira aqui.");

	new Float:X, Float:Y, Float:Z, Float:A;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, A);
	SafeSetPlayerPos(playerid, X, Y-3, Z);
	GameTextForPlayer(playerid, "~w~Barreira ~r~Colocada", 5000, 6);
	SendClientMessage(playerid, COLOR_GREEN, "Barreira colocada, use /rbr para retirá-la.");
    format(thestring, sizeof(thestring), "Barreira colocada por %s. Coordenadas : X = %f    Y = %f    Z = %f ",ReturnPlayer(playerid), X, Y, Z);
    WriteLog("Admins2", thestring);
	format(thestring, sizeof(thestring), "HQ: Uma barreira foi implantada por %s.", Player[playerid][pName]);
	foreach(new i: Player)
   	    if(IsACop(i))
			SendClientMessage(i, COLOR_PM, thestring);

	for(new i=0; i<10; i++)
   	{
		if(barreira[i] == 0)
		{
		    barreira[i] = 1;
		    barreiraobj[i] = CreateDynamicObject(981, X, Y, Z, 0.0, 0.0, A+180);
		    Player[playerid][pRoadblock] = i;
		    return true;
		}
		if(i == 9)
	   	    return SendClientMessage(playerid, COLOR_RED, "O limite de barreiras do servidor foi atingido.");
	}
	return true;
}

CMD:rbr(playerid)
{
	cmd_retirarbarreira(playerid);
	return true;
}

CMD:retirarbarreira(playerid)
{
	if(!IsACop(playerid))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um policial!");

	if(Player[playerid][pRoadblock] != -1)
	{
		barreira[Player[playerid][pRoadblock]] = 0;
	    RemoveRoadblock(playerid);
		SendClientMessage(playerid, COLOR_GREEN, "Barreira retirada com sucesso.");
		return true;
	}
	else
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não colocou nenhuma barreira por enquanto.");
}

CMD:rbrs(playerid)
{
    return cmd_retirarbarreiras(playerid);
}

CMD:retirarbarreiras(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if((Player[playerid][pRank] >= 3 && IsACop(playerid)) || GetAdminLevel(playerid) >= 5)
	{
		for(new i=0; i<10; i++)
		{
		    barreira[i] = 0;
	    	DestroyDynamicObject(barreiraobj[i]);
		}

		foreach(new i: Player)
			Player[i][pRoadblock] = -1;

		format(thestring, sizeof(thestring), "HQ: TODAS as barreiras foram retiradas por %s.", Player[playerid][pName]);
		SendCopMessage(COLOR_PM, thestring);
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa ser cargo 3+ ou Lider para usar este comando.");

	return true;
}

CMD:corrente(playerid)
{
	if(!IsACop(playerid))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um oficial.");
	else if(Player[playerid][pCorrente] != -1)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você só pode colocar 1 corrente por vez, use /rcorrente para retirar a outra.");
    else if(GetPlayerInterior(playerid) != 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode colocar uma corrente aqui.");

	new Float:X, Float:Y, Float:Z, Float:A;

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid,A);

    format(thestring, sizeof(thestring), "Corrente colocada por %s. Coordenadas: (%f,%f,%f).",ReturnPlayer(playerid), X, Y, Z);
    WriteLog("Admins2", thestring);

	format(thestring, sizeof(thestring), "HQ: Uma corrente foi colocada por %s.", Player[playerid][pName]);
	SendCopMessage(COLOR_PM, thestring);

	for(new i = 0; i < 10; i++)
   	{
		if(corrente[i] == 0)
		{
		    corrente[i] = 1;
		    correnteobj[i] = CreateDynamicObject(2899, X, Y, Z-0.9, 0, 0, A-90);
		    Player[playerid][pCorrente] = i;
		    return true;
		}
		if(i == 9)
		{
		    SendClientMessage(playerid, COLOR_RED, "O limite de correntes do servidor foi atingido.");
	   	    return 1;
		}
	}
	return true;
}

CMD:rcorrente(playerid)
{
	if(!IsACop(playerid))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um policial!");
	else if(Player[playerid][pRank] < 2)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa ser cargo 2+ para retirar correntes.");

	if(Player[playerid][pCorrente] != -1)
	{
        RemoveCorrente(playerid);
		SendClientMessage(playerid, COLOR_GREEN, "Corrente retirada com sucesso.");
		return true;
	}
	else
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não colocou nenhuma corrente por enquanto.");
}

CMD:rtcorrentes(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if((Player[playerid][pRank] >= 3 && IsACop(playerid)) || GetAdminLevel(playerid) >= 5)
	{
		for(new i=0; i<10; i++)
		{
	    	DestroyDynamicObject(correnteobj[i]);
	    	corrente[i] = 0;
		}

		foreach(new i: Player)
			Player[i][pCorrente] = -1;

		format(thestring, sizeof(thestring), "HQ: TODAS as correntes foram retiradas por %s.", Player[playerid][pName]);
		SendCopMessage(COLOR_PM, thestring);
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa ser cargo 3+ ou Lider para usar este comando.");
	return true;
}

CMD:cone(playerid)
{
	if(Player[playerid][pMember] != 23 && Player[playerid][pLeader] != 23)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro da Polícia Civil.");

	new Float:X, Float:Y, Float:Z, Float:A;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, A);
	if(Player[playerid][pCone] == 5)
	{
     	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você ja colocou muitos cones. /rcone para tirar os cones");
	}
	if(Player[playerid][pCone] == 0)
	{
    	Cone1 = CreateDynamicObject(1238, X, Y, Z-0.6, 0.0, 0.0, A+180);
	}
	else if(Player[playerid][pCone] == 1)
	{
        Cone2 = CreateDynamicObject(1238, X, Y, Z-0.6, 0.0, 0.0, A+180);
	}
	else if(Player[playerid][pCone] == 2)
	{
        Cone3 = CreateDynamicObject(1238, X, Y, Z-0.6, 0.0, 0.0, A+180);
	}
	else if(Player[playerid][pCone] == 3)
	{
        Cone4 = CreateDynamicObject(1238, X, Y, Z-0.6, 0.0, 0.0, A+180);
	}
	else if(Player[playerid][pCone] == 4)
	{
        Cone5 = CreateDynamicObject(1238, X, Y, Z-0.6, 0.0, 0.0, A+180);
	}
	SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[Info]:{FFFFFF} Cone colocado, use /rcone para retirá-lo.");
	SafeSetPlayerPos(playerid, X, Y-1, Z);
    GameTextForPlayer(playerid, "~w~Cone ~r~Colocado", 5000, 6);
   	Player[playerid][pCone]++;
	return true;
}

CMD:rcone(playerid)
{
	if(!IsACop(playerid))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é Policial");
	else if(Player[playerid][pRank] < 2)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} você precisa ser cargo 2+ para retirar barreiras.");
	else if(Player[playerid][pCone] == 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não colocou nenhum cone por enquanto.");

	RemoveCone(playerid);
	SendClientMessage(playerid, COLOR_GREEN, "Cones retirados com sucesso.");
	return true;
}

CMD:rtcones(playerid)
{
	if(Player[playerid][pRank] >= 3 && IsACop(playerid))
	{
		foreach(new i: Player)
		{
			RemoveCone(i);
			Player[i][pCone] = 0;
		}
		format(thestring, sizeof(thestring), "[HQ]: Todos os cones foram retiradas por %s.", Player[playerid][pName]);
		SendCopMessage(COLOR_DBLUE, thestring);
	}
	else
	{
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa ser cargo 3+ ou Lider para usar este comando.");
	}
	return true;
}

CMD:comerpizza(playerid)
{
	if(bPizza[playerid] != 1)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem pizza, use /ligar 111 para pedir uma");

	SetPlayerHealth(playerid, 100);
	format(thestring, sizeof(thestring), "Você comeu uma pizza, e está de barriga cheia agora!");
	SendClientMessage(playerid, COLOR_WHITE, thestring);
	format(thestring, sizeof(thestring), "* %s comeu uma pizza.", PlayerGetName(playerid));
	ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	bPizza[playerid] = 0;
	return true;
}

CMD:venderpizza(playerid, params[])
{
   	if(Player[playerid][pJob] == EPIZZA)
   	{
		if(sPizza[playerid] > 0)
   		{
			new giveid;
   			if(sscanf(params, "u", giveid))
   				return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/venderpizza <id/nick>");

   			if(IsPlayerConnected(giveid))
   			{
       			if(ProxDetectorS(8.0, playerid, giveid))
   				{
					format(thestring, sizeof(thestring), "Você entregou pizza para %s", Player[giveid][pName]);
					SendClientMessage(playerid, COLOR_WHITE, thestring);
					format(thestring, sizeof(thestring), "Pizza boy %s te deu uma pizza, /comerpizza", Player[playerid][pName]);
					SendClientMessage(giveid, COLOR_WHITE, thestring);
					format(thestring, sizeof(thestring), "* %s Pegou a pizza e deu para %s.", PlayerGetName(playerid), Player[giveid][pName]);
					ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					bPizza[giveid] = 1;
				}
   				else
       				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador está longe de você!");
   			}
		   	else
				SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
		}
		else
   			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Pegue a pizza na cozinha!");
	}
	return true;
}

CMD:fixcam(playerid)
{
   	PlayerDrunk[playerid] = 0;
  	PlayerDrunkTime[playerid] = 0;
  	SetCameraBehindPlayer(playerid);
  	PlayerStoned[playerid] = 0;
  	KillTimer(DrunkTime[playerid]);
  	KillTimer(DrunkTime[playerid]);
  	SetCameraBehindPlayer(playerid);
	return true;
}

CMD:pagar(playerid, params[])
{
	new giveid, moneys;
	if(sscanf(params, "ud", giveid, moneys))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/pagar <id/nick> <quantia>");

    if(GetTickCount() - AntiFlood[playerid][2] < 120000)
    {
        format(thestring, 128, "[ERRO]:{FFFFFF} Você precisa esperar %d segundos para usar esse comando novamente!",120-(GetTickCount() - AntiFlood[playerid][2])/1000);
		SendClientMessage(playerid, COLOR_RED, thestring);
        return true;
    }

	if(moneys < 1 || moneys > 5000)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Escolha entre 1 e R$ 5000");

	if(IsPlayerConnected(giveid))
	{
		if(ProxDetectorS(5.0, playerid, giveid) && GetPlayerState(giveid) != PLAYER_STATE_SPECTATING)
		{
			new playermoney = GetPlayerGP(playerid);
			if(moneys > 0 && playermoney >= moneys)
			{
			    ConsumingMoney[giveid] = 1;
				GivePlayerGP(playerid, (0 - moneys));
				GivePlayerGP(giveid, moneys);

				format(thestring, sizeof(thestring), "Você enviou R$ %d para %s(Jogador: %d)", moneys, Player[giveid][pName],giveid);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		        SendClientMessage(playerid, COLOR_GREY, thestring);
				format(thestring, sizeof(thestring), "Você recebeu R$ %d de %s(Jogador: %d).", moneys, Player[playerid][pName], playerid);
				SendClientMessage(giveid, COLOR_GREY, thestring);
				format(thestring, sizeof(thestring), "* %s pagou R$ %d para %s", Player[playerid][pName], moneys, Player[giveid][pName]);
				WriteLog("transfers", thestring);
				PlayerPlaySound(giveid, 1052, 0.0, 0.0, 0.0);
				format(thestring, sizeof(thestring), "* %s deu algum dinheiro para %s.", PlayerGetName(playerid), Player[giveid][pName]);
				ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    AntiFlood[playerid][2] = GetTickCount();
				if(!IsPlayerInAnyVehicle(playerid))
                {
   	                 ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0); // Deal Drugs
                     SetTimerEx("LimparAnim", 4000, false, "i", playerid);
       			}
			}
			else
				SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Quantia inválida");
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está longe do persongem");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:doar(playerid, params[])
{
    new Dinheiro;
	if(sscanf(params, "d", Dinheiro)) return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/doar <quantia>");
	if(Dinheiro < 0) return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não tem essa quantia");
	if(GetPlayerGP(playerid) < Dinheiro) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem esta quantia.");

	GivePlayerGP(playerid, -Dinheiro);
    GiveOrgMoney(TEAM_PREF, Dinheiro);

	format(thestring, sizeof(thestring), "[Doação]:{FFFFFF} Você doou R$%d para as crianças do orfanato.", Dinheiro);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SendClientMessage(playerid, COLOR_RED, thestring);
	WriteLog("transfers", thestring);
    return 1;
}

CMD:payday(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	format(thestring,128,"[Administração]:{008080} O administrador %s forçou o pagamento.", Player[playerid][pName]);
	SendClientMessageToAll(COLOR_ADMIN, thestring);
	PayDay();
	return true;
}

CMD:fixveh(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(!IsPlayerInAnyVehicle(playerid))
	    return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não está em nenhum veiculo.");
    if(CarShopping[playerid] == true)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode reparar este veículo.");

    SendClientMessage(playerid,SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você reparou seu veículo.");
    Reparar(playerid);
	return true;
}

CMD:dn(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	SafeSetPlayerPos(playerid, slx, sly, slz-2);
	return true;
}

CMD:up(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	SafeSetPlayerPos(playerid, slx, sly, slz+2);
	return true;
}

CMD:jetpack(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	CreateDynamicPickup(370,3,X,Y,Z);
	return true;
}

CMD:fly(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new Float:x,
		Float:y,
		Float:z,
		Float:distance = 15.0;
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    if(GetPlayerPos(playerid, x, y, z))
	    {
	        new Float:a;
	        GetPlayerFacingAngle(playerid, a);
	        x += distance * floatsin(-a, degrees);
	        y += distance * floatcos(-a, degrees);

            if(GetPlayerInterior(playerid) == 0)
            {
                new Float:z2;
                MapAndreas_FindZ_For2DCoord(x, y, z2);
                if(z2 != 0.0)
                    z = z2;
            }

            SetPlayerPos(playerid, x, y, z+3.0);
	    }
	}
	else
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(GetVehiclePos(vehicleid, x, y, z))
	    {
	        new Float:a;
	        GetVehicleZAngle(vehicleid, a);
	        x += distance * floatsin(-a, degrees);
	        y += distance * floatcos(-a, degrees);
	        if(GetPlayerInterior(playerid) == 0)
            {
                new Float:z2;
                MapAndreas_FindZ_For2DCoord(x, y, z2);
                if(z2 != 0.0)
                    z = z2;
            }
	        SetVehicleZAngle(vehicleid, a);
	        SetVehiclePos(vehicleid, x, y, z+5.0);
	    }
	}
	return true;
}

CMD:agenda(playerid, params[])
{
    return cmd_telefone(playerid, params);
}

CMD:tel(playerid, params[])
{
	return cmd_telefone(playerid, params);
}

CMD:telefone(playerid, params[])
{
	if(Player[playerid][pPhoneBook] == 1)
	{
	    new giveid;
		if(sscanf(params, "u", giveid))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/tel(efone) <id/nick>");
		if(IsPlayerConnected(giveid))
		{
		    if(giveid != INVALID_PLAYER_ID)
		    {
				format(thestring, 128, "[%d] Usuário: %s, |%d|",giveid, Player[giveid][pName],Player[giveid][pPnumber]);
				SendClientMessage(playerid, COLOR_GREY, thestring);
			}
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Agenda. Compre uma nas lojas 24-7.");

	return true;
}

CMD:trocarskin(playerid, params[])
{
	if(!IsAtClothShop(playerid))
        return SendClientMessage(playerid, 0xAA3333AA, "[ERRO]:{FFFFFF} Você não está na loja de roupas.");
	if(Player[playerid][pMember] == 0)
        return SendClientMessage(playerid, 0xAA3333AA, "[ERRO]:{FFFFFF} Você não faz parte de uma organização.");
    if(IsACopEx(playerid))
        return SendClientMessage(playerid, 0xAA3333AA, "[ERRO]:{FFFFFF} Você não pode usar este comando.");
    if(GetTickCount() - AntiFlood[playerid][3] < 2000)
    {
        format(thestring, 128, "[ERRO]:{FFFFFF} Você precisa esperar %d segundos para usar esse comando novamente!",2-(GetTickCount() - AntiFlood[playerid][3])/1000);
		SendClientMessage(playerid, COLOR_RED, thestring);
        return true;
    }

   	new skin,
        skinEx;
/*   	if(Player[playerid][pMember] == TEAM_PM)
    {
       	if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-8]");

        switch(skin)
        {
            case 1: skinEx = 267;
            case 2: skinEx = 280;
            case 3: skinEx = 281;
            case 4: skinEx = 71;
            case 5: skinEx = 267;
            case 6: skinEx = 266;
            case 7: skinEx = 246;
            case 8: skinEx = 141;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-8]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}
    else if(Player[playerid][pMember] == TEAM_PF)
    {
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-4]");

        switch(skin)
        {
            case 1: skinEx = 286;
            case 2: skinEx = 163;
            case 3: skinEx = 164;
            case 4: skinEx = 141;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-4]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}
	else if(Player[playerid][pMember] == TEAM_FA)
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-5]");

        switch(skin)
        {
            case 1: skinEx = 287;
            case 2: skinEx = 141;
            case 3: skinEx = 191;
            case 4: skinEx = 73;
            case 5: skinEx = 179;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-5]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}*/
	/*else if(Player[playerid][pMember] == TEAM_BOMBE)
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-3]");

        switch(skin)
        {
            case 1: skinEx = 277;
            case 2: skinEx = 278;
            case 3: skinEx = 279;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-3]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}*/
/*	else if(Player[playerid][pMember] == TEAM_PCIVIL)
    {
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-2]");

        switch(skin)
        {
            case 1: skinEx = 120;
            case 2: skinEx = 124;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-2]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}*/
	if(Player[playerid][pMember] == TEAM_BALLAS)
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-3]");

        switch(skin)
        {
            case 1: skinEx = 102;
            case 2: skinEx = 103;
            case 3: skinEx = 104;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-3]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}
	else if(Player[playerid][pMember] == TEAM_GROOVE)
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-5]");

        switch(skin)
        {
            case 1: skinEx = 105;
            case 2: skinEx = 106;
            case 3: skinEx = 107;
            case 4: skinEx = 269;
            case 5: skinEx = 271;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-5]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}
	else if(Player[playerid][pMember] == TEAM_PREF)
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-6]");

        switch(skin)
        {
            case 1: skinEx = 24;
            case 2: skinEx = 66;
            case 3: skinEx = 228;
            case 4: skinEx = 255;
            case 5: skinEx = 150;
            case 6: skinEx = 12;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-6]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}
	else if(Player[playerid][pMember] == TEAM_HITMAN)
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-3]");

        switch(skin)
        {
            case 1: skinEx = 165;
            case 2: skinEx = 166;
            case 3: skinEx = 93;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-3]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}
	else if(Player[playerid][pMember] == TEAM_SANEWS)
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-5]");

        switch(skin)
        {
            case 1: skinEx = 188;
            case 2: skinEx = 187;
            case 3: skinEx = 186;
            case 4: skinEx = 148;
            case 5: skinEx = 219;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-5]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}
	/*else if(Player[playerid][pMember] == TEAM_LOWRIDERS)//Não tem feminino
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-5]");

        switch(skin)
        {
            case 1: skinEx = 250;
            case 2: skinEx = 184;
            case 3: skinEx = 242;
            case 4: skinEx = 47;
            case 5: skinEx = 152;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-5]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}*/
	/*else if(Player[playerid][pMember] == TEAM_PCC)//Não tem feminino
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-3]");

        switch(skin)
        {
            case 1: skinEx = 21;
            case 2: skinEx = 268;
            case 3: skinEx = 293;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-3]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}*/
	/*else if(Player[playerid][pMember] == TEAM_HAMAS)//Não tem feminino//Hamas
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-3]");

        switch(skin)
        {
            case 1: skinEx = 175;
            case 2: skinEx = 174;
            case 3: skinEx = 173;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-3]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}*/
	else if(Player[playerid][pMember] == TEAM_VAGOS)
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-3]");

        switch(skin)
        {
            case 1: skinEx = 110;
            case 2: skinEx = 109;
            case 3: skinEx = 108;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-3]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}
	else if(Player[playerid][pMember] == TEAM_BIKERS)
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-3]");

        switch(skin)
        {
            case 1: skinEx = 247;
            case 2: skinEx = 248;
            case 3: skinEx = 254;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-3]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}
/*	else if(Player[playerid][pMember] == TEAM_MUNICIPAL)
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-5]");

        switch(skin)
        {
            case 1: skinEx = 282;
            case 2: skinEx = 283;
            case 3: skinEx = 288;
            case 4: skinEx = 141;
            case 5: skinEx = 284;
            default: return SendClientMessage(playerid, 0xAA3333AA, "[ERRO]:{FFFFFF}TrocarSkin [1-5]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}*/
	else if(Player[playerid][pMember] == TEAM_AZTECAS)
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-4]");

        switch(skin)
        {
            case 1: skinEx = 115;
            case 2: skinEx = 114;
            case 3: skinEx = 116;
            case 4: skinEx = 292;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-4]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}
	else if(Player[playerid][pMember] == TEAM_RUSSA)// mafia russa
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-3]");

        switch(skin)
        {
            case 1: skinEx = 111;
            case 2: skinEx = 112;
            case 3: skinEx = 113;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-3]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}
	else if(Player[playerid][pMember] == TEAM_YAKUZA)//yakusa
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-4]");

        switch(skin)
        {
            case 1: skinEx = 117;
            case 2: skinEx = 118;
            case 3: skinEx = 120;
            case 4: skinEx = 294;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-4]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}
	/*else if(Player[playerid][pMember] == TEAM_DRIFTERS)
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-2]");

        switch(skin)
        {
            case 1: skinEx = 30;
            case 2: skinEx = 192;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-2]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}*/
	/*else if(Player[playerid][pMember] == TEAM_CV)
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-4]");

        switch(skin)
        {
            case 1: skinEx = 180;
            case 2: skinEx = 193;
            case 3: skinEx = 142;
            case 4: skinEx = 170;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-4]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}*/
/*	else if(Player[playerid][pMember] == TEAM_BOPE)
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-2]");

        switch(skin)
        {
            case 1: skinEx = 285;
            case 2: skinEx = 141;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-2]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}*/
	else if(Player[playerid][pMember] == TEAM_ALQAEDA)
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-4]");

        switch(skin)
        {
            case 1: skinEx = 290;
            case 2: skinEx = 191;
            case 3: skinEx = 249;
            case 4: skinEx = 298;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-4]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}
	/*else if(Player[playerid][pMember] == TEAM_KINGS)
	{
        if(sscanf(params, "d", skin))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-5]");

        switch(skin)
        {
            case 1: skinEx = 67;
            case 2: skinEx = 144;
            case 3: skinEx = 216;
            case 4: skinEx = 2;
            case 5: skinEx = 29;
            default: return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TrocarSkin [1-5]");
        }

        SetPlayerSkin(playerid, skinEx);
        Player[playerid][pModel] = skinEx;
	}*/

    format(thestring, sizeof(thestring), "[Lojas Binco]: Você comprou suas peças por R$%d.", BizBincoPrice);
    SendClientMessage(playerid, COLOR_YELLOW, thestring);

    GivePlayerGP(playerid, -BizBincoPrice);
    AntiFlood[playerid][3] = GetTickCount();

    GiveBizMoney(Biz_Binco, BizBincoPrice);
    return true;
}

CMD:skin(playerid, params[])
{
	if(gPlayerLogged[playerid] != 0)
   	{
		if(IsAtClothShop(playerid))
		{
			if(GetPlayerOrg(playerid) == 0 || IsACopEx(playerid))
		    {
		    	if(GetTickCount() - AntiFlood[playerid][4] < 20000)
		    	{
    				format(thestring, 128, "[ERRO]:{FFFFFF} Você precisa esperar %d segundos para usar esse comando novamente!",20-(GetTickCount() - AntiFlood[playerid][4])/1000);
					SendClientMessage(playerid, COLOR_RED, thestring);
     				return true;
	        	}

		   		new skin;
		   		if(sscanf(params, "d", skin))
		   			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Skin <id da skin>");

			   	if(skin < 0 || skin > 299)
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} ID Inexistente ou você não pode usá-lo.");
   	           	if(skin==1||skin==3||skin==4||skin==5||skin==6||skin==8||skin==17||skin==42||skin==47||skin==61||skin==65||skin==74||skin==86||skin==98
				||skin==100||skin==102||skin==103||skin==104||skin==105||skin==106||skin==107||skin==108||skin==109||skin==110||skin==111
				||skin==112||skin==113||skin==114||skin==115||skin==116||skin==119||skin==120||skin==123||skin==125||skin==126||skin==142
				||skin==147||skin==149||skin==152||skin==153||skin==170||skin==172||skin==173||skin==174||skin==175||skin==184||skin==189
				||skin==194||skin==223||skin==228||skin==242||skin==247||skin==248||skin==254||skin==265||skin==266||skin==267||skin==269
				||skin==270||skin==271||skin==272||skin==273||skin==280||skin==281||skin==282||skin==283||skin==284||skin==285||skin==286
				||skin==287||skin==289||skin==290||skin==291||skin==294||skin==295||skin==296||skin==299)
    				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} ID Inexistente ou você não pode usá-lo.");

			    Player[playerid][pModel] = skin;
                if(IsACopEx(playerid) && OnDuty[playerid] == 1)
                {
                    format(thestring, sizeof(thestring), "[Lojas Binco] Você comprou suas peças por R$%d, você pode usa-la ao Bater Cartão novamente.", BizBincoPrice);
                    SendClientMessage(playerid, COLOR_YELLOW, thestring);
                }
                else
                {
                    SetPlayerSkin(playerid, Player[playerid][pModel]);

                    format(thestring, sizeof(thestring), "[Lojas Binco] Você comprou suas peças por R$%d.", BizBincoPrice);
                    SendClientMessage(playerid, COLOR_YELLOW, thestring);
                }
                GivePlayerGP(playerid, -BizBincoPrice);
                GiveBizMoney(Biz_Binco, BizBincoPrice);
			    AntiFlood[playerid][4] = GetTickCount();
	   		}
   			else
	   		{
	   			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você tem uma ORG, use /trocarskin.");
			}
		}
	    else
		{
		   SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na loja de roupas.");
		}
	}
	else
 	{
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
  	}
	return true;
}

CMD:corcarrocasa(playerid, params[])
{
	new house = Player[playerid][pHouseKey];
	if(house != 255)
	{
	    new color, colornum;
		if(strcmp(Player[playerid][pName], hOwner[Player[playerid][pHouseKey]], false) != 0 && strcmp(pMarriedTo[playerid], hOwner[Player[playerid][pHouseKey]], false) != 0)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma casa.");
   		if(sscanf(params, "dd", colornum, color))
			return SendClientMessage(playerid, COLOR_GREY,"[Uso]: {FFFFFF}/corcarrocasa <1(Primária)/2(Secundária)> <id da cor>");
		if(colornum > 2 || colornum < 1)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Escolha entre cor primária (1) e cor secundária (2)");
		if(color > 126)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Máxima cor 126");
		if(GetPlayerGP(playerid) < 300)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode pagar isto (R$300)");

		if(colornum == 1)
		{
			HouseInfo[house][hVcol1] = color;
			format(thestring, sizeof(thestring), "Cor primária do veículo mudada para %d (R$-300)",color);
			SendClientMessage(playerid, COLOR_YELLOW,thestring);
		}
		else
		{
			HouseInfo[house][hVcol2] = color;
			format(thestring, sizeof(thestring), "Cor secundária do veículo mudada para %d (R$-300)",color);
			SendClientMessage(playerid, SERVER_INFO,thestring);
        }
        GiveBizMoney(Biz_Atualizacao, 300);
		SendClientMessage(playerid, SERVER_INFO, "Sua pintura nova irá se completar ao passar de uma hora.");
		GivePlayerGP(playerid, -300);
		PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
		SaveProperty(house);
		OnPropUpdate();
	}
	else
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Casa.");
	return true;
}

CMD:atualizarcarro(playerid, params[])
{
	new house = Player[playerid][pHouseKey];
	if(house != 255)
	{
		if(strcmp(Player[playerid][pName], hOwner[Player[playerid][pHouseKey]], false) != 0 && strcmp(pMarriedTo[playerid], hOwner[Player[playerid][pHouseKey]], false) != 0)
			return 	SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma casa.");

		new carro[20];
		if(sscanf(params, "s[20]", carro))
		{
			SendClientMessage(playerid, COLOR_GREEN,"______________________________________");
            SendClientMessage(playerid, COLOR_WHITE,"*** Atualizacão mobiliária ***");
			SendClientMessage(playerid, COLOR_GREY,"[Uso]: {FFFFFF}/atualizarcarro [nome]");
			SendClientMessage(playerid, COLOR_WHITE, "Carros: Greenwood - Glendale - Emperor - Elegant - Blistacompact - Clover - Stratum - Sabre - Uranus");
			SendClientMessage(playerid, COLOR_WHITE, "Carros: Landstalker - Merit - Nebula - Tahoma - Hermes - Stallion - Sunrise - Yosemite - Sanchez");
			SendClientMessage(playerid, COLOR_WHITE, "Carros: Admiral - Blade - Savanna - Buccanee - Pony - Elegant - Esperant - Feltze - PCJ600 - Huntley");
			SendClientMessage(playerid, COLOR_WHITE, "Carros: Regina - Remington - Solair - Vincent - Virgo - Voodoo - Washing - Hustler - Peren - Rancher - Sultan");
            SendClientMessage(playerid, COLOR_WHITE, "Carros: Alpha - Banshee - Bfinject - Broadway - Buffalo - Bullet - Cheetah - Club - Comet");
			SendClientMessage(playerid, COLOR_WHITE, "Carros: Elegy - Euros - Flash - Infernus - Jester - Mesa - MonsterB - Hotring - Nrg-500");
			SendClientMessage(playerid, COLOR_WHITE, "Carros: Supergt - Turismo - Windsor - Zr350 - (Fcr-900) - Phoenix - Sentinel");
			SendClientMessage(playerid, COLOR_WHITE, "Carros: Hotknife - Bandito - MonsterB - Hotring - (Nrg-500) - Quad");
			return true;
		}

		new VehId, price = -1;
		if(strcmp(carro, "greenwood",true)==0){VehId = 492; price = 80000;}
		else if(strcmp(carro, "glendale",true)==0){VehId = 466; price = 80000;}
		else if(strcmp(carro, "emperor",true)==0){VehId = 585; price = 90000;}
		else if(strcmp(carro, "elegant",true)==0){VehId = 507; price = 100000;}
		else if(strcmp(carro, "blistacompact",true)==0){VehId = 496; price = 100000;}
		else if(strcmp(carro, "clover",true)==0){VehId = 542; price = 50000;}
		else if(strcmp(carro, "stratum",true)==0){VehId = 561; price = 180000;}
		else if(strcmp(carro, "sabre",true)==0){VehId = 475; price = 150000;}
		else if(strcmp(carro, "uranus",true)==0){VehId = 558; price = 150000;}
		else if(strcmp(carro, "huntley",true)==0){VehId = 579; price = 160000;}
		else if(strcmp(carro, "landstalker",true)==0){VehId = 400; price = 240000;}
		else if(strcmp(carro, "merit",true)==0){VehId = 551; price = 80000;}
		else if(strcmp(carro, "nebula",true)==0){VehId = 516; price = 90000;}
		else if(strcmp(carro, "tahoma",true)==0){VehId = 566; price = 80000;}
		else if(strcmp(carro, "hermes",true)==0){VehId = 474; price = 90000;}
		else if(strcmp(carro, "stallion",true)==0){VehId = 439; price = 60000;}
		else if(strcmp(carro, "sunrise",true)==0){VehId = 550; price = 120000;}
		else if(strcmp(carro, "yosemite",true)==0){VehId = 554; price = 120000;}
		else if(strcmp(carro, "pcj600",true)==0){VehId = 461; price = 250000;}
		else if(strcmp(carro, "admiral",true)==0){VehId = 445; price = 70000;}
		else if(strcmp(carro, "blade",true)==0){VehId = 536; price = 110000;}
		else if(strcmp(carro, "savanna",true)==0){VehId = 567; price = 130000;}
		else if(strcmp(carro, "buccanee",true)==0){VehId = 518; price = 90000;}
		else if(strcmp(carro, "pony",true)==0){VehId = 413; price = 270000;}
		else if(strcmp(carro, "elegant",true)==0){VehId = 507; price = 100000;}
		else if(strcmp(carro, "esperant",true)==0){VehId = 419; price = 70000;}
		else if(strcmp(carro, "feltze",true)==0){VehId = 533; price = 50000;}
		else if(strcmp(carro, "regina",true)==0){VehId = 479; price = 110000;}
		else if(strcmp(carro, "remington",true)==0){VehId = 534; price = 150000;}
		else if(strcmp(carro, "solair",true)==0){VehId = 458; price = 120000;}
		else if(strcmp(carro, "vincent",true)==0){VehId = 540; price = 110000;}
		else if(strcmp(carro, "virgo",true)==0){VehId = 491; price = 40000;}
		else if(strcmp(carro, "voodoo",true)==0){VehId = 412; price = 80000;}
		else if(strcmp(carro, "washing",true)==0){VehId = 421; price = 90000;}
		else if(strcmp(carro, "hustler",true)==0){VehId = 545; price = 200000;}
		else if(strcmp(carro, "peren",true)==0){VehId = 404; price = 110000;}
		else if(strcmp(carro, "rancher",true)==0){VehId = 489; price = 150000;}
		else if(strcmp(carro, "sanchez",true)==0){VehId = 468; price = 40000;}
		else if(strcmp(carro, "sultan",true)==0){VehId = 560; price = 500000;}
		else if(strcmp(carro, "alpha",true)==0){VehId = 602; price = 150000;}
        else if(strcmp(carro, "banshee",true)==0){VehId = 429; price = 600000;}
        else if(strcmp(carro, "bfinject",true)==0){VehId = 424; price = 250000;}
        else if(strcmp(carro, "broadway",true)==0){VehId = 575; price = 180000;}
        else if(strcmp(carro, "buffalo",true)==0){VehId = 402; price = 200000;}
        else if(strcmp(carro, "bullet",true)==0){VehId = 541; price = 800000;}
        else if(strcmp(carro, "cheetah",true)==0){VehId = 415; price = 300000;}
        else if(strcmp(carro, "elegy",true)==0){VehId = 562; price = 600000;}
        else if(strcmp(carro, "euros",true)==0){VehId = 587; price = 550000;}
		else if(strcmp(carro, "flash",true)==0){VehId = 565; price = 250000;}
        else if(strcmp(carro, "infernus",true)==0){VehId = 411; price = 1000000;}
        else if(strcmp(carro, "jester",true)==0){VehId = 559; price = 300000;}
        else if(strcmp(carro, "mesa",true)==0){VehId = 500; price = 200000;}
        else if(strcmp(carro, "phoenix",true)==0){VehId = 603; price = 600000;}
        else if(strcmp(carro, "sentinel",true)==0){VehId = 405; price = 80000;}
        else if(strcmp(carro, "club",true)==0){VehId = 589; price = 60000;}
		else if(strcmp(carro, "comet",true)==0){VehId = 480; price = 400000;}
        else if(strcmp(carro, "supergt",true)==0){VehId = 506; price = 350000;}
		else if(strcmp(carro, "turismo",true)==0){VehId = 451; price = 1250000;}
		else if(strcmp(carro, "windsor",true)==0){VehId = 555; price = 200000;}
		else if(strcmp(carro, "zr350",true)==0){VehId = 477; price = 400000;}
		else if(strcmp(carro, "fcr-900",true)==0){VehId = 521; price = 250000;}
		else if(strcmp(carro, "hotknife",true)==0){VehId = 434; price = 1100000;}
		else if(strcmp(carro, "bandito",true)==0){VehId = 568; price = 200000;}
		else if(strcmp(carro, "monsterb",true)==0){VehId = 557; price = 500000;}
		else if(strcmp(carro, "hotring",true)==0){VehId = 494; price = 1000000;}
		else if(strcmp(carro, "nrg-500",true)==0){VehId = 522; price = 400000;}
		else if(strcmp(carro, "quad",true)==0){VehId = 471; price = 400000;}
    	else
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Carro inválido.");

		if(Player[playerid][pDonateRank] < 2)//Player ou VIP Bronze
		{
		    format(thestring, 128, "[ERRO]:{FFFFFF} Você não tem R$%d.", price);

			if(GetPlayerGP(playerid) < price)
	            return SendClientMessage(playerid, COLOR_RED, thestring);

			format(thestring, 128, "[Atualização]: Seu veículo domiciliar é agora um %s.", params);
			SendClientMessage(playerid, SERVER_INFO, thestring);

			format(thestring, 128, "Seu carro será entregue no próximo GMR, (-R$%d).", price);
			SendClientMessage(playerid, SERVER_INFO, thestring);

            GivePlayerGP(playerid, -price);

            //Redução da Empresa e Atualizações: 100% vai para 30%. ~ Marcos

            GiveBizMoney(Biz_Atualizacao, ((price * 3) / 10));
		}
		else//VIP Prata ou VIP Ouro
		{
			format(thestring, 128, "[Atualização]: Seu veículo domiciliar é agora um %s.", params);
			SendClientMessage(playerid, SERVER_INFO, thestring);

			if(Player[playerid][pDonateRank] < 3)//Se não for VIP Ouro
			{
				SendClientMessage(playerid, SERVER_INFO, "Seu carro será entregue no próximo GMR.");
			}
			else //Se for VIP Ouro
			{
				new h = house;
				DestroyVehicle(CarroCasa[house]);
				if(HouseInfo[h][hVpos][0] == 0.0) CarroCasa[h] = AddStaticVehicleEx(VehId, HouseCarSpawns[h][0], HouseCarSpawns[h][1], HouseCarSpawns[h][2], HouseCarSpawns[h][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);
				else CarroCasa[h] = AddStaticVehicleEx(VehId, HouseInfo[h][hVpos][0], HouseInfo[h][hVpos][1], HouseInfo[h][hVpos][2], HouseInfo[h][hVpos][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);
				SendClientMessage(playerid, SERVER_INFO, "Seu carro foi entregue em sua Casa.");

                new numPlate[32];
                format(numPlate, 32, "{FF0000}BLS {000000}%04d", CarroCasa[h]);
                SetVehicleNumberPlateEx(CarroCasa[h], numPlate);
			}
		}
		HouseInfo[house][hVec] = VehId;
		SaveProperty(house);
		OnPropUpdate();
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	}
	else
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma casa.");

	return true;
}

CMD:atualizarcarroa(playerid, params[])
{
	if(GetAdminLevel(playerid) < 7) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando.");
	new casa, carro;
	if(sscanf(params, "dd", casa, carro))
	{
		SendClientMessage(playerid, COLOR_GREY,"[Uso]: {FFFFFF}/AtualizarCarroA <Casa> <Carro>");
		return true;
	}
	if(casa < 0 || casa > MAX_HOUSES -1)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Casa Invalida.");
	if(carro < 400 || carro > 611)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Carro Invalido.");

	HouseInfo[casa][hVec] = carro;
	DestroyVehicle(CarroCasa[casa]);
	new h = casa;
	if(HouseInfo[h][hVpos][0] == 0.0) CarroCasa[h] = AddStaticVehicleEx(carro, HouseCarSpawns[h][0], HouseCarSpawns[h][1], HouseCarSpawns[h][2], HouseCarSpawns[h][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);
	else CarroCasa[h] = AddStaticVehicleEx(carro, HouseInfo[h][hVpos][0], HouseInfo[h][hVpos][1], HouseInfo[h][hVpos][2], HouseInfo[h][hVpos][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);

    new numPlate[32];
    format(numPlate, 32, "{FF0000}BLS {000000}%04d", CarroCasa[h]);
    SetVehicleNumberPlateEx(CarroCasa[h], numPlate);

	SaveProperty(casa);

	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você alterou o veículo.");
	return 1;
}

CMD:estacionarcasa(playerid)
{
	if(Player[playerid][pDonateRank] < 3) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é Vip Ouro.");
	else if(Player[playerid][pHouseKey] == 255) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Casa.");
	else if(!IsStringSame(Player[playerid][pName], hOwner[Player[playerid][pHouseKey]], MAX_PLAYER_NAME)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Casa.");
	else if(!IsPlayerInVehicle(playerid, CarroCasa[Player[playerid][pHouseKey]])) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta no Veiculo da sua Casa.");

	new Float:hCoords[5],
	    cId = Player[playerid][pHouseKey],
		vId = CarroCasa[cId];
	GetVehiclePos(vId, hCoords[0], hCoords[1],  hCoords[2]);
	GetVehicleZAngle(vId, hCoords[3]);
	GetVehicleHealth(vId, hCoords[4]);

	HouseInfo[cId][hVpos][0] = hCoords[0];
	HouseInfo[cId][hVpos][1] = hCoords[1];
	HouseInfo[cId][hVpos][2] = hCoords[2];
	HouseInfo[cId][hVpos][3] = hCoords[3];

	SaveProperty(cId);

    DestroyVehicle(vId);
    CarroCasa[cId] = AddStaticVehicleEx(HouseInfo[cId][hVec], HouseInfo[cId][hVpos][0], HouseInfo[cId][hVpos][1], HouseInfo[cId][hVpos][2], HouseInfo[cId][hVpos][3], HouseInfo[cId][hVcol1], HouseInfo[cId][hVcol2], -1);
    SetVehicleHealth(vId, hCoords[4]);

    new numPlate[32];
    format(numPlate, 32, "{FF0000}BLS {000000}%04d", CarroCasa[cId]);
    SetVehicleNumberPlateEx(CarroCasa[cId], numPlate);

    SendClientMessage(playerid, -1, "Você estacionou o Veiculo da sua Casa.");
	return 1;
}

CMD:campanhia(playerid)
{
    for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if(PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
		{
    		format(thestring, sizeof(thestring), "* %s tocou a campanhia da casa.", PlayerGetName(playerid));
			ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			foreach(new p: Player)
			{
			    if(PlayerToPoint(60, p, HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
			    {
			        SendClientMessage(p, COLOR_PURPLE, "* Alguem está tocando a campanhia.");
			        PlayerPlaySound(p, 1076, 0.0, 0.0, 0.0);
			        SetTimer("StopMusic", 5000, 0);
			    }
			}
		}
  	}
    return true;
}

CMD:vendar(playerid, params[])
{
	new giveid;
    if(sscanf(params, "u", giveid))
       	return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/vendar <id/nick>");
	if(IsPlayerConnected(giveid))
	{
		if(giveid == playerid)
			return SendClientMessage(playerid, COLOR_RED, " [ERRO]:{FFFFFF} Você não pode vendar a sí mesmo.");

	    if(BlindFold[giveid] == 0)
	    {
	     	if(PlayerTied[giveid] == 1)
	      	{
	           	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(giveid))
       				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} A vítima precisa estar no seu veículo.");

				SetPlayerDrunkLevel(giveid, 50000);
   				SetPlayerCameraPos(giveid, -678.3082,-4514.4253,-92.2059);
				SetPlayerCameraLookAt(giveid, -678.3082,-4514.4253,-92.2059);
            	BlindFold[giveid] = 1;
            	format(thestring, sizeof(thestring), "* %s colocou uma venda nos olhos de %s.", PlayerGetName(playerid), Player[giveid][pName]);
            	ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        	}
        	else
            	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador precisa estar amarrado.");
		}
		else
		{
		    new Float:x, Float:y, Float:z;
		    GetPlayerPos(giveid,x,y,z);
		    if(PlayerToPoint(5, playerid, x, y, z))
		    {
		        SetCameraBehindPlayer(giveid);
		        SetPlayerDrunkLevel (giveid, 0);
		    	BlindFold[giveid] = 0;
		    	format(thestring, sizeof(thestring), "* %s tirou uma venda dos olhos de %s.", PlayerGetName(playerid), Player[giveid][pName]);
	           	ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está perto de você.");
		}
    }
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

    return true;
}

CMD:redefinirpontos(playerid)
{
	if(GetPlayerGP(playerid) < 10000)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preco de custo R$10000.");
	if(Player[playerid][pLevel] < 2)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa ter nível maior que 2.");

	Player[playerid][gPupgrade] = (Player[playerid][pLevel]-1)*3;
	Player[playerid][pSHealth] = 0.0;
	Player[playerid][pAlcoholPerk] = 0;
	Player[playerid][pDrugPerk] = 0;
	Player[playerid][pMiserPerk] = 0;
	Player[playerid][pPainPerk] = 0;
	Player[playerid][pTraderPerk] = 0;
	GivePlayerGP(playerid, -10000);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	format(thestring, 128, "Você acumulou %d pontos.",Player[playerid][gPupgrade]);
	SendClientMessage(playerid, SERVER_INFO, thestring);
	return true;
}

CMD:comprararma(playerid, params[])
{
    if(GetPlayerGP(playerid) < 1)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem o dinheiro suficiente com você.");

	new gun, guncharge, ammocharge;
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 295.5867, -80.42690, 1001.5156)
    || IsPlayerInRangeOfPoint(playerid, 2.0, 290.1323, -109.2387, 1001.5156))
	{

		new tmp[24], ammo;
		if(sscanf(params, "s[24]d", tmp, ammo))
		{
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** Armas e Municões ***");
			SendClientMessage(playerid, COLOR_GREY,"[Uso]: {FFFFFF}/comprararma <arma> <municão>");
			format(thestring, 128, "Armas: paraquedas (R$ %d) tacogolf (R$ %d) cacetete (R$ %d) tacobaseball (R$ %d) pá (R$ %d) taco (R$ %d)",
			GunPrice[0],GunPrice[1],GunPrice[2],GunPrice[3],GunPrice[4],GunPrice[5],GunPrice[6]);
			SendClientMessage(playerid, COLOR_WHITE, thestring);
			format(thestring, 128, "Armas: dildoroxo (R$ %d) dildobranco (R$ %d) dildobrancolongo (R$ %d) dildobrancosuper (R$ %d) flores (R$ %d) bengala (R$ %d)",
			GunPrice[7],GunPrice[8],GunPrice[9],GunPrice[10],GunPrice[11],GunPrice[12]);
			SendClientMessage(playerid, COLOR_WHITE, thestring);
			format(thestring, 128, "Armas: sdpistol (R$ %d) eagle (R$ %d) MP5 (R$ %d)",
			GunPrice[13],GunPrice[14],GunPrice[15],GunPrice[16],GunPrice[17],GunPrice[18]);
			SendClientMessage(playerid, COLOR_WHITE, thestring);
			format(thestring, 128, "Armas: escopeta (R$ %d) AK47 (R$ %d) M4 (R$ %d) Sniper (R$ %d) Spray (R$ %d) 9MM (R$ %d) 9MMSile (R$ %d)",
			GunPrice[19],GunPrice[20],GunPrice[21],GunPrice[22],GunPrice[23],GunPrice[24],GunPrice[30],GunPrice[31],GunPrice[32]);
			SendClientMessage(playerid, COLOR_WHITE, thestring);
			format(thestring, 128, "Municões: pistolas (R$ %d) escopetas (R$ %d) SMG (R$ %d) assaults (R$ %d) rifles (R$ %d)",
			GunPrice[25],GunPrice[26],GunPrice[27],GunPrice[28],GunPrice[29]);
			SendClientMessage(playerid, COLOR_WHITE, thestring);
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			return true;
		}
		if(ammo < 1 || ammo > 999)
		{
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Munição entre 1 e 999.");
		}
		if(strcmp(tmp, "paraquedas", true, strlen(tmp)) == 0)
		{
			gun = 46;
			guncharge = GunPrice[0];
			ammocharge = 0;
		}
		else if(strcmp(tmp, "tacogolf", true, strlen(tmp)) == 0)
		{
			gun = 2; guncharge = GunPrice[1]; ammocharge = 0;
		}
		else if(strcmp(tmp, "cacetete", true, strlen(tmp)) == 0)
		{
			gun = 3; guncharge = GunPrice[2]; ammocharge = 0;
		}
		else if(strcmp(tmp, "tacobaseball", true, strlen(tmp)) == 0)
		{
			gun = 5; guncharge = GunPrice[4]; ammocharge = 0;
		}
		else if(strcmp(tmp, "pá", true, strlen(tmp)) == 0)
		{
			gun = 6; guncharge = GunPrice[5]; ammocharge = 0;
		}
		else if(strcmp(tmp, "taco", true, strlen(tmp)) == 0)
		{
			gun = 7; guncharge = GunPrice[6]; ammocharge = 0;
		}
		else if(strcmp(tmp, "dildoroxo", true, strlen(tmp)) == 0)
		{
			gun = 10; guncharge = GunPrice[7]; ammocharge = 0;
		}
		else if(strcmp(tmp, "dildobranco", true, strlen(tmp)) == 0)
		{
			gun = 11; guncharge = GunPrice[8]; ammocharge = 0;
		}
		else if(strcmp(tmp, "dildobrancolongo", true, strlen(tmp)) == 0)
		{
			gun = 12; guncharge = GunPrice[9]; ammocharge = 0;
		}
		else if(strcmp(tmp, "dildobrancosuper", true, strlen(tmp)) == 0)
		{
			gun = 13; guncharge = GunPrice[10]; ammocharge = 0;
		}
		else if(strcmp(tmp, "flores", true, strlen(tmp)) == 0)
		{
			gun = 14; guncharge = GunPrice[11]; ammocharge = 0;
		}
		else if(strcmp(tmp, "bengala", true, strlen(tmp)) == 0)
		{
			gun = 15; guncharge = GunPrice[12]; ammocharge = 0;
		}
		else if(strcmp(tmp, "sdpistol", true, strlen(tmp)) == 0)
		{
			gun = 23; guncharge = GunPrice[13]; ammocharge = GunPrice[25]*ammo;
		}
		else if(strcmp(tmp, "eagle", true, strlen(tmp)) == 0)
		{
			gun = 24; guncharge = GunPrice[15]; ammocharge = GunPrice[25]*ammo;
		}
		else if(strcmp(tmp, "mp5", true, strlen(tmp)) == 0)
		{
			gun = 29; guncharge = GunPrice[18]; ammocharge = GunPrice[27]*ammo;
		}
		else if(strcmp(tmp, "escopeta", true, strlen(tmp)) == 0)
		{
			gun = 25; guncharge = GunPrice[19]; ammocharge = GunPrice[26]*ammo;
		}
		else if(strcmp(tmp, "ak47", true, strlen(tmp)) == 0)
		{
			gun = 30; guncharge = GunPrice[22]; ammocharge = GunPrice[28]*ammo;
		}
		else if(strcmp(tmp, "m4", true, strlen(tmp)) == 0)
		{
			gun = 31; guncharge = GunPrice[23]; ammocharge = GunPrice[28]*ammo;
		}
		else if(strcmp(tmp, "sniper", true, strlen(tmp)) == 0)
		{
			gun = 34; guncharge = GunPrice[24]; ammocharge = GunPrice[29]*ammo;
		}
		else if(strcmp(tmp, "spray", true, strlen(tmp)) == 0)
		{
			gun = 41; guncharge = GunPrice[30]; ammocharge = GunPrice[30]*ammo;
		}
		else if(strcmp(tmp, "9MM", true, strlen(tmp)) == 0)
		{
			gun = 22; guncharge = GunPrice[31]; ammocharge = GunPrice[31]*ammo;
		}
		else if(strcmp(tmp, "9MMSile", true, strlen(tmp)) == 0)
		{
			gun = 23; guncharge = GunPrice[32]; ammocharge = GunPrice[32]*ammo;
		}
		else
			return SendClientMessage(playerid, COLOR_RED, "Lojista diz: Eu nunca ouvi falar dessa arma.");

        new biz = -1;
        if(IsPlayerInRangeOfPoint(playerid, 2.0, 295.5867, -80.42690, 1001.5156))
            biz = Biz_Ammu2;
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 290.1323, -109.2387, 1001.5156))
            biz = Biz_Ammu1;

        if(Player[playerid][pBizKey] != biz)
        {
    		if((guncharge+ammocharge) > GetPlayerGP(playerid))
    		{
    			format(thestring, 128, "[ERRO]:{FFFFFF} Você não tem R$ %d.",guncharge+ammocharge);
    			SendClientMessage(playerid, COLOR_RED, thestring);
    			return true;
    		}

            if(biz != -1)
                GiveBizMoney(biz, (guncharge + ammocharge));

            GivePlayerGP(playerid, -(guncharge + ammocharge));

    		format(thestring, 128, "Você comprou %s com %d clips pelo custo de R$ %d.", params, ammo, (guncharge+ammocharge));
    		SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
        }
        else
        {
            if(BizzInfo[biz][bProducts] < 1)
                return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Sua empresa não tem Produtos.");

            BizzInfo[biz][bProducts] --;
    		format(thestring, 128, "Você pegou %s com %d clips.", params, ammo);
    		SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
        }

		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		SafeGivePlayerWeapon(playerid, gun, ammo);
		format(thestring, sizeof(thestring), "%s comprou armas por R$ %d na empresa %d", Player[playerid][pName], (guncharge + ammocharge), biz);
		WriteLog("bizz", thestring);
	}
	else
	{
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está no Local Correto.");
	}
	return true;
}

CMD:atualizar(playerid, params[])
{
	new tmp[20];
	if(sscanf(params, "s[20]", tmp))
	{
		format(thestring, sizeof(thestring), "[Uso]: {FFFFFF}/atualizar <nome> (Você tem %d pontos de atualizacão)",Player[playerid][gPupgrade]);
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessage(playerid, COLOR_WHITE,"*** ATUALIZAÇÕES DISPONÍVEIS ***");
		SendClientMessage(playerid, COLOR_GREY,thestring);
		if(Player[playerid][pLevel] == 2)
			SendClientMessage(playerid, COLOR_WHITE, "Level 2: Alcolismo, Drogas");

		else if(Player[playerid][pLevel] == 3)
			SendClientMessage(playerid, COLOR_WHITE, "Level 3: Alcolismo, Drogas, Contrabando");

		else if(Player[playerid][pLevel] == 4)
			SendClientMessage(playerid, COLOR_WHITE, "Level 4: Alcolismo, Drogas, Contrabando, Comércio");

		else if(Player[playerid][pLevel] >= 5)
			SendClientMessage(playerid, COLOR_WHITE, "Level 5: Alcolismo, Drogas, Contrabando, Comércio, Analgésicos");

		SendClientMessage(playerid, COLOR_WHITE, "Saúde extra: Saúde");
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		return true;
	}
	if(Player[playerid][gPupgrade] >= 1)
	{
		if(Player[playerid][pLevel] >= 1 && (strcmp(tmp, "saúde", true, strlen(tmp)) == 0) || (strcmp(tmp, "saude", true, strlen(tmp)) == 0))
		{
			if(Player[playerid][pSHealth] < 50)
			{
				Player[playerid][pSHealth] = Player[playerid][pSHealth]+5.0;
				format(thestring, 128, "Nova atualizacão: Sua saúde inicial é agora %.2f, foram colocados 5.0",Player[playerid][pSHealth]+50);
			}
			else
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já tem saúde máxima.");
		}
		else if(Player[playerid][pLevel] >= 2 && (strcmp(tmp, "alcolismo", true, strlen(tmp)) == 0))
		{
			if(Player[playerid][pAlcoholPerk] < 3)
			{
				Player[playerid][pAlcoholPerk] += 1;
				format(thestring, 128, "Nova atualizacão: Seu nível de alcolismo está agora %d.",Player[playerid][pAlcoholPerk]);
				Player[playerid][gPupgrade]--;
			}
			else
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Seu nível de alcolismo já está no máximo.");
		}
		else if(Player[playerid][pLevel] >= 2 && (strcmp(tmp, "drogas", true, strlen(tmp)) == 0))
		{
			if(Player[playerid][pDrugPerk] < 3)
			{
				Player[playerid][pDrugPerk] += 1;
				format(thestring, 128, "Nova atualizacão: Seu nível em drogas está agora nível %d.",Player[playerid][pDrugPerk]);
				Player[playerid][gPupgrade]--;
			}
			else
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Seu nível em drogas já está no máximo.");
		}
		else if(Player[playerid][pLevel] >= 3 && (strcmp(tmp, "contrabando", true, strlen(tmp)) == 0))
		{
			if(Player[playerid][pMiserPerk] < 3)
			{
				Player[playerid][pMiserPerk] += 1;
				format(thestring, 128, "Nova atualizacão: Seu nível de contrabando agora é %d.",Player[playerid][pMiserPerk]);
				Player[playerid][gPupgrade]--;
			}
			else
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Seu nível de contrabando está no máximo.");
		}
		else if(Player[playerid][pLevel] >= 4 && (strcmp(tmp, "comércio", true, strlen(tmp)) == 0) || (strcmp(tmp, "comercio", true, strlen(tmp)) == 0))
		{
			if(Player[playerid][pTraderPerk] < 3)
			{
				Player[playerid][pTraderPerk] += 1;
				format(thestring, 128, "Nova atualizacão: Seu nível em comércio está nível %d.",Player[playerid][pTraderPerk]);
				Player[playerid][gPupgrade]--;
			}
			else
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Seu nível em comércio está no máximo.");
		}
		else if(Player[playerid][pLevel] >= 5 && (strcmp(tmp, "analgésicos", true, strlen(tmp)) == 0) || (strcmp(tmp, "analgesicos", true, strlen(tmp)) == 0))
		{
			if(Player[playerid][pPainPerk] < 3)
			{
				Player[playerid][pPainPerk] += 1;
				format(thestring, 128, "Nova atualizacão: Seu nível em analgésicos está agora %d.",Player[playerid][pPainPerk]);
				Player[playerid][gPupgrade]--;
			}
			else
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Seu nível em analgésicos está no máximo.");
		}
		else
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não citou nenhuma atualizacão.");
	}
	else
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você tem 0 pontos de atualizacão.");

	SendClientMessage(playerid, SERVER_INFO, thestring);
	Player[playerid][gPupgrade]--;
	return true;
}

CMD:logar(playerid, params[])
{
	if(gPlayerLogged[playerid] == 1)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já está logado.");

	new tmp[24];
	if(sscanf(params, "s[24]", tmp))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/logar <senha>");

    Encrypt(tmp);
	OnPlayerLogin(playerid, tmp, tmp);
	return true;
}

CMD:an(playerid)
{
    return cmd_anuncio(playerid);
}

CMD:anuncio(playerid)
{
    if(GetPlayerGP(playerid) < BizAnunciosPrice)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem dinheiro para fazer um anúncio.");

    if(tickcount() - LiberarAnuncio[playerid] < 120000)
	{
		new PTStr[78];
		format(PTStr, sizeof(PTStr), "[ERRO]: {FFFFFF}Aguarde {AA3333}%d{FFFFFF} segundos para anunciar novamente.", 120 - (tickcount() - LiberarAnuncio[playerid])/1000);
		return SendClientMessage(playerid, COLOR_RED, PTStr);
	}

	new listitems[] = "Compro\nVendo\nProcuro\nOutros\nEscreva seu anúncio\n";
	ShowPlayerDialog(playerid,456,DIALOG_STYLE_LIST,"{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation - Opções de Anúncio",listitems,"Escolher","Sair");

	LiberarAnuncio[playerid] = tickcount();
	return true;
}

CMD:vipan(playerid, params[])
{
   	if(Player[playerid][MuteTime] > 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você foi mutado por um admin, não pode falar.");
 	if(PlayerTied[playerid] > 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você foi sequestrado, e está incomunicável!");
	if(!strlen(params) || isnull(params))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/vipan <texto>");
	if(Player[playerid][pDonateRank] < 2)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa ser VIP Prata para anunciar no /vipan");
	if(Anuncio > 0 && GetAdminLevel(playerid) == 0)
	{
		format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} Por favor, tente novamente após %d segundos.", Anuncio);
		SendClientMessage(playerid, COLOR_RED, thestring);
		return true;
	}
	if(tickcount() - LiberarVipAn[playerid] < 40000)
	{
		new PTStr[78];
		format(PTStr, sizeof(PTStr), "[ERRO]: {FFFFFF}Aguarde {AA3333}%d{FFFFFF} segundos para anunciar novamente.", 40 - (tickcount() - LiberarVipAn[playerid])/1000);
		return SendClientMessage(playerid, COLOR_RED, PTStr);
	}
	if(strlen(params) > 75)
	{
	    format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} Você usou %d caracteres. O máximo é 75.", strlen(params));
	    return SendClientMessage(playerid, COLOR_RED, thestring);
    }
	format(thestring, sizeof(thestring), "[Anúncio VIP]: %s, Contato: %s. Telefone: %d",  params, Player[playerid][pName],Player[playerid][pPnumber]);
	OOCNews(COLOR_YELLOW, thestring);
	Anuncio = 40;
	LiberarVipAn[playerid] = tickcount();
	return true;
}

CMD:anorg(playerid, params[])
{
    if(!strlen(params) || isnull(params))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/anorg <texto>");

	if(tickcount() - LiberarAnOrg[playerid] < 60000)
	{
		new PTStr[78];
		format(PTStr, sizeof(PTStr), "[ERRO]: {FFFFFF}Aguarde {AA3333}%d{FFFFFF} segundos para anunciar novamente.", 60 - (tickcount() - LiberarAnOrg[playerid])/1000);
		return SendClientMessage(playerid, COLOR_RED, PTStr);
	}
	if(Player[playerid][pMember] != 0 || Player[playerid][pLeader] != 0)
	{
	    new Membro[24];
	    if(Player[playerid][pRank] == 5 || Player[playerid][pRank] == 4)
		{
	   		Membro=OrgsNames[Player[playerid][pMember]];
		    format(thestring, sizeof(thestring), "[%s]: %s, Contato: %s Tel: %d",  Membro, params, Player[playerid][pName],Player[playerid][pPnumber]);
			OOCNews(PixColors[GetPlayerOrg(playerid)],thestring);
		}
		else if(Player[playerid][pRank] == 6)
		{
		    Membro=OrgsNames[Player[playerid][pLeader]];
		    format(thestring, sizeof(thestring), "[%s]: %s, Contato: %s Tel: %d",  Membro, params, Player[playerid][pName],Player[playerid][pPnumber]);
			OOCNews(PixColors[GetPlayerOrg(playerid)],thestring);
		}
		else
		{
		    SendClientMessage(playerid,COLOR_RED,"[ERRO]:{FFFFFF} Você precisa ser Rank 5 ou mais!");
		}
	}
	else
	{
	    SendClientMessage(playerid,COLOR_RED,"[ERRO]:{FFFFFF} Você não é membro de uma ORG.");
	}
    LiberarAnOrg[playerid] = tickcount();
	return true;
}

CMD:gov(playerid, params[])
{
	return cmd_governo(playerid, params);
}

CMD:governo(playerid, params[])
{
	if(!IsACop(playerid))
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é do governo.");
	if(Player[playerid][pRank] < 5)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisar ter cargo maior ou igual à 5.");
	if(!strlen(params) || isnull(params))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/gov <texto>");
    if(tickcount() - LiberarGov[playerid] < 60000)
	{
		new PTStr[78];
		format(PTStr, sizeof(PTStr), "[ERRO]: {FFFFFF}Aguarde {AA3333}%d{FFFFFF} segundos para anunciar novamente.", 60 - (tickcount() - LiberarGov[playerid])/1000);
		return SendClientMessage(playerid, COLOR_RED, PTStr);
	}

	SendClientMessageToAll(COLOR_WHITE, "|___________ Notícias governamentais ___________|");
	if(Player[playerid][pMember] == TEAM_PREF)
		format(thestring, sizeof(thestring), "Político %s: %s", Player[playerid][pName], params);
	else if(Player[playerid][pMember] == TEAM_BOPE)
		format(thestring, sizeof(thestring), "BOPE %s: %s", Player[playerid][pName], params);
	else if(Player[playerid][pMember] == TEAM_FA)
		format(thestring, sizeof(thestring), "Forças Armadas %s: %s", Player[playerid][pName], params);
	else if(Player[playerid][pMember] == TEAM_PM)
		format(thestring, sizeof(thestring), "Policial Militar %s: %s", Player[playerid][pName], params);
	else if(Player[playerid][pMember] == TEAM_PF)
		format(thestring, sizeof(thestring), "Policial Federal %s: %s", Player[playerid][pName], params);
	/*else if(Player[playerid][pMember] == TEAM_PCIVIL)
		format(thestring, sizeof(thestring), "Delegado Civil %s: %s", Player[playerid][pName], params);*/
	else
		format(thestring, sizeof(thestring), "Oficial %s: %s", Player[playerid][pName], params);

	SendClientMessageToAll(COLOR_DBLUE, thestring);
	LiberarGov[playerid] = tickcount();
	return true;
}

CMD:desabilitar(playerid, params[])
{
    new tmp[24];
	if(sscanf(params, "s[24]", tmp))
	{
	    ErrorMsg:
		SendClientMessage(playerid, COLOR_WHITE,"|_________ Desabilitar ________|");
		SendClientMessage(playerid, COLOR_GREY,"[Uso]: {FFFFFF}/desabilitar <nome>");
		SendClientMessage(playerid, COLOR_WHITE,"Nomes Disponíveis: celular");
		SendClientMessage(playerid, COLOR_WHITE,"|_________________________________________|");
		return true;
	}

	if(strcmp(tmp, "celular", true) == 0)
    {
        if(GetAdminLevel(playerid) > 0 || Player[playerid][pDonateRank] > 0)
        {
			if(!PhoneOnline[playerid])
			{
				PhoneOnline[playerid] = 1;
				SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você desligou seu celular (não receberá ligacões nem SMS).");
			}
			else if(PhoneOnline[playerid])
			{
				PhoneOnline[playerid] = 0;
				SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você ligou seu celular.");
			}
		}
		else
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	}
	else
	{
		goto ErrorMsg;
	}
	return true;
}

CMD:eu(playerid, params[])
{
	if(Player[playerid][MuteTime] > 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você foi mutado por um admin, não pode falar.");

	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/eu <ação>");

	format(thestring, sizeof(thestring), "%s %s", PlayerGetName(playerid), params);
	ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return true;
}

CMD:gritar(playerid, params[])
{
	return cmd_g(playerid, params);
}

CMD:g(playerid, params[])
{
	if(Player[playerid][MuteTime] > 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você foi mutado por um admin, não pode falar");
	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/g(ritar) <mensagem>");
	if(FicarRoco[playerid] >= 5)
	{
		SendClientMessage(playerid,COLOR_GREY,"Você está rouco! Vá até uma farmácia comprar pastilha!.");
		SendClientMessage(playerid,COLOR_GREEN,"Dica: A farmácia fica em frente ao banco da cidade!.");
		return true;
	}
	FicarRoco[playerid]++;
    Falar(playerid, "Berra", params, 30.0);
	return true;
}

CMD:ma(playerid, params[])
{
    if(Player[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, ADMIN_RED,"[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}(/ma) <mensagem>");

	format(thestring, sizeof(thestring), "[Administrador] %s: %s", Player[playerid][pName], params);
	ProxDetector(60.0, playerid, thestring,COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED,COLOR_LIGHTRED);
	return true;
}

CMD:testarcores(playerid, params[])
{
	SendClientMessage(playerid, 0x00FFFFFF, "{FF0000}-OperServ-:{00FFFF} O Gestor Shot_NoiX deu uma Bofetada em Shot_NoiX");
	/*SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, 0xFFA700AA, "{FF0000}[Info]:{FFFFFF} Veículos de emprego resetados por Shot_BLS");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, 0xFFE900AA, "{FF0000}[Info]:{FFFFFF} Veículos de emprego resetados por Shot_BLS");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, 0xFFE700AA, "{FF0000}[Info]:{FFFFFF} Veículos de emprego resetados por Shot_BLS");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, 0xFFFF00AA, "{FF0000}[Info]:{FFFFFF} Veículos de emprego resetados por Shot_BLS");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, COLOR_WHITE, " ");
	SendClientMessage(playerid, 0xFFF700AA, "{FF0000}[Info]:{FFFFFF} Veículos de emprego resetados por Shot_BLS");*/
	return true;
}
	
CMD:m(playerid, params[])  // megafone
{
	if(Player[playerid][MuteTime] > 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você foi mutado por um admin, não pode falar.");
  	if(PlayerTied[playerid] > 0)
   		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você foi sequestrado, e está incomunicável!");
	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}(/m)egafone <chat>");

	if(IsACop(playerid) || Player[playerid][pMember] == TEAM_BOPE)
	{
		if(Player[playerid][pMember] == TEAM_PM||Player[playerid][pLeader] == TEAM_PM)
		{
			format(thestring, sizeof(thestring), "[Polícia Militar] %s: %s", PlayerGetName(playerid), params);
			ProxDetector(60.0, playerid, thestring,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		}
		/*else if(Player[playerid][pMember] == TEAM_PCIVIL||Player[playerid][pLeader] == TEAM_PCIVIL)
		{
		    format(thestring, sizeof(thestring), "[Polícia Civil] %s: %s.", PlayerGetName(playerid), params);
		    ProxDetector(60.0, playerid, thestring,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		}*/
		else if(Player[playerid][pMember] == TEAM_PF||Player[playerid][pLeader] == TEAM_PF)
		{
			format(thestring, sizeof(thestring), "[Agente Federal]:%s: %s.", PlayerGetName(playerid), params);
			ProxDetector(60.0, playerid, thestring,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		}
		else if(Player[playerid][pMember] == TEAM_FA||Player[playerid][pLeader] == TEAM_FA)
		{
		    format(thestring, sizeof(thestring), "[Forças Armadas]: %s: %s.", PlayerGetName(playerid), params);
		    ProxDetector(60.0, playerid, thestring,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		}
/*		else if(Player[playerid][pMember] == TEAM_MUNICIPAL||Player[playerid][pLeader] == TEAM_MUNICIPAL)
		{
		    format(thestring, sizeof(thestring), "((Polícia Rodoviária))%s: %s.", PlayerGetName(playerid), params);
		    ProxDetector(60.0, playerid, thestring,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		}*/
		else if(Player[playerid][pMember] == TEAM_BOPE||Player[playerid][pLeader] == TEAM_BOPE)
		{
		    format(thestring, sizeof(thestring), "[BOPE]: %s: %s.", PlayerGetName(playerid), params);
		    ProxDetector(60.0, playerid, thestring,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		}
/*		else if(GetPlayerOrg(playerid) == TEAM_ROCAM)
		{
		    format(thestring, sizeof(thestring), "((ROCAM))%s: %s.", PlayerGetName(playerid), params);
		    ProxDetector(60.0, playerid, thestring,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		}
		else if(GetPlayerOrg(playerid) == TEAM_FT)
		{
		    format(thestring, sizeof(thestring), "((Forças Táticas))%s: %s.", PlayerGetName(playerid), params);
		    ProxDetector(60.0, playerid, thestring,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		}                             */
		WriteLog("megafone", thestring);
	}
	else
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não faz parte de uma corporação.");

	return true;
}

CMD:vid(playerid)
{
	new str[30];
	format(str, 30,"ID: %d : Modelo: %d", GetPlayerVehicleID(playerid), GetVehicleModel(GetPlayerVehicleID(playerid)));
	SendClientMessage(playerid, COLOR_WHITE, str);
	return true;
}

/*CMD:apreendidos(playerid)
{
    if(!PlayerToPoint(3.0, playerid, 325.2403,305.0568,999.1484))
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está está na Polícia Rodoviária.");

	new str[128], string[2048], placa[32];
    for(new i = 0; i < 33; i++)
   	{
        if(VeiculosApreendidos[i] == -1)
            format(placa, 32, "---");
        else
            format(placa, 32, "%s", GetVehicleNumberPlate(VeiculosApreendidos[i]));

        //format(str,128,"{C2A2DA}%s - %s\n",Apreendido[i],DOF2_GetString(APRE_FILE,Apreendido[i]));
        format(str, 128, "{C2A2DA}%d - Placa: %s(%d)\n", i + 1, placa, VeiculosApreendidos[i]);
        strcat(string, str);
    }
   	ShowPlayerDialog(playerid, 46, DIALOG_STYLE_MSGBOX, "Veículos apreendidos - Lista 1", string, "Lista 2", "Fechar");
	return true;
} */

/*CMD:apreendercarro(playerid, params[])
{
    if(Player[playerid][pMember] != TEAM_MUNICIPAL && Player[playerid][pLeader] != TEAM_MUNICIPAL)// && Player[playerid][pMember] != TEAM_PCIVIL && Player[playerid][pLeader] != TEAM_PCIVIL)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está autorizado a usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Saia do veículo para poder apreendê-lo.");

	new carid;
    if(sscanf(params, "d", carid))
    {
		SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/ApreenderCarro [ID]");
        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Use /DL para ver o ID de qualquer Veículo.");
        return 1;
    }
    if(!IsPlayerInRangeOfVehicle(playerid, carid, 6.0))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta perto do Veículo.");
    if(VehicleInfo[carid][vCustom])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este veículo não pode ser Apreendido.");

    SetVehiclePRFLocked(carid, playerid);
	return true;
}

CMD:apreendercarroadm(playerid, params[])
{
    if(GetAdminLevel(playerid) < 6)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está autorizado a usar este comando.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Saia do veículo para poder apreendê-lo.");

	new carid;
    if(sscanf(params, "d", carid))
    {
		SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/ApreenderCarroADM [ID]");
        return 1;
    }
    if(!IsPlayerInRangeOfVehicle(playerid, carid, 6.0))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta perto do Veículo.");
    if(VehicleInfo[carid][vCustom])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este veículo não pode ser Apreendido.");

    SetVehiclePRFLocked(carid, playerid);
	return true;
}

CMD:liberarcarro(playerid, params[])
{
	if(Player[playerid][pMember] != TEAM_MUNICIPAL && Player[playerid][pLeader] != TEAM_MUNICIPAL)// && Player[playerid][pMember] != TEAM_PCIVIL && Player[playerid][pLeader] != TEAM_PCIVIL)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está autorizado a usar este comando.");

	new carid;
    if(sscanf(params, "d", carid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/LiberarCarro [ID]");
    if(!IsPlayerInRangeOfVehicle(playerid, carid, 6.0))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta perto do Veículo.");

    SetVehiclePRFUnlocked(carid, playerid);
	return true;
}

CMD:liberarcarroadm(playerid, params[])
{
    if(GetAdminLevel(playerid) < 6)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está autorizado a usar este comando.");

	new carid;
    if(sscanf(params, "d", carid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/LiberarCarroADM [ID]");
    if(!IsPlayerInRangeOfVehicle(playerid, carid, 6.0))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta perto do Veículo.");

    SetVehiclePRFUnlocked(carid, playerid);
	return true;
}    */

CMD:pcar(playerid)   // placa carro
{
	for(new i = 0; i != MAX_VEHICLES; i++)
    {
  		new dist = CheckPlayerDistanceToVehicle(3.0, playerid, i);
	    if(dist)
	    {
	        if(strfind(GetVehicleNumberPlate(i), "- -", true) == 0)
	        {
	            SetVehicleNumberPlateEx(i,"SemPlaca");
               	SetVehicleToRespawn(i);
	        }
            if(GetOwnedVehicleID(i) == INVALID_VEHICLE_ID)
	       	   format(thestring, 128,"[Veiculo] Identificação: %s, ID: %d", GetVehicleNumberPlateFix(i), i);
            else
	       	   format(thestring, 128,"[Veiculo] Identificação: %s, ID: %d, Dono: %s", GetVehicleNumberPlateFix(i), i, CarInfo[GetOwnedVehicleID(i)][cOwner]);
            SendClientMessage(playerid, COLOR_YELLOW, thestring);
	    }
	}
	return true;
}

CMD:mudarcarro(playerid, params[])   // desbucar carro
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new tmp[32];
	new quantia;

    if(sscanf(params, "s[32]d", tmp, quantia))
		return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/mudarcarro <conta> <idcarro>");

	new file[52];
	format(file, sizeof(file), "/RPG/carros/%s.ini",tmp);
	if(DOF2_FileExists(file))
	{
        if(DOF2_GetInt(file,"Modelo") >= 400 && Player[playerid][pAdmin] < 7)
			return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você só pode usar este comando em caso de bugs.");
        if(quantia < 400 || quantia > 611)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O número do veículo deve ser de 400 à 611.");
        if(quantia == 487)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Apenas masters podem setar um maverick");

        DOF2_SetInt(file, "Modelo", quantia);
        DOF2_SetString(file,"Dono",tmp);
        DOF2_SaveFile();
		format(thestring, sizeof(thestring), "%s mudou o carro de %s para %s.",ReturnPlayer(playerid),tmp,quantia);
		ABroadCast(COLOR_LIGHTBLUE,thestring,1);
	}
	else
	    SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O jogador não tem carro.");

	return true;
}

CMD:on(playerid, params[])
{
	return cmd_onibus(playerid, params);
}

CMD:onibus(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}(/on)ibus [chat]");

	if(GetPlayerState(playerid)== PLAYER_STATE_DRIVER && GetVehicleModel(GetPlayerVehicleID(playerid)) == 437)
	{
		format(thestring, sizeof(thestring), "Motorista %s: %s, câmbio. ", Player[playerid][pName], params);
		SendPointMessage(COLOR_YELLOW, thestring);
		WriteLog("onibus", thestring);
		return true;
	}
	else if(PlayerToPoint(8.0, playerid, 2021.8811,2240.7681,2103.9536))
	{
	    format(thestring, sizeof(thestring), "Passageiro %s: %s, câmbio. ", Player[playerid][pName], params);
		SendPointMessage(COLOR_YELLOW, thestring);
		return true;
	}
	else
	    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um ônibus");

	return true;
}

CMD:batercartao(playerid, params[])
{
	if(GetTickCount() - AntiFlood[playerid][5] < 20000)
   	{
		format(thestring, 128, "[ERRO]:{FFFFFF} Você precisa esperar %d segundos para usar esse comando novamente!",20-(GetTickCount() - AntiFlood[playerid][5])/1000);
		SendClientMessage(playerid, COLOR_RED, thestring);
       	return true;
 	}
/*	if(Player[playerid][pMember] == TEAM_PF)
	{
		if(PlayerToPoint(2.0, playerid, 220.7165, 176.6567, 1003.0253))
		{
			if(OnDuty[playerid]==0)
	        {
		    	format(thestring, sizeof(thestring), "O Agente Federal %s pegou seus equipamentos e distintivo.", PlayerGetName(playerid));
				ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ApplyAnimation(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
  		        SetTimerEx("LimparAnim", 2000, false, "i", playerid);
				SafeGivePlayerWeapon(playerid, 24, 150);
				SafeGivePlayerWeapon(playerid, 25, 150);
				SafeGivePlayerWeapon(playerid, 3, 0);
				SafeGivePlayerWeapon(playerid, 29, 300);
				SafeGivePlayerWeapon(playerid, 31, 300);
				SafeGivePlayerWeapon(playerid, 34, 60);
				SafeGivePlayerWeapon(playerid, 43, 72);
				SetPlayerArmour(playerid, 90);
				SetPlayerHealth(playerid, 100);
				SetPlayerSkin(playerid, 286);
	            Player[playerid][pModel] = GetPlayerSkin(playerid);
				OnDuty[playerid] = 1;
			}
			else if(OnDuty[playerid]==1)
			{
				format(thestring, sizeof(thestring), "O Agente Federal %s devolveu seus equipamentos e distintivo.", PlayerGetName(playerid));
				ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ApplyAnimation(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
  	       	    SetTimerEx("LimparAnim", 2000, false, "i", playerid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você recebeu sua arma pessoal de volta.");
				ResetPlayerWeapons(playerid);
				SetPlayerArmour(playerid, 0);
				SafeGivePlayerWeapon(playerid, 24, 21);
				OnDuty[playerid] = 0;
			}
		}
		else
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está no vestiário!");
	}
	if(Player[playerid][pMember] == TEAM_FA)
	{
		if(PlayerToPoint(2, playerid, 240.2817, 123.2749, 1003.2576))
		{
			if(OnDuty[playerid] == 0)
	        {
                new sendername[MAX_PLAYER_NAME], string[155];
                GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "O Agente Federal %s pegou seus equipamentos e distintivo.", PlayerGetName(playerid));
                ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);

                SetPlayerFacingAngle(playerid, 90.0);
				ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
  		        SetTimerEx("LimparAnim", 2000, false, "i", playerid);

				SafeGivePlayerWeapon(playerid, 3, 0);
				SafeGivePlayerWeapon(playerid, 24, 150);
				SafeGivePlayerWeapon(playerid, 25, 150);
				SafeGivePlayerWeapon(playerid, 29, 300);
				SafeGivePlayerWeapon(playerid, 31, 300);
				SafeGivePlayerWeapon(playerid, 34, 60);
				SafeGivePlayerWeapon(playerid, 43, 72);

//				SetPlayerHealth(playerid, 100);
				SetPlayerArmour(playerid, 90);

				SetPlayerSkin(playerid, 286);

				OnDuty[playerid] = 1;
			}
			else if(OnDuty[playerid] == 1)
			{
                new sendername[MAX_PLAYER_NAME], string[155];
                GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O Agente Federal %s devolveu seus equipamentos e distintivo.", PlayerGetName(playerid));
                ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);

                SetPlayerFacingAngle(playerid, 90.0);
				ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
  	       	    SetTimerEx("LimparAnim", 2000, false, "i", playerid);

				ResetPlayerWeapons(playerid);
				SafeGivePlayerWeapon(playerid, 24, 21);

				SetPlayerArmour(playerid, 0);

                SetPlayerSkin(playerid, Player[playerid][pModel]);

				OnDuty[playerid] = 0;
			}
		}
		else
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está no Local Correto!");
	}
    else if(Player[playerid][pMember] == TEAM_PCIVIL && GetPlayerVirtualWorld(playerid) == 1)
    {
		if(PlayerToPoint(2, playerid, 220.7165, 176.6567, 1003.0253))
		{
			if(OnDuty[playerid] == 0)
	        {
                new sendername[MAX_PLAYER_NAME], string[155];
                GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
		    	format(string, sizeof(string), "O Policial Civil %s pegou seus equipamentos e distintivo.", PlayerGetName(playerid));
                ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);

                SetPlayerFacingAngle(playerid, 0.0);
	 			ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
  		        SetTimerEx("LimparAnim", 2000, false, "i", playerid);

				SafeGivePlayerWeapon(playerid, 3, 0);
				SafeGivePlayerWeapon(playerid, 24, 200);
				SafeGivePlayerWeapon(playerid, 25, 50);
				SafeGivePlayerWeapon(playerid, 29, 200);
				SafeGivePlayerWeapon(playerid, 31, 200);

//					SetPlayerHealth(playerid, 100);
				SetPlayerArmour(playerid, 90);

				if(Player[playerid][pRank] == 6)
				   SetPlayerSkin(playerid, 120);
                else
				   SetPlayerSkin(playerid, 124);

	            Player[playerid][pModel] = GetPlayerSkin(playerid);
				OnDuty[playerid] = 1;
			}
			else if(OnDuty[playerid] == 1)
			{
                new sendername[MAX_PLAYER_NAME], string[155];
                GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
				format(string, sizeof(string), "O Policial Civil %s devolveu seus equipamentos e distintivo.", PlayerGetName(playerid));
                ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);

                SetPlayerFacingAngle(playerid, 0.0);
                ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
  		        SetTimerEx("LimparAnim", 2000, false, "i", playerid);

				ResetPlayerWeapons(playerid);
				SafeGivePlayerWeapon(playerid, 24, 21);

				SetPlayerArmour(playerid, 0);

				OnDuty[playerid] = 0;
			}
		}
    }
	else if(Player[playerid][pMember] == TEAM_MUNICIPAL)
   	{
    	if(PlayerToPoint(5, playerid,320.8569,309.2000,999.1484))
    	{
    		if(OnDuty[playerid] == 0)
            {
       	    	format(thestring, sizeof(thestring), "O Guarda %s pegou seus equipamentos e distintivo.", PlayerGetName(playerid));
				ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	 			ApplyAnimation(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
   		        SetTimerEx("LimparAnim", 2000, false, "i", playerid);
				SafeGivePlayerWeapon(playerid, 24, 400);
				SafeGivePlayerWeapon(playerid, 3, 5);
				SetPlayerArmour(playerid, 90);
				SetPlayerHealth(playerid, 100);
				if(Player[playerid][pRank] < 5)
				{
					SetPlayerSkin(playerid, 282);
				}
				else if(Player[playerid][pRank] >= 5)
				{
					SetPlayerSkin(playerid, 283);
				}
			    Player[playerid][pModel] = GetPlayerSkin(playerid);
				OnDuty[playerid] = 1;
	    	}
			else if(OnDuty[playerid]==1)
			{
				format(thestring, sizeof(thestring), "O Guarda %s devolveu seus equipamentos e distintivo.", PlayerGetName(playerid));
				ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            ApplyAnimation(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
	            SetTimerEx("LimparAnim", 2000, false, "i", playerid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você recebeu sua arma pessoal de volta.");
				ResetPlayerWeapons(playerid);
				SetPlayerArmour(playerid, 0);
				SafeGivePlayerWeapon(playerid, 24, 21);
				OnDuty[playerid] = 0;
		    }
     	}
    }
	else if(Player[playerid][pMember] == TEAM_BOPE && GetPlayerVirtualWorld(playerid) == 0)
	{
		if(PlayerToPoint(3, playerid,241.2734,121.9725,1003.3057))
		{
			if(OnDuty[playerid]==0)
	        {
    	    	format(thestring, sizeof(thestring), "O oficial %s pegou seus equipamentos e distintivo.", PlayerGetName(playerid));
				ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SafeGivePlayerWeapon(playerid, 4, 5);
				SafeGivePlayerWeapon(playerid, 24, 400);
				SafeGivePlayerWeapon(playerid, 31, 800);
				SetPlayerArmour(playerid, 90);
				SetPlayerHealth(playerid, 100);
				SetPlayerSkin(playerid, 285);
			    Player[playerid][pModel] = GetPlayerSkin(playerid);
				OnDuty[playerid] = 1;
				if(Player[playerid][pRank] >= 5)
				{
					SafeGivePlayerWeapon(playerid, 34, 35);
				}
			}
			else if(OnDuty[playerid]==1)
			{
				format(thestring, sizeof(thestring), "O oficial %s devolveu seus equipamentos e distintivo.", PlayerGetName(playerid));
				ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você recebeu sua arma pessoal de volta.");
				ResetPlayerWeapons(playerid);
				SetPlayerArmour(playerid, 0);
				SafeGivePlayerWeapon(playerid, 24, 21);
				OnDuty[playerid] = 0;
			}
		}
		else
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está no vestiário!");
	}*/
    if(Player[playerid][pJob] == MECANICO)
	{
	    if(JobDuty[playerid] == 1)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Folga: Você não receberá ligacões de servicos de pessoas solicitando");
	        JobDuty[playerid] = 0;
	        Mechanics -= 1;
	    }
	    else
	    {
	        format(thestring, sizeof(thestring), "[Anuncio]: Mecânico de automóveis %s está trabalhando, /servico mecanico para chamá-lo", Player[playerid][pName]);
	        OOCNews(COLOR_LIGHTGREEN,thestring);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Trabalhando: Você receberá ligacões de serviços de pessoas solicitando serviço mecânico");
	        JobDuty[playerid] = 1;
	        Mechanics += 1;
	    }
	}
	else if(Player[playerid][pJob] == MEDICO)
	{
	    if(JobDuty[playerid] == 1)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Folga: Você não receberá ligacões de serviços de pessoas solicitando");
	        JobDuty[playerid] = 0;
	        Medics -= 1;
	    }
	    else
	    {
	        format(thestring, sizeof(thestring), "[Anuncio]: Médico %s está trabalhando, /servico medico para chamá-lo", Player[playerid][pName]);
	        OOCNews(COLOR_LIGHTGREEN,thestring);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Trabalhando: Você receberá ligacões de servicos de pessoas solicitando servico medico");
	        JobDuty[playerid] = 1;
	        Medics += 1;
	    }
	}
	else if(Player[playerid][pJob] == EPIZZA)
   	{
    	if(JobDuty[playerid] == 1)
    	{
    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Folga: Você está fora do seu trabalho de pizza delivery e não receberá mais chamadas.");
    		JobDuty[playerid] = 0;
    		PizzaBoys -= 1;
    	}
    	else
    	{
    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Trabalhando: Você agora está de plantão e receberá chamadas de pessoas querendo pizzas.");
    		JobDuty[playerid] = 1;
    		PizzaBoys += 1;
   			format(thestring, sizeof(thestring), "[Anuncio]: Motoboy %s está entregando pizzas, use /servico pizza para pedir uma.", Player[playerid][pName]);
	    	OOCNews(COLOR_LIGHTGREEN,thestring);
		}
	}
	else
	    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem acesso a esse comando.");

   	AntiFlood[playerid][5] = GetTickCount();
	return true;
}

CMD:vl(playerid) return cmd_motor(playerid);

CMD:motor(playerid)
{
    new vid = GetPlayerVehicleID(playerid);
    if(GetPlayerVehicleSeat(playerid) != 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está dirigindo o veículo.");
    if(EventoInfo[VeiculoEvento][vid] && EventoInfo[EventoRace])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode Ligar/Desligar Veiculos em Evento de Corrida.");
    if(PlayerInRace[playerid])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode Ligar/Desligar Veiculos durante uma Corrida.");
    if(VehicleInfo[vid][vGas] < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Veiculo não tem Gasolina.");

    if((vid >= CarroVIP[0] && vid <= CarroVIP[sizeof(CarroVIP) -1]) && Player[playerid][pVIP] == 0){
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é VIP!");
		return 1;
	}
	else if(vid >= AluguelCarro[0] && vid <= AluguelCarro[sizeof(AluguelCarro) -1])
	{
		if(HireCar[playerid] != vid)
		{
		    new string[128];
			format(string, sizeof(string), "[ERRO]:{FFFFFF} Você não tem a chave deste carro, voce pode alugá-lo por R$ %d com o comando /alugarcarro", BizCarrosPrice[GetAluguelCarroVarID(vid)]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			return 1;
		}
	}
	else if(vid >= AluguelMoto[0] && vid <= AluguelCarro[sizeof(AluguelMoto) -1])
	{
		if(HireCar[playerid] != vid)
		{
		    new string[128];
			format(string, sizeof(string), "[ERRO]:{FFFFFF} Você não tem a chave desta moto, voce pode alugá-la por R$ %d com o comando /alugarcarro", BizMotosPrice[GetAluguelMotoVarID(vid)]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			return 1;
		}
	}
	else if(vid >= AluguelAero[0] && vid <= AluguelAero[sizeof(AluguelAero) -1])
	{
		if(HireCar[playerid] != vid)
		{
		    new string[128];
			format(string, sizeof(string), "[ERRO]:{FFFFFF} Você não tem a chave deste avião, voce pode alugá-lo por R$ %d com o comando /clugarcarro", BizAeroPrice[GetAluguelAeroVarID(vid)]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			return 1;
		}
	}

    new TV = TransportVehicle(GetPlayerVehicleID(playerid));
    if(TV != INVALID_VEHICLE_ID)
        if(VeiculoMaterialAlugado[TV][0] != GetPlayerOrg(playerid))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem a chave deste veículo.");

    if(VehicleInfo[vid][vEngine]) {
        new model = GetVehicleModel(vid);
        if(model == 509 || model == 481 || model == 510)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este veículo não tem motor.");
        format(thestring, sizeof(thestring), "* %s gira a chave e desliga seu veículo.", PlayerGetName(playerid));
	    ProxDetector(20.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        VehicleInfo[vid][vEngine] = false;
	    SendClientMessage(playerid, COLOR_WHITE,"Veículo:{FF0000} Desligado!");
    }
    else{
        for(new c = 0; c < sizeof(ConceCars); c++)
        {
            if(vid == ConceCars[c][vID])
            {
                return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode ligar um veículo da concessionária.");
            }
        }
        new Float:health;
        GetVehicleHealth(vid, health);
        if(health == 280) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O motor está fundido.");
        format(thestring, sizeof(thestring), "* %s gira a chave e liga seu veículo.", PlayerGetName(playerid));
	    ProxDetector(20.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        VehicleInfo[vid][vEngine] = true;
        SendClientMessage(playerid, COLOR_WHITE, "Veículo: {009900}Ligado!");
    }
    new engine, lights, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(vid, VehicleInfo[vid][vEngine], lights, alarm, doors, bonnet, boot, objective);
    return 1;
}

CMD:d(playerid, params[])  //departamentos
{
	if(Player[playerid][MuteTime] > 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você foi mutado por um admin, não pode falar.");
	if(PlayerTied[playerid] > 0)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você foi sequestrado, e está incomunicável!");
	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}(/D)epartamentos [Texto]");
    if(!IsACop(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não faz parte do grupo.");

    format(thestring, sizeof(thestring), "%s %s(Radio): %s, câmbio. **", GetPlayerRank(playerid), Player[playerid][pName], params);
    SendCopMessage(COLOR_REDEVAS, thestring);

/*	if(Player[playerid][pMember] == TEAM_PM || Player[playerid][pLeader] == TEAM_PM
    || GetPlayerOrg(playerid) == TEAM_ROCAM || GetPlayerOrg(playerid) == TEAM_FT)
	{
	    if(Player[playerid][pRank] == 6) {  }
		else if(Player[playerid][pRank] == 5) { format(thestring, sizeof(thestring), "Coronel %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 4) { format(thestring, sizeof(thestring), "Capitão %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 3) { format(thestring, sizeof(thestring), "Oficial %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 2) { format(thestring, sizeof(thestring), "Cabo %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 1) { format(thestring, sizeof(thestring), "Guarda %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else
		{
			format(thestring, sizeof(thestring), "Cabo %s(Radio): %s, câmbio. **", Player[playerid][pName], params);
		}
		SendCopMessage(COLOR_REDEVAS, thestring);
		return true;
	}
	else if(Player[playerid][pMember] == TEAM_PCIVIL || Player[playerid][pLeader] == TEAM_PCIVIL)
	{
	    if(Player[playerid][pRank] == 6) { format(thestring, sizeof(thestring), "Delegado Civil %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
	    else if(Player[playerid][pRank] == 5) { format(thestring, sizeof(thestring), "Chefe de departamento %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
	    else if(Player[playerid][pRank] == 4) { format(thestring, sizeof(thestring), "Agente Civil %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
	    else if(Player[playerid][pRank] == 3) { format(thestring, sizeof(thestring), "Espião Civil %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
	    else if(Player[playerid][pRank] == 2) { format(thestring, sizeof(thestring), "Investigador Civil %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
	    else if(Player[playerid][pRank] == 1) { format(thestring, sizeof(thestring), "Escrivão Civil %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
	    else
	    {
	        format(thestring, sizeof(thestring), "Investigador Civil %s(Radio): %s, câmbio. **", Player[playerid][pName], params);
		}
    	SendCopMessage(COLOR_REDEVAS, thestring);
		return true;
	}
	else if(Player[playerid][pMember] == TEAM_PF || Player[playerid][pLeader] == TEAM_PF)
	{
	    if(Player[playerid][pRank] == 6) { format(thestring, sizeof(thestring), "Delegado Federal %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 5) { format(thestring, sizeof(thestring), "Chefe de departamento %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 4) { format(thestring, sizeof(thestring), "Agente federal %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 3) { format(thestring, sizeof(thestring), "Investigador Especial %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 2) { format(thestring, sizeof(thestring), "Investigador %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 1) { format(thestring, sizeof(thestring), "Escrivão %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else
		{
			format(thestring, sizeof(thestring), "Investigador %s(Radio): %s, câmbio. **", Player[playerid][pName], params);
		}
    	SendCopMessage(COLOR_REDEVAS, thestring);
		return true;
	}
	else if(Player[playerid][pMember] == TEAM_FA || Player[playerid][pLeader] == TEAM_FA)
	{
	    if(Player[playerid][pRank] == 6) { format(thestring, sizeof(thestring), "General %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 5) { format(thestring, sizeof(thestring), "Coronel %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 4) { format(thestring, sizeof(thestring), "Capitão %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 3) { format(thestring, sizeof(thestring), "Tenente %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 2) { format(thestring, sizeof(thestring), "Sargento %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 1) { format(thestring, sizeof(thestring), "Soldado %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else
		{
			format(thestring, sizeof(thestring), "Recruta %s(Radio): %s, câmbio. **", Player[playerid][pName], params);
		}
		SendCopMessage(COLOR_REDEVAS, thestring);
		return true;
	}
	else if(Player[playerid][pMember] == TEAM_BOMBE || Player[playerid][pLeader] == TEAM_BOMBE)
	{
	    if(Player[playerid][pRank] == 6) { format(thestring, sizeof(thestring), "Coronel %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 5) { format(thestring, sizeof(thestring), "Capitão %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 4) { format(thestring, sizeof(thestring), "Tenente %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 3) { format(thestring, sizeof(thestring), "Sub-Tenente %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 2) { format(thestring, sizeof(thestring), "Sargento %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 1) { format(thestring, sizeof(thestring), "Soldado %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else
		{
			format(thestring, sizeof(thestring), "Recruta %s(Radio): %s, câmbio. **", Player[playerid][pName], params);
		}
		SendCopMessage(COLOR_REDEVAS, thestring);
		return true;
	}
	else if(Player[playerid][pMember] == TEAM_PREF || Player[playerid][pLeader] == TEAM_PREF)
	{
	    if(Player[playerid][pRank] == 6) { format(thestring, sizeof(thestring), "Prefeito %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 5) { format(thestring, sizeof(thestring), "Vice-Prefeito %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 4) { format(thestring, sizeof(thestring), "Vereador %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 3) { format(thestring, sizeof(thestring), "Seguranca 1 %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 2) { format(thestring, sizeof(thestring), "Seguranca 2 %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 1) { format(thestring, sizeof(thestring), "Motorista %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else
		{
			format(thestring, sizeof(thestring), "Motorista %s(Radio): %s, câmbio. **", Player[playerid][pName], params);
		}
		SendCopMessage(COLOR_REDEVAS, thestring);
		return true;
	}
	else if(Player[playerid][pMember] == TEAM_MUNICIPAL || Player[playerid][pLeader] == TEAM_MUNICIPAL)
	{
	    if(Player[playerid][pRank] == 6) { format(thestring, sizeof(thestring), "[Radio] Chefe da Guarda %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 5) { format(thestring, sizeof(thestring), "[Radio] Sub-Chefe Guarda %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 4) { format(thestring, sizeof(thestring), "[Radio] Guarda Inspetor %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 3) { format(thestring, sizeof(thestring), "[Radio] Sub-Inspetor Guarda %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 2) { format(thestring, sizeof(thestring), "[Radio] Policial Rodoviário %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 1) { format(thestring, sizeof(thestring), "[Radio] Estagiário Guarda %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else
		{
			format(thestring, sizeof(thestring), "[Radio] Estagiario Guarda %s(Radio): %s, câmbio. **", Player[playerid][pName], params);
		}
		SendCopMessage(COLOR_REDEVAS, thestring);
		return true;
	}
	else if(Player[playerid][pMember] == TEAM_BOPE || Player[playerid][pLeader] == TEAM_BOPE)
	{
	    if(Player[playerid][pRank] == 6) { format(thestring, sizeof(thestring), "Chefe BOPE %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 5) { format(thestring, sizeof(thestring), "Sub-BOPE %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 4) { format(thestring, sizeof(thestring), "Agente BOPE %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 3) { format(thestring, sizeof(thestring), "Membro BOPE %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 2) { format(thestring, sizeof(thestring), "Cadete BOPE %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 1) { format(thestring, sizeof(thestring), "Recruta %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else
		{
			format(thestring, sizeof(thestring), "Investigador %s(Radio): %s, câmbio. **", Player[playerid][pName], params);
		}
		SendCopMessage(COLOR_REDEVAS, thestring);
		return true;
	}
	else if(Player[playerid][pMember] == TEAM_PCIVIL || Player[playerid][pLeader] == TEAM_PCIVIL)
	{
	    if(Player[playerid][pRank] == 6) { format(thestring, sizeof(thestring), "[Radio] Chefe Civil %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 5) { format(thestring, sizeof(thestring), "[Radio] Tenente Civil %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 4) { format(thestring, sizeof(thestring), "[Radio] Sargento Civil %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 3) { format(thestring, sizeof(thestring), "[Radio] Cabo Civil %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 2) { format(thestring, sizeof(thestring), "[Radio] Soldado Civil %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else if(Player[playerid][pRank] == 1) { format(thestring, sizeof(thestring), "[Radio] Estagiário Civil %s(Radio): %s, câmbio. **", Player[playerid][pName], params); }
		else
		{
			format(thestring, sizeof(thestring), "[Radio] Estagiario Civil %s(Radio): %s, câmbio. **", Player[playerid][pName], params);
		}
		SendCopMessage(COLOR_REDEVAS, thestring);
		return true;
	}
	else*/
    return 1;//SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não faz parte do grupo.");
}

CMD:minhaficha(playerid)
{
	SendClientMessage(playerid, COLOR_PM,"______-=FICHA CRIMINAL * MINISTÉRIO DA DEFESA=-_______");
	format(thestring, sizeof(thestring), "Nome : %s", Player[playerid][pName]);
	SendClientMessage(playerid, COLOR_WHITE,thestring);
	format(thestring, sizeof(thestring), "Nível de procurado : %d", WantedPoints[playerid]);
	SendClientMessage(playerid, COLOR_GREY,thestring);
	format(thestring, sizeof(thestring), "Crime : %s", PlayerCrime[playerid][pAccusedof]);
	SendClientMessage(playerid, COLOR_GREY,thestring);
	format(thestring, sizeof(thestring), "Vítima : %s", PlayerCrime[playerid][pVictim]);
	SendClientMessage(playerid, COLOR_GREY,thestring);
	format(thestring, sizeof(thestring), "Relato : %s", PlayerCrime[playerid][pAccusing]);
	SendClientMessage(playerid, COLOR_GREY,thestring);
	format(thestring, sizeof(thestring), "Acusado : %s", PlayerCrime[playerid][pBplayer]);
	SendClientMessage(playerid, COLOR_GREY,thestring);
	format(thestring, sizeof(thestring), "Dívida em Multas : R$%d (%d multas)", multa[playerid], multas[playerid]);
	SendClientMessage(playerid, COLOR_GREY,thestring);
	SendClientMessage(playerid, COLOR_PM,"_______________________________________");
	return true;
}

CMD:ficha(playerid, params[])
{
	if(!IsACop(playerid))
    	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Policial.");

   	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Ficha [Nome/ID]");

	if(IsACopCar(GetVehicleModel(GetPlayerVehicleID(playerid)))
    || PlayerToPoint(30.0, playerid, 245.9469, 75.8629, 1003.6406)   //PM
    || PlayerToPoint(2.00, playerid, 199.0265, 168.3035, 1003.0234)  //PC
    ||(PlayerToPoint(2.00, playerid, 237.2128, 123.2008, 1003.2187)) //PF e BOPE
    || PlayerToPoint(2.00, playerid, 311.8334, -168.7328, 999.5937)) //FA
    //||(PlayerToPoint(2.00, playerid, 326.7650, 307.2324, 999.1484) && GetPlayerVirtualWorld(playerid) == 1)) //PRF
	{
		if(IsPlayerConnected(giveid))
		{
		    if(giveid != INVALID_PLAYER_ID)
		    {
				SendClientMessage(playerid, COLOR_PM,"______-=FICHA CRIMINAL * MINISTÉRIO DA DEFESA=-_______");
				format(thestring, sizeof(thestring), "Nome : %s", Player[giveid][pName]);
				SendClientMessage(playerid, COLOR_WHITE,thestring);
				format(thestring, sizeof(thestring), "Nível de procurado : %d", WantedPoints[giveid]);
				SendClientMessage(playerid, COLOR_GREY,thestring);
				format(thestring, sizeof(thestring), "Crime : %s", PlayerCrime[giveid][pAccusedof]);
				SendClientMessage(playerid, COLOR_GREY,thestring);
				format(thestring, sizeof(thestring), "Vítima : %s", PlayerCrime[giveid][pVictim]);
				SendClientMessage(playerid, COLOR_GREY,thestring);
				format(thestring, sizeof(thestring), "Relato : %s", PlayerCrime[giveid][pAccusing]);
				SendClientMessage(playerid, COLOR_GREY,thestring);
				format(thestring, sizeof(thestring), "Acusado : %s", PlayerCrime[giveid][pBplayer]);
				SendClientMessage(playerid, COLOR_GREY,thestring);
				format(thestring, sizeof(thestring), "Dívida em Multas : R$%d", multa[giveid]);
				SendClientMessage(playerid, COLOR_GREY,thestring);
				SendClientMessage(playerid, COLOR_PM,"_______________________________________");
			}
		}
		else
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
	}
	else
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um carro de oficial ou no departamento.");
	return true;
}

CMD:verficha(playerid, params[])
{
	if(GetAdminLevel(playerid) < 3)
        return false;

   	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/VerFicha [Nome/ID]");

	if(IsPlayerConnected(giveid))
	{
	    if(giveid != INVALID_PLAYER_ID)
	    {
			SendClientMessage(playerid, COLOR_PM,"______-=FICHA CRIMINAL * MINISTÉRIO DA DEFESA=-_______");
			format(thestring, sizeof(thestring), "Nome : %s", Player[giveid][pName]);
			SendClientMessage(playerid, COLOR_WHITE,thestring);
			format(thestring, sizeof(thestring), "Nível de procurado : %d", WantedPoints[giveid]);
			SendClientMessage(playerid, COLOR_GREY,thestring);
			format(thestring, sizeof(thestring), "Crime : %s", PlayerCrime[giveid][pAccusedof]);
			SendClientMessage(playerid, COLOR_GREY,thestring);
			format(thestring, sizeof(thestring), "Vítima : %s", PlayerCrime[giveid][pVictim]);
			SendClientMessage(playerid, COLOR_GREY,thestring);
			format(thestring, sizeof(thestring), "Relato : %s", PlayerCrime[giveid][pAccusing]);
			SendClientMessage(playerid, COLOR_GREY,thestring);
			format(thestring, sizeof(thestring), "Acusado : %s", PlayerCrime[giveid][pBplayer]);
			SendClientMessage(playerid, COLOR_GREY,thestring);
			format(thestring, sizeof(thestring), "Dívida em Multas : R$%d", multa[giveid]);
			SendClientMessage(playerid, COLOR_GREY,thestring);
			SendClientMessage(playerid, COLOR_PM,"_______________________________________");
		}
	}
	else
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
	return true;
}

CMD:suspeito(playerid, params[])
{
    return cmd_su(playerid, params);
}

CMD:su(playerid, params[])
{
   	new giveid;
   	new result[40];
	if(sscanf(params, "us[40]", giveid, result))
	{
        SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}(/su)speito <id/nick> <descricão crime>");
        SendClientMessage(playerid, COLOR_YELLOW, "[Dica]: {FFFFFF}Para ver a Lista de SU use /ListaSU.");
        return 1;
    }

	if(IsACop(giveid))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode dar SU em oficiais.");

	if(IsACop(playerid))
	{
		if(IsPlayerConnected(giveid))
		{
		    if(giveid != INVALID_PLAYER_ID)
		    {
				if(Player[giveid][pJailed] > 0 && strcmp(result,"AP",true) != 0)
				{
					SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador já está preso!");
					return true;
				}
				if(Player[giveid][pJailed] == 2)
				{
					SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador já está no bangu!");
					return true;
				}
				if(g@PlayerSu[giveid])
				{
					SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador já levou um su no período de 1 minuto!");
					return true;
				}
				if(strcmp(result,"AP", true) == 0) { result = "Ajuste de pena"; }
				else if(strcmp(result,"DOP", true) == 0) { result = "Desobediência a ordem policial"; }
				else if(strcmp(result,"TH", true) == 0) { result = "Tentativa de homicídio"; }
				else if(strcmp(result,"CA", true) == 0) { result = "Contrabando de armas"; }
				else if(strcmp(result,"PD", true) == 0) { result = "Porte de Drogas"; }
				else if(strcmp(result,"RV", true) == 0) { result = "Roubo de Veículo"; }
				else if(strcmp(result,"RM", true) == 0) { result = "Rejeicão de multa"; }
				else if(strcmp(result,"RP", true) == 0) { result = "Resistencia a prisão"; }
				else if(strcmp(result,"ILR", true) == 0) { result = "Invasão a Local Restrito"; }
				else if(strcmp(result,"RMD", true) == 0) { result = "Rejeicão a Mostrar Documentos"; }
				else if(strcmp(result,"DA", true) == 0) { result = "Desacato á Autoridade"; }
				else if(strcmp(result,"PIA", true) == 0) { result = "Porte Ilegal de Armas"; }
				else if(strcmp(result,"CF", true) == 0) { result = "Cumplice de Fugas"; }
				else if(strcmp(result,"CS", true) == 0) { result = "Cumplice de Sequestro"; }
				else if(strcmp(result,"CR", true) == 0) { result = "Cumplice de Roubo"; }
				else if(strcmp(result,"TS", true) == 0) { result = "Tentativa de Suborno"; }
				else if(strcmp(result,"TD", true) == 0) { result = "Tráfico de Drogas"; }
				else if(strcmp(result,"TM", true) == 0) { result = "Tráfico de Materiais"; }
				else if(strcmp(result,"DP", true) == 0) { result = "Direção Perigosa"; }
				else if(strcmp(result,"DPP", true) == 0) { result = "Dano ao Partimonio Público"; }
				else if(strcmp(result,"PP", true) == 0) { result = "Porte de Explosivo"; }
				else
				{
					SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} SU inexistente!");
					return true;
				}
                g@PlayerSu[giveid] = true;
                SetTimerEx("EndSuCount", 60000, false, "d", giveid);
				WantedPoints[giveid] += 1;
				SetPlayerCriminal(giveid,playerid,result, "Desconhecido");
				return true;
			}
		}
		else
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é PM / PF / FA / BOPE / PC.");

	return true;
}

CMD:listasu(playerid, params[])
{
    if(!IsACop(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é PM / PF / FA / BOPE / PC.");

    ShowAjuda(playerid, "ListaSU", false);
    return 1;
}

CMD:fake(playerid, params[])
{
    if(Player[playerid][pAdmin] < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este Comando.");

    new pId, _pName[MAX_PLAYER_NAME];
    if(sscanf(params, "us[24]", pId, _pName))
        return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Fake <OnlinePlayer> <OfflinePlayer>");
    if(!IsPlayerConnected(pId))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador Não Conectado.");
    if(!fexist(AccountFile(_pName)))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Conta Inexistente.");

    if(Player[pId][pAdmin] > 6 || DOF2_GetInt(AccountFile(_pName), "AdminLevel") > 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode comparar um Admin RCON.");

    new Off_PCI[64];
    format(Off_PCI, 64, "%s", DOF2_GetString(AccountFile(_pName), "PciDeRegistro"));
    if(strlen(Off_PCI) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Jogador não tem uma PCI salva.");

    new On_PCI[64];
    gpci(pId, On_PCI, sizeof(On_PCI));

    if(strcmp(Off_PCI, On_PCI) != 0)
        SendClientMessage(playerid, COLOR_COCONUT, "PCI Diferente, Não Fake.");
    else
        SendClientMessage(playerid, COLOR_COCONUT, "PCI Igual, Possivel Fake.");
    return 1;
}

CMD:fakeoff(playerid, params[])
{
    if(Player[playerid][pAdmin] < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este Comando.");

    new pId[MAX_PLAYER_NAME], _pName[MAX_PLAYER_NAME];
    if(sscanf(params, "s[24]s[24]", pId, _pName))
        return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Fake <OfflinePlayer 1> <OfflinePlayer 2>");
    if(!fexist(AccountFile(pId)))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Conta 1 Inexistente.");
    if(!fexist(AccountFile(_pName)))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Conta 2 Inexistente.");

    if(DOF2_GetInt(AccountFile(pId), "AdminLevel") > 6 || DOF2_GetInt(AccountFile(_pName), "AdminLevel") > 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode comparar um Admin RCON.");


    new PCI_1[64];
    format(PCI_1, 64, "%s", DOF2_GetString(AccountFile(pId), "PciDeRegistro"));
    if(strlen(PCI_1) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Jogador 1 não tem uma PCI salva.");

    new PCI_2[64];
    format(PCI_2, 64, "%s", DOF2_GetString(AccountFile(_pName), "PciDeRegistro"));
    if(strlen(PCI_2) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Jogador 2 não tem uma PCI salva.");

    if(strcmp(PCI_1, PCI_2) != 0)
        SendClientMessage(playerid, COLOR_COCONUT, "PCI Diferente, Não Fake.");
    else
        SendClientMessage(playerid, COLOR_COCONUT, "PCI Igual, Possivel Fake.");
    return 1;
}

/*CMD:placa(playerid, params[])
{
    if(Player[playerid][pMember] != TEAM_MUNICIPAL)
		return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é da Polícia Rodoviária Federal.");

	new result[12];
	new giveid;

	if(sscanf(params, "us[12]", giveid, result))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/placa <id/nick> <placa>");

	if(IsPlayerConnected(giveid))
	{
	    if(giveid != INVALID_PLAYER_ID)
	    {
            if(!ProxDetectorS(3.0, playerid, giveid))
			    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador está longe");

   			new vehicleid = GetPlayerVehicleID(giveid);
   			if(strcmp(ReturnPlayer(giveid),VehicleInfo[vehicleid][vOwner],true) != 0)
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não é dono deste veículo.");

			strmid(GetVehicleNumberPlate(vehicleid), result, 0, 9, 9);
			SetVehicleNumberPlateEx(vehicleid, result);
			SetVehicleToRespawn(vehicleid);
			format(thestring, sizeof(thestring), "O Guarda %s mudou sua placa para %s.",ReturnPlayer(playerid),result);
			format(thestring, sizeof(thestring), "A Guarda %s mudou a placa de %s para %s",ReturnPlayer(playerid),VehicleInfo[vehicleid][vOwner],result);
        	WriteLog("PRF", thestring);
		}
	}
	return true;
}*/

CMD:emplacar(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1745.5720, -1456.8271, 13.5318))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta no Local Correto.");
	if(!IsPlayerInAnyVehicle(playerid))
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta em um Veículo.");
    if(GetPlayerGP(playerid) < 500)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem R$500.");
    if(strfind(GetVehicleNumberPlate(GetPlayerVehicleID(playerid)), "{FF0000}BLS") != -1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Veículo já emplacado.");

	new carID = -1;
	for(new i = 0; i < 5; i++)
	{
	    if(Player[playerid][pCar][i] == INVALID_VEHICLE_ID)
	        continue;

	    if(IsPlayerInVehicle(playerid, CarInfo[Player[playerid][pCar][i]][cID]))
	    {
	        carID = i;
	        break;
	    }
	}

	if(carID == -1)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode Emplacar este Veículo.");

    new vehicleid = GetPlayerVehicleID(playerid);

	new numPlate[32];
	format(numPlate, 32, "{FF0000}BLS {000000}%04d", Player[playerid][pCar][carID] + 1651);
    SetVehicleNumberPlateEx(vehicleid, numPlate);

    SendClientMessage(playerid, COLOR_ANGELS, "[Detran]: Você emplacou seu veículo. Aguarde até o próximo respawn para que ele seja emplacado.");
    GivePlayerGP(playerid, -500);
	return true;
}

CMD:arrombarporta(playerid)
{
	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if(PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) || PlayerToPoint(3, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
		{
			if(IsACop(playerid) && HouseInfo[i][hOwned] == 1)
			{
				HouseInfo[i][hLock] = 0;
				GameTextForPlayer(playerid, " ~n~ ~n~ ~n~ ~w~porta ~g~arrombada", 5000, 1);
			    PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			    HouseInfo[i][hArrombada] = 1;
				return true;
			}
			else
			{
				GameTextForPlayer(playerid, "~r~você no pode arrombar", 5000, 1);
				return true;
			}
		}
	}
	return true;
}

CMD:abrir(playerid)
{
    for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if(PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) || PlayerToPoint(3, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
		{
			if(Player[playerid][pHouseKey] == i)
			{
				if(HouseInfo[i][hLock] == 1)
				{
					HouseInfo[i][hLock] = 0;
					GameTextForPlayer(playerid, " ~n~ ~w~porta ~g~destrancada", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					return true;
				}
				else if(HouseInfo[i][hLock] == 0)
				{
					HouseInfo[i][hLock] = 1;
					GameTextForPlayer(playerid, " ~n~ ~w~porta ~r~trancada", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					return true;
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~r~você não tem as chaves", 5000, 6);
				return true;
			}
		}
	}
	for(new i = 0; i < sizeof(BizzInfo); i++)
	{
        if(!IsLockableBiz(i))
            continue;

		if(IsPlayerInRangeOfBiz(playerid, 2.0, i))
		{
			if(Player[playerid][pBizKey] == i)
			{
                if(IsBizLocked(i))
				{
                    SetBizLocked(i, false);
					GameTextForPlayer(playerid, "~w~empresa ~g~aberta", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                    OnPropUpdate();
					return true;
				}
				else
				{
                    SetBizLocked(i, true);
					GameTextForPlayer(playerid, "~w~empresa ~r~fechada", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                    OnPropUpdate();
					return true;
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~r~você nao tem as chaves", 5000, 6);
				return true;
			}
		}
	}
	return true;
}

CMD:dado(playerid)
{
	new dice = random(6)+1;
	if(gDice[playerid] == 1)
	{
		format(thestring, sizeof(thestring), "* %s jogou o dado ao chão e caiu o número %d", PlayerGetName(playerid),dice);
		ProxDetector(5.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem um dado.");

	return true;
}

CMD:luta(playerid)
{
	if(PlayerToPoint(2.0, playerid, 756.4771,5.5362,1000.6991))
		ShowPlayerDialog(playerid,4, DIALOG_STYLE_LIST, "Estilos de luta", "Estilos", "Selecionar", "Cancelar");
	else
 	    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na academia");

    return true;
}

CMD:comprar(playerid)
{
   	if(IsAtLoja(playerid))
  	{
       	new listitems[1024] = "R$700\t\t- Boombox\nR$1500\t\t- NoteBook\n";
   		strcat(listitems, "R$300\t\t- Internet 3G\nR$450\t\t- Celular\nR$250\t\t- Máscara\nR$5\t\t- Raspadinha\nR$10\t\t- Agenda\nR$5\t\t- Dado\nR$30\t\t- Trava de Veículo\nR$5\t\t- Preservativo\nR$250\t\t- iPod\nR$10\t\t- Frango\nR$10\t\t- Hamburguer\nR$10\t\t- Pizza Congelada\nR$10\t\t- Corda\nR$10\t\t- Maço de Cigarro\nR$2000\t\t- Computador\nR$30\t\t- Sushi\nR$20\t\t- Lata de Spray\nR$30\t\t- Câmera\nR$150\t\t- Capa de Chuva\nR$2\t\t- Créditos para celular\n");
	 	ShowPlayerDialog(playerid,23,DIALOG_STYLE_LIST,"Lista de Produtos:\n",listitems,"Comprar","Sair");
	 	return true;
    }
    else
 		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em uma loja 24-7. Digite /gps para achar uma.");
}

CMD:comprarcasa(playerid)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	for(new h = 0; h < MAX_HOUSES; h++)
	{
		if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 0)
		{
			if(Player[playerid][pLevel] < HouseInfo[h][hLevel])
			{
				format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} Você precisa de Nível %d para comprar essa Casa.", HouseInfo[h][hLevel]);
				SendClientMessage(playerid, COLOR_RED, thestring);
				return true;
			}
			if(Player[playerid][pHouseKey] != 255 && strcmp(Player[playerid][pName], hOwner[Player[playerid][pHouseKey]], false) == 0)
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já é o dono desta casa, digite /vendercasa para vender e comprar outra.");

			if(GetPlayerGP(playerid) >= HouseInfo[h][hValue])
			{
			    new dia,mes,ano,hora;
   				getdate(ano,mes,dia);
   				GetTimeFix2(hora);
				Player[playerid][pHouseKey] = h;
				Player[playerid][pPaluguelkey] = 255;
				Incasa[playerid] = Player[playerid][pHouseKey];
				HouseInfo[h][hOwned] = 1;
 				Player[playerid][pLocalSpawn] = 1;
				strmid(hOwner[h], Player[playerid][pName], 0, strlen(Player[playerid][pName]), 255);
				PlayerPlayMusic(playerid);
				SetPlayerInterior(playerid,HouseInfo[h][hInt]);
				SetPlayerVirtualWorld(playerid,HouseInfo[h][hWorld]);
				SafeSetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
				GameTextForPlayer(playerid, "~w~Bem vindo.~n~Voce pode sair qualquer hora ~n~por essa porta digite /sair", 5000, 3);
				Player[playerid][pInt] = HouseInfo[h][hInt];
				Player[playerid][pLocal] = h;
				format(thestring, sizeof(thestring), "%s comprou a casa %d por R$%d",Player[playerid][pName], h,HouseInfo[h][hValue]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				WriteLog("houses", thestring);
				SendClientMessage(playerid, COLOR_WHITE, "Digite /ajuda e veja a sessão de ajuda de casas.");
                DateProp(playerid);

             	DestroyPickup(HouseInfo[h][hIcon]);
                HouseInfo[h][hIcon] = CreatePickup(1239, 1, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);

				GivePlayerGP(playerid,-HouseInfo[h][hValue]);

                GiveBizMoney(Biz_Imobiliaria, floatround(HouseInfo[h][hValue] * 0.15));

                SaveProperty(h);
                OnPropUpdate();
				OnPlayerSave(playerid);
				return true;
			}
			else
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não possui dinheiro suficiente.");
		}
	}
	return true;
}

CMD:alugarcasa(playerid)
{
	if(GetTickCount() - AntiFlood[playerid][17] < 1200000)
		return SendClientMessage(playerid, 0xFFFFFFFF, "[ERRO]:{FFFFFF} Você só pode usar esse comando uma vez a cada 20 minutos.");

	new Float:oldposx, Float:oldposy, Float:oldposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1 &&  HouseInfo[h][hRentabil] == 1)
		{
			if(Player[playerid][pHouseKey] != 255 && strcmp(Player[playerid][pName], hOwner[Player[playerid][pHouseKey]], false) == 0)
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já é o dono desta casa.");

			if(GetPlayerGP(playerid) >= HouseInfo[h][hRent])
			{
			    Player[playerid][pPaluguelkey] = h;
				Player[playerid][pHouseKey] = h;
				Incasa[playerid] = h;
				Player[playerid][pLocalSpawn] = 1;
				GivePlayerGP(playerid,-HouseInfo[h][hRent]);
				HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+HouseInfo[h][hRent];
				PlayerPlayMusic(playerid);
				SetPlayerInterior(playerid,HouseInfo[h][hInt]);
				SetPlayerVirtualWorld(playerid,HouseInfo[h][hWorld]);
				SafeSetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
				GameTextForPlayer(playerid, "~w~bem vindo~n~voce pode sair qualquer hora por essa porta digite /sair", 5000, 3);
				Player[playerid][pInt] = HouseInfo[h][hInt];
				Player[playerid][pLocal] = h;
				SendClientMessage(playerid, COLOR_WHITE, "Parabéns, você pode entrar e sair a qualquer instante");
				SendClientMessage(playerid, COLOR_WHITE, "Digite /ajuda e veja a sessão de Aluguel.");
				OnPlayerSave(playerid);
				AntiFlood[playerid][17] = GetTickCount();
				return true;
			}
			else
				return SendClientMessage(playerid, COLOR_WHITE, "Você não tem dinheiro suficiente.");
		}
	}
	return true;
}

CMD:alugarcarro(playerid)
{
    if(!IsPlayerInAnyVehicle(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um veículo.");

	new vid = GetPlayerVehicleID(playerid);
	for(new i = 0; i < sizeof(AluguelCarro); i++)
	{
        if(vid != AluguelCarro[i])
            continue;

		if(Player[playerid][pBizKey] == Biz_Carros)
		{
			GameTextForPlayer(playerid, "~w~sem custos ao patrao~n~~g~pode dirigir!", 5000, 3);
            SetEngine(vid, true);
			return true;
		}
		if(GetPlayerGP(playerid) <  BizCarrosPrice[i])
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem todo esse dinheiro.");

		GivePlayerGP(playerid, -BizCarrosPrice[i]);
        GiveBizMoney(Biz_Carros, BizCarrosPrice[i]);

		HireCar[playerid] = GetPlayerVehicleID(playerid);
		HireCarLocked[playerid] = false;
        SetEngine(vid, true);
		OnPropUpdate();
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
        Descongelar(playerid);
		SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você alugou este veiculo. Use /Trancar para que outro player nao pegue ele!");//¢
        return true;
	}
    for(new i = 0; i < sizeof(AluguelMoto); i++)
	{
        if(vid != AluguelMoto[i])
            continue;

		if(Player[playerid][pBizKey] == Biz_Motos)
		{
			GameTextForPlayer(playerid, "~w~sem custos ao patrao~n~~g~pode dirigir!", 5000, 1);
            SetEngine(vid, true);
			return true;
		}
		if(GetPlayerGP(playerid) <  BizMotosPrice[i])
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem todo esse dinheiro.");

		GivePlayerGP(playerid, -BizMotosPrice[i]);
        GiveBizMoney(Biz_Motos, BizMotosPrice[i]);

		HireCar[playerid] = GetPlayerVehicleID(playerid);
		HireCarLocked[playerid] = false;
        SetEngine(vid, true);
		OnPropUpdate();
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
        Descongelar(playerid);
        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você alugou este veiculo. Use /Trancar para que outro player nao pegue ele!");//¢
        return true;
	}
    for(new i = 0; i < sizeof(AluguelAero); i++)
    {
        if(vid != AluguelAero[i])
            continue;

        if(Player[playerid][pBizKey] == Biz_Aero)
        {
            SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Sem custos para o patrão!");
            SetEngine(vid, true);
			return true;
        }
        if(GetPlayerGP(playerid) < BizAeroPrice[i])
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem todo esse dinheiro.");

        GivePlayerGP(playerid, -BizAeroPrice[i]);
        GiveBizMoney(Biz_Aero, BizAeroPrice[i]);

		HireCar[playerid] = GetPlayerVehicleID(playerid);
		HireCarLocked[playerid] = false;
        SetEngine(vid, true);
		OnPropUpdate();
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
        Descongelar(playerid);
		SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você alugou este veiculo. Use /Trancar para que outro player nao pegue ele!");//¢
        return true;
    }
    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este veículo não pode ser Alugado.");
	return true;
}

stock VeiculoDeAlugar(vehid)
{
	for(new i = 0; i < sizeof(AluguelCarro); i++)
	{
	    if(vehid == AluguelCarro[i])
            return true;
	}
 	for(new i = 0; i < sizeof(AluguelAero); i++)
	{
	    if(vehid == AluguelAero[i])
            return true;
	}
 	for(new i = 0; i < sizeof(AluguelMoto); i++)
	{
	    if(vehid == AluguelMoto[i])
            return true;
	}
	return false;
}

CMD:trancar(playerid)
{
    if(HireCar[playerid] == 299) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem um veiculo Alugado.");
    else if(!VeiculoDeAlugar(HireCar[playerid])) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este não é um veiculo de Aluguel.");
    else if(HireCarLocked[playerid]) return cmd_destrancar(playerid);

    HireCarLocked[playerid] = true;
    LockCar(HireCar[playerid]);
    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você trancou o seu veículo alugado.");
	return 1;
}

CMD:destrancar(playerid)
{
    if(HireCar[playerid] == 299) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem um veiculo Alugado.");
    else if(!VeiculoDeAlugar(HireCar[playerid])) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este não é um veiculo de Aluguel.");
    else if(!HireCarLocked[playerid]) return cmd_trancar(playerid);

    HireCarLocked[playerid] = false;
    UnLockCar(HireCar[playerid]);
    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você destrancou o seu Veiculo Alugado.");
	return 1;
}

CMD:desalugarcarro(playerid)
{
	if(HireCar[playerid] != 299)
	{
		//gCarLock[HireCar[playerid]] = 0;
		UnLockCar(HireCar[playerid]);
		HireCarLocked[playerid] = false;
		HireCar[playerid] = 299;
		GameTextForPlayer(playerid, "~w~carro desalugado, você pode alugar outro agora", 5000, 6);
	}
	return true;
}

CMD:desalugarhelimat(playerid)
{
    if(Player[playerid][pAdmin] < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este Comando.");
    VeiculoMaterialAlugado[3][0] = 0;
    VeiculoMaterialAlugado[3][1] = 0;
    SendClientMessage(playerid, -1, "Você desalugou o Helicóptero de Materiais.");
    return true;
}

CMD:desalugar(playerid)
{
	if(Player[playerid][pHouseKey] != 255 && strcmp(Player[playerid][pName], hOwner[Player[playerid][pHouseKey]], false) == 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você é o dono da casa.");
	if(Player[playerid][pHouseKey] != 255)
	{
	    Player[playerid][pLocalSpawn] = 0;
	    Player[playerid][pHouseKey] = 255;
	    Player[playerid][pPaluguelkey] = 255;
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você saiu do aluguel.");
	}
	return true;
}

CMD:carroalugado(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	new car;
	if(sscanf(params, "d", car))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/carroalugado <carro>");

	HireCar[playerid] = car;
	format(thestring, sizeof(thestring), "Você pode fechar o carro com as chaves %d.",car);
	SendClientMessage(playerid, COLOR_GREY, thestring);
	SendClientMessage(playerid, COLOR_WHITE, "DICA: Digite /trancar ");
	return true;
}

CMD:trocarchaves(playerid)
{
	if(!SwitchKey[playerid])
	{
		if(HireCar[playerid] != 299)
		{
			SwitchKey[playerid] = 1;
			GameTextForPlayer(playerid, "~w~Voce controla agora seu ve¢culo de aluguel", 5000, 6);
		}
		else
			GameTextForPlayer(playerid, "~w~voce nao pode alugar um carro", 5000, 6);

		return true;
	}
	else
	{
		SwitchKey[playerid] = 0;
		GameTextForPlayer(playerid, "~w~Você controla agora seu ve¢culo da casa", 5000, 6);
	}
	return true;
}

CMD:entregarchave(playerid, params[])
{
	new info, giveid;
	if(sscanf(params, "iu", info, giveid))
	{
	    SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EntregarChave <Info> <id/nick>");
	    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} 1 - Carro 2 - Casa 3 - Empresa");
	    return 1;
	}
	if(info < 1 || info > 3) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Info vai de 1 à 3.");
	else if(!IsPlayerConnected(giveid) || giveid == playerid) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador Não Conectado.");
	else if(!ProxDetectorS(5.0, playerid, giveid)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta perto do Jogador.");

	/* @CONCESSIONARIA
    if(info == 1)
	{
        new oldfile[128];
		new newfile[128];
		format(oldfile, 128, "/RPG/carros/%s.ini", Player[playerid][pName]);
		format(newfile, 128, "/RPG/carros/%s.ini", Player[giveid][pName]);
		if(!DOF2_FileExists(oldfile)) return SendClientMessage(giveid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem um carro.");
	    if(DOF2_FileExists(newfile)) return SendClientMessage(giveid, COLOR_RED, "[ERRO]:{FFFFFF} O Jogador já tem um carro.");

		RenameFile(oldfile, newfile);
		DOF2_RemoveFile(oldfile);
		DOF2_SetString(newfile, "Dono", Player[giveid][pName]);
		DOF2_SaveFile();

		format(oldfile, 128, "/RPG/veiculos/%s.ini", Player[playerid][pName]);
		format(newfile, 128, "/RPG/veiculos/%s.ini", Player[giveid][pName]);

		if(fexist(oldfile)) RenameFile(oldfile, newfile);

		new v = Player[playerid][pCar];

		Player[giveid][pCar] = v;
		Player[playerid][pCar] = INVALID_VEHICLE_ID;

		format(VehicleInfo[v][vOwner], MAX_PLAYER_NAME, Player[giveid][pName]);

		format(thestring, sizeof(thestring), "Você deu a %s as chaves do seu Veículo", Player[giveid][pName]);
		SendClientMessage(playerid, COLOR_GREY, thestring);
		format(thestring, sizeof(thestring), "Você recebeu as chaves do Veículo de %s", Player[playerid][pName]);
		SendClientMessage(giveid, COLOR_GREY, thestring);
		format(thestring, sizeof(thestring), "%s entrega uma chave para %s.", PlayerGetName(playerid) ,Player[giveid][pName]);
		ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		DOF2_SaveFile();

		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		return 1;
	}   */
	else if(info == 2)
	{
	    if(Player[playerid][pHouseKey] == 255) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Casa.");
	    else if(Player[giveid][pHouseKey] != 255) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Jogador já tem uma Casa.");
	    else if(strcmp(Player[playerid][pName], hOwner[Player[playerid][pHouseKey]]) != 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Casa.");

	    new Key = Player[playerid][pHouseKey];

	    if(Player[giveid][pLevel] < HouseInfo[Key][hLevel]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Jogador não tem nível para esta casa.");

        Player[playerid][pHouseKey] = 255;
        Player[giveid][pHouseKey] = Key;

        format(hOwner[Key], MAX_PLAYER_NAME, Player[giveid][pName]);

   		HouseInfo[Key][hVec] = 405; // Sentinel

		format(thestring, sizeof(thestring), "Você deu a %s as chaves da sua Casa.", Player[giveid][pName]);
		SendClientMessage(playerid, COLOR_GREY, thestring);
		format(thestring, sizeof(thestring), "Você recebeu as chaves da Casa de %s.", Player[playerid][pName]);
		SendClientMessage(giveid, COLOR_GREY, thestring);
		format(thestring, sizeof(thestring), "* %s entrega uma chave para %s.", PlayerGetName(playerid) ,Player[giveid][pName]);
		ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		OnPropUpdate();
		OnPlayerSave(playerid);
		OnPlayerSave(giveid);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		return 1;
	}
	else if(info == 3)
	{
	    if(Player[playerid][pBizKey] == 255) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Empresa.");
	    else if(Player[giveid][pBizKey] != 255) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Jogador já tem uma Empresa.");

	    new Key = Player[playerid][pBizKey];
		new Biz = Player[playerid][pBizKey];

		if(Player[giveid][pLevel] < BizzInfo[Biz][bLevelNeeded])
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Jogador não tem nível para esta Empresa.");

        Player[playerid][pBizKey] = 255;
        Player[giveid][pBizKey] = Key;

        format(bOwner[Biz], MAX_PLAYER_NAME, Player[giveid][pName]);

		format(thestring, sizeof(thestring), "Você deu a %s as chaves da sua Empresa.", Player[giveid][pName]);
		SendClientMessage(playerid, COLOR_GREY, thestring);
		format(thestring, sizeof(thestring), "Você recebeu as chaves da Empresa de %s.", Player[playerid][pName]);
		SendClientMessage(giveid, COLOR_GREY, thestring);
		format(thestring, sizeof(thestring), "* %s entrega uma chave para %s.", PlayerGetName(playerid) ,Player[giveid][pName]);
		ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		OnPropUpdate();
		OnPlayerSave(playerid);
		OnPlayerSave(giveid);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		return 1;
	}
	return true;
}

CMD:equipe(playerid)
{
	new stringt[sizeof(EquipeBLS)*64];
	for(new i = 0; i <sizeof(EquipeBLS); i ++)
  		format(stringt,sizeof(stringt),"%s\n - %s",stringt,EquipeBLS[i]);

	ShowPlayerDialog(playerid, 3749, DIALOG_STYLE_LIST,"{FF0000}Life {FFFFFF}Simulation RPG - Equipe",stringt,"Fechar","");
	return true;
}

CMD:cofre(playerid, params[])
{
	new bouse = Player[playerid][pHouseKey];
	if(Player[playerid][pHouseKey] != 255 && strcmp(Player[playerid][pName], hOwner[Player[playerid][pHouseKey]], false) == 0)
	{
   		new cashdeposit;
		if(sscanf(params, "d", cashdeposit))
		{
			SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/cofre <quantia>");
			format(thestring, sizeof(thestring), "{FF0000}[Cofre]: {FFFFFF}Você tem R$ %d no cofre da sua casa.", HouseInfo[bouse][hTakings]);
			SendClientMessage(playerid, COLOR_GREY, thestring);
			return true;
		}

		if(cashdeposit >  HouseInfo[bouse][hTakings] || cashdeposit < 1)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem tanto assim.");

		if(!PlayerToPoint(100, playerid,HouseInfo[bouse][hExitx],HouseInfo[bouse][hExity],HouseInfo[bouse][hExitz]))
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está muito longe da casa.");

		else
		{
		    ConsumingMoney[playerid] = 1;
			GivePlayerGP(playerid,cashdeposit);
			HouseInfo[bouse][hTakings] = HouseInfo[bouse][hTakings]-cashdeposit;
			format(thestring, sizeof(thestring), "Você sacou R$ %d de seu cofre domiciliar, restaram R$ %d ", cashdeposit,HouseInfo[bouse][hTakings]);
			SaveProperty(bouse);
			OnPropUpdate();
			SendClientMessage(playerid, COLOR_YELLOW, thestring);
			return true;
		}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma casa.");

	return true;
}

CMD:asellbiz(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new Biz;
	if(sscanf(params, "d", Biz))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/asellbiz <Bizid>");

	BizzInfo[Biz][bOwned] = 0;
	BizzInfo[Biz][bCustomSell] = false;

	format(thestring, sizeof(thestring), "%s vendeu a Biz %d de %s", ReturnPlayer(playerid), Biz, bOwner[Biz]);
	WriteLog("Admins2", thestring);

	strmid(bOwner[Biz], "Governo", 0, strlen("Governo"), 255);
	strmid(bExtortion[Biz], "---", 0, strlen("---"), 255);

	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

	format(thestring, sizeof(thestring), "~w~voce vendeu a empresa.");
	GameTextForPlayer(playerid, thestring, 10000, 3);

	SaveBizz(Biz);
	OnPropUpdate();
	return true;
}

CMD:asellhouse(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new house;
	if(sscanf(params, "d", house))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/asellhouse <houseid>");

	HouseInfo[house][hHel] = 0;
	HouseInfo[house][hArm] = 0;
	HouseInfo[house][hLock] = 1;
	HouseInfo[house][hOwned] = 0;
	HouseInfo[house][hVec] = 405;
	HouseInfo[house][hVcol1] = -1;
	HouseInfo[house][hVcol2] = -1;
	HouseInfo[house][hTakings] = 0;
	HouseInfo[house][hRentabil] = 1;
	HouseInfo[house][hVpos][0] = 0.0;
	format(thestring, sizeof(thestring), "%s vendeu a casa (%d) de %s", ReturnPlayer(playerid),house,hOwner[house]);
	WriteLog("Admins2", thestring);
	format(thestring, sizeof(thestring), "~w~voce vendeu a casa de %s", hOwner[house]);
	GameTextForPlayer(playerid, thestring, 10000, 6);
	strmid(hOwner[house], "Governo", 0, strlen("Governo"), 255);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SaveProperty(house);
	OnPropUpdate();

	DestroyVehicle(CarroCasa[house]);
	CarroCasa[house] = AddStaticVehicleEx(HouseInfo[house][hVec], HouseCarSpawns[house][0], HouseCarSpawns[house][1], HouseCarSpawns[house][2], HouseCarSpawns[house][3], HouseInfo[house][hVcol1], HouseInfo[house][hVcol2], -1);

    new numPlate[32];
    format(numPlate, 32, "{FF0000}BLS {000000}%04d", CarroCasa[house]);
    SetVehicleNumberPlateEx(CarroCasa[house], numPlate);
	return true;
}

CMD:vendercasa(playerid)
{
	if(Player[playerid][pHouseKey] == 255)
		return SendClientMessage(playerid, COLOR_WHITE, "Você não comprou nenhuma casa.");

	if(Player[playerid][pMarried] > 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está casado, não poderá vender esta casa.");

	if((Player[playerid][pHouseKey] != 255) && (strcmp(Player[playerid][pName], hOwner[Player[playerid][pHouseKey]], false) == 0))
	{
	    new dia,mes,ano,hora;
		getdate(ano,mes,dia);
		GetTimeFix2(hora);
		new house = Player[playerid][pHouseKey];
        new preco = floatround(HouseInfo[house][hValue] * 0.80);
		HouseInfo[house][hHel] = 0;
		HouseInfo[house][hArm] = 0;
		HouseInfo[house][hLock] = 1;
		HouseInfo[house][hOwned] = 0;
		HouseInfo[house][hVec] = 405;
		HouseInfo[house][hVcol1] = -1;
		HouseInfo[house][hVcol2] = -1;
		HouseInfo[house][hTakings] = 0;
		HouseInfo[house][hRentabil] = 1;
		HouseInfo[house][hVpos][0] = 0.0;
		strmid(hOwner[house], "Governo", 0, strlen("Governo"), 255);
		ConsumingMoney[playerid] = 1;
		GivePlayerGP(playerid, preco);
		GivePlayerGP(playerid, HouseInfo[house][hTakings]);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(thestring, sizeof(thestring), "%s vendeu a casa %d por R$%d", Player[playerid][pName], house, preco);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
		WriteLog("houses", thestring);
		Incasa[playerid] = Player[playerid][pHouseKey];
		SetPlayerVirtualWorld(playerid,0);
		Player[playerid][pLocalSpawn] = 0;
		Player[playerid][pHouseKey] = 255;
		Player[playerid][pPaluguelkey] = 255;

    	HouseInfo[house][hVpos][0] = 0.0;
    	HouseInfo[house][hVpos][1] = 0.0;
    	HouseInfo[house][hVpos][2] = 0.0;
    	HouseInfo[house][hVpos][3] = 0.0;

        DestroyPickup(HouseInfo[house][hIcon]);
		HouseInfo[house][hIcon] = CreatePickup(1273, 1, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey], HouseInfo[house][hEntrancez]);

		SaveProperty(Incasa[playerid]);
		OnPropUpdate();
		OnPlayerSave(playerid);

		DestroyVehicle(CarroCasa[house]);
		CarroCasa[house] = AddStaticVehicleEx(HouseInfo[house][hVec], HouseCarSpawns[house][0], HouseCarSpawns[house][1], HouseCarSpawns[house][2], HouseCarSpawns[house][3], HouseInfo[house][hVcol1], HouseInfo[house][hVcol2], -1);

        new numPlate[32];
        format(numPlate, 32, "{FF0000}BLS {000000}%04d", CarroCasa[house]);
        SetVehicleNumberPlateEx(CarroCasa[house], numPlate);
		return true;
	}
	else
		SendClientMessage(playerid, COLOR_WHITE, "Você não é o dono dessa casa.");

	return true;
}

CMD:atualizarcasa(playerid, params[])
{
    return cmd_ac(playerid, params);
}

CMD:ac(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
		new house = Player[playerid][pHouseKey];
		if(house != 255)
		{
			if(strcmp(Player[playerid][pName], hOwner[Player[playerid][pHouseKey]], false) != 0 && strcmp(pMarriedTo[playerid], hOwner[Player[playerid][pHouseKey]], false) != 0)
			{
				SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma casa.");
				return true;
			}
       		new item;
			if(sscanf(params, "d", item))
			{
				SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/atualizarcasa <item número>");
				SendClientMessage(playerid, COLOR_GREY, "|_______ Ultensílios Domiciliares _______|");
				SendClientMessage(playerid, COLOR_GREY, "| 1: Atualizacão Saúde R$10.000");
				SendClientMessage(playerid, COLOR_GREY, "| 2: Atualizacão Colete R$25.000");
				return true;
			}
			switch (item)
			{
				case 1:
				{
					if(Player[playerid][pLevel] < 3)
					{
						SendClientMessage(playerid, COLOR_GREY, "Você precisar ter ao mínimo nível 3.");
						return true;
					}
					if(GetPlayerGP(playerid) < 10000)
					{
						SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem dinheiro para comprar isto.");
						return true;
					}
					HouseInfo[house][hHel] = 1;

					GivePlayerGP(playerid, -10000);

                    //Redução da Empresa e Atualizações: 100% vai para 33%. ~ Marcos
                    GiveBizMoney(Biz_Atualizacao, 3333);

					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GREY, "Você pode se curar em sua casa, basta digitar /curar.");
				}
				case 2:
				{
					if(Player[playerid][pLevel] < 5)
					{
						SendClientMessage(playerid, COLOR_GREY, "Você ter ao mínimo nível 5 para comprar isto.");
						return true;
					}
					if(GetPlayerGP(playerid) < 25000)
					{
						SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem dinheiro para comprar isto.");
						return true;
					}
					HouseInfo[house][hArm] = 1;

					GivePlayerGP(playerid, -25000);

                    //Redução da Empresa e Atualizações: 100% vai para 33%. ~ Marcos
                    GiveBizMoney(Biz_Atualizacao, 8333);

					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GREY, "Você pode colocar um colete a prova de balas, basta digitar /curar");
				}
			}
			SaveProperty(house);
			OnPropUpdate();
			OnPlayerSave(playerid);
			return true;
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma casa");
			return true;
		}
	}
	return true;
}

CMD:aluguelcusto(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
		new bouse = Player[playerid][pHouseKey];
		if(bouse != 255 && strcmp(Player[playerid][pName], hOwner[Player[playerid][pHouseKey]], false) == 0)
		{
       		new aluguel;
			if(sscanf(params, "d", aluguel))
				return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/aluguelcusto <valor>");

			if(aluguel < 1 || aluguel > 1000)
				return SendClientMessage(playerid, COLOR_WHITE, "O custo para alugar uma casa é entre R$ 1 e R$ 1.000");

			HouseInfo[bouse][hRent] = aluguel;
			SaveProperty(bouse);
			OnPropUpdate();
			format(thestring, sizeof(thestring), "Aluguel do imóvel trocado para R$ %d", HouseInfo[bouse][hRent]);
			SendClientMessage(playerid, COLOR_WHITE, thestring);
			return true;
		}
		else
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma casa");
	}
	return true;
}

CMD:enxotartodos(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
		new bouse = Player[playerid][pHouseKey];
		if(bouse != 255 && strcmp(Player[playerid][pName], hOwner[Player[playerid][pHouseKey]], false) == 0)
		{
			foreach(new i: Player)
			{
				if(i != playerid)
				{
					if(Player[i][pHouseKey] == Player[playerid][pHouseKey] )
					{
						SendClientMessage(i, COLOR_WHITE, "Você foi expulso da casa onde habitava pelo dono.");
						SendClientMessage(playerid, COLOR_WHITE, "Você expulsou todos de sua casa.");
						Player[i][pHouseKey] = 255;
						Player[i][pPaluguelkey] = 255;
						return true;
					}
				}
   			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma casa.");
			return true;
		}
	}
	return true;
}

CMD:enxotar(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
		new bouse = Player[playerid][pHouseKey];
		if(bouse != 255 && strcmp(Player[playerid][pName], hOwner[Player[playerid][pHouseKey]], false) == 0)
		{
       		new target;
			if(sscanf(params, "u", target))
				return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/enxotar <id/nick>");
			if(target == playerid)
				return SendClientMessage(target, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode expulsar a si mesmo.");
			if(IsPlayerConnected(target))
			{
			    if(target != INVALID_PLAYER_ID)
			    {
					if(Player[target][pHouseKey] == Player[playerid][pHouseKey])
					{
						SendClientMessage(target, COLOR_WHITE, "Você foi expulso da casa onde morava pelo dono");
						SendClientMessage(playerid, COLOR_WHITE, "O jogador foi enxotado com o alguél de sua casa.");
						Player[target][pLocalSpawn] = 0;
						Player[target][pHouseKey] = 255;
						Player[target][pPaluguelkey] = 255;
						return true;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE, "O jogador não alugou sua casa.");
					    return true;
					}
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Casa.");
			return true;
		}
	}
	return true;
}

CMD:aluguel(playerid, params[])
{
	new bouse = Player[playerid][pHouseKey];
	if(bouse != 255 && strcmp(Player[playerid][pName], hOwner[Player[playerid][pHouseKey]], false) == 0)
	{
   		new aluguel;
		if(sscanf(params, "d", aluguel))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/aluguel <0/1> (1 - Alugável/0 - Não alugável).");

		HouseInfo[bouse][hRentabil] = aluguel;
		SaveProperty(bouse);
		OnPropUpdate();
		format(thestring, sizeof(thestring), "O aluguel da casa foi mudado para %d", HouseInfo[bouse][hRentabil]);
		SendClientMessage(playerid, COLOR_WHITE, thestring);
	}
	else
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma casa.");

	return true;
}

CMD:handsup(playerid, params[])
{
    return cmd_render(playerid, params);
}

CMD:render(playerid, params[])
{
    if(NoHospital[playerid] > 0)
        return SendClientMessage(playerid, COLOR_WHITE, "Você não pode usar este comando agora.");

    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");


	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	SetTimerEx("Handsup",500,false, "i", playerid);
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você se rendeu.");
	format(thestring, 128, "* %s se rendeu.",PlayerGetName(playerid));
	ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return true;
}

CMD:vipmenu(playerid)
{
    if(Player[playerid][pDonateRank] < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é VIP! Compre CASH e vire um.");

	ShowPlayerDialog(playerid,49,DIALOG_STYLE_LIST,"Menu VIP","Ativar/Desativar\nAtivar/Desativar Chat","Selecionar","Sair");
	return true;
}

CMD:ligar(playerid,params[])
{
    if(IsPlayerConnected(playerid))
	{
       	new phonenumb;
		if(sscanf(params, "d", phonenumb))
		    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/ligar <número>");

		if(Player[playerid][MuteTime] > 0)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está mutado.");

		if(Player[playerid][pPhone] == 0)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem um Celular.");

		if(nobangu[playerid] == true)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar esse comando no bangu.");

		if(PlayerTied[playerid] > 0)
	        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você foi sequestrado, e está incomunicável!");

        if(Player[playerid][pJailed] != 0)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está Preso.");

		format(thestring, sizeof(thestring), "* %s tirou o celular do bolso.", PlayerGetName(playerid));
		ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		if(phonenumb == Player[playerid][pPnumber])
			return SendClientMessage(playerid, COLOR_GREY, "Ocupado...");

		if(Mobile[playerid] != 255 || EmergencyCall[playerid])
			return SendClientMessage(playerid, COLOR_GREY, "Você já está em uma ligacão!");

		if(phonenumb == 190 || phonenumb == 192)
		{
            SetPlayerAttachedObject(playerid, 8, 18867, 6, 0.087724, 0.021101, 0.000000, 90.000000, 180.000000, 0.000000, 1.000000, 1.000000, 1.000000); //By Marcos
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			SendClientMessage(playerid, COLOR_WHITE, "DICA: Você pode usar agora T para conversar no celular, digite (/des)ligar para desligar.");
			EmergencyPart[playerid] = 0;
			if(phonenumb == 190) SetTimerEx("AtenderEmergencia", 2500, false, "ii", playerid, 0);
			else SetTimerEx("AtenderEmergencia", 2500, false, "ii", playerid, 1);
		    return 1;
		}

		if(Player[playerid][pCreditos] < 2)
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem Créditos Suficientes.");

		foreach(new i: Player)
		{
			if(Player[i][pPnumber] == phonenumb && phonenumb != 0 && Player[i][pPhone] != 0 && Player[i][pJailed] == 0)
			{
				new giveid = i;
				Mobile[playerid] = giveid; //caller connecting
				if(IsPlayerConnected(giveid))
				{
				    if(giveid != INVALID_PLAYER_ID)
				    {
				        if(PhoneOnline[giveid] > 0)
				            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O telefone do jogador está desligado.");
						if(Mobile[giveid] == 255)
						{
                            SetPlayerAttachedObject(playerid, 8, 18867, 6, 0.087724, 0.021101, 0.000000, 90.000000, 180.000000, 0.000000, 1.000000, 1.000000, 1.000000); //By Marcos
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

							PlayAudioStreamForPlayer(giveid, "https://dl.dropboxusercontent.com/s/2my8or06wmwbwf0/toque%20celular.mp3");

							format(thestring, sizeof(thestring), "Seu celular está tocando, (/at)ender jogador: %s", Player[playerid][pName]);
							SendClientMessage(giveid, COLOR_YELLOW, thestring);
							format(thestring, sizeof(thestring), "* O celular de %s está tocando.", PlayerGetName(giveid));
							ProxDetector(30.0, i, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

							SendClientMessage(playerid, COLOR_WHITE, "DICA: Você pode usar agora T para conversar no celular, digite (/des)ligar para desligar.");

							RingTone[giveid] = 10;
							CellTime[playerid] = 1;
							return true;
						}
						else
       						return SendClientMessage(playerid, COLOR_GREY, "O telefone está ocupado.");
					}
				}
			}
		}
		SendClientMessage(playerid, COLOR_GREY, "  Ocupado...");
	}
	return true;
}

CMD:desligar(playerid)
    return cmd_des(playerid);

CMD:des(playerid)
{
	if(EmergencyCall[playerid])
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		SendClientMessage(playerid,  COLOR_LIGHTBLUE, "** Você desligou");


    	EmergencyCall[playerid] = false;
    	KillTimer(EmergencyTimer[playerid]);

    	if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
        SetTimerEx("RemoverAttachTelefone", 2000, false, "d", playerid);
        return 1;
	}
	new caller = Mobile[playerid];
	if(IsPlayerConnected(caller))
	{
	    if(caller != INVALID_PLAYER_ID)
	    {
			if(caller != 255)
			{
				if(caller < 255)
				{
			    	if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
			    	if(IsPlayerAttachedObjectSlotUsed(caller, 8)) RemovePlayerAttachedObject(caller, 8);
                    SetTimerEx("RemoverAttachTelefone", 2000, false, "d", playerid);
                    SetTimerEx("RemoverAttachTelefone", 2000, false, "d", caller);

					SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);

					SendClientMessage(caller,  COLOR_LIGHTBLUE, "** Desligaram");
					SendClientMessage(playerid,  COLOR_LIGHTBLUE, "** Você desligou");

					CellTime[caller] = 0;
					CellTime[playerid] = 0;
					Mobile[caller] = 255;
				}
				Mobile[playerid] = 255;
				CellTime[playerid] = 0;
				RingTone[playerid] = 0;
				KillTimer(LOL[playerid]);
			    KillTimer(LOL[caller]);
				return true;
			}
		}
	}
	SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está falando no telefone.");
	return true;
}

forward RemoverAttachTelefone(playerid);
public RemoverAttachTelefone(playerid)
{
    if(IsPlayerAttachedObjectSlotUsed(playerid, 8))
        RemovePlayerAttachedObject(playerid, 8);
    return 1;
}

CMD:atender(playerid)
{
    return cmd_at(playerid);
}

CMD:at(playerid)
{
    if(!IsPlayerConnected(playerid)) return 1;

	if(Mobile[playerid] != 255)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já está em uma ligacão.");

	foreach(new i: Player)
	{
		if(Mobile[i] == playerid)
		{
		    //Mensagens
			SendClientMessage(i, COLOR_LIGHTBLUE, "Atenderam...");
			format(thestring, sizeof(thestring), "* %s atendeu seu celular.", PlayerGetName(playerid));
			ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			//Animação
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
            SetPlayerAttachedObject(playerid, 8, 18867, 6, 0.087724, 0.021101, 0.000000, 90.000000, 180.000000, 0.000000, 1.000000, 1.000000, 1.000000); //By Marcos
            SetPlayerAttachedObject(playerid, 8, 18867, 1, 0.390000,0.128999,-0.125000,4.800000,14.500002,-147.500015,1.000000,1.000000,1.000000);
		    //Audio
			StopAudioStreamForPlayer(playerid);
			//Variaveis
			RingTone[playerid] = 0;
			Mobile[playerid] = i;
			//Gastar Créditos
			LOL[i] = SetTimerEx("ChecarCreditos", 30000, true, "i", i);
			Player[i][pCreditos] -= 2;
			return 1;
		}
	}
	SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Ninguem está te ligando.");
	return true;
}

CMD:sms(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
	    new phonenumb;
       	new result[128];
        if(Player[playerid][MuteTime] > 0)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está mutado");
		if(PlayerTied[playerid] > 0)
	        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você foi sequestrado, e está incomunicável!");
	    if(nobangu[playerid] == true)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando no bangu.");
        if(sscanf(params, "ds[128]", phonenumb, result))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/sms <número> <mensagem>");
		if(Player[playerid][pPhone] == 0)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem um celular");
		if(Player[playerid][pCreditos] < 2)
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem Créditos Suficientes.");
        if(Player[playerid][pJailed] != 0)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está Preso.");

		format(thestring, sizeof(thestring), "* %s enviou um SMS usando seu celular.", PlayerGetName(playerid));
		ProxDetector(15.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new giveid;
		foreach(new i: Player)
		{
			if(Player[i][pPnumber] == phonenumb && phonenumb != 0)
			{
				giveid = i;
				Mobile[playerid] = giveid; //caller connecting
				if(IsPlayerConnected(giveid))
				{
				    if(giveid != INVALID_PLAYER_ID)
				    {
				        if(PhoneOnline[giveid] > 0)
				            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O telefone do jogador está desligado.");

				        if(BigSms[playerid] == 1)
				        {
				            format(thestring, sizeof(thestring), "[SMS]%s: %s |%s(Tel:%d)", Player[playerid][pName], result,Player[giveid][pName], phonenumb);
                            Sms(thestring);
							LerSMS(COLOR_LIGHTBLUE,thestring);
						    format(thestring, sizeof(thestring), "SMS: %s, De: %s (Tel:%d)", result,Player[playerid][pName],Player[playerid][pPnumber]);
						    SendClientMessage(playerid, COLOR_YELLOW, thestring);
						    SendClientMessage(giveid, COLOR_YELLOW, thestring);
						    Mobile[playerid] = 255;
							Player[playerid][pCreditos] -= 2;
						    return true;
				        }
				        else if(BigSms[playerid] == 0)
				        {
							format(thestring, sizeof(thestring), "SMS: %s, De: %s (Tel:%d)", result,Player[playerid][pName],Player[playerid][pPnumber]);
							RingTone[giveid] = 20;
							SendClientMessage(playerid, COLOR_WHITE, "Enviada com sucesso...");
							SendClientMessage(giveid, COLOR_YELLOW, thestring);
							SendClientMessage(playerid,  COLOR_YELLOW, thestring);
							Player[playerid][pCreditos] -= 2;
   							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					        Mobile[playerid] = 255;
							return true;
						}
					}
				}
			}
		}
	}
	SendClientMessage(playerid, COLOR_GREY, "O envio falhou...");
	return true;
}

CMD:vivavoz(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(Player[playerid][pPhone] == 0)
	    {
	        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem um telefone.");
	        return true;
	    }
	    if(Mobile[playerid] == 255)
	    {
	        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em uma chamada.");
	        return true;
	    }
		if(Player[playerid][pSpeaker] == 0)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Beep * Auto-Falante ativado.");
			Player[playerid][pSpeaker] = 1;
			return true;
		}
		if(Player[playerid][pSpeaker] == 1)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Beep * Auto-Falante desativado.");
			Player[playerid][pSpeaker] = 0;
			return true;
		}
	}
	return true;
}

CMD:saldo(playerid)
{
	if(Player[playerid][pCreditos] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem créditos, vá a uma 24-7.");

    format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Você tem %d créditos.", Player[playerid][pCreditos]);
    SendClientMessage(playerid, COLOR_YELLOW, thestring);
	return 1;
}

CMD:creditos(playerid)
{
    SendClientMessage(playerid, COLOR_RED, "< ! >{FFFFFF} Créditos! ");
    SendClientMessage(playerid, COLOR_RED, "< ! >{FFFFFF} Versão original por: TheFear.");
    SendClientMessage(playerid, COLOR_RED, "< ! >{FFFFFF} Possui partes de: Vini Born, Poderoso Chefao, Ran_BLS, Marcos Marques, Kuddy Hirasawa, etc.");
    SendClientMessage(playerid, COLOR_RED, "< ! >{FFFFFF} Para ver a lista de livrarias usadas pelo servidor use /creditos2");
    SendClientMessage(playerid, COLOR_RED, "< ! >{FFFFFF} Mapeado por: Kuddy Hirasawa, Joao Jordao, Vinicius Hirasawa, Rafael Veiga e Panico Hunter.");
	return 1;
}

CMD:creditos2(playerid)
{
    SendClientMessage(playerid, COLOR_RED, "< ! >{FFFFFF} Créditos das livrarias utilizadas! ");
    SendClientMessage(playerid, COLOR_RED, "< ! >{FFFFFF} Kalcor (a_samp e MapAndreas), ZeeX (ZCMD), Y_Less (foreach e Whirpool).");
    SendClientMessage(playerid, COLOR_RED, "< ! >{FFFFFF} Double-O-Seven (DOF2), BlueG (MySQL)");
    SendClientMessage(playerid, COLOR_RED, "< ! >{FFFFFF} Outros códigos: Vinny_WalkeeR (Coordenadas GZ Morro)");
	return 1;
}

CMD:horas(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid) && !NoHospital[playerid])
	{
	    ApplyAnimation(playerid, "COP_AMBIENT","Coplook_watch", 4.0, 0, 0, 0, 0, 0); // Deal Drugs
	    ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Watch",4.1,0,1,1,0,3000);
	   	SetTimerEx("LimparAnim", 4000, false, "i", playerid);
	}
	format(thestring, 128, "* %s olhou as horas no seu relogio",PlayerGetName(playerid));
	ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	if(Player[playerid][pJailTime] > 0)
	{
		format(thestring, sizeof(thestring), "Mês: %s | Dia: %d | Hora: %d:%d | Tempo logado: %s | Tempo de prisão: %s.", MonthNames[ClockTime[dMonth]-1], ClockTime[dDay], ClockTime[tHour], ClockTime[tMinute], Convert(Player[playerid][pLogedTime]), Convert(Player[playerid][pJailTime]));
	    SendClientMessage(playerid, COLOR_WHITE, thestring);
	    ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Watch",4.1,0,1,1,0,3000);
	}
	else
	{
		format(thestring, sizeof(thestring), "Mês: %s | Dia: %d | Hora: %02d:%02d | Tempo logado: %s |", MonthNames[ClockTime[dMonth]-1], ClockTime[dDay], ClockTime[tHour], ClockTime[tMinute], Convert(Player[playerid][pLogedTime]));
	    SendClientMessage(playerid, COLOR_WHITE, thestring);
	    ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Watch",4.1,0,1,1,0,3000);
	}
	return true;
}

CMD:house(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 5)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new housenum;
	if(sscanf(params, "d", housenum))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/house <id da casa>");

	SetPlayerInterior(playerid,HouseInfo[housenum][hInt]);
	SetPlayerVirtualWorld(playerid,HouseInfo[housenum][hWorld]);
	SafeSetPlayerPos(playerid,HouseInfo[housenum][hExitx],HouseInfo[housenum][hExity],HouseInfo[housenum][hExitz]);
    SendClientMessage(playerid, COLOR_GREY, "Você foi teleportado! ");
	Player[playerid][pInt] = HouseInfo[housenum][hInt];
	Player[playerid][pLocal] = housenum;
	Incasa[playerid] = housenum;
	return true;
}

CMD:houseo(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 5)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new housenum;
	if(sscanf(params, "d", housenum))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/houseo <id da casa>");

	SafeSetPlayerPos(playerid,HouseInfo[housenum][hEntrancex],HouseInfo[housenum][hEntrancey],HouseInfo[housenum][hEntrancez]);
    SendClientMessage(playerid, COLOR_GREY, "Você foi teleportado! ");
    SetPlayerVirtualWorld(playerid, 0);
    SetPlayerInterior(playerid, 0);
	return true;
}

CMD:biz(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 5)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new housenum;
	if(sscanf(params, "d", housenum))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Biz <id da empresa>");

	SafeSetPlayerPos(playerid, BizzInfo[housenum][bEntranceX], BizzInfo[housenum][bEntranceY], BizzInfo[housenum][bEntranceZ]);
    SendClientMessage(playerid, COLOR_GREY, "Você foi teleportado!");
	SetPlayerInterior(playerid, 0);
	return true;
}

CMD:darat(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new giveid, at;
	if(sscanf(params, "ud", giveid, at))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/darat <id/nick> <atendimentos>");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
			Player[giveid][pAtend] += at;
			format(thestring, sizeof(thestring), "Você deu mais %d atendimentos para %s.",at,Player[giveid][pName]);
			SendClientMessage(playerid, COLOR_RED, thestring);
			format(thestring, sizeof(thestring), "%s deu mais %d atendimentos para você.",Player[playerid][pName],at);
			SendClientMessage(giveid, COLOR_RED, thestring);
		}
	}
	return true;
}

CMD:rtoat(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	foreach(new i:Player)
	{
		if(Player[i][pAdmin] > 0)
		{
		    format(thestring, sizeof(thestring), "O admin %s resetou seus atendimentos.", ReturnPlayer(playerid));
			SendClientMessage(i, COLOR_LIGHTBLUE, thestring);
			format(thestring, sizeof(thestring), "Você resetou os %d atendimentos de %s.", Player[i][pAtend], ReturnPlayer(i));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			WriteLog("Admins2", thestring);
			Player[i][pAtend] = 0;
			Player[i][pNota] = 0;
		}
	}
	format(thestring, sizeof(thestring), "%s resetou os atendimentos de todos os administradores.", ReturnPlayer(playerid));
	ABroadCast(COLOR_GREY, thestring, 1);
	return true;
}

CMD:rat(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/rat <id/nick>");

	if(!IsPlayerConnected(giveid))
		return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	new nota = Player[giveid][pNota]/Player[giveid][pAtend];
	format(thestring, sizeof(thestring), "O admin %s resetou seus atendimentos. Nota da semana %d.", ReturnPlayer(playerid),nota);
	SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
	format(thestring, sizeof(thestring), "Você resetou os %d atendimentos de %s. Nota da semana %d.", Player[giveid][pAtend], ReturnPlayer(giveid),nota);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
	WriteLog("Admins2", thestring);
	Player[giveid][pAtend] = 0;
	Player[giveid][pNota] = 0;
	return true;
}

CMD:spawncar(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new giveid;
	if(sscanf(params, "d", giveid))
    {
    	if(IsPlayerInAnyVehicle(playerid))
    	{
    	    SetVehicleToRespawn(GetPlayerVehicleID(playerid));
    		RemovePlayerFromVehicle(playerid);
    	    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Veiculo resetado!");
            return true;
    	}

		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/SpawnCar <carid>");
    }

	if(giveid < 0 || giveid > MAX_VEHICLES - 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} ID Invalido.");
	if(!IsVehicleSpawned(giveid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} ID Invalido.");

    SetVehicleToRespawn(giveid);
    SetVehicleParamsEx(giveid, false, false, false, false, false, false, false);
    VehicleInfo[giveid][vEngine] = false;
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Veiculo resetado!");
	return true;
}

CMD:delveh(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(!VehicleInfo[GetPlayerVehicleID(playerid)][vCustom])
    	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode deletar este veículo.");

	if(IsPlayerInAnyVehicle(playerid))
	{
        new vId = GetPlayerVehicleID(playerid);
	    DestroyVehicle(vId);
	    SendClientMessage(playerid, COLOR_GREY, "Veiculo Custom Destruido!");
	    VehicleInfo[vId][vCustom] = false;
        EventoInfo[VeiculoEvento][vId] = false;
        VehicleInfo[vId][vEngine] = false;
	}
	else SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em nenhum veiculo.");
	return true;
}

CMD:veiculoscustom(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new bool:customVehs = false,
        string[155];
    for(new i = 0; i < MAX_VEHICLES; i++)
    {
        if(VehicleInfo[i][vCustom])
        {
            customVehs = true;
            format(string, 155, "- {FFFFFF}%d", i);
            SendClientMessage(playerid, COLOR_YELLOW, string);
        }
    }
    if(!customVehs)
        SendClientMessage(playerid, COLOR_YELLOW, "- {FFFFFF}Nenhum");
	return true;
}

CMD:listrcars(playerid, params[])
{
	if(GetAdminLevel(playerid) < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	SendClientMessage(playerid, 0xFFFFFFFF, "PM, PF, FA, Bombeiros, Ballas, Grove, Governo, Hitman, SA News");
	SendClientMessage(playerid, 0xFFFFFFFF, "Vagos, Hell Angels, Black Pistons, Aztecas, Russa, Yakuza");
	SendClientMessage(playerid, 0xFFFFFFFF, "BOPE, Alqaeda, Apreendidos, Publicos, Guerra, VIP, Proprios");
	return true;
}

CMD:rcars(playerid, params[])
{
	if(GetAdminLevel(playerid) < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new bool:unwanted[MAX_VEHICLES];
	foreach(new player: Player)
	{
       	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
	}
    unwanted[VeiculosMateriais[3]] = true;

   	new _cars[32];
	if(sscanf(params, "s[32]", _cars))
	{
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < MAX_VEHICLES; car++)
	      	if(!unwanted[car])
                SetVehicleToRespawn(car);

		/*for(new car = 0; car < sizeof(CarInfo); car++)
		{
		    if(CarInfo[car][cID] != INVALID_VEHICLE_ID)
            //&& CarInfo[car][cPRFLock] == 0)
		    {
			    SetVehiclePos(CarInfo[car][cID], CarInfo[car][cX], CarInfo[car][cY], CarInfo[car][cZ]);
				SetVehicleZAngle(CarInfo[car][cID], CarInfo[car][cA]);
			    RepairVehicle(CarInfo[car][cID]);
		    }
		}*/
	}
    else if(!strcmp(_cars, "PM", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados da Polícia Militar resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(PMcars); car++)
	      	if(!unwanted[PMcars[car]])
                SetVehicleToRespawn(PMcars[car]);
    }
    else if(!strcmp(_cars, "PF", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados da Polícia Federal resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(FBICar); car++)
	      	if(!unwanted[FBICar[car]])
                SetVehicleToRespawn(FBICar[car]);
    }
    else if(!strcmp(_cars, "FA", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados da Forças Armadas resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(FaCars); car++)
			if(!unwanted[FaCars[car]])
                SetVehicleToRespawn(FaCars[car]);
    }
	else if(!strcmp(_cars, "Bombeiros", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados dos Bombeiros resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(BombeiroCars); car++)
			if(!unwanted[BombeiroCars[car]])
                SetVehicleToRespawn(BombeiroCars[car]);
    }
	else if(!strcmp(_cars, "Ballas", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados da Front Yard Ballas resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(BallasCars); car++)
			if(!unwanted[BallasCars[car]])
                SetVehicleToRespawn(BallasCars[car]);
    }
	else if(!strcmp(_cars, "Grove", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados da Grove Street Families resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(GroveCars); car++)
			if(!unwanted[GroveCars[car]])
                SetVehicleToRespawn(GroveCars[car]);
    }
	else if(!strcmp(_cars, "Governo", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados da Prefeitura resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(prefeitocars); car++)
			if(!unwanted[prefeitocars[car]])
                SetVehicleToRespawn(prefeitocars[car]);
    }
	else if(!strcmp(_cars, "Hitman", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados dos Hitmans resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(HitmanCar); car++)
			if(!unwanted[HitmanCar[car]])
                SetVehicleToRespawn(HitmanCar[car]);
    }
	else if(!strcmp(_cars, "SA News", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados da San News resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(NewsCar); car++)
			if(!unwanted[NewsCar[car]])
                SetVehicleToRespawn(NewsCar[car]);
    }
	/*else if(!strcmp(_cars, "Lowrider", true))
    {
		format(thestring, sizeof(thestring), "{FF0000}[Administração]:{008080} Veículos inutilizados dos Lowriders resetados por %s.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(Lowriders); car++)
			if(!unwanted[Lowriders[car]])
                SetVehicleToRespawn(Lowriders[car]);
    }
	else if(!strcmp(_cars, "Hamas", true))
    {
		format(thestring, sizeof(thestring), "{FF0000}[Administração]:{008080} Veículos inutilizados da Hamas resetados por %s.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(HamasCar); car++)
			if(!unwanted[HamasCar[car]])
                SetVehicleToRespawn(HamasCar[car]);
    }*/
	else if(!strcmp(_cars, "Vagos", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados da Los Santos Vagos resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(VagosCars); car++)
			if(!unwanted[VagosCars[car]])
                SetVehicleToRespawn(VagosCars[car]);
    }
	else if(!strcmp(_cars, "Hell Angels", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados dos Hell Angels resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(HACars); car++)
			if(!unwanted[HACars[car]])
                SetVehicleToRespawn(HACars[car]);
    }
	else if(!strcmp(_cars, "Black Pistons", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados dos Black Pistons resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(BPCars); car++)
			if(!unwanted[BPCars[car]])
                SetVehicleToRespawn(BPCars[car]);
    }
	else if(!strcmp(_cars, "Aztecas", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados da Varrio Los Aztecas resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(AztecasCars); car++)
			if(!unwanted[AztecasCars[car]])
                SetVehicleToRespawn(AztecasCars[car]);
    }
	else if(!strcmp(_cars, "Russa", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados da Máfia Russa resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(RussaCar); car++)
			if(!unwanted[RussaCar[car]])
                SetVehicleToRespawn(RussaCar[car]);
    }
	else if(!strcmp(_cars, "Yakuza", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados da Máfia Yakuza resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(YakuzaCars); car++)
			if(!unwanted[YakuzaCars[car]])
                SetVehicleToRespawn(YakuzaCars[car]);
    }
	/*else if(!strcmp(_cars, "Drifters", true))
    {
		format(thestring, sizeof(thestring), "{FF0000}[Administração]:{008080} Veículos inutilizados dos Drifters resetados por %s.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(Drifters); car++)
			if(!unwanted[Drifters[car]])
                SetVehicleToRespawn(Drifters[car]);
    }
 	else if(!strcmp(_cars, "Bloods", true))
    {
		format(thestring, sizeof(thestring), "{FF0000}[Administração]:{008080} Veículos inutilizados dos Bloods resetados por %s.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(Cmver); car++)
			if(!unwanted[Cmver[car]])
                SetVehicleToRespawn(Cmver[car]);
    }
 	else if(!strcmp(_cars, "PCC", true))
    {
		format(thestring, sizeof(thestring), "{FF0000}[Administração]:{008080} Veículos inutilizados do PCC resetados por %s.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(Pcccars); car++)
			if(!unwanted[Pcccars[car]])
                SetVehicleToRespawn(Pcccars[car]);
    }*/
  	else if(!strcmp(_cars, "BOPE", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados do BOPE resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(BOPECar); car++)
			if(!unwanted[BOPECar[car]])
                SetVehicleToRespawn(BOPECar[car]);
    }
  	else if(!strcmp(_cars, "Alqaeda", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados da Al-Qaeda resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(TerrorCar); car++)
			if(!unwanted[TerrorCar[car]])
                SetVehicleToRespawn(TerrorCar[car]);
    }
  	/*else if(!strcmp(_cars, "PC", true))
    {
		format(thestring, sizeof(thestring), "{FF0000}[Administração]:{008080} Veículos inutilizados da PC resetados por %s.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(PCcars); car++)
			if(!unwanted[PCcars[car]])
                SetVehicleToRespawn(PCcars[car]);
		for(new car = 0; car < sizeof(PCcarsD); car++)
			if(!unwanted[PCcarsD[car]])
                SetVehicleToRespawn(PCcarsD[car]);
    }*/
  	/*else if(!strcmp(_cars, "Kings", true))
    {
		format(thestring, sizeof(thestring), "{FF0000}[Administração]:{008080} Veículos inutilizados dos Kings resetados por %s.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(Kings); car++)
			if(!unwanted[Kings[car]])
                SetVehicleToRespawn(Kings[car]);
    }*/
    else if(!strcmp(_cars, "Apreendidos", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos apreendidos resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(VeiculosApreendidos); car++)
			if(VeiculosApreendidos[car] != -1)
                SetVehicleToRespawn(VeiculosApreendidos[car]);
    }
    else if(!strcmp(_cars, "Guerra", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos inutilizados da Guerra resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(GuerraCars); car++)
        {
            if(GuerraCars[car] == 0) break;
			if(!unwanted[GuerraCars[car]])
                SetVehicleToRespawn(GuerraCars[car]);
        }
    }
    else if(!strcmp(_cars, "Publicos", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos públicos inutilizados resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(MotoSpawn); car++)
			if(!unwanted[MotoSpawn[car]])
                SetVehicleToRespawn(MotoSpawn[car]);
    }
    else if(!strcmp(_cars, "VIPs", true)
         || !strcmp(_cars, "VIP", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos {FFD700}VIP {008080}inutilizados resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
		for(new car = 0; car < sizeof(CarroVIP); car++)
			if(!unwanted[CarroVIP[car]])
                SetVehicleToRespawn(CarroVIP[car]);
    }
    else if(!strcmp(_cars, "Proprios", true)
         || !strcmp(_cars, "Próprios", true))
    {
		format(thestring, sizeof(thestring), "[Administração]: Veículos próprios inutilizados resetados por {FFFFFF}%s{008080}.", Player[playerid][pName]);
	    BroadCast(COLOR_ADMIN, thestring);
        for(new car = 0; car < MAX_BOUGHT_VEHICLES; car++)
            if(CarInfo[car][cID] != INVALID_VEHICLE_ID)
    			if(!unwanted[CarInfo[car][cID]])
                    SetVehicleToRespawn(unwanted[CarInfo[car][cID]]);
    }
	else
	{
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nome Inválido.");
	}
	return true;
}

CMD:remp(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 3)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new bool:unwanted[MAX_VEHICLES];
	foreach(new player: Player)
   	{
       	if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
  	}
   	for(new car = 1; car <= MAX_VEHICLES; car++)
    {
   		if(car >= Caminhao[0] && car <= Caminhao[14])
		{
			if(!unwanted[car])
			{
				SetVehicleToRespawn(car);
				VehicleInfo[car][vGas] = GasMax;
			}
		}
		else if(car >= Reboque[0] && car <= Reboque[8])
		{
			if(!unwanted[car])
			{
				SetVehicleToRespawn(car);
				VehicleInfo[car][vGas] = GasMax;
			}
		}
		else if(car >= Funecars[0] && car <= Funecars[5])
		{
			if(!unwanted[car])
			{
				SetVehicleToRespawn(car);
				VehicleInfo[car][vGas] = GasMax;
			}
		}
		else if(car >= Onibus[0] && car <= Onibus[7])
		{
			if(!unwanted[car])
			{
				SetVehicleToRespawn(car);
				VehicleInfo[car][vGas] = GasMax;
			}
		}
		else if(car >= CaminhaoCarga[0] && car <= CaminhaoCarga[14])
		{
			if(!unwanted[car])
			{
				SetVehicleToRespawn(car);
				VehicleInfo[car][vGas] = GasMax;
			}
		}
		else if(car >= Taxi[0] && car <= Taxi[14])
		{
			if(!unwanted[car])
			{
				SetVehicleToRespawn(car);
				VehicleInfo[car][vGas] = GasMax;
			}
		}
	}
	format(thestring, sizeof(thestring), "[Administração]: Veículos de emprego resetados por %s.", Player[playerid][pName]);
    BroadCast(COLOR_NOTICIA, thestring);
    return true;
}

CMD:verid(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 5)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if(PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
		{
			format(thestring, sizeof(thestring), "Casa: %d | VW: %d | Int: %d", i,HouseInfo[i][hWorld],HouseInfo[i][hInt]);
			SendClientMessage(playerid, COLOR_GREY, thestring);
		}
	}
	for(new i = 0; i < sizeof(BizzInfo); i++)
	{
		if(PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
		{
			format(thestring, sizeof(thestring), "Biz: %d", i);
			SendClientMessage(playerid, COLOR_GREY, thestring);
		}
	}
	return true;
}

CMD:editarbiz(playerid, params[])
{
    if(GetAdminLevel(playerid) < 7)
        return false;

    new b, func;
    if(sscanf(params, "dd", b, func))
    {
		SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarBiz <Biz> <Função>");
		SendClientMessage(playerid, SERVER_INFO, "[Funções]: {FFFFFF}1: Level, 2: ProdPrice, 3: Preço, 4: Fundos, 5: Produtos, 6: Dono");
		SendClientMessage(playerid, SERVER_INFO, "[Funções]: {FFFFFF}7: Sócio, 8: Posição, 9: Trancado, 10: MaxProd, 11: Nome, 12: BPP");
        return true;
    }
    else if(b < 0 || b >= MAX_BIZ)
    {
		format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} Biz Inválida. Use de 0 a %d.", MAX_BIZ - 1);
		SendClientMessage(playerid, COLOR_YELLOW, thestring);
        return true;
    }

    if(func == 1)
    {
        new v;
        if(sscanf(params, "ddd", b, func, v))
    		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarBiz <Biz> Level <Valor>");

        BizzInfo[b][bLevelNeeded] = v;

        format(thestring, sizeof(thestring), "%s alterou o Level da Empresa %d para %d.", ReturnPlayer(playerid), b, v);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        WriteLog("Edit", thestring);

        OnPropUpdate();
        return true;
    }
    else if(func == 2)
    {
        new v;
        if(sscanf(params, "ddd", b, func, v))
    		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarBiz <Biz> ProdPrice <Valor>");

        BizzInfo[b][bPriceProd] = v;

        format(thestring, sizeof(thestring), "%s alterou o ProdPrice da Empresa %d para %d.", ReturnPlayer(playerid), b, v);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        WriteLog("Edit", thestring);
        return true;
    }
    else if(func == 3)
    {
        new v;
        if(sscanf(params, "ddd", b, func, v))
    		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarBiz <Biz> Preço <Valor>");

        BizzInfo[b][bBuyPrice] = v;

        format(thestring, sizeof(thestring), "%s alterou o Preço da Empresa %d para %d.", ReturnPlayer(playerid), b, v);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        WriteLog("Edit", thestring);

        OnPropUpdate();
        return true;
    }
    else if(func == 4)
    {
        new v;
        if(sscanf(params, "ddd", b, func, v))
    		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarBiz <Biz> Fundos <Valor>");

        BizzInfo[b][bTill] = v;

        format(thestring, sizeof(thestring), "%s alterou os Fundos da Empresa %d para %d.", ReturnPlayer(playerid), b, v);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        WriteLog("Edit", thestring);
        return true;
    }
    else if(func == 5)
    {
        new v;
        if(sscanf(params, "ddd", b, func, v))
    		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarBiz <Biz> Produtos <Valor>");

        BizzInfo[b][bProducts] = v;

        format(thestring, sizeof(thestring), "%s alterou os Produtos da Empresa %d para %d.", ReturnPlayer(playerid), b, v);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        WriteLog("Edit", thestring);
        return true;
    }
    else if(func == 6)
    {
        new v[MAX_PLAYER_NAME];
        if(sscanf(params, "dds[24]", b, func, v))
    		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarBiz <Biz> Dono <Valor>");

        format(bOwner[b], MAX_PLAYER_NAME, "%s", v);

        format(thestring, sizeof(thestring), "%s alterou o Dono da Empresa %d para %s.", ReturnPlayer(playerid), b, v);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        WriteLog("Edit", thestring);

        OnPropUpdate();
        return true;
    }
    else if(func == 7)
    {
        new v[MAX_PLAYER_NAME];
        if(sscanf(params, "dds[24]", b, func, v))
    		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarBiz <Biz> Sócio <Valor>");

        format(bExtortion[b], MAX_PLAYER_NAME, "%s", v);

        format(thestring, sizeof(thestring), "%s alterou o Sócio da Empresa %d para %s.", ReturnPlayer(playerid), b, v);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        WriteLog("Edit", thestring);

        OnPropUpdate();
        return true;
    }
    else if(func == 8)
    {
        new Float:X, Float:Y, Float:Z;
        GetPlayerPos(playerid, X, Y, Z);

    	BizzInfo[b][bEntranceX] = X;
    	BizzInfo[b][bEntranceY] = Y;
    	BizzInfo[b][bEntranceZ] = Z;

    	Delete3DTextLabel(BizzInfo[b][BizzLabel]);
        DestroyPickup(BizzInfo[b][BizzIcon]);

        BizzInfo[b][BizzIcon] = CreatePickup(GetBizPickupModel(b), 1, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]);
        BizzInfo[b][BizzLabel] = Create3DTextLabel(GetBizString(b), 0xFFFFFFFF, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ] + 0.5, 20.0, 0, 1);

        format(thestring, sizeof(thestring), "%s alterou a Posição da Empresa %d para (%f, %f, %f).", ReturnPlayer(playerid), b, X, Y, Z);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        WriteLog("Edit", thestring);
        return true;
    }
    else if(func == 9)
    {
        new v;
        if(sscanf(params, "ddd", b, func, v))
    		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarBiz <Biz> Trancado <Valor>");
        if(!IsLockableBiz(b))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Esta empresa não tem Interior!");

    	if(v == 0)
            SetBizLocked(func, false);
        else if(v == 1)
            SetBizLocked(func, true);
        else
    	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Valor deve ser 0 para Destrancado ou 1 para Trancado.");

        format(thestring, sizeof(thestring), "%s %s a Empresa %d.", ReturnPlayer(playerid), ((v)?("Trancou"):("Destrancou")), b);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        WriteLog("Edit", thestring);
        return true;
    }
    else if(func == 10)
    {
        new v;
        if(sscanf(params, "ddd", b, func, v))
    		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarBiz <Biz> MaxProd <Valor>");

        BizzInfo[b][bMaxProducts] = v;

        format(thestring, sizeof(thestring), "%s alterou o MaxProd da Empresa %d para %d.", ReturnPlayer(playerid), b, v);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        WriteLog("Edit", thestring);
        return true;
    }
    else if(func == 11)
    {
        new v[64];
        if(sscanf(params, "dds[64]", b, func, v))
    		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarBiz <Biz> Nome <Valor>");

        format(bMessage[b], 64, "%s", v);

        format(thestring, sizeof(thestring), "%s alterou o Nome da Empresa %d para %s.", ReturnPlayer(playerid), b, v);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        WriteLog("Edit", thestring);

        OnPropUpdate();
        return true;
    }
    else if(func == 12)
    {
        new v;
        if(sscanf(params, "ddd", b, func, v))
    		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarBiz <Biz> BPP <Valor>");

        BizzInfo[b][bBizPriceProd] = v;

        format(thestring, sizeof(thestring), "%s alterou o BizPriceProd da Empresa %d para %d.", ReturnPlayer(playerid), b, v);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        WriteLog("Edit", thestring);
        return true;
    }
	SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarBiz <Biz> <Função>");
	SendClientMessage(playerid, SERVER_INFO, "[Funções]: {FFFFFF}1: Level, 2: ProdPrice, 3: Preço, 4: Fundos, 5: Produtos, 6: Dono");
	SendClientMessage(playerid, SERVER_INFO, "[Funções]: {FFFFFF}7: Sócio, 8: Posição, 9: Trancado, 10: MaxProd, 11: Nome, 12: BPP");
    return true;
}

CMD:edit(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new x_job[12];
	new proplev;
	if(sscanf(params, "s[12]d", x_job, proplev))
	{
		SendClientMessage(playerid, COLOR_WHITE, "|__________________ Editar __________________|");
		SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/edit <nome> <qtde> (Casas ou empresas)");
		SendClientMessage(playerid, COLOR_WHITE, "Nomes Disponíveis: Nível, Preço, Fundos, Produtos");
		SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		return true;
	}
    for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if(PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
		{
			format(thestring, sizeof(thestring), "Casa: %d", i);
			SendClientMessage(playerid, COLOR_GREY, thestring);
			if(proplev > 0)
			{
			    if(strcmp(x_job,"Nível", true) == 0)
			    {
					HouseInfo[i][hLevel] = proplev;
					format(thestring, sizeof(thestring), "%s editou o level da casa %d para %d", ReturnPlayer(playerid),i,proplev);
				}
				else if(strcmp(x_job,"Preço", true) == 0)
			    {
					HouseInfo[i][hValue] = proplev;
					format(thestring, sizeof(thestring), "%s editou o preco da casa %d para %d", ReturnPlayer(playerid),i,proplev);
				}
				SaveProperty(i);
				WriteLog("EditLog", thestring);
			}
		}
	}
	format(thestring, sizeof(thestring), "Você ajustou os: %s para %d.", x_job, proplev);
	SendClientMessage(playerid, COLOR_WHITE, thestring);
	OnPropUpdate();
	return true;
}

CMD:carga(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		new tmpcar = GetVehicleModel(GetPlayerVehicleID(playerid));
		new vId = GetPlayerVehicleID(playerid);
		if(tmpcar!=456 && tmpcar!=499)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um caminhao de entregas");

        if(GetVehicleModel(vId) == 456)
	        PlayerHaul[vId][pCapasity] = 200;
	    else if(GetVehicleModel(vId) == 499)
	        PlayerHaul[vId][pCapasity] = 120;

		format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Produtos: %d/%d.", PlayerHaul[vId][pLoad],PlayerHaul[vId][pCapasity]);
		SendClientMessage(playerid, SERVER_INFO, thestring);
	}
	return true;
}

CMD:comprarprods(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
		new tmpcar = GetVehicleModel(GetPlayerVehicleID(playerid));
		new compcost = BizProdutosPrice;
		if(PlayerToPoint(60.0, playerid, 1750.9022,-2054.1663,14.1010))
		{
			if(IsATruck(tmpcar))
			{
			    new vId = GetPlayerVehicleID(playerid);
			    if(GetVehicleModel(vId) == 456)
			        PlayerHaul[vId][pCapasity] = 200;
			    else if(GetVehicleModel(vId) == 499)
	        		PlayerHaul[vId][pCapasity] = 120;
				if(PlayerHaul[vId][pLoad] < PlayerHaul[vId][pCapasity])
				{
				    new amount;
					if(sscanf(params, "d", amount))
					{
						SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/comprarprods <quantia>");
						return true;
					}
					if(amount < 1 || amount > 200)
						return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode comprar menos do que 1 produto ou mais do que 500.");
					new check = PlayerHaul[vId][pLoad] + amount;
					if(check > PlayerHaul[vId][pCapasity])
					{
					    format(thestring, sizeof(thestring), "Você ultrapassou o limite de produtos %d, seus carregamentos %d",PlayerHaul[vId][pCapasity],PlayerHaul[vId][pLoad]);
					    SendClientMessage(playerid, COLOR_GREY, thestring);
					    return true;
					}
					new cost = amount*compcost;
					if(GetPlayerGP(playerid) >= cost)
					{
						PlayerHaul[vId][pLoad] += amount;
						format(thestring, sizeof(thestring), "Produtos: %d/%d.", PlayerHaul[vId][pLoad],PlayerHaul[vId][pCapasity]);
						SendClientMessage(playerid, COLOR_GROOVE, thestring);
						format(thestring, sizeof(thestring), "Você comprou %d produtos por R$ %d", amount,cost);
						SendClientMessage(playerid, COLOR_WHITE, thestring);
						GivePlayerGP(playerid,-cost);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

                        GiveBizMoneyEx(Biz_Produtos, cost);
						return true;
					}
					else
					{
						format(thestring, sizeof(thestring), " Você não pode pagar os produtos por R$ %d.", amount,cost);
						SendClientMessage(playerid, COLOR_GREY, thestring);
						return true;
					}
				}
				else
				{
					format(thestring, sizeof(thestring), "Produtos: %d/%d.", PlayerHaul[vId][pLoad],PlayerHaul[vId][pCapasity]);
					SendClientMessage(playerid, COLOR_GROOVE, thestring);
					return true;
				}
			}
			else
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Esse veículo não faz entrega de produtos.");
		}
	}
	return true;
}

CMD:venderprods(playerid)
{
/*	new cashmade;
	new vId = GetPlayerVehicleID(playerid);
	if(!IsATruck(GetVehicleModel(vId)))
		return GameTextForPlayer(playerid, "~r~esteja no caminhao de entregas primeiro", 5000, 1);

	if(PlayerHaul[vId][pLoad] == 0)
	{
		GameTextForPlayer(playerid, "~r~o caminhao est vazio, volte ao poro", 5000, 1);
		format(thestring, sizeof(thestring), "Produtos: %d/%d.", PlayerHaul[vId][pLoad],PlayerHaul[vId][pCapasity]);
		SendClientMessage(playerid, COLOR_GROOVE, thestring);
		return true;
	}
	for(new i = 0; i < sizeof(BizzInfo); i++)
	{
		if(PlayerToPoint(10, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
		{
			for(new l = PlayerHaul[vId][pLoad]; l > 0; l--)
			{
				if(BizzInfo[i][bProducts] >= BizzInfo[i][bMaxProducts])
				{
					GameTextForPlayer(playerid, "~r~nossas lojas estao cheias", 5000, 1);
					format(thestring, sizeof(thestring), "Lucro: R$ %d", cashmade);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					format(thestring, sizeof(thestring), "Produtos: %d/%d.", PlayerHaul[vId][pLoad],PlayerHaul[vId][pCapasity]);
					SendClientMessage(playerid, COLOR_GROOVE, thestring);
					return true;
				}
				if(BizzInfo[i][bPriceProd] > BizzInfo[i][bTill])
				{
					GameTextForPlayer(playerid, "~r~no posso pagar esse dinheiro", 5000, 1);
					format(thestring, sizeof(thestring), "Lucro: R$ %d", cashmade);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					format(thestring, sizeof(thestring), "Produtos: %d/%d.", PlayerHaul[vId][pLoad],PlayerHaul[vId][pCapasity]);
					SendClientMessage(playerid, COLOR_GROOVE, thestring);
					return true;
				}
				PlayerHaul[vId][pLoad]--;
				BizzInfo[i][bProducts]++;
				cashmade = cashmade+BizzInfo[i][bPriceProd];
				ConsumingMoney[playerid] = 1;
				GivePlayerGP(playerid,BizzInfo[i][bPriceProd]);
				format(thestring, sizeof(thestring), "%s vendeu %d produtos para a Biz %d e ganhou R$ %d", ReturnPlayer(playerid),PlayerHaul[vId][pLoad],i,BizzInfo[i][bPriceProd]);
				WriteLog("HackLog",thestring);
				if(i != 9)
					BizzInfo[i][bTill] -= BizzInfo[i][bPriceProd];

				if(PlayerHaul[vId][pLoad] == 0)
				{
					GameTextForPlayer(playerid, "~r~o caminhao esta vazio, volte ao porao", 5000, 1);
					format(thestring, sizeof(thestring), "Lucro: R$ %d", cashmade);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					format(thestring, sizeof(thestring), "Produtos: %d/%d.", PlayerHaul[vId][pLoad],PlayerHaul[vId][pCapasity]);
					SendClientMessage(playerid, COLOR_GROOVE, thestring);
					return true;
				}
			}
			OnPropUpdate();
			return true;
		}
	}*/

	new vId = GetPlayerVehicleID(playerid);
	if(!IsATruck(GetVehicleModel(vId)))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um caminhão de entregas.");

	if(PlayerHaul[vId][pLoad] <= 0)
	{
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O caminhão está sem produtos.");
		format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Produtos: {FF0000}%d/%d", PlayerHaul[vId][pLoad], PlayerHaul[vId][pCapasity]);
		SendClientMessage(playerid, COLOR_GROOVE, thestring);
		return true;
	}

	new eId = -1;
    for(new Bizz = 0; Bizz < sizeof(BizzInfo); Bizz++)
    {
	    if(IsPlayerInRangeOfPoint(playerid, 10.0, BizzInfo[Bizz][bEntranceX], BizzInfo[Bizz][bEntranceY], BizzInfo[Bizz][bEntranceZ]))
	    {
	        eId = Bizz;
	        break;
	    }
    }
	if(eId == -1) //Se não estiver em nem uma
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em uma empresa.");

	new Lucro = 0;

    if(BizzInfo[eId][bProducts] >= BizzInfo[eId][bMaxProducts])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Esta empresa já tem produtos suficientes.");
    if(BizzInfo[eId][bBizPriceProd] > BizzInfo[eId][bTill])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} A empresa não pode pagar.");

	for(new Produtos = PlayerHaul[vId][pLoad]; Produtos > 0; Produtos--)
	{
		if(BizzInfo[eId][bProducts] >= BizzInfo[eId][bMaxProducts] || BizzInfo[eId][bBizPriceProd] > BizzInfo[eId][bTill])
		{
		    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você abasteceu a empresa.");
			format(thestring, sizeof(thestring), "Lucro: {009900}R$%d", Lucro);
			SendClientMessage(playerid, COLOR_WHITE, thestring);
			format(thestring, sizeof(thestring), "Produtos: {FF0000}%d/%d", PlayerHaul[vId][pLoad], PlayerHaul[vId][pCapasity]);
			SendClientMessage(playerid, COLOR_WHITE, thestring);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			break;
		}
		else
		{
			PlayerHaul[vId][pLoad] --;
			BizzInfo[eId][bProducts] ++;
			Lucro += BizzInfo[eId][bPriceProd];
			GivePlayerGP(playerid, BizzInfo[eId][bPriceProd]);
			BizzInfo[eId][bTill] -= BizzInfo[eId][bBizPriceProd];
			format(thestring, sizeof(thestring), "%s vendeu %d produtos para a Biz %d e ganhou R$%d", Player[playerid][pName], PlayerHaul[vId][pLoad], eId, BizzInfo[eId][bPriceProd]);
			WriteLog("HackLog", thestring);
			if(PlayerHaul[vId][pLoad] <= 0)
			{
				SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Seu caminhão está sem produtos.");
				format(thestring, sizeof(thestring), "Lucro: {009900}R$%d", Lucro);
				SendClientMessage(playerid, COLOR_WHITE, thestring);
				format(thestring, sizeof(thestring), "Produtos: {FF0000}%d/%d", PlayerHaul[vId][pLoad], PlayerHaul[vId][pCapasity]);
				SendClientMessage(playerid, COLOR_WHITE, thestring);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				break;
			}
		}
	}
	OnPropUpdate();
	return true;
}

CMD:devolverprods(playerid, params[])
{
	if(!PlayerToPoint(60.0, playerid, 1750.9022,-2054.1663,14.1010))
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na Distribuidora de Produtos.");
	new tmpcar = GetVehicleModel(GetPlayerVehicleID(playerid));
    if(!IsATruck(tmpcar))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Esse veículo não faz entrega de produtos.");
    new vId = GetPlayerVehicleID(playerid);
    if(PlayerHaul[vId][pLoad] <= 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não há produtos neste veículo.");

    new amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/DevolverProds <Quantidade>");
		return true;
	}
	if(amount < 1 || amount > PlayerHaul[vId][pLoad])
	{
	    format(thestring, 256, "[ERRO]:{FFFFFF} Quantidade de 1 à %d.", PlayerHaul[vId][pLoad]);
		return SendClientMessage(playerid, COLOR_RED, thestring);
	}

	new cost = amount * 10;
	PlayerHaul[vId][pLoad] -= amount;
	GivePlayerGP(playerid, cost);
	if(BizzInfo[Biz_Produtos][bTill] - cost >= 0)
		BizzInfo[Biz_Produtos][bTill] -= cost;

	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	//Mensagens
	format(thestring, sizeof(thestring), "Produtos: %d/%d.", PlayerHaul[vId][pLoad],PlayerHaul[vId][pCapasity]);
	SendClientMessage(playerid, COLOR_GROOVE, thestring);
	format(thestring, sizeof(thestring), "Você vendeu %d produtos por R$%d.", amount, cost);
	SendClientMessage(playerid, COLOR_WHITE, thestring);
	return 1;
}

CMD:abastecer(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(!IsPlayerInAnyVehicle(playerid))
            return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um veículo!");

		new vid = GetPlayerVehicleID(playerid);
        if(VehicleInfo[vid][vGas] >= 100)
	    	return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O tanque já está cheio!");

		if(IsAtGasStation(playerid))
		{
		    GameTextForPlayer(playerid,"Reabastecendo o ve¢culo ~n~por favor espere",2000,1);
			SetTimerEx("Fillup", RefuelWait, false, "dd", playerid, GetPlayerVehicleID(playerid));
			Refueling[playerid] = 1;
            SetEngine(vid, false);
		}
		else
			return SendClientMessage(playerid,COLOR_GREY,"Você não está em um posto.");
	}
   	return true;
}

CMD:abastecercarro(playerid)
{
    if(Player[playerid][pFuel] > 0)
    {
        new vid = GetPlayerVehicleID(playerid);
        if(VehicleInfo[vid][vGas] < 81)
        {
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você reabasteceu seu carro com 20 por cento do total");
	        VehicleInfo[vid][vGas] += 20;
	        Player[playerid][pFuel] -= 20;
		}
		else
		    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Há muito combustível no tanque, aguarde.");
    }
    else
        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem um galão com gasolina!");

	return true;
}

CMD:entrar(playerid, params[])
{
    noab2[playerid] = true;
    if(!IsPlayerConnected(playerid))
        return 0;

    //Segunda entrada da casa 0
    if(IsPlayerInRangeOfPoint(playerid, 2.0, 485.1, -1114.1, 82.3))
    {
		if(Player[playerid][pHouseKey] == 0 || HouseInfo[0][hLock] == 0)
		{
			SetPlayerInterior(playerid, HouseInfo[0][hInt]);
			SetPlayerVirtualWorld(playerid, HouseInfo[0][hWorld]);
			SafeSetPlayerPos(playerid, 2237.7062, -1073.9829, 1049.0234);
			SetPlayerFacingAngle(playerid, 270.0);
			GameTextForPlayer(playerid, "~w~bem vindo em casa", 5000, 1);
			Player[playerid][pInt] = HouseInfo[0][hInt];
			Player[playerid][pLocal] = 0;
			Incasa[playerid] = 0;
			return 1;
		}
    }
	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
		{
			if(Player[playerid][pHouseKey] == i
            || HouseInfo[i][hLock] == 0)
			{
				SafeSetPlayerPos(playerid, HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]);
				SetPlayerVirtualWorld(playerid, HouseInfo[i][hWorld]);

				SetPlayerInterior(playerid, HouseInfo[i][hInt]);
				Player[playerid][pInt] = HouseInfo[i][hInt];

				Player[playerid][pLocal] = i;
				Incasa[playerid] = i;

				GameTextForPlayer(playerid, "~w~bem vindo em casa", 5000, 1);
			}
			else
				return GameTextForPlayer(playerid, "~r~trancada", 5000, 1);
		}
	}
    CheckBizEntranceExit(playerid);
	return true;
}

CMD:vw(playerid)
{
    new world;
    world = GetPlayerVirtualWorld(playerid);
    format(thestring, sizeof(thestring), "Seu virtual world é: %d",world);
    SendClientMessage(playerid,COLOR_ORANGE,thestring);
    return true;
}

CMD:sair(playerid)
{
    if(!IsPlayerConnected(playerid))
        return true;

    noab2[playerid] = true;
    if(GetPlayerVirtualWorld(playerid) == 101)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, 2235.8854, -1073.9793, 1049.0234))
        {
            SafeSetPlayerPos(playerid, 485.1289, -1115.6402, 82.3593);
            SetPlayerFacingAngle(playerid, 177.2447);
            SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid,0);
			Player[playerid][pLocal] = 255;
			Player[playerid][pInt] = 0;
			return 1;
        }
    }
	if(CarShopping[playerid] == true)
	{
		CarShopping[playerid] = false;
		DestroyVehicle(ShopCar[playerid]);
	    carbrowse[playerid] = 0;
	    Kick(playerid);
		return true;
 	}
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		RemovePlayerFromVehicle(playerid);
        TogglePlayerControllable(playerid, true);
		return true;
	}
   	if(Incasa[playerid] != 255 && PlayerToPoint(3, playerid,HouseInfo[Incasa[playerid]][hExitx], HouseInfo[Incasa[playerid]][hExity], HouseInfo[Incasa[playerid]][hExitz]))
	{
	    if(Incasa[playerid] < 64 || Incasa[playerid] > 81)
	    {
			SetPlayerInterior(playerid,0);
			Player[playerid][pInt] = 0;
		}
		if(Incasa[playerid] >= 64 && Incasa[playerid] <= 82)
		{
       		Congelar(playerid);
		    SetTimerEx("Descongelar", 700, 0, "i", playerid);
		    SetPlayerInterior(playerid,18);
		    Player[playerid][pInt] = 18;
		}
		SafeSetPlayerPos(playerid,HouseInfo[Incasa[playerid]][hEntrancex],HouseInfo[Incasa[playerid]][hEntrancey],HouseInfo[Incasa[playerid]][hEntrancez]);
		SetPlayerVirtualWorld(playerid, 0);
		Player[playerid][pLocal] = 255;
		SetTimerEx("SetarVW", 3000, false, "dd", playerid, 0);
		Incasa[playerid] = 255;
		return true;
    }
    CheckBizEntranceExit(playerid);
	return true;
}

CMD:home(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(Player[playerid][pHouseKey] != 255 || Player[playerid][pPaluguelkey] != 255)
		{
		    if(PlayerOnMission[playerid] > 0)
		        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode digitar esse comando durante uma missão.");

		    if(PaperMission[playerid] == 1)
		        return true;

			SetPlayerCheckpoint(playerid,HouseInfo[Player[playerid][pHouseKey]][hEntrancex], HouseInfo[Player[playerid][pHouseKey]][hEntrancey], HouseInfo[Player[playerid][pHouseKey]][hEntrancez], 4.0);
			GameTextForPlayer(playerid, "~w~o checkpoint marca: ~r~casa", 5000, 1);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
		}
		else
			GameTextForPlayer(playerid, "~w~voce no tem moradia", 5000, 1);
	}
	return true;
}

CMD:guinchar(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    if(Player[playerid][pDonateRank] < 2)
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é VIP Prata.");

		new house = Player[playerid][pHouseKey];
		if(house != 255 && strcmp(Player[playerid][pName], hOwner[Player[playerid][pHouseKey]], false) == 0)
		{
			/*if(BizzInfo[8][bProducts] == 0)
				return GameTextForPlayer(playerid, "~r~empresa sem produtos", 5000, 1);*/
			if(!IsPlayerInVehicle(playerid, CarroCasa[house]))
			{
				if(CarTow(CarroCasa[house]))
				{
					GameTextForPlayer(playerid, "~w~Carro~n~~g~guinchado !", 5000, 1);

					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					//BizzInfo[8][bProducts]--;
				}
				else
					GameTextForPlayer(playerid, "~w~o carro ~n~esta em~r~ uso", 5000, 1);
			}
			else
			{
			    GameTextForPlayer(playerid, "~w~o carro ~n~esta em~r~ uso", 5000, 1);
			}
		}
		else
			GameTextForPlayer(playerid, "~w~voce no e o dono da casa", 5000, 1);
	}
	return true;
}

CMD:reparo(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    if(Player[playerid][pDonateRank] < 2)
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é VIP Prata.");

		new house = Player[playerid][pHouseKey];
		if(house != 255 && strcmp(Player[playerid][pName], hOwner[Player[playerid][pHouseKey]], false) == 0)
		{
			/*if(BizzInfo[8][bProducts] == 0)
				return GameTextForPlayer(playerid, "~r~empresa sem produtos", 5000, 1);*/

			if(SetVehicleToRespawn(CarroCasa[house]))
			{
				GameTextForPlayer(playerid, "~w~Carro~n~~g~concertado", 5000, 1);
   				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

				//BizzInfo[8][bProducts]--;
			}
			else
				GameTextForPlayer(playerid, "~w~o carro ~n~esta em ~r~uso", 5000, 1);
		}
		else
			GameTextForPlayer(playerid, "~w~voce no tem casa", 5000, 1);
	}
	return true;
}

CMD:skydive(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 2)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new Float:rx, Float:ry, Float:rz;
	GetPlayerPos(playerid, rx, ry, rz);
	SafeGivePlayerWeapon(playerid, 46, 0);
	SafeSetPlayerPos(playerid,rx, ry, rz+1500);
	SendClientMessage(playerid, COLOR_WHITE, "GO!! GO!! GO!!");
	return true;
}

CMD:fourdive(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 3)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new para1, para2, para3, para4;
	if(sscanf(params, "uU(INVALID_PLAYERI_ID)U(INVALID_PLAYERI_ID)U(INVALID_PLAYERI_ID)", para1, para2, para3, para4))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/fourdive <playerid1> <playerid2> <playerid3> <playerid4>");

	if(IsPlayerConnected(para1)) { SafeGivePlayerWeapon(para1, 46, 0); SafeSetPlayerPos(para1,1536.0, -1360.0, 1350.0);SetPlayerInterior(para1,0);Player[para1][pInt] = 0;SendClientMessage(para1, COLOR_RED, "GO!! GO!! GO!!");}
	if(IsPlayerConnected(para2)) { SafeGivePlayerWeapon(para2, 46, 0); SafeSetPlayerPos(para2,1536.0, -1345.0, 1350.0);SetPlayerInterior(para2,0);Player[para2][pInt] = 0;SendClientMessage(para2, COLOR_RED, "GO!! GO!! GO!!");}
	if(IsPlayerConnected(para3)) { SafeGivePlayerWeapon(para3, 46, 0); SafeSetPlayerPos(para3,1552.0, -1345.0, 1350.0);SetPlayerInterior(para3,0);Player[para3][pInt] = 0;SendClientMessage(para3, COLOR_RED, "GO!! GO!! GO!!");}
	if(IsPlayerConnected(para4)) { SafeGivePlayerWeapon(para4, 46, 0); SafeSetPlayerPos(para4,1552.0, -1360.0, 1350.0);SetPlayerInterior(para4,0);Player[para4][pInt] = 0;SendClientMessage(para4, COLOR_RED, "GO!! GO!! GO!!");}
	return true;
}

CMD:comprarempresa(playerid)
{
    if(!IsPlayerConnected(playerid))
        return true;
	if(Player[playerid][pBizKey] != 255)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já tem uma empresa, digite /venderempresa se você pretende comprar esta empresa.");

	for(new b = 0; b < sizeof(BizzInfo); b++)
	{
		if(IsPlayerInRangeOfBiz(playerid, 2.0, b))
		{
            if(BizzInfo[b][bOwned])
            {
                if(BizzInfo[b][bCustomSell])
                    return ComprarEmpresaCustom(playerid, b);

				format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} Esta empresa é de %s.", bOwner[b]);
				SendClientMessage(playerid, COLOR_RED, thestring);
				return true;
            }
			if(Player[playerid][pLevel] < BizzInfo[b][bLevelNeeded])
			{
				format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} Você não tem Level %d.", BizzInfo[b][bLevelNeeded]);
				SendClientMessage(playerid, COLOR_RED, thestring);
				return true;
			}
			else if(GetPlayerGP(playerid) < BizzInfo[b][bBuyPrice])
            {
				format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} Você não tem {009900}R$%d{FFFF00}.", BizzInfo[b][bBuyPrice]);
				SendClientMessage(playerid, COLOR_RED, thestring);
                return true;
            }

            Player[playerid][pBizKey] = b;
            BizzInfo[b][bOwned] = 1;

            strmid(bOwner[b], Player[playerid][pName], 0, strlen(Player[playerid][pName]), 255);
            GivePlayerGP(playerid, -BizzInfo[b][bBuyPrice]);

            PlayerPlayMusic(playerid);

            SendClientMessage(playerid, COLOR_WHITE, "Parabéns pela sua nova empresa!");
            SendClientMessage(playerid, COLOR_WHITE, "Digite /ajuda e vá na sessão de empresas");

            DateProp(playerid);
            ResetBiz(b);
            SaveBizz(b);
            OnPropUpdate();

            OnPlayerSave(playerid);

            DestroyPickup(BizzInfo[b][BizzIcon]);
            BizzInfo[b][BizzIcon] = CreatePickup(GetBizPickupModel(b), 1, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]);

            format(thestring, sizeof(thestring), "%s comprou a Biz %s(%d) por R$%d.", Player[playerid][pName], bMessage[b], b, BizzInfo[b][bBuyPrice]);
            WriteLog("Houses", thestring);
            return true;
		}
	}
    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em uma Empresa.");
	return true;
}

stock ComprarEmpresaCustom(playerid, b)
{
	if(Player[playerid][pLevel] < BizzInfo[b][bLevelNeeded])
	{
		format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} Você não tem Level %d.", BizzInfo[b][bLevelNeeded]);
		SendClientMessage(playerid, COLOR_RED, thestring);
		return true;
	}
	else if(GetPlayerGP(playerid) < BizzInfo[b][bCustomPrice])
    {
		format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} Você não tem {009900}R$%d.", BizzInfo[b][bCustomPrice]);
		SendClientMessage(playerid, COLOR_RED, thestring);
        return true;
    }

    new pId = IsPlayerConnectedEx(bOwner[b]);
    if(pId != INVALID_PLAYER_ID)
    {
        Player[pId][pBank] += BizzInfo[b][bCustomPrice];
        Player[pId][pBizKey] = 255;

		format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Você vendeu sua Empresa para %s.", ReturnPlayer(playerid));
		SendClientMessage(pId, SERVER_INFO, thestring);
    }
    else
    {
        new money = DOF2_GetInt(AccountFile(bOwner[b]), "Bank");
        DOF2_SetInt(AccountFile(bOwner[b]), "Bank", money + BizzInfo[b][bCustomPrice]);

        DOF2_SetInt(AccountFile(bOwner[b]), "Bizz", 255);
        DOF2_SaveFile();
    }

    new oldOwner[MAX_PLAYER_NAME];
    format(oldOwner, MAX_PLAYER_NAME, "%d", bOwner[b]);

    Player[playerid][pBizKey] = b;
    BizzInfo[b][bCustomSell] = false;

    strmid(bOwner[b], Player[playerid][pName], 0, strlen(Player[playerid][pName]), 255);
    GivePlayerGP(playerid, -BizzInfo[b][bCustomPrice]);

    PlayerPlayMusic(playerid);

    SendClientMessage(playerid, COLOR_WHITE, "Parabéns pela sua nova empresa!");
    SendClientMessage(playerid, COLOR_WHITE, "Digite /ajuda e vá na sessão de empresas");

    DateProp(playerid);
    SaveBizz(b);
    OnPropUpdate();

    OnPlayerSave(playerid);

    DestroyPickup(BizzInfo[b][BizzIcon]);
    BizzInfo[b][BizzIcon] = CreatePickup(GetBizPickupModel(b), 1, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]);

    format(thestring, sizeof(thestring), "%s comprou a Biz %s(%d) de %s por R$%d.", Player[playerid][pName], bMessage[b], b, oldOwner, BizzInfo[b][bCustomPrice]);
    WriteLog("Houses", thestring);
    return true;
}

CMD:venderempresa(playerid)
{
	if(Player[playerid][pBizKey] == 255)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Empresa.");
	if(Player[playerid][pMarried] > 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está casado, não pode vender uma empresa.");
    if(!IsPlayerInRangeOfBiz(playerid, 2.0, Player[playerid][pBizKey]))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na sua Empresa.");


	if(strcmp(Player[playerid][pName], bOwner[Player[playerid][pBizKey]], false) == 0)
    {
		new bouse = Player[playerid][pBizKey];
		new preco = BizzInfo[bouse][bBuyPrice];

		strmid(bOwner[bouse], "Governo", 0, strlen("Governo"), 255);
		strmid(bExtortion[bouse], "---", 0, strlen("---"), 255);

		BizzInfo[bouse][bOwned] = 0;
        BizzInfo[bouse][bCustomSell] = false;
		BizzInfo[bouse][bTill] = 0;
		Player[playerid][pBizKey] = 255;

        SetBizLocked(bouse, false);
		SaveBizz(bouse);
		OnPropUpdate();

		format(thestring, sizeof(thestring), "~w~Parabens~n~ Empresa vendida por ~n~~g~R$%d", BizzInfo[bouse][bTill] + (preco / 2));
		GameTextForPlayer(playerid, thestring, 10000, 6);

		GivePlayerGP(playerid, (preco / 2) + BizzInfo[bouse][bTill]);
		ConsumingMoney[playerid] = 1;

		OnPlayerSave(playerid);

		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

        DestroyPickup(BizzInfo[bouse][BizzIcon]);
        BizzInfo[bouse][BizzIcon] = CreatePickup(GetBizPickupModel(bouse), 1, BizzInfo[bouse][bEntranceX], BizzInfo[bouse][bEntranceY], BizzInfo[bouse][bEntranceZ]);

		format(thestring, sizeof(thestring), "%s vendeu a Biz %s(%d) por R$%d.", Player[playerid][pName], bMessage[bouse], bouse, (preco / 2));
		WriteLog("Houses", thestring);
		return true;
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não comprou uma empresa.");
	return true;
}

CMD:colocaravenda(playerid, params[])
{
    if(!IsPlayerConnected(playerid))
        return true;
	if(Player[playerid][pBizKey] == 255)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Empresa.");
	if(Player[playerid][pMarried] > 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está casado, não pode vender uma empresa.");
    if(!IsPlayerInRangeOfBiz(playerid, 2.0, Player[playerid][pBizKey]))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na sua Empresa.");

    new b = Player[playerid][pBizKey];
    if(BizzInfo[b][bCustomSell])
    {
        BizzInfo[b][bCustomSell] = false;
        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você não está mais Vendendo sua Empresa.");

        DestroyPickup(BizzInfo[b][BizzIcon]);
        BizzInfo[b][BizzIcon] = CreatePickup(GetBizPickupModel(b), 1, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]);

        OnPropUpdate();
        return true;
    }

    new p;
    if(sscanf(params, "d", p))
        return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/ColocarAVenda <Preço>");
    if(p < floatround(BizzInfo[b][bBuyPrice] * 0.20) || p > 50000000)
    {
		format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} Preço Inválido. Use de %d a 50.000.000.", floatround(BizzInfo[b][bBuyPrice] * 0.20));
		SendClientMessage(playerid, COLOR_RED, thestring);
        return true;
    }

    BizzInfo[b][bCustomSell] = true;
    BizzInfo[b][bCustomPrice] = p;

	format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Você está vendendo sua empresa por {009900}R$%d{FFFFFF}.", p);
	SendClientMessage(playerid, SERVER_INFO, thestring);

    DestroyPickup(BizzInfo[b][BizzIcon]);
    BizzInfo[b][BizzIcon] = CreatePickup(GetBizPickupModel(b), 1, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]);

    OnPropUpdate();
    return true;
}

CMD:verdados(playerid, params[])
{
    if(!IsPlayerConnected(playerid))
        return true;
    if(GetAdminLevel(playerid) < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este Comando.");

    new b;
    if(sscanf(params, "d", b))
        return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/VerDados <Empresa>.");

	if(b < 0 || b >= MAX_BIZ)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Empresa inválida.");

	PrintBizInfo(playerid, b);
	return true;
}

CMD:verdadosadm(playerid, params[])
{
    if(!IsPlayerConnected(playerid))
        return true;
    if(GetAdminLevel(playerid) < 7)
        return false;

    new pId;
    if(sscanf(params, "u", pId))
        return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/VerDadosADM <PlayerID/Nome>.");
	if(!IsPlayerConnected(pId))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador Não Conectado.");

    format(thestring, sizeof(thestring), "------- Dados do %s %s -------", AccountName(pId), ReturnPlayer(pId));
    SendClientMessage(playerid, COLOR_YELLOW, thestring);
    format(thestring, sizeof(thestring), "- {FFFFFF}Tempo Jogando: {FF0000}%s", ConvertMins(AdminTime[pId][Time_Play]));
    SendClientMessage(playerid, COLOR_YELLOW, thestring);
    format(thestring, sizeof(thestring), "- {FFFFFF}Tempo Trabalhando: {FF0000}%s", ConvertMins(AdminTime[pId][Time_Work]));
    SendClientMessage(playerid, COLOR_YELLOW, thestring);
    format(thestring, sizeof(thestring), "- {FFFFFF}Tempo em Modo RPG: {FF0000}%s", ConvertMins(AdminTime[pId][Time_RPG]));
    SendClientMessage(playerid, COLOR_YELLOW, thestring);
    format(thestring, sizeof(thestring), "- {FFFFFF}Tempo AFK: {FF0000}%s", ConvertMins(AdminTime[pId][Time_AFK]));
    SendClientMessage(playerid, COLOR_YELLOW, thestring);
    format(thestring, sizeof(thestring), "- {FFFFFF}Atendimentos: {FF0000}%d", Player[pId][pAtend]);
    SendClientMessage(playerid, COLOR_YELLOW, thestring);
    format(thestring, sizeof(thestring), "- {FFFFFF}Total de Nota: {FF0000}%d", Player[pId][pNota]);
    SendClientMessage(playerid, COLOR_YELLOW, thestring);
    format(thestring, sizeof(thestring), "- {FFFFFF}Média de Nota: {FF0000}%.3f", (Player[pId][pNota] * 1.0) / (Player[pId][pAtend] * 1.0));
    SendClientMessage(playerid, COLOR_YELLOW, thestring);
    return true;
}

CMD:dadosempresa(playerid)
{
    if(!IsPlayerConnected(playerid))
        return true;

	if(Player[playerid][pBizKey] == 255)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Empresa");

	PrintBizInfo(playerid, Player[playerid][pBizKey]);
	return true;
}

CMD:produto(playerid, params[])
{
    if(!IsPlayerConnected(playerid))
        return true;

	new b = Player[playerid][pBizKey];
	if(b == 255)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma empresa.");

    if(b == Biz_Posto)
    {
        if(!IsPlayerInRangeOfBiz(playerid, 2.0, b))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na sua Empresa.");

        new Float:p;
        if(sscanf(params, "f", p))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Produto <Preço>");

        if(p < 1.0 || p > 2.5)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preço Inválido. Min: 1.0, Max: 2.5.");

        BizPostoPrice = p;
        format(thestring, sizeof(thestring), "O preço foi alterado para R$%.2f.", p);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        OnPropUpdate();
        return true;
    }
    else if(b == Biz_Telefonica)
    {
        if(!IsPlayerInRangeOfBiz(playerid, 2.0, b))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na sua Empresa.");

        new Float:p;
        if(sscanf(params, "f", p))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Produto <Preço>");

        if(p < 1.0 || p > 3.0)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preço Inválido. Min: 1.0, Max: 3.0.");

        BizTelefonicaPrice = p;
        format(thestring, sizeof(thestring), "O preço foi alterado para R$%.2f.", p);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        OnPropUpdate();
        return true;
    }

  	new p;
	if(sscanf(params, "d", p))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Produto <Preço>");

    if(b == Biz_Carros)
    {
        if(p < 250 || p > 2000)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preço Inválido. Min: 250, Max: 2500.");
        if(!IsPlayerInAnyVehicle(playerid))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa estar no Veículo para alterar o Preço.");

        for(new i = 0; i < sizeof(BizCarrosPrice); i++)
        {
            if(GetPlayerVehicleID(playerid) == AluguelCarro[i])
            {
                BizCarrosPrice[i] = p;
                format(thestring, sizeof(thestring), "O preço foi alterado para R$%d.", p);
                SendClientMessage(playerid, COLOR_YELLOW, thestring);
                return true;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa estar no Veículo para alterar o Preço.");
        return true;
    }
    else if(b == Biz_Motos)
    {
        if(p < 250 || p > 2500)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preço Inválido. Min: 250, Max: 2500.");
        if(!IsPlayerInAnyVehicle(playerid))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa estar no Veículo para alterar o Preço.");

        for(new i = 0; i < sizeof(BizMotosPrice); i++)
        {
            if(GetPlayerVehicleID(playerid) == AluguelMoto[i])
            {
                BizMotosPrice[i] = p;
                format(thestring, sizeof(thestring), "O preço foi alterado para R$%d.", p);
                SendClientMessage(playerid, COLOR_YELLOW, thestring);
                return true;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa estar no Veículo para alterar o Preço.");
        return true;
    }
    else if(b == Biz_Aero)
    {
        if(p < 750 || p > 7500)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preço Inválido. Min: 750, Max: 7500.");
        if(!IsPlayerInAnyVehicle(playerid))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa estar no Veículo para alterar o Preço.");

        for(new i = 0; i < sizeof(BizAeroPrice); i++)
        {
            if(GetPlayerVehicleID(playerid) == BizAeroPrice[i])
            {
                BizAeroPrice[i] = p;
                format(thestring, sizeof(thestring), "O preço foi alterado para R$%d.", p);
                SendClientMessage(playerid, COLOR_YELLOW, thestring);
                return true;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa estar no Veículo para alterar o Preço.");
        return true;
    }
    else if(b == Biz_Produtos)
    {
        if(!IsPlayerInRangeOfBiz(playerid, 2.0, b))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na sua Empresa.");
        if(p < 10 || p > 25)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preço Inválido. Min: 10, Max: 25.");

        BizProdutosPrice = p;
        format(thestring, sizeof(thestring), "O preço foi alterado para R$%d.", p);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        OnPropUpdate();
        return true;
    }
    else if(b == Biz_Anuncios)
    {
        if(!IsPlayerInRangeOfBiz(playerid, 2.0, b))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na sua Empresa.");
        if(p < 50 || p > 200)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preço Inválido. Min: 50, Max: 200.");

        BizAnunciosPrice = p;
        format(thestring, sizeof(thestring), "O preço foi alterado para R$%d.", p);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        OnPropUpdate();
        return true;
    }
    else if(b == Biz_Pedagio)
    {
        if(!IsPlayerInRangeOfBiz(playerid, 2.0, b))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na sua Empresa.");
        if(p < 25 || p > 150)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preço Inválido. Min: 25, Max: 150.");

        BizPedagioPrice = p;
        format(thestring, sizeof(thestring), "O preço foi alterado para R$%d.", p);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        OnPropUpdate();
        return true;
    }
    else if(b == Biz_Loterica)
    {
        if(!IsPlayerInRangeOfBiz(playerid, 2.0, b))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na sua Empresa.");
        if(p < 10 || p > 50)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preço Inválido. Min: 10, Max: 50.");

        BizLotericaPrice = p;
        format(thestring, sizeof(thestring), "O preço foi alterado para R$%d.", p);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        OnPropUpdate();
        return true;
    }
    else if(b == Biz_PaintBall)
    {
        if(!IsPlayerInRangeOfBiz(playerid, 2.0, b))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na sua Empresa.");
        if(p < 0 || p > 5000)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preço Inválido. Min: 0, Max: 5000.");

        BizPaintBallPrice = p;
        format(thestring, sizeof(thestring), "O preço foi alterado para R$%d.", p);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        OnPropUpdate();
        return true;
    }
    else if(b == Biz_Ammu1)
    {
        if(!IsPlayerInRangeOfBiz(playerid, 2.0, b))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na sua Empresa.");
        if(p < 0 || p > 5000)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preço Inválido. Min: 0, Max: 5000.");

        BizAmmu1Price = p;
        format(thestring, sizeof(thestring), "O preço foi alterado para R$%d.", p);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        OnPropUpdate();
        return true;
    }
    else if(b == Biz_Ammu2)
    {
        if(!IsPlayerInRangeOfBiz(playerid, 2.0, b))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na sua Empresa.");
        if(p < 0 || p > 5000)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preço Inválido. Min: 0, Max: 5000.");

        BizAmmu2Price = p;
        format(thestring, sizeof(thestring), "O preço foi alterado para R$%d.", p);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        OnPropUpdate();
        return true;
    }
    else if(b == Biz_Binco)
    {
        if(!IsPlayerInRangeOfBiz(playerid, 2.0, b))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na sua Empresa.");
        if(p < 10 || p > 75)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preço Inválido. Min: 10, Max: 75.");

        BizBincoPrice = p;
        format(thestring, sizeof(thestring), "O preço foi alterado para R$%d.", p);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        OnPropUpdate();
        return true;
    }
	SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Sua Empresa não pode alterar o preço de qualquer Produto.");
	return true;
}

CMD:entrada(playerid, params[])
{
    new b = Player[playerid][pBizKey];
	if(b == 255)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma empresa.");
    if(!IsLockableBiz(b))
    	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Sua empresa não tem Interior.");

  	new p;
	if(sscanf(params, "d", p))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Entrada <Preço>");

    cmd_produto(playerid, params);
    return 1;
}

CMD:socio(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
		new bouse = Player[playerid][pBizKey];
		if(bouse == 255)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma empresa");

      	new giveid;
		if(sscanf(params, "u", giveid))
		    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/socio <id/nick>");

		if(IsPlayerConnected(giveid))
		{
		    if(giveid == playerid)
			 	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode colocar você mesmo como sócio.");

		    if(giveid != INVALID_PLAYER_ID)
		    {
		        format(thestring, sizeof(thestring), "%s é o novo sócio da sua empresa.",Player[giveid][pName]);
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
		        format(thestring, sizeof(thestring), "Você é o novo sócio da empresa do proprietário %s.",Player[playerid][pName]);
		        SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);

			    format(thestring, sizeof(thestring), "%s",Player[giveid][pName]);
				strmid(bExtortion[bouse], thestring, 0, sizeof(thestring), 255);
				format(thestring, sizeof(thestring), "Novo sócio: '%s'.",bExtortion[bouse]);
				SaveBizz(bouse);

				OnPropUpdate();
				SendClientMessage(playerid, COLOR_WHITE, thestring);
		    }
		}
		else
		    return SendClientMessage(playerid, COLOR_RED, "Jogador não encontrado..");
	}
	return true;
}

CMD:tirarsocio(playerid)
{
	new bouse = Player[playerid][pBizKey];
    if(bouse == 255)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Empresa.");

    format(thestring, sizeof(thestring), "---");
	strmid(bExtortion[bouse], thestring, 0, sizeof(thestring), 255);

	format(thestring, sizeof(thestring), "Novo sócio: '%s'.",bExtortion[bouse]);
	SendClientMessage(playerid, COLOR_WHITE, thestring);

	SaveBizz(bouse);
	OnPropUpdate();
	return true;
}

CMD:empresanome(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
		new bouse = Player[playerid][pBizKey];
		new nome[64];
		if(bouse == 255)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma empresa");

		if(sscanf(params, "s[50]", nome))
			SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/empresanome <nome>");

		strmid(bMessage[bouse], nome, 0, 64, 255);
		format(thestring, sizeof(thestring), "O nome da empresa agora é '%s'",bMessage[bouse]);
		SaveBizz(bouse);

		OnPropUpdate();
		SendClientMessage(playerid, COLOR_WHITE, thestring);
	}
	return true;
}

CMD:empresasacar(playerid, params[])
{
	new bouse = Player[playerid][pBizKey];
	if(bouse == 255)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma empresa");

   	new cashdeposit;
	if(sscanf(params, "d", cashdeposit))
	{
		format(thestring, sizeof(thestring), "[EMPRESA] Você tem R$ %d no cofre da empresa.", BizzInfo[bouse][bTill]);
		SendClientMessage(playerid, COLOR_GREY, thestring);

		SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/empresasacar <quantia>");
		return true;
	}

	if(cashdeposit > BizzInfo[bouse][bTill] || cashdeposit < 1)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem tudo isso.");

	if(!PlayerToPoint(100, playerid,BizzInfo[bouse][bEntranceX],BizzInfo[bouse][bEntranceY],BizzInfo[bouse][bEntranceZ]))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está longe de sua empresa.");

	else
	{
	    new year, month,day;
		getdate(year, month, day);
	    ConsumingMoney[playerid] = 1;
		GivePlayerGP(playerid,cashdeposit);
		BizzInfo[bouse][bTill] -= cashdeposit;
		format(thestring, sizeof(thestring), "[EMPRESA]: Você, %s, sacou R$ %d de seu cofre (%d), lhe restam R$ %d.", Player[playerid][pName], cashdeposit,bouse,BizzInfo[bouse][bTill]);
		SaveBizz(bouse);
		OnPropUpdate();
		SendClientMessage(playerid, COLOR_YELLOW, thestring);
		WriteLog("bank", thestring);
	}
	return true;
}

CMD:empresadepositar(playerid, params[])
{
    if(IsPlayerConnected(playerid))
	{
		new bouse = Player[playerid][pBizKey];
		if(bouse == 255)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma empresa.");

       	new cashdeposit;
		if(sscanf(params, "d", cashdeposit))
		{
			format(thestring, sizeof(thestring), "Você tem R$ %d no cofre.", BizzInfo[bouse][bTill]);
			SendClientMessage(playerid, COLOR_GREY, thestring);

			SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/empresadepositar [quantia]");
			return true;
		}
		if(cashdeposit > GetPlayerGP(playerid) || cashdeposit < 1)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem isso tudo.");

		if(!PlayerToPoint(100, playerid,BizzInfo[bouse][bEntranceX],BizzInfo[bouse][bEntranceY],BizzInfo[bouse][bEntranceZ]))
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está longe de sua empresa.");
		else
		{
			GivePlayerGP(playerid,-cashdeposit);
			BizzInfo[bouse][bTill] += cashdeposit;

			format(thestring, sizeof(thestring), "Você, %s, depositou R$ %d, seu cofre(%d) está agora R$ %d ", Player[playerid][pName], cashdeposit, bouse, BizzInfo[bouse][bTill]);
			SaveBizz(bouse);
			OnPropUpdate();
			SendClientMessage(playerid, COLOR_YELLOW, thestring);
			WriteLog("bank", thestring);
			return true;
		}
	}
	return true;
}

CMD:remedios(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1465.2401, -1050.9406, 24.0156))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na Farmácia.");

	TogglePlayerControllable(playerid, false);
	ShowMenuForPlayer(Remedios, playerid);
	SetCameraBehindPlayer(playerid);
    return 1;
}

CMD:curar(playerid, params[])
{
	new location = Player[playerid][pLocal];
	if(isnull(params))
	{
		if(location != 255)
		{
			if(location < MAX_HOUSES)
			{
				if(HouseInfo[location][hArrombada] == 1 && PlayerToPoint(50.0,playerid,HouseInfo[location][hEntrancex],HouseInfo[location][hEntrancey],HouseInfo[location][hEntrancez]))
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode se curar aqui.");
                if(GetPlayerInterior(playerid) == 0)
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode se curar aqui.");
				if(HouseInfo[location][hArm] == 1)
				{
				    if(ReduceTime[playerid] == 1)
	       	            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa esperar 4 minutos para usar esse comando novamente!");

					format(thestring, sizeof(thestring), "* %s colocou um colete a prova de balas.", PlayerGetName(playerid));
					ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerArmour(playerid, 90.0);
				}
				else
				{
					format(thestring, sizeof(thestring), "Este local não possui atualizacão de colete.");
					SendClientMessage(playerid, COLOR_RED,thestring);
				}
				if(HouseInfo[location][hHel] == 1)
				{
				    new Float:tempheal;
					GetPlayerHealth(playerid,tempheal);
					if(tempheal < 100.0)
					{
						SetPlayerHealth(playerid,100.0);
						PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
						format(thestring, sizeof(thestring), "Você restaurou sua barra de saúde.");
						SendClientMessage(playerid, COLOR_WHITE,thestring);
					}
					else
						SendClientMessage(playerid, COLOR_RED,"Sua saúde já está restaurada.");
				}
				else
				{
					format(thestring, sizeof(thestring), "Este local não possui atualizacão de saúde.");
					SendClientMessage(playerid, COLOR_WHITE,thestring);
				}
				return true;
			}
			else if(location == 1001)//Restaurant
			{
			    if(GetPlayerGP(playerid) < 50)
			    {
			        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você não tem {009900}R$50{FFFFFF}.");
			        return 1;
			    }
			    GivePlayerGP(playerid, -50);
			    SetPlayerHealth(playerid, 100.0);
			    SetPlayerArmour(playerid, 90.0);

			    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você se curou.");
				return true;
			}
			/*else if(location == 1002 && IsACop(playerid))//Police Armoury
			{
			    SetPlayerHealth(playerid,100.0);
			    format(thestring, sizeof(thestring), "%s colocou um colete a prova de balas.", PlayerGetName(playerid));
				ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPlayerArmour(playerid, 90.0);
				return true;
			}   */
		}
		else
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/curar <id/nick> <preco>");
	}
	new giveid;
    new moneys;
	if(sscanf(params, "ud", giveid, moneys))
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/curar <id/nick> <preco>");

	if(moneys < 100 || moneys > 2000)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preco de cura é de R$100 a R$2000.");

	if(giveid == playerid)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode curar você mesmo.");

	if(IsPlayerConnected(giveid))
	{
	    if(giveid != INVALID_PLAYER_ID)
	    {
			new vid = GetPlayerVehicleID(playerid);
			if(Player[playerid][pJob] == MEDICO)//model
			{
				new num=0;
				for(new i = 0; i < sizeof(Ambucars); i ++)
					if(vid==Ambucars[i])
					    num = 1;

				if(num == 0)
				    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na Ambulância / Helicóptero.");
				if(GetPlayerVehicleID(giveid) != vid)
				    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está na sua ambulância.");
				if(GetPlayerGP(giveid) < moneys)
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Esse jogador não pode pagar.");
				if(!ProxDetectorS(5.0, playerid, giveid))
				    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Esse jogador não está perto de você.");

				new Float:tempheal;
				GetPlayerHealth(giveid,tempheal);
				if(tempheal >= 100.0 && Player[giveid][pMorto] == 0)
					return SendClientMessage(playerid, COLOR_RED,"Essa pessoa já foi totalmente curada.");

				format(thestring, sizeof(thestring), "~y~voce curou ~n~~w~%s~n~~g~R$ %d", Player[giveid][pName],moneys);
				GameTextForPlayer(playerid, thestring, 5000, 1);
				GivePlayerGP(playerid,moneys);
				GivePlayerGP(giveid,-moneys);
				new hp = 0;
			    if(Player[playerid][pPainPerk] > 0)
			    {
			        hp = 20 * Player[playerid][pPainPerk]; hp += 100;
					SetPlayerHealth(giveid, hp);
			    }
			    else
			    {
			        hp = 100;
			        SetPlayerHealth(giveid, 100);
			    }
				PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
				PlayerPlaySound(giveid, 1150, 0.0, 0.0, 0.0);
				Descongelar(giveid);
				format(thestring, sizeof(thestring), "Você está saudável denovo (50.0 hp) por R$ %d ",moneys);
				SendClientMessage(giveid, COLOR_MEDICOS,thestring);
			    Player[giveid][pMorto] = 0;
			    PedidoConcluido(giveid, MEDICO);
				if(DSTPlayer[giveid] > 0)
	            {
					DSTPlayer[giveid] = 0;
					SendClientMessage(giveid, COLOR_LIGHTBLUE, "Você já não está infectado com uma doenca sexualmente transmissível mais porque os médicos lhe ajudaram.");
				}
			}
			else
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está autorizado a usar este comando.");
		}
	}
	else
	SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
	return true;
}

CMD:ouvirtodos(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(!BigEar[playerid])
	{
		BigEar[playerid] = 1;
		SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Ouvir todos Ativado");
	}
	else if(BigEar[playerid])
	{
		BigEar[playerid] = 0;
		SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Ouvir todos Desativado");
	}
	return true;
}

CMD:ativarsms(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
   	if(GetAdminLevel(playerid) < 4)
   	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem autorização para usar esse comando.");

	if(!BigSms[playerid])
	{
		BigSms[playerid] = 1;
		SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} SMS Ativado");
	}
	else if(BigSms[playerid])
	{
		BigSms[playerid] = 0;
		SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} SMS Desativado");
	}
	return true;
}

CMD:ativarcw(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem autorização para usar esse comando.");

	if(IsPlayerConnected(playerid))
	{
		if(!BigCW[playerid])
		{
			BigCW[playerid] = 1;
			SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} CW Ativado");
		}
		else if(BigCW[playerid])
		{
			(BigCW[playerid] = 0);
			SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} CW Desativado");
		}
	}
	return true;
}

CMD:ativarmp(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem autorização para usar esse comando.");

    if(IsPlayerConnected(playerid))
    {
		if(!BigMp[playerid])
		{
			BigMp[playerid] = 1;
			SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} MP Ativado");
		}
		else if(BigMp[playerid])
		{
			(BigMp[playerid] = 0);
			SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} MP Desativado");
		}
	}
	return true;
}

CMD:id(playerid, params[])
{
   	new giveid;
	if(sscanf(params, "u", giveid))
	{
		for(new i = 0; i < MAX_HOUSES; i++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
		    {
				format(thestring, sizeof(thestring), "ID: (%d) %s", i, hDiscription[i]);
		        SendClientMessage(playerid, COLOR_GREEN, thestring);
		        return 1;
		    }
		}
		for(new i = 0; i < MAX_BIZ; i++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 2.0, BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceX]))
		    {
				format(thestring, sizeof(thestring), "ID: (%d) %s", i, bMessage[i]);
		        SendClientMessage(playerid, COLOR_GREEN, thestring);
		        return 1;
		    }
		}
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/id <id/nick>");
	}

	if(IsPlayerConnected(giveid))
	{
	    if(giveid != INVALID_PLAYER_ID)
	    {
			format(thestring, sizeof(thestring), "ID: (%d) %s",giveid,Player[giveid][pName]);
			SendClientMessage(playerid, COLOR_GREEN, thestring);
		}
	}
	return true;
}

CMD:esc(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
      	new giveid;
		if(sscanf(params, "u", giveid))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/esc <id/nick>");

        if(noteste[playerid] == true || noevento[playerid] == true || NoHospital[playerid] > 0)
            return SendClientMessage(playerid, COLOR_GREY, "Você não pode usar este comando agora.");

		if(ReduceTime[playerid] == 1)
	        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa esperar 2 minutos para usar esse comando novamente!");

		if(IsPlayerConnected(giveid))
		{
		    if(ProxDetectorS(5.0, playerid, giveid))
			{
			    if(giveid != INVALID_PLAYER_ID)
			    {
			        if(Player[giveid][pMorto] == 1)
			            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador está ferido.");

			        if(Player[giveid][pAdmin] < 6 && !AdminAfk[giveid])
					{
					    if(GetTickCount() - AntiFlood[playerid][6] < 120000)
    					{
					       	format(thestring, 128, "[ERRO]:{FFFFFF} Você precisa esperar %d segundos para usar esse comando novamente!",120-(GetTickCount() - AntiFlood[playerid][6])/1000);
							SendClientMessage(playerid, COLOR_RED, thestring);
				        	return true;
   	 					}
				    	AntiFlood[playerid][6] = GetTickCount();
				        SendClientMessage(playerid, COLOR_GREY, "Você acusou um jogador de estar usando ESC");
	  					GetPlayerPos(giveid,LastPos[0],LastPos[1],LastPos[2]);
			 			SendClientMessage(giveid, COLOR_RED, "Alguém te acusou de estar usando ESC. Mova-se ou será kickado !!");
	    				SetTimerEx("SairTimer", 10000, false, "i", giveid);
	   				}
	   				else
	   				    SendClientMessage(playerid, COLOR_GREY, "Você acusou um jogador de estar usando ESC");
				}
			}
			else
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está longe do jogador.");
		}
	}
	return true;
}

CMD:a(playerid, params[])
{
    return cmd_admin(playerid, params);
}

CMD:admin(playerid, params[])
{
    if(Player[playerid][pAdmin] >= 1 || Player[playerid][pEnigma] > 0)
    {
		if(!strlen(params) || isnull(params))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}(/a)dmin [admin chat]");
		if(Player[playerid][pEnigma] > 0 && Player[playerid][pEnigma] != 998)
			format(thestring, sizeof(thestring), "[Enigma %d]: %s", Player[playerid][pEnigma], params);
		else if(Player[playerid][pEnigma] == 998)
		    format(thestring, sizeof(thestring), "[Enigma %s]: %s", Player[playerid][pName], params);
		else
		    format(thestring, sizeof(thestring), "[%d][Admin-Chat] %s: %s", Player[playerid][pAdmin], Player[playerid][pName], params);

		SendAdminMessage(COLOR_YELLOW,thestring);
		WriteLog("adminchat", thestring);
	}
	return true;
}

CMD:cv(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(Player[playerid][pAdmin] < 1 && Player[playerid][pEnigma] < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(!strlen(params) || isnull(params))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/cv <texto>");

    if(Player[playerid][pEnigma] > 0 && Player[playerid][pEnigma] != 998)
    {
		format(thestring, sizeof(thestring), "[Enigma %d]: %s", Player[playerid][pEnigma], params);
	}
	else if(Player[playerid][pEnigma] == 998)
	{
	    format(thestring, sizeof(thestring), "[Enigma %s]: %s", Player[playerid][pName], params);
	}
    else
    {
	    format(thestring, sizeof(thestring), "{FF0000}[%s] {FFFFFF}%s: {008080}%s",AccountName(playerid),Player[playerid][pName],params);
    }
	SendClientMessageToAll(COLOR_ADMIN,thestring);
    WriteLog("admins", thestring);
	return true;
}

CMD:vipcv(playerid, params[])
{
    if(Player[playerid][pDonateRank] < 3)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é VIP LVL 3!");
	if(!strlen(params) || isnull(params))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/vipcv <texto>");

	format(thestring, sizeof(thestring), "{FFD700}[VIP Ouro] {FFFFFF}%s: {008080}%s",Player[playerid][pName],params);
	SendClientMessageToAll(COLOR_ADMIN,thestring);
	return true;
}

CMD:vip(playerid)
{
	if(Player[playerid][pDonateRank] == 0)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é VIP.");
	if(Player[playerid][pVIP] == 0)
		return SendClientMessage(playerid, SERVER_INFO, "[BLS]: {FFFFFF}Seu VIP é Infinito.");
	new Dia, Mes, Ano;
	SepararDia(Player[playerid][pVIP], Dia, Mes, Ano);
	format(thestring, 256, "[BLS]: {FFFFFF}Seu VIP dura até %02d/%02d/%04d as %02d:00.", Dia, Mes, Ano, Player[playerid][pHoraVIP]);
	SendClientMessage(playerid, SERVER_INFO, thestring);
	return 1;
}

CMD:guerra(playerid, params[])
{
    if(!Guerrilheiro(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando.");
    else if(InGuerra != 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Já está havendo uma guerra.");
	else if(!PodeGuerra) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Houve uma guerra há poucos minutos.");
	else if(Player[playerid][pRank] < 4) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Seu cargo não é igual ou superior à 4.");
    else if(!PodeGuerraOrg[GetGuerraID(playerid)]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Sua organização já atacou hoje.");
	//else if(Membros(GetPlayerOrg(playerid)) < 2) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Sua Org não tem 2 Membros Online.");
	else if(ControleLS != 0 && Membros(ControleLS) < 2) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} A organização que controla Los Santos não possui 2 membros online.");
	else if(ControleLS == GetPlayerOrg(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Sua organização já está dominando Los Santos.");

	format(thestring, 256, "[Notícia de Última Hora]: A %s Acabou de Iniciar uma Guerra!", OrgsNamesSmall[GetPlayerOrg(playerid)]);
	SendClientMessageToAll(COLOR_GREEN, thestring);
	SendClientMessageToAll(COLOR_NOTICIA,"[Noticiário]: A guerra começou, tome cuidado. Os arredores de LS não são mais seguros. Fuja sempre que vir um terrorista!");

	IniciarGuerra(GetPlayerOrg(playerid));
	return true;
}

CMD:verip(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new giveid;
	new playersip[30];
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/VerIP <Players ID>");

	GetPlayerIp( giveid,playersip,sizeof(playersip));
	format(thestring, sizeof(thestring), "Player: %s IP: %s",Player[giveid][pName],playersip);
	SendClientMessage(playerid,COLOR_YELLOW,thestring);
	return true;
}

CMD:verpci(playerid, params[])
{
	if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/VerPCI <Player ID>");
	new pci[64];

	gpci(giveid, pci, sizeof(pci));
	format(thestring, sizeof(thestring), "Player: %s PCI: %s",Player[giveid][pName], pci);
	SendClientMessage(playerid, COLOR_YELLOW, thestring);
	return true;
}

CMD:prender(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new giveid, money;
   	new result[64];
	if(sscanf(params, "uds[64]", giveid, money, result))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/prender <id/nick> <tempo(minutos)> <motivo>");
	if(money > 60) return SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Tempo Maximo: 60 Min.");

	if(IsPlayerConnected(giveid))
	{
		if(giveid != INVALID_PLAYER_ID)
	    {
	    	if(Player[giveid][pJailed] == 2)
	        	return SendClientMessage(playerid, COLOR_GREY, "O jogador está no bangu.");

			format(thestring, sizeof(thestring), "Você prendeu %s.", Player[giveid][pName]);
			SendClientMessage(playerid, COLOR_LIGHTRED, thestring);
			format(thestring, sizeof(thestring), "Você foi preso pelo Admin %s.", Player[playerid][pName]);
			SendClientMessage(giveid, COLOR_LIGHTRED, thestring);
			ResetPlayerWeapons(giveid);
			WantedPoints[giveid] = 0;
			Player[giveid][pJailed] = 1;
			Player[giveid][pJailTime] = money*60;
			Player[giveid][pJailTimetotal] = money*60;
			SetPlayerInterior(giveid, 6);
			Player[giveid][pInt] = 6;
			SafeSetPlayerPos(giveid, 264.6288,77.5742,1001.0391);
			format(thestring, sizeof(thestring), "Você esta preso por %d minutos.", money);
			SendClientMessage(giveid, COLOR_WHITE, thestring);
			format(thestring, 128, "[ATENÇÃO]: O jogador %s foi preso pelo administrador %s. Motivo: %s", Player[giveid][pName], Player[playerid][pName], (result));
			BroadCast(COLOR_OOC,thestring);
			format(thestring, sizeof(thestring), "[ATENÇÃO]: O jogador %s foi preso pelo administrador %s. Motivo: %s", Player[giveid][pName], Player[playerid][pName], (result));
			WriteLog("admins", thestring);
			format(Player[giveid][JailReason],92,"%s - %s", result,Player[playerid][pName]);
		}
	}
	return true;
}

CMD:tirarbangu(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new result[64];
	new giveid;
	if(sscanf(params, "us[64]", giveid, result))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/tirarbangu <id/nick> <motivo>");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
			WantedPoints[giveid] = 0;
			SetPlayerInterior(giveid, 0);
			Player[giveid][pInt] = 0;
		    Player[giveid][pJailTime] = 0;
		    ResetPlayerWeapons(giveid);
		    nobangu[giveid] = false;
		    SpawnNecessario(giveid);
			format(thestring, 128, "[ATENÇÃO]: O administrador %s tirou %s do bangu. |Motivo: %s|",Player[playerid][pName], Player[giveid][pName], (result));
			BroadCast(COLOR_OOC,thestring);
		}
	}
	return true;
}

CMD:bangu(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new time, giveid;
   	new result[64];
	if(sscanf(params, "uds[64]", giveid, time, result))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/bangu <id/nick> <tempo(minutos)> <motivo>");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
			if(time < 0)
			    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/bangu <id/nick> <tempo(minutos)> <motivo>");

			Bangu(giveid,playerid,time,result);
		}
	}
	return true;
}

CMD:banguoff(playerid, params[])
{
    if(GetAdminLevel(playerid) < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new time, giveid[MAX_PLAYER_NAME];
   	new result[64];
	if(sscanf(params, "s[24]ds[64]", giveid, time, result))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/BanguOff <Nome> <Tempo(Minutos)> <Motivo>");

    if(IsPlayerConnectedEx(giveid) != INVALID_PLAYER_ID)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Jogador está Conectado.");
    if(!fexist(AccountFile(giveid)))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nome Invalido.");
    if(DOF2_GetInt(AccountFile(giveid), "Admin") == 7) //Hu3
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este Jogador é MUITO FODA para levar Bangu.");

    new oldPrisao = DOF2_GetInt(AccountFile(giveid), "Jailed");
    new oldTempo = DOF2_GetInt(AccountFile(giveid), "JailTime");
    new oldMotivo[64];
    format(oldMotivo, 64, "%s", DOF2_GetString(AccountFile(giveid), "Prisao"));

    DOF2_SetInt(AccountFile(giveid), "Jailed", 2);
    DOF2_SetInt(AccountFile(giveid), "JailTime", time * 60);
    DOF2_SetInt(AccountFile(giveid), "Crimes2", 0);
    DOF2_SetString(AccountFile(giveid), "Prisao", result);
    DOF2_SaveFile();

    new string[155];
	format(string, 128, "[BANGU]: %s foi para o bangu por %s |Motivo: %s|", giveid, ReturnPlayer(playerid), result);
	BroadCast(COLOR_OOC, string);
    WriteLog("BanguOff", string);

    if(oldPrisao != 0)
    {
        format(string, 155, "{FF0000}[Info]:{FFFFFF} O Jogador estava Preso n%s por %s, motivo: %s.", JailName[oldPrisao], Convert(oldTempo), oldMotivo);
        SendClientMessage(playerid, COLOR_YELLOW, string);
        WriteLog("BanguOff", string);
    }
    return true;
}

CMD:sellplayercar(playerid, params[])
{
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new vehicleid;
	if(sscanf(params, "d", vehicleid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/SellPlayerCar <VehID>");

    if(GetOwnedVehicleID(vehicleid) == INVALID_VEHICLE_ID)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} ID Invalido.");

    new stringe[155];
    new vId = GetOwnedVehicleID(vehicleid);
    new pId = IsPlayerConnectedEx(CarInfo[vId][cOwner]);
    if(pId != INVALID_PLAYER_ID)
    {
        GivePlayerGP(pId, FindCarModelPrice(GetVehicleModel(vehicleid)));

    	for(new v = 0; v < 5; v++)
    	    if(vId == Player[pId][pCar][v])
    	        Player[pId][pCar][v] = INVALID_VEHICLE_ID;

		format(stringe, sizeof(stringe), "** %s vendeu seu %s por {008800}R$%d {FFFFFF}**", ReturnPlayer(playerid), vehName[GetVehicleModel(vehicleid) - 400], FindCarModelPrice(GetVehicleModel(vehicleid)));
		SendClientMessage(pId, COLOR_WHITE, stringe);
    }
    else
    {
        new money = DOF2_GetInt(AccountFile(CarInfo[vId][cOwner]), "Money");
        DOF2_SetInt(AccountFile(CarInfo[vId][cOwner]), "Money", money + FindCarModelPrice(GetVehicleModel(vehicleid)));

        new carro, carroStr[32];
        for(new i = 0; i < 5; i++)
        {
            format(carroStr, 32, "Carro%d", i);
            carro = DOF2_GetInt(AccountFile(CarInfo[vId][cOwner]), carroStr);

            if(carro == vId)
            {
                DOF2_SetInt(AccountFile(CarInfo[vId][cOwner]), carroStr, INVALID_VEHICLE_ID);
                break;
            }
        }
        DOF2_SaveFile();
    }

    new oldOwner[MAX_PLAYER_NAME];
    format(oldOwner, MAX_PLAYER_NAME, "%s", CarInfo[vId][cOwner]);

    CarInfo[vId][cModel] = 0;
	CarInfo[vId][cX] = 0;
	CarInfo[vId][cY] = 0;
	CarInfo[vId][cZ] = 0;
	CarInfo[vId][cA] = 0;
	CarInfo[vId][cColor1] = -1;
	CarInfo[vId][cColor2] = -1;
	CarInfo[vId][cPaintjob] = 3;
	format(CarInfo[vId][cName], 32, "Nenhum");
	format(CarInfo[vId][cOwner], MAX_PLAYER_NAME, "Nenhum");

	CarInfo[vId][cLock] = false;
	VehicleInfo[vehicleid][vCustom] = false;

    CleanTrunkInfo(CarInfo[vId][cID]);

	for(new m = 0; m < MAX_MODS; m++)
		CarInfo[vId][cMod][m] = 0;

	format(stringe, sizeof(stringe), "%s%d.ini", PastaConce, vId);
	if(DOF2_FileExists(stringe))
	    DOF2_RemoveFile(stringe);

    DestroyVehicle(vehicleid);
    CarInfo[vId][cID] = INVALID_VEHICLE_ID;

	format(stringe, sizeof(stringe), "Você vendeu o carro de %s.", oldOwner);
	SendClientMessage(playerid, COLOR_WHITE, stringe);
    return 1;
}

CMD:delplayercar(playerid, params[])
{
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new vehicleid;
	if(sscanf(params, "d", vehicleid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/DelPlayerCar <VehID>");

    if(GetOwnedVehicleID(vehicleid) == INVALID_VEHICLE_ID)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} ID Invalido.");

    new stringe[155];
    new vId = GetOwnedVehicleID(vehicleid);
    new pId = IsPlayerConnectedEx(CarInfo[vId][cOwner]);
    if(pId != INVALID_PLAYER_ID)
    {
        GivePlayerGP(pId, FindCarModelPrice(GetVehicleModel(vehicleid)));

    	for(new v = 0; v < 5; v++)
    	    if(vId == Player[pId][pCar][v])
    	        Player[pId][pCar][v] = INVALID_VEHICLE_ID;

		format(stringe, sizeof(stringe), "** %s deletou seu %s **", ReturnPlayer(playerid), vehName[GetVehicleModel(vehicleid) - 400]);
		SendClientMessage(pId, COLOR_WHITE, stringe);
    }
    else
    {
        new carro, carroStr[32];
        for(new i = 0; i < 5; i++)
        {
            format(carroStr, 32, "Carro%d", i);
            carro = DOF2_GetInt(AccountFile(CarInfo[vId][cOwner]), carroStr);

            if(carro == vId)
            {
                DOF2_SetInt(AccountFile(CarInfo[vId][cOwner]), carroStr, INVALID_VEHICLE_ID);
                break;
            }
        }
    }

    new oldOwner[MAX_PLAYER_NAME];
    format(oldOwner, MAX_PLAYER_NAME, "%s", CarInfo[vId][cOwner]);

    CarInfo[vId][cModel] = 0;
	CarInfo[vId][cX] = 0;
	CarInfo[vId][cY] = 0;
	CarInfo[vId][cZ] = 0;
	CarInfo[vId][cA] = 0;
	CarInfo[vId][cColor1] = -1;
	CarInfo[vId][cColor2] = -1;
	CarInfo[vId][cPaintjob] = 3;
	format(CarInfo[vId][cName], 32, "Nenhum");
	format(CarInfo[vId][cOwner], MAX_PLAYER_NAME, "Nenhum");

	CarInfo[vId][cLock] = false;
	VehicleInfo[vehicleid][vCustom] = false;

    CleanTrunkInfo(CarInfo[vId][cID]);

	for(new m = 0; m < MAX_MODS; m++)
		CarInfo[vId][cMod][m] = 0;

	format(stringe, sizeof(stringe), "%s%d.ini", PastaConce, vId);
	if(DOF2_FileExists(stringe))
	    DOF2_RemoveFile(stringe);

    DestroyVehicle(vehicleid);
    CarInfo[vId][cID] = INVALID_VEHICLE_ID;

	format(stringe, sizeof(stringe), "Você deletou o carro de %s.", oldOwner);
	SendClientMessage(playerid, COLOR_WHITE, stringe);
    return 1;
}

CMD:parkplayercar(playerid, params[])
{
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new vehicleid;
	if(sscanf(params, "d", vehicleid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/ParkPlayerCar <VehID>");

    if(GetOwnedVehicleID(vehicleid) == INVALID_VEHICLE_ID)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} ID Invalido.");

    new stringe[155];
    new vId = GetOwnedVehicleID(vehicleid);

    if(IsPlayerInAnyVehicle(playerid))
    {
      	GetVehiclePos(GetPlayerVehicleID(playerid), CarInfo[vId][cX], CarInfo[vId][cY], CarInfo[vId][cZ]);
      	GetVehicleZAngle(GetPlayerVehicleID(playerid), CarInfo[vId][cA]);
    }
    else
    {
      	GetPlayerPos(playerid, CarInfo[vId][cX], CarInfo[vId][cY], CarInfo[vId][cZ]);
      	GetPlayerFacingAngle(playerid, CarInfo[vId][cA]);
    }
    CarInfo[vId][cEstacionou] = true;
    SetVehicleToRespawn(vehicleid);

	format(stringe, sizeof(stringe), "Você estacionou o carro de %s.", CarInfo[vId][cOwner]);
	SendClientMessage(playerid, COLOR_WHITE, stringe);
    return 1;
}

CMD:write(playerid, params[])
{
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new string[255];
	if(sscanf(params, "s[248]", string))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Write <String>");

    strcat(string, "\r\n");
    new File:file = fopen("_WriteCMD", io_append);
    fwrite(file, string);
    fclose(file);
    return 1;
}

CMD:addhousecar(playerid, params[])
{
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new hId, cM;
	if(sscanf(params, "dd", hId, cM))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/AddHouseCar <HouseID> <CarModel>");
    if(hId < 0 || hId >= MAX_HOUSES)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} HouseID deve ir de 0 à MAX_HOUSES-1.");
    if(cM < 400 || cM > 611)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} CarModel deve ir de 400 à 611.");

    new vehicleid = CarroCasa[hId];
    if(vehicleid != 0)
        DestroyVehicle(CarroCasa[hId]);

    new Float:hCoords[4];
    if(IsPlayerInAnyVehicle(playerid))
    {
        new vId = GetPlayerVehicleID(playerid);
    	GetVehiclePos(vId, hCoords[0], hCoords[1],  hCoords[2]);
    	GetVehicleZAngle(vId, hCoords[3]);
    }
    else
    {
    	GetPlayerPos(playerid, hCoords[0], hCoords[1],  hCoords[2]);
    	GetPlayerFacingAngle(playerid, hCoords[3]);
    }

    hCoords[3] = (hCoords[3] / 15) * 15.0;

	HouseCarSpawns[hId][0] = hCoords[0];
	HouseCarSpawns[hId][1] = hCoords[1];
	HouseCarSpawns[hId][2] = hCoords[2];
	HouseCarSpawns[hId][3] = hCoords[3];

	HouseInfo[hId][hVpos][0] = 0.0;
	HouseInfo[hId][hVpos][1] = 0.0;
	HouseInfo[hId][hVpos][2] = 0.0;
    HouseInfo[hId][hVpos][3] = 0.0;

	CarroCasa[hId] = CreateVehicle(HouseInfo[hId][hVec], HouseCarSpawns[hId][0], HouseCarSpawns[hId][1], HouseCarSpawns[hId][2], HouseCarSpawns[hId][3], HouseInfo[hId][hVcol1], HouseInfo[hId][hVcol2], -1);

    new string[256];
    format(string, sizeof(string), "{%.6f, %0.6f, %.6f, %.5f},                                        //House %d\r\n", hCoords[0], hCoords[1], hCoords[2], hCoords[3]);
    new File:file = fopen("_AddHouseCarCMD", io_append);
    fwrite(file, string);
    fclose(file);
    return 1;
}

CMD:horajogo(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new hour;
	if(sscanf(params, "d", hour))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/horajogo <tempododia> (0-23)");

	if(hour < 0 || hour > 23)
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/horajogo <tempododia> (0-23)");

	SetWorldTime(hour);
	format(thestring, sizeof(thestring), "[Administração]: Novo horário: %d horas", hour);
	BroadCast(COLOR_ADMIN, thestring);
	return true;
}

CMD:iniciarloteria(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	format(thestring, sizeof(thestring), "Notícias lotéricas: Nós iniciamos um novo sorteio da loteria !!");
	SendClientMessageToAll(COLOR_GROOVE, thestring);
/*	new rand = random(80);
	if(rand < 77)
		rand += 3;

   	Lotto(rand);*/
   	SortearLoteria();
	return true;
}

CMD:setstat(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 7)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new giveid, stat, amount;
	if(sscanf(params, "udd", giveid, stat, amount))
	{
		SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/setstat <id/nick> <codigo> <numero a setar>");
		SendClientMessage(playerid, COLOR_GREY, "|1 Level |2 SpawnSaude |3 Atualização |4 Skin |5 Conta Bancária |6 Telefone |7 Respeito");
		SendClientMessage(playerid, COLOR_GREY, "|8 Chave Casa |9 Chave Empresa |10 Vip Lvl |11 Família |12 Detetive |13 Advogado |14 Mecânico |15 Repórter");
		SendClientMessage(playerid, COLOR_GREY, "|16 Ladrão |17 Drogas |18 Sexo |19 Boxe |20 Pesca |21 Horas Jogadas |22 Chave Aluguel");
		SendClientMessage(playerid, COLOR_GREY, "|23 Pistol |24 Silenced Pistol |25 Eagle |26 Shotgun |27 MP5 |28 AK47 |29 M4 |77 Emprego |88 Contrato");
		return true;
	}
    if(IsPlayerConnected(giveid))
	{
	    if(giveid != INVALID_PLAYER_ID)
	    {
			new string2[128];
			switch (stat)
			{
				case 1:
				{
					Player[giveid][pLevel] = amount;
					format(thestring, sizeof(thestring), "O jogador foi setado para o level %d", amount);
					format(string2, sizeof(string2), "%s setou %s para o level %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 2:
				{
					Player[giveid][pSHealth] = amount;
					format(thestring, sizeof(thestring), "A saúde inicial do jogador foi setada para %d  ", amount);
					format(string2, sizeof(string2), "%s setou a saúde inicial de %s para %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 3:
				{
					Player[giveid][gPupgrade] = amount;
					format(thestring, sizeof(thestring), "Os pontos de atualizacão do jogador foram setados para %d ", amount);
					format(string2, sizeof(string2), "%s setou os pontos de atualizacão de %s para %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 4:
				{
					Player[giveid][pModel] = amount;
					format(thestring, sizeof(thestring), "Skin do jogador foi setada para %d", amount);
					format(string2, sizeof(string2), "%s setou a skin de %s para %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 5:
				{
				    new year,month,day,hour,minuite,second;
				    getdate(year, month, day);
					GetTimeFix(hour,minuite,second);
					Player[giveid][pBank] = amount;
					format(thestring, sizeof(thestring), "A conta bancária do jogador foi setada para R$ %d", amount);
					format(string2, sizeof(string2), "{FF0000}[Info]:{FFFFFF} O administrador %s editou a conta de %s para R$%d | (%d-%d-%d) ás %d:%d:%d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount, month, day, year, hour, minuite, second);
					WriteLog("transfers",string2);
				}
				case 6:
				{
					Player[giveid][pPnumber] = amount;
					format(thestring, sizeof(thestring), "O numero telefônico do jogador foi mudado para %d", amount);
					format(string2, sizeof(string2), "%s setou o numero telefônico de %s para %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 7:
				{
					Player[giveid][pExp] = amount;
					format(thestring, sizeof(thestring), "Os pontos de respeito do jogador foram setados para %d", amount);
					format(string2, sizeof(string2), "%s setou os pontos de respeito de %s para %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 8:
				{
					Player[giveid][pHouseKey] = amount;
					format(thestring, sizeof(thestring), "A nova chave da casa do jogador é %d", amount);
					format(string2, sizeof(string2), "%s setou a chave da casa de %s para %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 9:
				{
					Player[giveid][pBizKey] = amount;
					format(thestring, sizeof(thestring), "A nova chave da empresa do jogador é %d", amount);
					format(string2, sizeof(string2), "%s setou a chave da empresa de %s para %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 10:
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Função Removida.");
				    return 1;
					/*Player[giveid][pDonateRank] = amount;
					format(thestring, sizeof(thestring), "O jogador adquiriu premmy de 30 dias");
					format(string2, sizeof(string2), "%s setou premmy de %s para %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);*/
   				}
				case 11:
				{
					Player[giveid][pFMember] = amount;
					format(thestring, sizeof(thestring), "O jogador agora é um membro da família %d", amount);
					format(string2, sizeof(string2), "%s setou a família de %s para %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 12:
				{
					Player[giveid][pDetSkill] = amount;
					format(thestring, sizeof(thestring), "A habilidade de detetive do jogador foi mudado para %d", amount);
					format(string2, sizeof(string2), "%s setou o detetive de %s para o level %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 13:
				{
					Player[giveid][pLawSkill] = amount;
					format(thestring, sizeof(thestring), "A habilidade de advogado do jogador foi mudado para %d", amount);
					format(string2, sizeof(string2), "%s setou o advogado de %s para o level %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 14:
				{
					Player[giveid][pMechSkill] = amount;
					format(thestring, sizeof(thestring), "A habilidade de mecânico do jogador foi mudado para %d", amount);
					format(string2, sizeof(string2), "%s setou o mecânico de %s para o level %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 15:
				{
					Player[giveid][pNewsSkill] = amount;
					format(thestring, sizeof(thestring), "A habilidade de repórter do jogador foi mudado para %d", amount);
					format(string2, sizeof(string2), "%s setou reporter de %s para o level %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 16:
				{
					Player[giveid][pJackSkill] = amount;
					format(thestring, sizeof(thestring), "A habilidade de ladrão de carro do jogador foi mudado para %d", amount);
					format(string2, sizeof(string2), "%s setou ladrão de %s para o level %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 17:
				{
					Player[giveid][pDrugsSkill] = amount;
					format(thestring, sizeof(thestring), "A habilidade de vendedor de drogas do jogador foi mudado para %d", amount);
					format(string2, sizeof(string2), "%s setou vendedor de drogas de %s para o level %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 18:
				{
					Player[giveid][pSexSkill] = amount;
					format(thestring, sizeof(thestring), "A habilidade sexual do jogador foi mudado para %d", amount);
					format(string2, sizeof(string2), "%s setou habilidade sexual de %s para o level %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 19:
				{
					Player[giveid][pBoxSkill] = amount;
					format(thestring, sizeof(thestring), "A habilidade de boxeador do jogador foi mudado para %d", amount);
					format(string2, sizeof(string2), "%s setou  boxeador de %s para o level %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 20:
				{
					Player[giveid][pFishSkill] = amount;
					format(thestring, sizeof(thestring), "A habilidade de pescador do jogador foi mudado para %d", amount);
					format(string2, sizeof(string2), "%s setou pescador de %s para o level %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 21:
				{
					Player[giveid][pConnectTime] = amount;
					format(thestring, sizeof(thestring), "Os segundos de jogo do jogador foram mudados para %d", amount);
					format(string2, sizeof(string2), "%s setou as horas jogadas de %s para %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 22:
				{
					Player[giveid][pPaluguelkey] = amount;
					format(thestring, sizeof(thestring), "A nova chave de aluguel do jogador é %d", amount);
					format(string2, sizeof(string2), "%s setou a chave de aluguel de %s para %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 77:
				{
					Player[giveid][pJob] = amount;
					format(thestring, sizeof(thestring), "O emprego do jogador foi setada para %d", amount);
					format(string2, sizeof(string2), "%s setou o emprego de %s para %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
				case 88:
				{
					Player[giveid][pContractTime] = amount;
					format(thestring, sizeof(thestring), "O tempo de contrato foi setado para %d", amount);
					format(string2, sizeof(string2), "%s setou o tempo de contrato de %s para o level %d", ReturnPlayer(playerid), ReturnPlayer(giveid), amount);
				}
			}
			SendClientMessage(playerid, COLOR_GREY, thestring);
			WriteLog("EditLog", string2);
		}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:setint(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new pId, intid;
	if(sscanf(params, "ud", pId, intid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/SetInt <PlayerID/Nome> <Interior>");

	/*if(Player[playerid][pJailTime] > 0)
	{
		SendClientMessage(playerid, COLOR_RED,"Você não pode usar este comando pois está preso.");
		return true;
	}
	if(GetAdminLevel(playerid) < 1 && PlayerToPoint(40.0, playerid, 245.9469,75.8629,1003.6406) || PlayerToPoint(40.0, playerid, 2003.3408,2288.0269,1011.1256))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando aqui.");     */

	SetPlayerInterior(pId, intid);
	Player[pId][pInt] = intid;

	format(thestring, sizeof(thestring), "%s trocou seu Interior para %d.", ReturnPlayer(playerid), intid);
	SendClientMessage(pId, COLOR_GREY, thestring);

	format(thestring, sizeof(thestring), "Você trocou o Interior de %s para %d.", ReturnPlayer(pId), intid);
	SendClientMessage(playerid, COLOR_GREY, thestring);
	return true;
}

CMD:setvw(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new giveid, virid;
	if(sscanf(params, "ud", giveid, virid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/setvw <id/nick> <vw>");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
			SetPlayerVirtualWorld(giveid, virid);
			format(thestring, sizeof(thestring), "Você setou o mundo virtual de %s para %d.", Player[giveid][pName], virid);
			SendClientMessage(playerid, COLOR_GREY, thestring);
			format(thestring, sizeof(thestring), "%s setou seu mundo virtual para %d.", Player[playerid][pName], virid);
			SendClientMessage(giveid, COLOR_GREY, thestring);
		}
	}
	return true;
}

CMD:infoguerra(playerid)
{
    new string[128];
    SendClientMessage(playerid,COLOR_WHITE,"{FFFFFF}-----------------{FF0000}[Informações da Guerra]{FFFFFF}-----------------");
	if(InGuerra == 1)
	{
		format(string, sizeof(string), "{FF0000}[Placar da Guerra]: {FFFF00}%d(FA) x %d(Al-Qaeda)", Guerra[GuerraPontos][0], Guerra[GuerraPontos][1]);
	}
	else if(ControleLS != 0)
	{
	    format(string, sizeof(string), "{FF0000}[BLS]: {FFFF00}A Organização {%s}%s {FFFF00}ainda está dominando Los Santos.", OrgsColorTags[ControleLS], OrgsNames[ControleLS]);
	}
	else
	{
	    format(string, sizeof(string), "{FF0000}[BLS]: {FFFF00}Nossa cidade ainda está em paz!");
	}
	SendClientMessage(playerid, 0xFF0000FF,string);
	return true;
}

CMD:convidar(playerid, params[])
{
    if(Player[playerid][pLeader] == 0 && Player[playerid][pRank] < 5)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um líder ou sublíder.");

	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/convidar <id/nick>");

	if(IsPlayerConnected(giveid))
  	{
	    if(giveid != INVALID_PLAYER_ID)
		{
		    if(GetPlayerOrg(giveid) == 0)
		    {
		        if(Player[giveid][pLevel] > 0)
		        {
					format(thestring, sizeof(thestring), "Você recebeu um convite de %s para entrar na organização '%s' (digite /aceitar convite) para aceitar.",Player[playerid][pName], OrgsNames[GetPlayerOrg(playerid)]);
					SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					format(thestring, sizeof(thestring), "%s convidou %s para sua ORG '%s'", Player[playerid][pName], Player[giveid][pName], OrgsNames[GetPlayerOrg(playerid)]);
       				WriteLog("orgs", thestring);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					Invite[giveid] = 1;
					InviteOffer[giveid] = playerid;
					if(Player[playerid][pLeader] != 0) InviteJob[giveid] = Player[playerid][pLeader];
					else InviteJob[giveid] = Player[playerid][pMember];
                }
				else
				    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não tem nível suficiente.");
			}
			else
			    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador já tem uma ORG.");
		}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:rei(playerid, params[])
{
    if(!IsPlayerAdmin(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new tmp[15],tmp2[24];
    if(sscanf(params, "s[15]s[24]", tmp, tmp2))
		return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/rei <diretorio> <arquivo> Ex: /RPG/logs/Admins2 > logs Admins2");

	new file[70];

	format(file,70,"/RPG/%s/%s.ini",tmp,tmp2);

	if(!DOF2_FileExists(file))
		return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O log não existe.");

	new string[128];
	format(string,128,"{FF0000}[Info]:{FFFFFF} O administrador %s resetou o arquivo %s", ReturnPlayer(playerid),file);
	ABroadCast(SERVER_INFO,string,6);
	fremove(file);
	return true;
}

CMD:delog(playerid, params[])
{
    if(!IsPlayerAdmin(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new tmp[24];
    if(sscanf(params, "s[24]", tmp))
		return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/delog <conta>");

	new file[60];
	format(file,60,"/RPG/logs/%s.log",tmp);
	if(!DOF2_FileExists(file))
		return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O log não existe.");

	new string[128];
	format(string,128,"{FF0000}[Info]:{FFFFFF} O administrador %s resetou o log '%s'", ReturnPlayer(playerid), tmp);
	ABroadCast(SERVER_INFO,string,6);
	fremove(file);
	return true;
}

CMD:limpartrunks(playerid, params[])
{
    if(!IsPlayerAdmin(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    for(new i = 0; i < sizeof(TrunkInfo); i++)
        CleanTrunkInfo(i);

    SendClientMessage(playerid, -1, "Comando executado.");
	return true;
}

CMD:expulsaroff(playerid, params[]) return SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Use /LimparVaga.");

CMD:limparvaga(playerid, params[])
{
	if(Player[playerid][pLeader] == 0 || Player[playerid][pRank] < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é lider.");

    new tmp[24];
    if(sscanf(params, "s[24]", tmp))
		return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/LimparVaga <Nome do Membro>");

	//if(!fexist(conta)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este jogador não Existe.");

    new org[80], cargo, MembroNome[32];
    format(org, 80, "/RPG/orgs/%s.ini", OrgsNamesSmall[Player[playerid][pMember]]);

	for(new i = 1; i < sizeof(OrgsCargos); i++)
	{
	    format(MembroNome, 32, "%s", DOF2_GetString(org, OrgsCargos[i]));
	    if(IsStringSame(tmp, MembroNome, 24))
	    {
	        cargo = i;
	        break;
	    }
	}

	if(cargo == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este jogador não é da sua Org.");

	DOF2_SetString(org, OrgsCargos[cargo], "Nenhum");
	DOF2_SaveFile();

	new pId = ReturnUser(tmp);
	if(IsPlayerConnected(pId))
	{
        if(Player[pId][pMember] == GetPlayerOrg(playerid))
        {
    	    format(thestring, 256, "{FF0000}[Info]:{FFFFFF} Você foi demitido por %s.", Player[playerid][pName]);
    	    SendClientMessage(pId, SERVER_INFO, thestring);

    	    Player[pId][pRank] = 0;
    	    Player[pId][pMember] = 0;
            if(!IsACopEx(pId))
            {
                SetPlayerSkin(pId, Player[pId][pModel]);
                OnDuty[pId] = false;
            }
            else
            {
        	    Player[pId][pModel] = 23;
        	    SetPlayerSkin(pId, 23);
            }
        }
    }
    else
    {
    	new conta[80];
    	format(conta, 80, "/RPG/users/%s.ini", tmp);

        if(fexist(conta))
        {
	        if(DOF2_GetInt(conta, "Member") == GetPlayerOrg(playerid))
	        {
	   	        DOF2_SetInt(conta, "Model", 23);
	   	        DOF2_SetInt(conta, "Rank", 0);
				DOF2_SetInt(conta, "Member", 0);
				DOF2_SaveFile();
			}
		}
    }
    format(thestring, 256, "{FF0000}[Info]:{FFFFFF} Você demitiu %s.", tmp);
    SendClientMessage(playerid, SERVER_INFO, thestring);
	return 1;
}

CMD:expulsar(playerid, params[])
{
 	if(Player[playerid][pLeader] == 0 && Player[playerid][pRank] < 5)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é lider ou sub-lider.");

    new pId;
    if(sscanf(params, "u", pId))
		return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/Expulsar <Nome/Id>");

	if(!IsPlayerConnected(pId)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador Não Conectado.");
	else if(GetPlayerOrg(pId) != GetPlayerOrg(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este jogador não é da Sua Org.");
	else if(Player[pId][pLeader] != 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode remover o seu Lider.");
	else if(Player[pId][pRank] >= 5 && Player[playerid][pLeader] == 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode remover um Sub-Lider.");

	DelMembro(pId);
    Player[pId][pRank] = 0;
    Player[pId][pMember] = 0;
    if(!IsACopEx(pId))
    {
        SetPlayerSkin(pId, Player[pId][pModel]);
        OnDuty[pId] = false;
    }
    else
    {
	    Player[pId][pModel] = 23;
	    SetPlayerSkin(pId, 23);
    }

    format(thestring, 256, "{FF0000}[Info]:{FFFFFF} Você foi demitido por %s.", Player[playerid][pName]);
    SendClientMessage(pId, SERVER_INFO, thestring);
    format(thestring, 256, "{FF0000}[Info]:{FFFFFF} Você demitiu %s.", Player[pId][pName]);
    SendClientMessage(playerid, SERVER_INFO, thestring);
	return 1;
}

CMD:tirarlideroff(playerid, params[])
{
    if(GetAdminLevel(playerid) < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new tmp[32];
    if(sscanf(params, "s[32]", tmp))
		return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/tirarlideroff <conta>");

    new file[64];
	format(file, sizeof(file), "/RPG/users/%s.ini",tmp);
	if(DOF2_FileExists(file))
	{
	    new org[80];
	    format(org,80,"/RPG/orgs/%s.ini",OrgsNamesSmall[DOF2_GetInt(file,"Member")]);

   		if(!strcmp(DOF2_GetString(org,OrgsCargos[0]),tmp,true))
   	    {
   	        DOF2_SetString(org,OrgsCargos[0],"Nenhum");
   	        DOF2_SaveFile();
   	        DOF2_SetInt(file, "Model", 23);
   	        DOF2_SetInt(file, "Leader", 0);
			DOF2_SetInt(file, "Member", 0);
			DOF2_SetInt(file, "Rank", 0);
			DOF2_SaveFile();
			format(thestring, sizeof(thestring), "Você tirou %s da liderança.",tmp);
			SendClientMessage(playerid,COLOR_LIGHTBLUE,thestring);
       	}
	}
	else
	    SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} A conta não existe.");

    return true;
}

CMD:setskin(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new giveid, level;
	if(sscanf(params, "ud", giveid, level))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/setskin <id/nick> <id da skin>");

	if(level > 299 || level < 1)
		return SendClientMessage(playerid, COLOR_GREY, "ID inválido!");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
			format(thestring, sizeof(thestring), "Seu skin foi alterado pelo Admin %s", Player[playerid][pName]);
			SendClientMessage(giveid, COLOR_WHITE, thestring);
			format(thestring, sizeof(thestring), "Você setou o skin de %s para %d.", Player[giveid][pName], level);
			SendClientMessage(playerid, COLOR_WHITE, thestring);

		    SetPlayerSkin(giveid, level);
		}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:setskinex(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new giveid, level;
	if(sscanf(params, "ud", giveid, level))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/setskinex <id/nick> <id da skin>");

	if(level > 299 || level < 1)
		return SendClientMessage(playerid, COLOR_GREY, "ID inválido!");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
			format(thestring, sizeof(thestring), "Seu skin foi alterado pelo Admin %s", Player[playerid][pName]);
			SendClientMessage(giveid, COLOR_WHITE, thestring);
			format(thestring, sizeof(thestring), "Você setou o skin de %s para %d.", Player[giveid][pName],level);
			SendClientMessage(playerid, COLOR_WHITE, thestring);

		    SetPlayerSkinEx(giveid, level);
		}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:pacoteiniciante(playerid)
{
    if(Pacote[playerid] != 1)
	{
    	new stringt[sizeof(PacoteIniciante)*128];
		for(new i = 0; i <sizeof(PacoteIniciante); i ++)
			format(stringt,sizeof(stringt),"%s\n - %s",stringt,PacoteIniciante[i]);

		ShowPlayerDialog(playerid, 669, DIALOG_STYLE_MSGBOX,"Brasil {FF0000}Life {FFFFFF}Simulation RPG - Edição de RG", stringt, "Cancelar", "Adquirir!");
	}
	else
	{
	    SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você já adquiriu seu pacote de edição de RG.");
	}
	return true;
}

CMD:site(playerid)
{
    SendClientMessage(playerid, COLOR_ORANGE,"{FF0000}[Site BLS:RPG]: {FFFFFF}http://blsrpg.com.br");
	return true;
}

CMD:recorde(playerid)
{
    format(thestring,50,"%d - %s", DOF2_GetInt(RECORD_FILE, "Recorde"), DOF2_GetString(RECORD_FILE, "Data"));
    SendClientMessage(playerid,COLOR_ORANGE,thestring);
    return true;
}

CMD:forum(playerid)
{
    SendClientMessage(playerid, COLOR_ORANGE,"{FF0000}[Fórum]: {FFFFFF}blsrpg.com.br");
	return true;
}

forward ShowNews(playerid);
public ShowNews(playerid)
{
    return cmd_novidades(playerid);
}

CMD:novidades(playerid)
{
  	new string[sizeof(News)*128];
 	format(string,1024,"{FFFFFF}Versão: %s - Data: %s\n", GMVERSION, GMDATE);
	for(new i = 0; i <sizeof(News); i ++)
		format(string,sizeof(string),"{FFFFFF}%s\n - %s",string, News[i]);

	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_MSGBOX,"{FFFFFF}Brasil {FF0000}Life {FFFFFF}Simulation RPG", string, "OK", "Sair");
	return true;
}

CMD:punicoes(playerid)
{
    new string[sizeof(Puni)*64];
	for(new i=1; i <sizeof(Puni); i ++)
	    format(string,sizeof(string),"%s\n - %s",string,Puni[i]);

	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_MSGBOX,"\tPunições do servidor:", string, "OK", "Sair");
	return true;
}

CMD:ipts(playerid)
{
	SendClientMessage(playerid, COLOR_VAGOS, "TS 3  --> IP: server.blsrpg.com.br");
	return true;
}

/*CMD:contato(playerid)
{
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Ran_Bls]:{FFFFFF} pedro.henrique.silva.1997@outlook.com.br");
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Kuddy_Hirasawa]:{FFFFFF} KuddyTV@gmail.com");
	return true;
}*/

CMD:liberarmateriais(playerid)
{
   	if(Player[playerid][pMats] >= 0)
	{
  	    Player[playerid][pMats] = 0;
	    format(thestring, sizeof(thestring), "* %s jogou os materiais fora.", PlayerGetName(playerid));
	    ProxDetector(15.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else if(Player[playerid][pMats] == 0)
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem nenhum material com você!");

	return true;
}

CMD:liberardrogas(playerid)
{
    if(Player[playerid][pDrugs] >= 0)
	{
		Player[playerid][pDrugs] = 0;
		format(thestring, sizeof(thestring), "* %s jogou as dorgas fora.", PlayerGetName(playerid));
        ProxDetector(15.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else if(Player[playerid][pDrugs] == 0)
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem nenhuma droga com você!");

	return true;
}

CMD:portamalas(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você só pode usar o porta-malas de fora do carro.");

	new funcao[32];
	if(sscanf(params, "s[32]", funcao)) goto Errou;
	else if(!strcmp(funcao, "Armas", true))
	{
	    new VeiculoId = PegarVeiculoMaisPerto(playerid, 10.0);
	    if(VeiculoId == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta perto de um Veiculo.");
		else if(VehicleInfo[VeiculoId][vCustom]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar o Porta-Malas deste Veiculo.");
	    else if(IsABike(GetVehicleModel(VeiculoId)) || IsABicicle(GetVehicleModel(VeiculoId))) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este veiculo não tem Porta-Malas.");
	    else if(GetOwnedVehicleID(VeiculoId) != INVALID_VEHICLE_ID && !IsStringSame(CarInfo[GetOwnedVehicleID(VeiculoId)][cOwner], Player[playerid][pName], 24)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é o dono deste Veiculo.");
	    else if(IsAnTransportVehicle(VeiculoId) && GetPlayerOrg(playerid) != VeiculoMaterialAlugado[TransportVehicle(VeiculoId)][0] && VeiculoMaterialAlugado[TransportVehicle(VeiculoId)][0] != 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar o Porta-Malas deste Veiculo.");

	    new string[2048];
		for(new i = 0; i < 5; i++)
	    {
	        if(TrunkInfo[VeiculoId][TrunkArmas][i] == 0)
	        {
	            format(thestring, 256, "%d - Nenhuma - Balas: 0\n", i + 1);
	            strcat(string, thestring);
	            continue;
	        }
            format(thestring, 256, "%d - %s - Balas: %d\n", i + 1, GetWeaponNameEx(TrunkInfo[VeiculoId][TrunkArmas][i]), TrunkInfo[VeiculoId][TrunkBalas][i]);
            strcat(string, thestring);
	    }
		ShowPlayerDialog(playerid, 9850, DIALOG_STYLE_LIST, "Armas:", string, "Selecionar", "Sair");
		TrunkPlayer[playerid][0] = VeiculoId;
		return 1;
	}
	else if(!strcmp(funcao, "Drogas", true))
	{
	    new VeiculoId = PegarVeiculoMaisPerto(playerid, 10.0);
	    if(VeiculoId == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta perto de um Veiculo.");
		else if(VehicleInfo[VeiculoId][vCustom]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar o Porta-Malas deste Veiculo.");
	    else if(IsABike(GetVehicleModel(VeiculoId)) || IsABicicle(GetVehicleModel(VeiculoId))) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este veiculo não tem Porta-Malas.");
        else if(GetOwnedVehicleID(VeiculoId) != INVALID_VEHICLE_ID && !IsStringSame(CarInfo[GetOwnedVehicleID(VeiculoId)][cOwner], Player[playerid][pName], 24)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é o dono deste Veiculo.");
	    else if(IsAnTransportVehicle(VeiculoId) && GetPlayerOrg(playerid) != VeiculoMaterialAlugado[TransportVehicle(VeiculoId)][0] && VeiculoMaterialAlugado[TransportVehicle(VeiculoId)][0] != 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar o Porta-Malas deste Veiculo.");

	    format(thestring, 256, "Drogas: %dgr\nColocar\nRemover", TrunkInfo[VeiculoId][TrunkDrogas]);
		ShowPlayerDialog(playerid, 9860, DIALOG_STYLE_LIST, "Drogas:", thestring, "Selecionar", "Sair");
		TrunkPlayer[playerid][0] = VeiculoId;
		return 1;
	}
	else if(!strcmp(funcao, "Materiais", true))
	{
	    new VeiculoId = PegarVeiculoMaisPerto(playerid, 10.0);
	    if(VeiculoId == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta perto de um Veiculo.");
		else if(VehicleInfo[VeiculoId][vCustom]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar o Porta-Malas deste Veiculo.");
	    else if(IsABike(GetVehicleModel(VeiculoId)) || IsABicicle(GetVehicleModel(VeiculoId))) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este veiculo não tem Porta-Malas.");
        else if(GetOwnedVehicleID(VeiculoId) != INVALID_VEHICLE_ID && !IsStringSame(CarInfo[GetOwnedVehicleID(VeiculoId)][cOwner], Player[playerid][pName], 24)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é o dono deste Veiculo.");
	    else if(IsAnTransportVehicle(VeiculoId) && GetPlayerOrg(playerid) != VeiculoMaterialAlugado[TransportVehicle(VeiculoId)][0] && VeiculoMaterialAlugado[TransportVehicle(VeiculoId)][0] != 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar o Porta-Malas deste Veiculo.");

	    format(thestring, 256, "Materiais: %d\nColocar\nRemover", TrunkInfo[VeiculoId][TrunkMateriais]);
		ShowPlayerDialog(playerid, 9870, DIALOG_STYLE_LIST, "Materiais:", thestring, "Selecionar", "Sair");
		TrunkPlayer[playerid][0] = VeiculoId;
		return 1;
	}
	else if(!strcmp(funcao, "Cordas", true))
	{
	    new VeiculoId = PegarVeiculoMaisPerto(playerid, 10.0);
	    if(VeiculoId == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta perto de um Veiculo.");
		else if(VehicleInfo[VeiculoId][vCustom]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar o Porta-Malas deste Veiculo.");
	    else if(IsABike(GetVehicleModel(VeiculoId)) || IsABicicle(GetVehicleModel(VeiculoId))) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este veiculo não tem Porta-Malas.");
        else if(GetOwnedVehicleID(VeiculoId) != INVALID_VEHICLE_ID && !IsStringSame(CarInfo[GetOwnedVehicleID(VeiculoId)][cOwner], Player[playerid][pName], 24)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é o dono deste Veiculo.");
	    else if(IsAnTransportVehicle(VeiculoId) && GetPlayerOrg(playerid) != VeiculoMaterialAlugado[TransportVehicle(VeiculoId)][0] && VeiculoMaterialAlugado[TransportVehicle(VeiculoId)][0] != 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar o Porta-Malas deste Veiculo.");

	    format(thestring, 256, "Cordas: %d\nColocar\nRemover", TrunkInfo[VeiculoId][TrunkMateriais]);
		ShowPlayerDialog(playerid, 9880, DIALOG_STYLE_LIST, "Cordas:", thestring, "Selecionar", "Sair");
		TrunkPlayer[playerid][0] = VeiculoId;
		return 1;
	}
/*	else if(!strcmp(funcao, "Transferir", true))
	{
	    new VeiculoId = PegarVeiculoMaisPerto(playerid, 10.0);
	    if(VeiculoId == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta perto de um Veiculo.");
	    else if(IsABike(GetVehicleModel(VeiculoId)) || IsABicicle(GetVehicleModel(VeiculoId))) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este veiculo não tem Porta-Malas.");
        else if(GetOwnedVehicleID(VeiculoId) != INVALID_VEHICLE_ID && !IsStringSame(CarInfo[GetOwnedVehicleID(VeiculoId)][cOwner], Player[playerid][pName], 24)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é o dono deste Veiculo.");
	    else if(IsAnTransportVehicle(VeiculoId) && GetPlayerOrg(playerid) != VeiculoMaterialAlugado[TransportVehicle(VeiculoId)][0] && VeiculoMaterialAlugado[TransportVehicle(VeiculoId)][0] != 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar o Porta-Malas deste Veiculo.");

        TrunkPlayer[playerid][0] = VeiculoId;
        VeiculoId = PegarVeiculoMaisPerto(playerid, 50.0, TrunkPlayer[playerid][0]);
	    format(thestring, 256, "Cordas: %d\nColocar\nRemover", TrunkInfo[VeiculoId][TrunkMateriais]);
		ShowPlayerDialog(playerid, 9890, DIALOG_STYLE_LIST, "Cordas:", thestring, "Selecionar", "Sair");
		return 1;
	}*/
	else if(!strcmp(funcao, "Info", true))
	{
	    new VeiculoId = PegarVeiculoMaisPerto(playerid, 10.0);
	    if(VeiculoId == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta perto de um Veiculo.");
		else if(VehicleInfo[VeiculoId][vCustom]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar o Porta-Malas deste Veiculo.");
	    else if(IsABike(GetVehicleModel(VeiculoId)) || IsABicicle(GetVehicleModel(VeiculoId))) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este veiculo não tem Porta-Malas.");
        else if(GetOwnedVehicleID(VeiculoId) != INVALID_VEHICLE_ID && !IsStringSame(CarInfo[GetOwnedVehicleID(VeiculoId)][cOwner], Player[playerid][pName], 24)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é o dono deste Veiculo.");
	    else if(IsAnTransportVehicle(VeiculoId) && GetPlayerOrg(playerid) != VeiculoMaterialAlugado[TransportVehicle(VeiculoId)][0] && VeiculoMaterialAlugado[TransportVehicle(VeiculoId)][0] != 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar o Porta-Malas deste Veiculo.");

	    new string[2048];
		for(new i = 0; i < 5; i++)
	    {
	        if(TrunkInfo[VeiculoId][TrunkArmas][i] == 0)
	        {
	            format(thestring, 256, "Arma %d - Nenhuma - Balas: 0\n", i + 1);
	            strcat(string, thestring);
	            continue;
	        }
            format(thestring, 256, "Arma %d - %s - Balas: %d\n", i + 1, GetWeaponNameEx(TrunkInfo[VeiculoId][TrunkArmas][i]), TrunkInfo[VeiculoId][TrunkBalas][i]);
            strcat(string, thestring);
	    }
	    format(thestring, 256, "Drogas: %dgr\n", TrunkInfo[VeiculoId][TrunkDrogas]); strcat(string, thestring);
	    format(thestring, 256, "Materiais: %d\n", TrunkInfo[VeiculoId][TrunkMateriais]); strcat(string, thestring);
	    format(thestring, 256, "Cordas: %d", TrunkInfo[VeiculoId][TrunkCordas]); strcat(string, thestring);

		ShowPlayerDialog(playerid, 4991, DIALOG_STYLE_MSGBOX, "Info:", string, "Sair", "");
		TrunkPlayer[playerid][0] = VeiculoId;
		return 1;
	}
	else if(!strcmp(funcao, "Revistar", true))
	{
	    if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Policial.");

	    new VeiculoId = PegarVeiculoMaisPerto(playerid, 10.0);
	    if(VeiculoId == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta perto de um Veiculo.");
		else if(VehicleInfo[VeiculoId][vCustom]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar o Porta-Malas deste Veiculo.");
	    else if(IsABike(GetVehicleModel(VeiculoId)) || IsABicicle(GetVehicleModel(VeiculoId))) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este veiculo não tem Porta-Malas.");
	    else if(GetOwnedVehicleID(VeiculoId) != INVALID_VEHICLE_ID && CarInfo[GetOwnedVehicleID(VeiculoId)][cLock]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este Porta-Malas está Trancado.");

	    new string[2048];
		for(new i = 0; i < 5; i++)
	    {
	        if(TrunkInfo[VeiculoId][TrunkArmas][i] == 0)
	        {
	            format(thestring, 256, "Arma %d - Nenhuma - Balas: 0\n", i + 1);
	            strcat(string, thestring);
	            continue;
	        }
            format(thestring, 256, "Arma %d - %s - Balas: %d\n", i + 1, GetWeaponNameEx(TrunkInfo[VeiculoId][TrunkArmas][i]), TrunkInfo[VeiculoId][TrunkBalas][i]);
            strcat(string, thestring);
	    }
	    format(thestring, 256, "Drogas: %dgr\n", TrunkInfo[VeiculoId][TrunkDrogas]); strcat(string, thestring);
	    format(thestring, 256, "Materiais: %d\n", TrunkInfo[VeiculoId][TrunkMateriais]); strcat(string, thestring);
	    format(thestring, 256, "Cordas: %d", TrunkInfo[VeiculoId][TrunkCordas]); strcat(string, thestring);

		ShowPlayerDialog(playerid, 4991, DIALOG_STYLE_MSGBOX, "Info:", string, "Sair", "");
		TrunkPlayer[playerid][0] = VeiculoId;
		return 1;
	}
    else if(!strcmp(funcao, "Apreender", true))
    {
	    if(!IsACop(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Policial.");

	    new VeiculoId = PegarVeiculoMaisPerto(playerid, 10.0);
	    if(VeiculoId == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta perto de um Veiculo.");
		else if(VehicleInfo[VeiculoId][vCustom]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar o Porta-Malas deste Veiculo.");
	    else if(IsABike(GetVehicleModel(VeiculoId)) || IsABicicle(GetVehicleModel(VeiculoId))) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este veiculo não tem Porta-Malas.");
	    else if(GetOwnedVehicleID(VeiculoId) != INVALID_VEHICLE_ID && CarInfo[GetOwnedVehicleID(VeiculoId)][cLock]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este Porta-Malas está Trancado.");

	    new string[2048];
		for(new i = 0; i < 5; i++)
	    {
	        if(TrunkInfo[VeiculoId][TrunkArmas][i] == 0)
	        {
	            format(thestring, 256, "Arma %d - Nenhuma - Balas: 0\n", i + 1);
	            strcat(string, thestring);
	            continue;
	        }
            format(thestring, 256, "Arma %d - %s - Balas: %d\n", i + 1, GetWeaponNameEx(TrunkInfo[VeiculoId][TrunkArmas][i]), TrunkInfo[VeiculoId][TrunkBalas][i]);
            strcat(string, thestring);
	    }
	    format(thestring, 256, "Drogas: %dgr\n", TrunkInfo[VeiculoId][TrunkDrogas]); strcat(string, thestring);
	    format(thestring, 256, "Materiais: %d\n", TrunkInfo[VeiculoId][TrunkMateriais]); strcat(string, thestring);
	    format(thestring, 256, "Cordas: %d", TrunkInfo[VeiculoId][TrunkCordas]); strcat(string, thestring);
        strcat(string, "\nTudo");

		TrunkPlayer[playerid][0] = VeiculoId;
		ShowPlayerDialog(playerid, 4992, DIALOG_STYLE_LIST, "Apreender:", string, "Selecionar", "Cancelar");
		return 1;
    }
	Errou:
    SendClientMessage(playerid, COLOR_GREY, "[USO]:{FFFFFF} /PortaMalas <Funcao>");
    SendClientMessage(playerid, SERVER_INFO, "[Funções]:{FFFFFF} Armas, Drogas, Materiais, Cordas, Info, Revistar, Apreender");
	return 1;
}

CMD:afk(playerid)
{
    if(Player[playerid][pAdmin] < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    if(AdminAfk[playerid] == 0)
    {
		AdminAfk[playerid] = 1;
		GetPlayerArmour(playerid, AdminAfkStatus[playerid][1]);
		GetPlayerHealth(playerid, AdminAfkStatus[playerid][0]);
        SetPlayerArmour(playerid, 99999);
		SetPlayerHealth(playerid, 99999);
		if(Player[playerid][pAdmin] != 1)
            format(thestring, sizeof(thestring), "[Administração]: {FFFFFF}O Administrador {008080}%s {FFFFFF}está AFK.", Player[playerid][pName]);
        else
            format(thestring, sizeof(thestring), "[Administração]: {FFFFFF}O Operador {008080}%s {FFFFFF}está AFK.", Player[playerid][pName]);
        SendClientMessageToAll(0xFF0000FF, thestring);

        if(Player[playerid][pAdmin] < 6)
        {
            AFKTimer[playerid] = (20 * 60) + ((Player[playerid][pAdmin] * 10) * 60);
            format(thestring, sizeof(thestring), "Você pode ficar %s AFK.", Convert(AFKTimer[playerid]));
            SendClientMessage(playerid, COLOR_GREEN, thestring);
        }

		if(AdminDuty[playerid] == MODOSA_TRABALHANDO)
            SetAdminColor(playerid);
		return true;
	}
    else if(AdminAfk[playerid] == 1)
    {
    	AdminAfk[playerid] = 0;
        SetPlayerArmour(playerid, AdminAfkStatus[playerid][1]);
		SetPlayerHealth(playerid, AdminAfkStatus[playerid][0]);
		format(thestring, sizeof(thestring), "[Administração]:{FFFFFF} O Administrador {008080}%s {FFFFFF}voltou para o servidor.", Player[playerid][pName]);
        AFKTimer[playerid] = -1;
		SendClientMessageToAll(0xFF0000FF, thestring);

		if(AdminDuty[playerid] == MODOSA_TRABALHANDO)
            SetAdminColor(playerid);
		return true;
    }
	return true;
}

CMD:entregar(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
		new x_nr[10], giveid, dammount;
		if(sscanf(params, "s[10]uD(0)", x_nr, giveid, dammount))
		{
		    SendClientMessage(playerid, 0xFF0000AA, "[Uso]: {FFFFFF}/Entregar Armas <ID/Nick> <Balas>");
		    SendClientMessage(playerid, 0xFF0000AA, "[Uso]: {FFFFFF}/Entregar Drogas <ID/Nick> <Gramas>");
		    SendClientMessage(playerid, 0xFF0000AA, "[Uso]: {FFFFFF}/Entregar Materiais <ID/Nick> <Quantidade>");
		    SendClientMessage(playerid, 0xFF0000AA, "[Uso]: {FFFFFF}/Entregar Dinamite <ID/Nick>");
			return true;
		}
		if(strcmp(x_nr, "drogas", true) == 0)
		{
		    if(dammount < 1) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Gramas Invalida.");
			if(!IsPlayerConnected(giveid) || giveid == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_RED, "O jogador está Offline!");

	        new Float:x, Float:y, Float:z;
            GetPlayerPos(giveid,x,y,z);
            if(!PlayerToPoint(5, playerid, x, y, z)) return SendClientMessage(playerid, COLOR_GREY, "O jogador não esta perto de você.");

			if(dammount > Player[playerid][pDrugs])
			{
			    new string[128];
			    format(string, 128, "[ERRO]:{FFFFFF} Você precisa de mais %d gramas de drogas para ter esta quantidade.", dammount-Player[playerid][pDrugs]);
			    SendClientMessage(playerid, 0xFF0000AA, string);
				return 1;
			}

			Player[playerid][pDrugs] -= dammount;
			Player[giveid][pDrugs] += dammount;
			format(thestring, sizeof(thestring), "* %s deu drogas para %s.", PlayerGetName(playerid), PlayerGetName(giveid));
			ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		else if(strcmp(x_nr, "armas", true) == 0)
		{
		    if(dammount < 1) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Balas Inválidas.");
			if(!IsPlayerConnected(giveid) || giveid == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_RED, "O jogador está Offline!");
            if(InTAA[playerid])
                return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode Entregar armas durante um Tiro ao Alvo.");

	        if(ProxDetectorS(5.0, playerid, giveid))
			{
                new weap = GetPlayerWeapon(playerid);
   				new gunAmmo = GetPlayerAmmo(playerid);
			    if(weap != 0 && gunAmmo != 0)
			    {
			        if(weap == 44 || weap == 45 || weap == 38 || weap == 35 || weap == 36 || weap == 37 || weap == 9
					|| weap == 16 || weap == 18 || weap == 26 || weap == 27 || weap == 28 || weap == 32 || weap == 39 || weap == 40)
                        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode Entregar uma Arma Bloqueada pelo Anti-Xiter.");

			        if(dammount > gunAmmo) return SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem esta quantidade de balas.");
			        RemovePlayerWeapon(playerid, weap);
			        if(gunAmmo-dammount != 0) SafeGivePlayerWeapon(playerid, weap, gunAmmo-dammount);
			        SafeGivePlayerWeapon(giveid, weap, dammount);
			        format(thestring, sizeof(thestring), "* %s deu uma arma para %s.", PlayerGetName(playerid), PlayerGetName(giveid));
			        ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        			return true;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem armas para dar!");
			        return 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "O jogador esta longe de você!");
			    return 1;
			}
		}
		if(strcmp(x_nr, "materiais", true) == 0)
		{
		    if(dammount < 1) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Quantidade Invalida.");
			if(!IsPlayerConnected(giveid) || giveid == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_RED, "O jogador está Offline!");

	        new Float:x, Float:y, Float:z;
            GetPlayerPos(giveid,x,y,z);
            if(!PlayerToPoint(5, playerid, x, y, z)) return SendClientMessage(playerid, COLOR_GREY, "O jogador não esta perto de você.");

			if(dammount > Player[playerid][pMats])
			{
			    new string[128];
			    format(string, 128, "[ERRO]:{FFFFFF} Você precisa de mais %d materiais para ter esta quantidade.", dammount-Player[playerid][pMats]);
			    SendClientMessage(playerid, 0xFF0000AA, string);
				return 1;
			}
			else if(Player[giveid][pMats] + dammount > 1000)
			{
			    SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} O Jogador só pode carregar 1000 Materiais.");
			    return 1;
			}

			Player[playerid][pMats] -= dammount;
			Player[giveid][pMats] += dammount;
			format(thestring, sizeof(thestring), "* %s deu materiais para %s.", PlayerGetName(playerid), PlayerGetName(giveid));
			ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		if(strcmp(x_nr, "dinamite", true) == 0)
		{
			if(!IsPlayerConnected(giveid) || giveid == INVALID_PLAYER_ID) return SendClientMessage(playerid, COLOR_RED, "O jogador está Offline!");

	        new Float:x, Float:y, Float:z;
            GetPlayerPos(giveid,x,y,z);
            if(!PlayerToPoint(5, playerid, x, y, z)) return SendClientMessage(playerid, COLOR_GREY, "O jogador não esta perto de você.");

            if(!Player[playerid][pExplosivo])
                return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Dinamite.");
            if(Player[giveid][pExplosivo])
                return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Jogador já tem uma Dinamite.");

            Player[playerid][pExplosivo] = false;
            Player[giveid][pExplosivo] = true;

			format(thestring, sizeof(thestring), "* %s deu uma dinamite para %s.", PlayerGetName(playerid), PlayerGetName(giveid));
			ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, 0xFF0000AA, "[Uso]: {FFFFFF}/Entregar Armas <ID/Nick> <Balas>");
		    SendClientMessage(playerid, 0xFF0000AA, "[Uso]: {FFFFFF}/Entregar Drogas <ID/Nick> <Gramas>");
		    SendClientMessage(playerid, 0xFF0000AA, "[Uso]: {FFFFFF}/Entregar Materiais <ID/Nick> <Quantidade>");
            SendClientMessage(playerid, 0xFF0000AA, "[Uso]: {FFFFFF}/Entregar Dinamite <ID/Nick>");
			return true;
		}
	}
	return true;
}

CMD:guardardrogas(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1857.2000, -1870.5500, 13.5000))
	{
		new drogas;
		if(sscanf(params, "d", drogas))
		{
		    SendClientMessage(playerid, 0xFF0000AA, "[Uso]: {FFFFFF}/GuardarDrogas <Quantidade>");
			return true;
		}
		if(drogas > Player[playerid][pDrugs]) return SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem tantas drogas.");
        if(drogas < 0 || drogas > 500000) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode depositar tanto de uma vez.");
		Player[playerid][pDrugs] -= drogas;
		Player[playerid][pDrogasGuardadas] += drogas;

		format(thestring, sizeof(thestring), "[Armazêm]: {FFFFFF}Você guardou %dg de drogas no Armazem. (Total: %dg)", drogas, Player[playerid][pDrogasGuardadas]);
		SendClientMessage(playerid, 0xFF0000AA, thestring);
	}
/*	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1941.0000, -1984.5000, 13.5500))
	{
	    if(!IsAGang(playerid) && GetPlayerOrg(playerid) != 22) return SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não faz parte de uma Gang.");
		new drogas;
		if(sscanf(params, "d", drogas))
		{
		    SendClientMessage(playerid, 0xFF0000AA, "[Uso]: {FFFFFF}/GuardarDrogas <Quantidade>");
			return true;
		}
		if(drogas > Player[playerid][pDrugs]) return SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem tantas drogas.");

		Player[playerid][pDrugs] -= drogas;
		CofreOrg[GetPlayerOrg(playerid)][cfDrogas] += drogas;

		format(thestring, sizeof(thestring), "[Armazêm]: {FFFFFF}Você guardou %dg de drogas no Armazem. (Total: %dg)", drogas, CofreOrg[GetPlayerOrg(playerid)][cfDrogas]);
		SendClientMessage(playerid, 0xFF0000AA, thestring);
	    return 1;
	}*/
	else
	{
	    SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não esta no deposito.");
	    return 1;
	}
	return 1;
}

CMD:pegardrogas(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1857.2000, -1870.5500, 13.5000))
	{
		new drogas;
		if(sscanf(params, "d", drogas))
		{
		    SendClientMessage(playerid, 0xFF0000AA, "[Uso]: {FFFFFF}/PegarDrogas <Quantidade>");
			return true;
		}
		if(drogas > Player[playerid][pDrogasGuardadas]
        || drogas < 1) return SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem tantas drogas.");

		Player[playerid][pDrogasGuardadas] -= drogas;
		Player[playerid][pDrugs] += drogas;

		format(thestring, sizeof(thestring), "[Armazêm]: {FFFFFF}Você removeu %dg de drogas no Armazem. (Total: %dg)", drogas, Player[playerid][pDrogasGuardadas]);
		SendClientMessage(playerid, 0xFF0000AA, thestring);
	}
/*	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1941.0000, -1984.5000, 13.5500))
	{
	    if(!IsAGang(playerid) && GetPlayerOrg(playerid) != 22) return SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não faz parte de uma Gang.");
		new drogas;
		if(sscanf(params, "d", drogas))
		{
		    SendClientMessage(playerid, 0xFF0000AA, "[Uso]: {FFFFFF}/PegarDrogas <Quantidade>");
			return true;
		}
		if(drogas > CofreOrg[GetPlayerOrg(playerid)][cfDrogas]) return SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Sua Gang não tem tantas drogas.");

		CofreOrg[GetPlayerOrg(playerid)][cfDrogas] -= drogas;
		Player[playerid][pDrugs] += drogas;

		format(thestring, sizeof(thestring), "[Armazêm]: {FFFFFF}Você removeu %dg de drogas no Armazem da Gang. (Total: %dg)", drogas, CofreOrg[GetPlayerOrg(playerid)][cfDrogas]);
		SendClientMessage(playerid, 0xFF0000AA, thestring);
	    return 1;
	}*/
	else
	{
	    SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não esta no deposito.");
	    return 1;
	}
	return 1;
}

CMD:darcargo(playerid, params[])
{
    /*if(GetPlayerOrg(playerid) == 10)
    {
        if(Player[playerid][pLeader] == 0
        && Player[playerid][pRank] < 5)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Líder/Sub-Lider.");
    }                  */
    if(Player[playerid][pLeader] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Líder.");

    new maxCargo = 5;
   /* if(Player[playerid][pLeader] == 0)
        maxCargo = 4;         */

    if(IsPlayerConnected(playerid))
    {
       	new level, giveid;
		if(sscanf(params, "ud", giveid, level))
        {
            format(thestring, sizeof(thestring), "[Uso]: {FFFFFF}/DarCargo <id/nick> <Número(1-%d)>", maxCargo);
			SendClientMessage(playerid, COLOR_GREY, thestring);
            return true;
        }

		if(level > maxCargo || level < 1)
        {
            format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} Escolha um número entre 1 e %d.", maxCargo);
        	SendClientMessage(playerid, COLOR_RED, thestring);
            return true;
        }

		if(GetPlayerOrg(giveid) == GetPlayerOrg(playerid))
		{
		    if(IsPlayerConnected(giveid))
		    {
		        if(giveid != INVALID_PLAYER_ID)
		        {
		            DelMembro(giveid);
		            if(level == 5)
		            {
		                new org[128];
		   				format(org,128,"/RPG/orgs/%s.ini",OrgsNamesSmall[Player[giveid][pMember]]);
		                if(strcmp(DOF2_GetString(org,OrgsCargos[1]),"Nenhum",true)==0)
		                {
			    			DOF2_SetString(org,OrgsCargos[1],Player[giveid][pName]);
			    			DOF2_SaveFile();
						}
                        else if(strcmp(DOF2_GetString(org,OrgsCargos[2]),"Nenhum",true)==0)
			    		{
							DOF2_SetString(org,OrgsCargos[2],Player[giveid][pName]);
							DOF2_SaveFile();
						}
			   			else
   		    				return SendClientMessage(giveid,COLOR_RED, "[ERRO]:{FFFFFF} Esta organização já tem dois sub-líderes.");
		            }
		            else
		                AddMembro(giveid);

					Player[giveid][pRank] = level;
					format(thestring, sizeof(thestring), "Você foi promovido a um novo cargo (%d) por: %s", level, Player[playerid][pName]);
					SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					format(thestring, sizeof(thestring), "Você promoveu %s ao cargo %d.", Player[giveid][pName],level);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
/*					if(Player[playerid][pMember] == TEAM_PM && giveid != playerid)
					{
						if(level == 1)
						{
							SetPlayerSkin(giveid,71);
							Player[giveid][pModel] = 71;
						}
						else if(level == 2)
						{
							SetPlayerSkin(giveid,280);
							Player[giveid][pModel] = 280;
						}
						else if(level == 3)
						{
							SetPlayerSkin(giveid,281);
							Player[giveid][pModel] = 281;
						}
						else if(level == 4)
						{
							SetPlayerSkin(giveid,267);
							Player[giveid][pModel] = 267;
						}
						else if(level == 5)
						{
							SetPlayerSkin(giveid,266);
							Player[giveid][pModel] = 266;
						}
					}*/
					if(Player[playerid][pMember] == TEAM_PREF && giveid != playerid)
					{
						if(level == 1)
						{
							SetPlayerSkin(giveid,255);
							Player[giveid][pModel] = 255;
						}
						else if(level == 2)
						{
							SetPlayerSkin(giveid,164);
							Player[giveid][pModel] = 164;
						}
						else if(level == 3)
						{
							SetPlayerSkin(giveid,163);
							Player[giveid][pModel] = 163;
						}
						else if(level == 4)
						{
							SetPlayerSkin(giveid,57);
							Player[giveid][pModel] = 57;
						}
						else if(level == 5)
						{
							SetPlayerSkin(giveid,228);
							Player[giveid][pModel] = 228;
						}
					}
    				/*else if(GetPlayerOrg(playerid) == TEAM_HAMAS)
					{
					    if(level == 5) Player[giveid][pModel] = 72;
					    else if(level >= 3) Player[giveid][pModel] = 73;
					    else Player[giveid][pModel] = 44;

					    SetPlayerSkin(giveid, Player[giveid][pModel]);
					}*/
				}
			}
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está autorizado a usar este comando (somente líderes).");
	}
	return true;
}
//----------------------------------[setteam]------------------------------------------------
CMD:pedircontas(playerid)
{
	return cmd_pedirconta(playerid);
}

CMD:pedirconta(playerid)
{
	if(Player[playerid][pLeader] >= 1)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Lider só pode ser retirado por administradores.");

    if(IsACopEx(playerid))
    {
        SetPlayerSkin(playerid, Player[playerid][pModel]);
        OnDuty[playerid] = false;
    }
    else
    {
/*        if(GetPlayerOrg(playerid) == TEAM_BOMBE)
    	    for(new j=0; j<50; j++)
            	if(fogo[j] > 0)
            		SetPlayerMapIcon(playerid, 50 + j, fogoposX[j],fogoposY[j],fogoposZ[j],20,2,MAPICON_GLOBAL);*/

	    Player[playerid][pModel] = 240;
	    SetPlayerSkin(playerid, 240);
    }

    DelMembro(playerid);
	Player[playerid][pMember] = 0;
	Player[playerid][pRank] = 0;
	Player[playerid][pLeader] = 0;
//	SetPlayerColor(playerid, OrgsColors[Player[playerid][pMember]]); // Cor no Nick
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você saiu de sua organização.");
	return true;
}

CMD:tiraremprego(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/tiraremprego <id/nick>");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
			Player[giveid][pJob] = DESEMPREGADO;
			format(thestring, sizeof(thestring), "%s tirou seu emprego", Player[playerid][pName]);
			SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
			format(thestring, sizeof(thestring), "Você tirou o emprego de %s.", Player[giveid][pName]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
		}
	}
	return true;
}

CMD:spec(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) >= 1 || Player[playerid][pEnigma] > 0)
	{
	  	new giveid;
		if(sscanf(params, "u", giveid))
			return SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Uso: /spec <id do player>");
		if(!IsPlayerConnected(giveid))
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não conectado");
	   	else if(giveid == playerid)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não é possível se espiar.");
		/*else if(GetAdminLevel(giveid) >= 7)
		  	return true;*/
		else if(GetPlayerState(giveid) == PLAYER_STATE_SPECTATING)
			return	SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador escolhido já está espectando alguém.");
		else if(GetPlayerState(giveid) != 1 && GetPlayerState(giveid) != 2 && GetPlayerState(giveid) != 3)
 			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está jogando.");
		if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
			SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você entrou no modo espectador, para sair digite /pararspec.");

		StartSpectate(playerid, giveid);
	}
	return true;
}

CMD:pararspec(playerid, params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    StopSpectate(playerid);
		return true;
	}
	else
	    return SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Erro: Você não está espectando ninguém.");
}

CMD:fumar(playerid)
{
   	if(Player[playerid][pCigarro] != 0)
   	{
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		Player[playerid][pCigarro] -= 1;
   	}
   	else
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem cigarro.");

   	return true;
}

CMD:pararbeber(playerid)
{
  	SetPlayerSpecialAction(playerid, 0);
	return true;
}

CMD:pararfumar(playerid)
{
  	SetPlayerSpecialAction(playerid, 0);
  	return true;
}

CMD:abrirevento(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(!evento)
	{
        if(EventoInfo[EventoCarregado])
        {
            new string[256];
            format(string, sizeof(string), "{FFFFFF}Há um Evento Carregado: %s.\nVocê deseja Iniciar o {0066FF}Evento Carregado{FFFFFF} ou o {FF0000}Evento Manual{FFFFFF}?", EventoInfo[EventoArquivo]);
            ShowPlayerDialog(playerid, 10001, DIALOG_STYLE_MSGBOX, "Abrir Evento:", string, "Carregado", "Manual");
            return true;
        }
        AbrirEvento(playerid, false);
        return true;
	}
	else if(evento)
	{
		evento = 0;
        format(thestring, sizeof(thestring), "[Administração]: Inscrições trancadas. Ninguém mais entrará no Evento.");
		SendClientMessageToAll(COLOR_ADMIN,thestring);
		dentro = 0;
		return true;
	}
	return true;
}

CMD:descongelarevento(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 4)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem autorização para usar esse comando.");

	foreach(new i: Player)
	    if(noevento[i] == true)
	        Descongelar(i);

	format(thestring, 128, "[EVENTO]: O Admin descongelou todos do Evento.");
	SendClientMessageToAll(COLOR_ADMIN,thestring);
	return true;
}

CMD:congelarevento(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 4)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem autorização para usar esse comando.");

	foreach(new i: Player)
	    if(noevento[i] == true)
	        Congelar(i);

	format(thestring, 128, "[EVENTO]: O Admin congelou todos do Evento.");
	SendClientMessageToAll(COLOR_ADMIN,thestring);
	return true;
}

CMD:puxarevento(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 4)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem autorização para usar esse comando.");

    if(EventoInfo[EventoCarregado])
    {
        new RaceVehID = 0,
        	FileName[64],
            thestring_[32],
            VehicleStr[128],
            VehID,
            bool:Team;
    	format(FileName, 64, "%s%s.ini", PastaEvento, EventoInfo[EventoArquivo]);

    	foreach(new i: Player)
    	{
        	if(!EventoInfo[InscritoEvento][i])
                continue;

            EventoInfo[InscritoEvento][i] = false;
            noevento[i] = true;
	  		ResetPlayerWeapons(i);

            if(!EventoInfo[EventoRace] && !EventoInfo[EventoTDM])
            {
                if(EventoInfo[EventoSkin][0] != 0)
                    SetPlayerSkin(i, EventoInfo[EventoSkin][0]);

				SetPlayerInterior(i, EventoInfo[EventoInt]);
		  		SetPlayerVirtualWorld(i, 0);
				SafeSetPlayerPos(i, EventoDest[0], EventoDest[1], EventoDest[2]);
                Congelar(i);
            }
            else if(EventoInfo[EventoRace])
            {
                if(RaceVehID >= EventoInfo[NumeroVeiculos])
                {
                    if(EventoInfo[EventoSkin][0] != 0)
                        SetPlayerSkin(i, EventoInfo[EventoSkin][0]);

    				SetPlayerInterior(i, EventoInfo[EventoInt]);
    		  		SetPlayerVirtualWorld(i, 0);
    				SafeSetPlayerPos(i, EventoDest[0], EventoDest[1], EventoDest[2]);
                    Congelar(i);
                }
                else
                {
                    if(EventoInfo[EventoSkin][0] != 0)
                        SetPlayerSkin(i, EventoInfo[EventoSkin][0]);

        	        format(thestring_, 256, "Veiculo%d", RaceVehID);
        	        format(VehicleStr, 128, "%s", DOF2_GetString(FileName, thestring_));
        	        VehID = CriarVeiculo_Evento(VehicleStr);

                    PutPlayerInVehicle(i, VehID, 0);
    				SetPlayerInterior(i, EventoInfo[EventoInt]);
    		  		SetPlayerVirtualWorld(i, 0);

                    SetVehicleParamsEx(VehID, false, false, false, true, false, false, false);
                    RaceVehID ++;
                }
            }
            else if(EventoInfo[EventoTDM])
            {
                if(!Team)
                {
                    if(EventoInfo[EventoSkin][0] != 0)
                        SetPlayerSkin(i, EventoInfo[EventoSkin][0]);
                    if(EventoInfo[EventoNoFF])
                        SetPlayerTeam(i, 0);

    				SetPlayerInterior(i, EventoInfo[EventoInt]);
    		  		SetPlayerVirtualWorld(i, 0);
    				SafeSetPlayerPos(i, EventoInfo[EventoSpawn][0], EventoInfo[EventoSpawn][1], EventoInfo[EventoSpawn][2]);
                    Congelar(i);

                    EventoInfo[EventoTeam][i] = 0;
                    Team = true;
                }
                else
                {
                    if(EventoInfo[EventoSkin][1] != 0)
                        SetPlayerSkin(i, EventoInfo[EventoSkin][1]);
                    if(EventoInfo[EventoNoFF])
                        SetPlayerTeam(i, 1);

    				SetPlayerInterior(i, EventoInfo[EventoInt]);
    		  		SetPlayerVirtualWorld(i, 0);
    				SafeSetPlayerPos(i, EventoInfo[EventoSpawn2][0], EventoInfo[EventoSpawn2][1], EventoInfo[EventoSpawn2][2]);
                    Congelar(i);

                    EventoInfo[EventoTeam][i] = 1;
                    Team = false;
                }
            }
			if(EventoInfo[EventoColete]) SetPlayerArmour(i, 90.0);
			else SetPlayerArmour(i, 0.0);

	        SetPlayerHealth(i, 100);

            if(EventoInfo[EventoArmas])
		        for(new weapon = 0; weapon < 12; weapon ++)
			        if(EventoInfo[ArmaEvento][weapon] != 0)
			    		SafeGivePlayerWeapon(i, EventoInfo[ArmaEvento][weapon], 9999);

			SendClientMessage(i, COLOR_ADMIN, "[Evento]: Você foi puxado para o evento.");
        }
    }
    else
    {
    	foreach(new i: Player)
    	{
        	if(!EventoInfo[InscritoEvento][i])
                continue;

            EventoInfo[InscritoEvento][i] = false;
            noevento[i] = true;

      		ResetPlayerWeapons(i);
    		SetPlayerInterior(i,eventoint);
      		SetPlayerVirtualWorld(i, eventovw);
    		SafeSetPlayerPos(i, EventoDest[0],EventoDest[1],EventoDest[2]);
    		SetPlayerArmour(i, 90);
            SetPlayerHealth(i, 100);
    	    SafeGivePlayerWeapon(i, 24, 500);
    		SafeGivePlayerWeapon(i, 29, 1000);
    		SafeGivePlayerWeapon(i, 31, 1000);
    		SendClientMessage(i, COLOR_ADMIN, "[Evento]: Você foi puxado e equipado para o evento.");
    		Congelar(i);
        }
    }
	format(thestring, 128, "[Evento]: Todos os inscritos do evento foram puxados e equipados.");
	SendClientMessageToAll(COLOR_ADMIN,thestring);
	return true;
}

CMD:abrirteste(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(irteste)
	{
		irteste = 0;
        format(thestring, sizeof(thestring), "[Administração]:{008080} O administrador %s fechou o teste com %d pessoas dentro.", ReturnPlayer(playerid), dentro);
		SendClientMessageToAll(COLOR_ADMIN, thestring);
		dentro = 0;
		return true;
	}

	new lvl;
   	if(sscanf(params, "d", lvl) || (lvl < 1 || lvl > 6))
	   	return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}/abrirteste <nível mínimo(1-6)>");

	testelvl = lvl;

	foreach(new i:Player)
		noteste[i] = false;

	irteste = 1;
	format(thestring, sizeof(thestring), "[Administração]:{008080} O administrador %s abriu o teste. Nível requerido: %d. {FFFF00}/IrTeste", ReturnPlayer(playerid), testelvl);
	SendClientMessageToAll(COLOR_ADMIN, thestring);
	GetPlayerPos(playerid, TesteDest[0],TesteDest[1],TesteDest[2]);
	testeint = GetPlayerInterior(playerid);
	Player[playerid][pAtend] += 5;
	format(thestring, sizeof(thestring), "%s abriu um teste.",ReturnPlayer(playerid));
	WriteLog("Admins2", thestring);
	return true;
}

CMD:desabilitarpedagio(playerid)
{
	if(GetAdminLevel(playerid) < 6) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	if(PedagioAberto)
	{
		format(thestring, 256, "[Administração]:{008080} O administrador %s desabilitou todos os pedágios.", Player[playerid][pName]);
		SendClientMessageToAll(COLOR_ADMIN, thestring);
		PedagioAberto = false;
		return 1;
	}
	format(thestring, 256, "[Administração]:{008080} O administrador %s habilitou os pedágios.", Player[playerid][pName]);
	SendClientMessageToAll(COLOR_ADMIN, thestring);
	PedagioAberto = true;
	return 1;
}

CMD:inscreverevento(playerid)
{
    if(nobangu[playerid] == true)
    	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando no bangu.");
    if(evento == 0 && !g_e@b_checker)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nenhum evento em andamento.");
	if(EventoInfo[InscritoEvento][playerid] == true)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já se inscreveu no evento.");
    if(Player[playerid][pJailed] != 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está preso e não pode ir para o Evento.");
    if(PlayerInRace[playerid])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está em Corrida e não pode ir para o Evento.");

	//noevento[playerid] = true;
    EventoInfo[InscritoEvento][playerid] = true;
	Player_EventoCP[playerid] = 0;

	SendClientMessage(playerid, COLOR_CV, "Você se inscreveu no evento. Aguarde =)");
	format(thestring, 168, "[Evento]: O jogador %s se inscreveu para o evento. Use /inscreverevento para participar também!",Player[playerid][pName]);
	SendClientMessageToAll(COLOR_ADMIN,thestring);
	return true;
}

CMD:inscreverdesafio(playerid)
{
    if(nobangu[playerid] == true)
    	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando no bangu.");

    if(!g_e@b_checker)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nenhum desafio em andamento.");

    if(g_e@b_started)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Erro, o desafio ja começou!");

	if(g_e@autorizado[playerid] == true)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já se inscreveu no desafio.");

	g_e@autorizado[playerid] = true;
	Player_EventoCP[playerid] = 0;

	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você se inscreveu no desafio. Aguarde.");
	format(thestring, 168, "[Desafio]: %s se inscreveu para o desafio. Use /inscreverdesafio para ir também!",Player[playerid][pName]);
	SendClientMessageToAll(COLOR_RED,thestring);
	return true;
}

CMD:irteste(playerid)
{
    if(Player[playerid][pLevel] < testelvl)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem o nível mínimo.");

	if(nobangu[playerid] == true)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando no bangu.");

	if(irteste == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nenhum teste em andamento.");

    if(noteste[playerid] == true)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já está no teste.");

    if(Player[playerid][pJailed] != 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está preso e não pode ir para o Teste.");

   	dentro++;
   	ResetPlayerWeapons(playerid);
   	noteste[playerid] = true;
   	SetPlayerHealth(playerid, 100);
    SetPlayerInterior(playerid,testeint);
	SafeSetPlayerPos(playerid, TesteDest[0],TesteDest[1],TesteDest[2]);
	SendClientMessage(playerid, COLOR_GREY, "Você foi para o teste!");
	return true;
}

CMD:limparchat(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
    for(new a = 0; a < 50; a++)
		SendClientMessageToAll(0x33CCFFAA, "");
	return true;
}

CMD:limparfichaadm(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 5)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	WantedPoints[playerid] = 0;
	SendClientMessage(playerid, SERVER_INFO,"{FF0000}{FF0000}[Info]:{FFFFFF}{FFFFFF} Você limpou seu nível de procurado!");
	return true;
}

CMD:mark(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 3)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	GetPlayerPos(playerid, TelePos[playerid][0],TelePos[playerid][1],TelePos[playerid][2]);
	SendClientMessage(playerid, COLOR_GREY, "Teleporte marcado");
	return true;
}

CMD:irmark(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 3)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, TelePos[playerid][0],TelePos[playerid][1],TelePos[playerid][2]);
	}
	else
		SafeSetPlayerPos(playerid, TelePos[playerid][0],TelePos[playerid][1],TelePos[playerid][2]);

	SendClientMessage(playerid, COLOR_GREY, "Você foi teleportado! ");
	SetPlayerInterior(playerid,0);
	return true;
}

CMD:irmapa(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	if(ModoSA_Info[playerid][SA_MarkPos][2] == 0.0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem algo marcado no mapa.");

    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, ModoSA_Info[playerid][SA_MarkPos][0], ModoSA_Info[playerid][SA_MarkPos][1], ModoSA_Info[playerid][SA_MarkPos][2]+3);
	}
	else
	{
		SafeSetPlayerPos(playerid, ModoSA_Info[playerid][SA_MarkPos][0], ModoSA_Info[playerid][SA_MarkPos][1], ModoSA_Info[playerid][SA_MarkPos][2]+1);
	}
	SendClientMessage(playerid, COLOR_GREY, "Você foi teleportado! ");
	SetPlayerInterior(playerid, 0);
    SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

CMD:pos(playerid)
    return cmd_coordenadas(playerid);

CMD:coordenadas(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new Float:X,Float:Y,Float:Z,Float:R, V = GetPlayerVehicleID(playerid);
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    GetPlayerPos(playerid, X,Y,Z);
		GetPlayerFacingAngle(playerid, R);
	}
	else
	{
	    GetVehiclePos(V, X,Y,Z);
		GetVehicleZAngle(V, R);
	}
	format(thestring, sizeof(thestring), "Coordenadas : X = %f    Y = %f    Z = %f    R = %f", X, Y, Z, R);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
	return true;
}

CMD:irx(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    for(new i = 0; i < strlen(params); i++)
        if(params[i] == ',')
            params[i] = ' ';

    new Float:X,Float:Y,Float:Z, I, VW;
	if(sscanf(params, "fffD(-1)D(-1)", X, Y, Z, I, VW))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/IrX [X] [Y] [Z] (Int) (VW)");

    if(I != -1)
    {
        SetPlayerInterior(playerid, I);
        Player[playerid][pInt] = I;

        if(IsPlayerInAnyVehicle(playerid))
            LinkVehicleToInterior(GetPlayerVehicleID(playerid), I);
    }
    if(VW != -1)
    {
        SetPlayerVirtualWorld(playerid, VW);

        if(IsPlayerInAnyVehicle(playerid))
            SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), VW);
    }

	MovePlayer(playerid, X, Y, Z);
   	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você foi teleportado.");
	return true;
}

CMD:cobertura(playerid)
{
	if(PlayerToPoint(2.0,playerid,1805.9925,-1303.5415,125.7265))
	{
	    for(new i=82;i<92;i+=2)
			if(Player[playerid][pHouseKey] == i)
			    return SafeSetPlayerPos(playerid, 1795.0223,-1304.3663,131.7343);

		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem a chave da escada!");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está no último andar do prédio.");
	return true;
}

CMD:predio(playerid)
{
	if(PlayerToPoint(2.0,playerid,1795.0223,-1304.3663,131.7343))
	{
	    for(new i=82;i<92;i+=2)
			if(Player[playerid][pHouseKey] == i)
			    return SafeSetPlayerPos(playerid, 1805.9925,-1303.5415,125.7265);

        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem a chave da escada!");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na cobertura do prédio.");

	return true;
}

CMD:irboxe(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	/*SafeSetPlayerPos(playerid, 2234.4753, -1758.8731, 1103.8203);
	TogglePlayerControllable(playerid, false);
	SetTimerEx("Descongelar", 2000, false, "i", playerid);    */

    SafeSetPlayerPos(playerid, 760.6520, 0.0281, 1001.5942);
    SetPlayerInterior(playerid, 5);
    SetPlayerVirtualWorld(playerid, 0);
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você foi teleportado.");
	return 1;
}

CMD:irchilliad(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, -2233.5125,-1737.6565,480.8253);
	}
	else
	{
		SafeSetPlayerPos(playerid, -2233.5125,-1737.6565,480.8253);
		SetPlayerFacingAngle(playerid, 0.0);
	}
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você foi para o Monte Chilliad [Interior: 0]");
	SetPlayerInterior(playerid,0);
	Player[playerid][pInt] = 0;
    SetPlayerVirtualWorld(playerid, 0);
	return true;
}

CMD:irhotel(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 963.418762,2108.292480,1011.030273);
	}
	else
		SafeSetPlayerPos(playerid, 963.418762,2108.292480,1011.030273);

	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você foi teleportado.");
	SetPlayerInterior(playerid,1);
	Player[playerid][pInt] = 1;
    SetPlayerVirtualWorld(playerid, 0);
	return true;
}

CMD:irlv(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
	}
	else
		SafeSetPlayerPos(playerid, 1699.2,1435.1, 10.7);

	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você foi teleportado.");
	SetPlayerInterior(playerid,0);
	Player[playerid][pInt] = 0;
    SetPlayerVirtualWorld(playerid, 0);
	return true;
}

CMD:irsf(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
	}
	else
		SafeSetPlayerPos(playerid, -1417.0,-295.8,14.1);

	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você foi teleportado.");
	SetPlayerInterior(playerid,0);
	Player[playerid][pInt] = 0;
    SetPlayerVirtualWorld(playerid, 0);
	return true;
}

CMD:irafk(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
		SetVehiclePos(GetPlayerVehicleID(playerid), 1481.1074, -1789.7032, 156.7533);
	else
	{
		SafeSetPlayerPos(playerid, 1481.1074, -1789.7032, 156.7533);
		SetPlayerFacingAngle(playerid, 0.0);
	}
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você foi teleportado.");
	SetPlayerInterior(playerid, 0);
	Player[playerid][pInt] = 0;
    SetPlayerVirtualWorld(playerid, 0);
    SetCameraBehindPlayer(playerid);
    return 1;
}

CMD:irls(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
	}
	else
	{
		SafeSetPlayerPos(playerid, 1540.6992,-1674.5836,13.5511);
		SetPlayerFacingAngle(playerid, 90.0);
	}
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você foi teleportado.");
	SetPlayerInterior(playerid,0);
	Player[playerid][pInt] = 0;
    SetPlayerVirtualWorld(playerid, 0);
	return true;
}

CMD:irpref(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 1127.0536, -2036.8794, 69.8837);
	}
	else
		SafeSetPlayerPos(playerid, 1127.0536, -2036.8794, 69.8837);

	SetPlayerInterior(playerid,0);
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para a Prefeitura. [Interior: 0]");
    SetPlayerVirtualWorld(playerid, 0);
	return true;
}

CMD:iraero(playerid)
{
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 1917.5101,-2472.4839,13.5391);
	}
	else
		SafeSetPlayerPos(playerid, 1917.5101,-2472.4839,13.5391);

	SetPlayerInterior(playerid,0);
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para o Aeroporto. [Interior: 0]");
    SetPlayerVirtualWorld(playerid, 0);
	return true;
}

CMD:irammu(playerid)
{
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 1364.3282, -1279.7310, 13.5468);
	}
	else
		SafeSetPlayerPos(playerid, 1364.3282, -1279.7310, 13.5468);

	SetPlayerInterior(playerid,0);
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para a Ammu-Nation. [Interior: 0]");
    SetPlayerVirtualWorld(playerid, 0);
	return true;
}

CMD:irbangu(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) > 1)
		SafeSetPlayerPos(playerid, 245.2564,1859.9233,14.0840);
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando.");

	return true;
}

CMD:viajar(playerid)
{
	if(PlayerToPoint(2.0, playerid,1642.3903,-2238.2710,13.4977) || PlayerToPoint(2.0, playerid,1673.0880,1447.8702,10.7865) || PlayerToPoint(2.0, playerid,-1422.5396,-286.6204,14.1484))
	{
		new listitems[] = "1\tLos Santos(R$250)\n2\tSan Fierro(R$250)\n3\tLas Venturas(R$250)\n";
        ShowPlayerDialog(playerid,19,DIALOG_STYLE_LIST,"Lista de Cidades:",listitems,"Confirmar","Sair");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está no Aeroporto!");
	return true;
}

CMD:autoescola(playerid)
{
	if(PlayerToPoint(2.0, playerid, 1491.0194, 1305.7502, 1093.2963))
	{
		new listitems[] = "1\tR$500   Motorista\n2\tR$3500 Aérea\n3\tR$3000 Náutica\n4\tR$400   Pesca\n5\tR$1200 Porte de Armas\n";
        ShowPlayerDialog(playerid,33,DIALOG_STYLE_LIST,"Lista de Testes:",listitems,"Confirmar","Sair");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na Auto Escola!");

	return true;
}

CMD:tiroaoalvo(playerid)
{
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 302.60040, -134.87320, 1004.0625))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está no Local Correto.");

    new playersInTAA = 0;
    foreach(new i: Player)
        if(InTAA[i])
            playersInTAA ++;

    if(playersInTAA > 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Somente 3 Jogadores podem usar o Tiro ao Alvo ao mesmo tempo.");

    ShowPlayerDialog(playerid, 7783, DIALOG_STYLE_MSGBOX, "Tiro ao Alvo", "{FF0000}Tiro ao Alvo:\n\n- {FFFFFF}Preço: {009900}R$150\n{FFFFFF}Deseja entrar?", "Sim", "Não");
    return 1;
}

CMD:iniciartaa(playerid)
{
    if(!InTAA[playerid])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está no Tiro ao Alvo.");
    if(!IsPlayerInArea(playerid, 300.8358, -127.1740, 299.7490, -138.9240))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em uma Cabine.");

    GetPlayerPos(playerid, PosTAA[playerid][0], PosTAA[playerid][1], PosTAA[playerid][2]);
    TAAStarted[playerid] = GetTickCount();
    TAAHits[playerid] = 0;

    TAAStatus[playerid][taaShots] = 0;
    TAAStatus[playerid][taaMiss] = 0;
    TAAStatus[playerid][taaTargets] = 0;
    TAAStatus[playerid][taaBestTime] = GetTickCount();

    CreateTAATarget(playerid);
    MoveTAATarget(playerid);

    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Para sair apenas ande para fora da cabine.");
    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Se o seu Alvo Bugar, use /ProximoAlvo.");
    return 1;
}

CMD:proximoalvo(playerid)
{
    if(TAAStarted[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está no Tiro ao Alvo.");

    DestroyTAAObjects(playerid);
    CreateTAATarget(playerid);
    MoveTAATarget(playerid);

    TAAHits[playerid] = 0;
    TAAStatus[playerid][taaTargets] ++;
    return 1;
}

CMD:pegaremprego(playerid)
{
	if(PlayerToPoint(1.0, playerid,362.1283,173.5610,1008.3828))
	{
		if(Player[playerid][pJob] > 0)
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já tem um emprego. Para sair do seu emprego digite /desempregar");
		else if(Invite[playerid] == 1)
		    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você tem um convite pendente.");
		else
		{
			new listitems[] = "1\tDetetive\n2\tAdvogado\n3\tMecanico\n4\tLutador\n5\tTaxista\n6\tJornaleiro\n7\tCaminhoneiro\n8\tMedico\n9\tEntregador\n10\tMotorista de Onibus\n11\tEntregador De Pizza\n12\tLixeiro\n13\tAgente Funerário\n14\tTaxista Aereo\n";
			//new listitems[] = "1\tDetetive\n2\tAdvogado\n3\tMecanico\n4\tLutador\n5\tTaxista\n6\tCaminhoneiro\n7\tMedico\n8\tEntregador\n9\tMotorista de Onibus\n10\tEntregador De Pizza\n11\tLixeiro\n12\tAgente Funerário\n13\tTaxista Aereo\n";
           	ShowPlayerDialog(playerid,DIALOG_EMPREGO,DIALOG_STYLE_LIST,"Lista de Empregos:",listitems,"Confirmar","Sair");
		}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na prefeitura!");

	return true;
}

CMD:tunar(playerid)
{
	if(PlayerToPoint(10.0, playerid,343.8566,-1809.3798,4.5179))
	{
		new listitems[] = "1\tRodas\n2\tNitro\n3\tSuspensao\n";
		ShowPlayerDialog(playerid,5,DIALOG_STYLE_LIST,"Lista de peças",listitems,"Confirmar","Sair");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na oficina!");

	return true;
}

CMD:pintar(playerid, params[])
{
    if(PlayerToPoint(10.0, playerid,343.8566,-1809.3798,4.5179))
	{
		if(GetPlayerGP(playerid) < 100)
		{
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não possui dinheiro suficiente.");
			return true;
		}
		if(IsPlayerInAnyVehicle(playerid))
  		{
			if(IsPlayerInAnyVehicle(playerid))
			{
			    new v = GetPlayerVehicleID(playerid);
          		new color1,color2;
				if(sscanf(params, "dd", color1, color2))
					return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/pintar <cor id 1> <cor id 2>");
				if(color1 < 0 || color1 > 300 || color2 < 0 || color2> 300)
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Só exitem cores de 0 a 300.");

                new cV = GetOwnedVehicleID(v);
                if(cV != INVALID_VEHICLE_ID)
                {
    				CarInfo[cV][cColor1] = color1;
    				CarInfo[cV][cColor2] = color2;
                }
                else
                {
    				VehicleInfo[v][vColor1] = color1;
    				VehicleInfo[v][vColor2] = color2;
                }

                ChangeVehicleColor(v, color1, color2);
	 			SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você pintou seu carro por R$100!");
	    		GivePlayerGP(playerid, -100);
                GiveBizMoney(Biz_Mecanica, 100);
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode pintar esse veículo!");
				return true;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um veículo!");
			return true;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na oficina!");
	}
	return true;
}

CMD:pintura(playerid, params[])
{
    if(PlayerToPoint(10.0, playerid,343.8566,-1809.3798,4.5179))
	{
		if(GetPlayerGP(playerid) < 200)
		{
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não possui dinheiro suficiente.");
			return true;
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
		    new v = GetPlayerVehicleID(playerid);
       		new pjb;
			if(sscanf(params, "d", pjb))
				return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/pintura <0/1/2/3>");
			if(pjb < 0 || pjb > 3)
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Só existem pinturas de 0 a 3.");
			ChangeVehiclePaintjob(v, pjb);

            new cV = GetOwnedVehicleID(v);
            if(cV != INVALID_VEHICLE_ID)
                CarInfo[cV][cPaintjob] = pjb;
            else
                VehicleInfo[v][vPaintjob] = pjb;

 			SendClientMessage(playerid, COLOR_YELLOW, "Oficina: Você adicionou uma pintura especial no seu carro por R$200!");
    		GivePlayerGP(playerid,-200);
            GiveBizMoney(Biz_Mecanica, 200);
    		return true;
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um veículo!");
			return true;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na oficina!");
	}
	return true;
}

CMD:botarnocarro(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 3)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new giveid, testcar;
	if(sscanf(params, "ud", giveid, testcar))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/botarnocarro <player> <carro>");

	SafePutPlayerInVehicle(giveid, testcar, 0);
	SendClientMessage(giveid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você foi teleportado para um veiculo.");
	return true;
}

CMD:dirigircarro(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new testcar;
	if(sscanf(params, "d", testcar))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/dirigircarro <carro>");

	SafePutPlayerInVehicle(playerid, testcar, 0);
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Agora você está dirigindo o veículo!");
	return true;
}

CMD:puxar(playerid, params[])
{
	if(IsACrime(playerid) || IsACop(playerid))
	{
        if(!IsPlayerInAnyVehicle(playerid))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um Veiculo.");

    	new giveid;
		if(sscanf(params, "u", giveid))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/puxar <id/nick>");

	    if(IsPlayerConnected(giveid))
	    {
	        if(giveid != INVALID_PLAYER_ID)
	        {
	            if(Hospital[giveid] > 0)
	                return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador está no hospital.");
                if(!ProxDetectorS(5.0, playerid, giveid))
                    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está perto do Jogador.");

	            SendClientMessage(playerid, COLOR_YELLOW, "Você está distraindo o jogador. Ele não pode se mover por 5 segundos, ou você não conseguirá empurrá-lo!");
			    GetPlayerPos(giveid,LastPos[0],LastPos[1],LastPos[2]);
				SetTimerEx("PuxarTimer", 5000, false, "i", giveid, GetPlayerVehicleID(playerid));
			}
		}
		else
		    SendClientMessage(playerid, COLOR_YELLOW, "O jogador está offline!");
    }
	else
	    SendClientMessage(playerid, COLOR_YELLOW, "Você não tem permissão para usar este comando!");

	return true;
}

CMD:carint(playerid)
{
	if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
	    new tmpcar = GetPlayerVehicleID(playerid);
	    LinkVehicleToInterior(tmpcar, GetPlayerInterior(playerid));
	}
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você linkou o veículo ao seu interior.");
	return true;
}

CMD:ircorrida(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 1022.74243164,-3987.14062500,6.39652252);
		LinkVehicleToInterior(tmpcar, 0);
	}
	else
		SafeSetPlayerPos(playerid, 1022.74243164,-3987.14062500,6.39652252);

	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para Corrida Mortal. [Interior: 1]");
	SetPlayerInterior(playerid,0);
	return true;
}

CMD:irin(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
		LinkVehicleToInterior(tmpcar, 1);
	}
	else
		SafeSetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);

	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para Irin. [Interior: 1]");
	SetPlayerInterior(playerid,1);
	return true;
}

CMD:irderby(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, -1394.8242,1244.8990,1039.8672);
	}
	else
		SafeSetPlayerPos(playerid, -1394.8242,1244.8990,1039.8672);

	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para Derby. [Interior: 16]");
	SetPlayerInterior(playerid,16);
	return true;
}

CMD:irin2(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 3)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 1497.5189,-1541.0199,13.5498);
		SetPlayerInterior(playerid,0);
	}
	else
		SafeSetPlayerPos(playerid, 1497.5189,-1541.0199,13.5498);

	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para Irin2. [Interior: 0]");
	SetPlayerInterior(playerid,0);
	return true;
}

CMD:irrc(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, -975.975708,1060.983032,1345.671875);
	}
	else
		SafeSetPlayerPos(playerid, -975.975708,1060.983032,1345.671875);

	SetPlayerInterior(playerid,10);
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para RC. [Interior: 10]");
	return true;
}

CMD:irvice(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, -1401.829956,107.051300,1032.273437);
	}
	else
		SafeSetPlayerPos(playerid, -1401.829956,107.051300,1032.273437);

	SetPlayerInterior(playerid,1);
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para Vice. [Interior: 1]");
	return true;
}

CMD:irtrack(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, -1399.23, -218.98, 1043.14);
	}
	else
		SafeSetPlayerPos(playerid, -1399.23, -218.98, 1043.14);

	SetPlayerInterior(playerid,7);
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para Track. [Interior: 7]");
	return true;
}

CMD:irstad(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, -1435.75, -652.664, 1054.94);
	}
	else
		SafeSetPlayerPos(playerid, -1435.75, -652.664, 1054.94);

	SetPlayerInterior(playerid,4);
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para Stad. [Interior: 4]");
	return true;
}

CMD:irkick(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 	-1410.72,1591.16,1052.53);
	}
	else
		SafeSetPlayerPos(playerid, 	-1410.72,1591.16,1052.53);

	SetPlayerInterior(playerid,14);
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para Irkick. [Interior: 14]");
	return true;
}

CMD:irblood(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, -1394.20,987.62,1023.96 );
	}
	else
		SafeSetPlayerPos(playerid, -1394.20,987.62,1023.96 );

	SetPlayerInterior(playerid,15);
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para Blood. [Interior: 15]");
	return true;
}

CMD:irmar(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 390.5475,-2122.3059,-28.257);
	}
	else
		SafeSetPlayerPos(playerid, 390.5475,-2122.3059,-28.257);

	SetPlayerInterior(playerid,0);
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para Irmar. [Interior: 0]");
	return true;
}

CMD:irauto(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 961.0444,-916.7402,45.7656);
	}
	else
		SafeSetPlayerPos(playerid, 961.0444,-916.7402,45.7656);

	SetPlayerInterior(playerid, 0);
    SetPlayerVirtualWorld(playerid, 0);
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para Auto-escola. [Interior: 0]");
	return true;
}

CMD:irnavio(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    MovePlayer(playerid, -2311.1381, 1544.6846, 18.7734);
	SetPlayerInterior(playerid, 0);
    SetPlayerVirtualWorld(playerid, 0);

    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para o Navio. [Interior: 0]");
    return 1;
}

CMD:irjet(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, 1.71875, 30.4062, 1200.34);
	}
	else
		SafeSetPlayerPos(playerid, 1.71875, 30.4062, 1200.34);

	SetPlayerInterior(playerid,1);
    SetPlayerVirtualWorld(playerid, 0);
	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você teleportou para Jet. [Interior: 1]");
	return true;
}

CMD:antiab(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 3)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
    if(!antiab)
	{
		antiab = 1;
		SendClientMessage(playerid, COLOR_GREY, "Anti-AB ativado.");
		return true;
	}
	else if(antiab)
	{
		antiab = 0;
        SendClientMessage(playerid, COLOR_GREY, "Anti-AB desativado.");
		return true;
	}
	return true;
}

CMD:pegarcarro(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new plo;
	if(sscanf(params, "d", plo))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/pegarcarro <carro>");

	new Float:plocx,Float:plocy,Float:plocz;
	GetPlayerPos(playerid, plocx, plocy, plocz);
	SetVehiclePos(plo,plocx,plocy+4, plocz);
	return true;
}

CMD:abastecerveh(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new fuelAmount = 0;
    for(new c = 1; c < sizeof(VehicleInfo); c++)
    {
        fuelAmount += GasMax - VehicleInfo[c][vGas];
		VehicleInfo[c][vGas] = GasMax;
		VehicleInfo[c][vGasTemp] = 0;
    }
    GiveBizMoneyEx(Biz_Posto, floatround(fuelAmount * BizPostoPrice));

	format(thestring, sizeof(thestring), "[Administração]: %s abasteceu todos os veículos.",ReturnPlayer(playerid));
   	BroadCast(COLOR_ADMIN, thestring);
    return true;
}

CMD:abasteceremp(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    for(new Biz = 0; Biz < MAX_BIZ; Biz++)
	{
		BizzInfo[Biz][bProducts] = BizzInfo[Biz][bMaxProducts];
	}
	OnPropUpdate();
	format(thestring, sizeof(thestring), "[Administração]: %s abasteceu todos as Empresas.",ReturnPlayer(playerid));
   	BroadCast(COLOR_ADMIN, thestring);
    return true;
}

CMD:pjveh(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 2)
		return SendClientMessage(playerid, COLOR_RED, "Você não tem permissão para usar este comando!");
    new color1;
	if(sscanf(params, "d", color1))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/pjveh <0/1/2/3>");
	if(color1 < 0 || color1 > 3)
		return SendClientMessage(playerid, COLOR_RED, "Use de 0/3.");
	CarColor[playerid][0] = color1;
	ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), color1);
	return true;
}

CMD:corveh(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 2)
		return SendClientMessage(playerid, COLOR_RED, "Você não tem permissão para usar este comando!");
    new color1, color2;
	if(sscanf(params, "dd", color1, color2))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/corveh <cor 1> <cor 2>");
	if(color1 < 0 || color1 > 300 || color2 < 0 || color2 > 300)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Só existem cores de 0 a 300.");
	CarColor[playerid][0] = color1;
	CarColor[playerid][1] = color2;
	ChangeVehicleColor(GetPlayerVehicleID(playerid), color1, color2);
	return true;
}

CMD:rodas(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(IsPlayerInAnyVehicle(playerid))
		ShowPlayerDialog(playerid,13, DIALOG_STYLE_LIST, thestring, "Shadow\nMega\nRimshine\nWires\nClassic\nTwist\nCutter\nSwitch\nGrove\nImport\nDollar\nTrance\nAtomic\nAhab\nVirtual\nAccess", "Selecionar", "Sair");
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um veículo!");
	return true;
}

CMD:dararma(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 3)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new id, id2, ammo;
    if(sscanf(params, "udd", id, id2, ammo))
		return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}Uso: /dararma <id> <id da arma> <balas>");

	if(ammo > 9999)
	    return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} 9999 balas já está de bom tamanho, né?");

	if(!IsPlayerConnected(id))
		return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	if(id2==-1||id2==19||id2==20||id2==21||id2==0||id2==44||id2==45)
		return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} A arma escolhida é inválida.");

	new string[128],WeaponName[24];
	GetWeaponName(id2,WeaponName,24);

	if(id2 == 18)
	 	WeaponName = "Molotov";

	format(string, 128,"{FF0000}[Info]:{FFFFFF} O %s %s te deu uma %s com %d balas.",AccountName(playerid),Player[playerid][pName],WeaponName,ammo);
	SendClientMessage(id,SERVER_INFO,string);
	format(string, 128,"{FF0000}[Info]:{FFFFFF} Você deu para %s (id: %d) uma %s com %d balas.",Player[id][pName],id,WeaponName,ammo);
	SendClientMessage(playerid,SERVER_INFO,string);
	SafeGivePlayerWeapon(id,id2,ammo);
 	return true;
}

CMD:spawn(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/spawn <id/nick>");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
            if(Player[giveid][pJailed] > 0)
            	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este jogador é um procurado.");
            if(Player[playerid][pPaluguelkey] == 255 && Player[playerid][pHouseKey] == 255)
	            SetPlayerVirtualWorld(giveid, 0);

            Incasa[giveid] = Player[giveid][pHouseKey];
			SpawnNecessario(giveid);
			Hospital[giveid] = 0;
			format(thestring, sizeof(thestring), "-OperServ-: %s moveu %s para o ponto de spawn.", Player[playerid][pName], Player[giveid][pName]);
            ABroadCast(COLOR_BARRAS,thestring,1);
            SendClientMessage(giveid, COLOR_WHITE, "Você foi movido para o ponto de spawn.");
		}
	}
	return true;
}

CMD:tirarhosp(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/tirarhosp <id/nick>");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
            Hospital[giveid] = 0;
            Player[giveid][pMorto] = 0;
            SpawnNecessario(giveid);
            format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} %s tirou %s do hospital.", Player[playerid][pName], Player[giveid][pName]);
            ABroadCast(COLOR_ORANGE,thestring,1);
        }
    }
	return true;
}

CMD:hp(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new giveid;
	new Float:health;
	if(sscanf(params, "uf", giveid, health))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/hp <id/nick> <hp>");

	if(health < 0)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não aceita números menores que 0.");
	if(health == 0 && Player[playerid][pAdmin] != 7 && Player[giveid][pAdmin] == 7)
        giveid = playerid;

    if(IsPlayerConnected(giveid))
        if(giveid != INVALID_PLAYER_ID)
			SetPlayerHealth(giveid, health);

    format(thestring, sizeof(thestring), "-OperServ-: %s setou o HP de %s para %d.", Player[playerid][pName], Player[giveid][pName], floatround(health));
	ABroadCast(COLOR_BARRAS,thestring,1);
	return true;
}

CMD:verhp(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/verhp <id/nick>");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
            new Float:health;
			GetPlayerHealth(giveid, health);
			format(thestring, sizeof(thestring), "Jogador: %s, Vida: %.1f", Player[giveid][pName], health);
			SendClientMessage(playerid, COLOR_YELLOW, thestring);
		}
	}
	return true;
}

CMD:colete(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new giveid, health;
    if(sscanf(params, "ud", giveid, health))
        return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/colete <id/nick> <colete>");

	if(IsPlayerConnected(giveid))
		if(giveid != INVALID_PLAYER_ID)
			SetPlayerArmour(giveid, health);

    format(thestring, sizeof(thestring), "-OperServ-: %s setou o Colete de %s para %d.", Player[playerid][pName], Player[giveid][pName], floatround(health));
    ABroadCast(COLOR_BARRAS,thestring,1);
	return true;
}

CMD:kmhmultiplier(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new Float:value;
	if(sscanf(params, "f", value))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/KMHMultiplier <Valor>");

    KHM_MULTIPLIER = value;

    SendClientMessage(playerid, -1, "Comando Executado.");
	return true;
}

CMD:clima(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 3)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new weather;
	if(sscanf(params, "d", weather))
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/clima <id do clima>");
	if(weather < 0||weather > 45)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} ID do tempo entre 1 a 45.");

	SetWeather(weather);
	CurrentWeather = weather;
	// ChangeWeather(weather);
	format(thestring, sizeof(thestring), "[Administração]: Novo Clima (%d).", weather);
	BroadCast(COLOR_ADMIN, thestring);
	return true;
}

CMD:cash(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new giveid, money;
	if(sscanf(params, "ud", giveid, money))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/cash <id/nick> <quantia>");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
			Player[giveid][pBLSCash] = 0;
			ConsumingMoney[giveid] = 1;
			GivePlayerCash(giveid, money);
			format(thestring, sizeof(thestring), "-OperServ-: O administrador %s setou para {FFFF00}C$%d{96D742} o cash de %s.", Player[playerid][pName], money, Player[giveid][pName]);
			ABroadCast(COLOR_BARRAS, thestring, 1);
			WriteLog("admins", thestring);
		}
	}
	AtualizarTextDraws(playerid);
	return true;
}

CMD:dinheiro(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new giveid, money;
	if(sscanf(params, "ud", giveid, money))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/dinheiro <id/nick> <quantia>");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
			Player[giveid][pMoney] = 0;
			ConsumingMoney[giveid] = 1;
			GivePlayerGP(giveid, money);
			format(thestring, sizeof(thestring), "-OperServ-: O administrador %s setou para {009900}R$%d{96D742} o dinheiro de %s.", Player[playerid][pName], money, Player[giveid][pName]);
			ABroadCast(COLOR_BARRAS,thestring,1);
			WriteLog("admins", thestring);
		}
	}
	return true;
}

CMD:bolsa(playerid, params[])
{
   	new giveid, money;
	if(sscanf(params, "ud", giveid, money))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/bolsa <id/nick> <valor>");
	if(Player[playerid][pLeader] != 7)
		return SendClientMessage(playerid, COLOR_GREY, "Apenas o prefeito pode usar este comando.");
    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
            if(playerid == giveid)
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode dar bolsa para você mesmo.");

			if(Player[giveid][pLevel] > 4)
			{
				SendClientMessage(playerid, COLOR_GREY, "A bolsa é reservada para novatos.");
				SendClientMessage(giveid, COLOR_GREY, "A bolsa é reservada para novatos.");
				return true;
			}
			if(ReduceTime[giveid] == 1)
  			{
  			    SendClientMessage(playerid, COLOR_GREY, "Este jogador já recebeu a bolsa.");
		       	SendClientMessage(giveid, COLOR_GREY, "Você já recebeu a bolsa.");
	            return true;
			}
			if(money > GetOrgMoney(TEAM_PREF))
                return SendClientMessage(playerid, COLOR_GREY, "O cofre não tem todo esse dinheiro.");
            if(money > 1500)
                return SendClientMessage(playerid, COLOR_GREY, "O valor máximo é R$1500.");
			if(ProxDetectorS(8.0, playerid, giveid))
			{
                ConsumingMoney[giveid] = 1;
				GivePlayerGP(giveid, money);
				format(thestring, sizeof(thestring),"O prefeito %s lhe deu o bolsa família.", Player[playerid][pName]);
				SendClientMessage(giveid, COLOR_ORANGE, thestring);
				format(thestring, sizeof(thestring),"Você deu o bolsa família para %s.", Player[giveid][pName]);
				SendClientMessage(playerid, COLOR_ORANGE, thestring);
				GiveOrgMoney(TEAM_PREF, -money);
				format(thestring, sizeof(thestring), "O prefeito %s deu R$%d de bolsa para %s", Player[playerid][pName], money, Player[giveid][pName]);
				WriteLog("bolsa", thestring);
	        }
	        else
			    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Aproxime-se mais.");
		}
	}
	return true;
}

CMD:dardinheiro(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new giveid, money;
	if(sscanf(params, "ud", giveid, money))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/dardinheiro <id/nick> <valor>");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
            ConsumingMoney[giveid] = 1;
			GivePlayerGP(giveid, money);
			format(thestring, sizeof(thestring), "-OperServ-: O administrador %s deu {009900}R$%d{96D742} para %s.", Player[playerid][pName], money, Player[giveid][pName]);
			ABroadCast(COLOR_BARRAS, thestring, 1);
			WriteLog("admins", thestring);
		}
	}
	return true;
}

CMD:darcash(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

  	new giveid, money;
	if(sscanf(params, "ud", giveid, money))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/darcash <id/nick> <valor>");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
            ConsumingMoney[giveid] = 1;
			GivePlayerCash(giveid, money);
			format(thestring, sizeof(thestring), "-OperServ-: O administrador %s deu {FFFF00}C$%d{96D742} para %s", Player[playerid][pName], money, Player[giveid][pName]);
			ABroadCast(COLOR_BARRAS,thestring,1);
			WriteLog("admins", thestring);
		}
	}
	AtualizarTextDraws(playerid);
	return true;
}

CMD:bug(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
   	if(isnull(params))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/bug <texto>");

	format(thestring, 256, "Bug: %s - (%s)\n", params, Player[playerid][pName]);
	ABroadCast(COLOR_GREY, thestring, 1);
	WriteLog("bug", thestring);
    SendClientMessage(playerid, SERVER_INFO, "[SUCESSO] Bug reportado.");

	utf8encode(thestring, thestring);
	SendMessageToJamelao(thestring);
    return true;
}

CMD:god(playerid, params[])
{
    if(Player[playerid][pAdmin] < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando.");

	new giveid;
	/*if(TempoEntre(GodTime[playerid]) < 30000)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você so pode usar /God de 30 em 30 Segundos.");*/

	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/god <id/nick>");
	if(!IsPlayerConnected(playerid))
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador está offline.");
    if(TempoEntre(GodTime2[giveid]) < 60000)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este player já foi denunciado no último minuto.");
	if(Player[playerid][AllowGod])
	{
		if(giveid != INVALID_PLAYER_ID)
	    {
	        if(Player[giveid][pMorto] == 1)
	            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador está no hospital.");

            format(thestring, sizeof(thestring), "%s acusou %s[ID %d] de estar usando God.", ReturnPlayer(playerid),ReturnPlayer(giveid),giveid);
            ABroadCast(COLOR_LIGHTRED,thestring,1);
            GodCarID[giveid] = -1;
			GodTime[playerid] = GetTickCount();
            GodTime2[giveid] = GetTickCount();
            noab2[playerid] = true;
            CheckGod(giveid);
            new time[3];
            GetTimeFix(time[0], time[1], time[2]);
            new strin[128];
            format(strin, 128, "[%d:%d:%d] %s >> %s", time[0], time[1], time[2], ReturnPlayer(playerid), ReturnPlayer(giveid));
            WriteLog("cmd_god", strin);
        }
	}
    return true;
}

CMD:fogo(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/fogo <id/nick>");

	new Float:burnx, Float:burny, Float:burnz;

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
            if(Player[giveid][pAdmin] >= 6)
			    giveid = playerid;

			GetPlayerPos(giveid,burnx, burny, burnz);
			CreateExplosion(burnx+1,burny+1,burnz+2, 12, 1);
			format(thestring, sizeof(thestring), "Bot_BLS: %s colocou fogo em %s",Player[playerid][pName],Player[giveid][pName]);
			ABroadCast(COLOR_LIGHTRED, thestring, 1);
		}
	}
	return true;
}

CMD:bofetada(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 3)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
   	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/bofetada <id/nick>");
	new Float:slx, Float:sly, Float:slz;
    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
			if(Player[giveid][pAdmin] >= 6)
				giveid = playerid;

			GetPlayerPos(giveid, slx, sly, slz);
			SafeSetPlayerPos(giveid, slx, sly, slz+10);
			PlayerPlaySound(giveid, 1130, slx, sly, slz+5);
			FormatLog("admins", "%s deu uma bofetada em %s",Player[playerid][pName],  Player[giveid][pName]);
			format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} %s levou uma bofetada de %s",Player[giveid][pName] ,Player[playerid][pName]);
			ABroadCast(SERVER_INFO,thestring,1);
		}
	}
	return true;
}

CMD:tirararmas(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
   	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/tirararmas <id/nick>");
    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
			ResetPlayerWeapons(giveid);
			format(thestring, sizeof(thestring), "Você tirou as armas de %s", Player[giveid][pName]);
			SendClientMessage(playerid, COLOR_YELLOW,thestring);
		}
	}
	return true;
}

CMD:mutar(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	new giveid, time;
	if(!sscanf(params, "ud", giveid, time))
	{
	    if(Player[giveid][MuteTime] == 0)
	    {
		    if(time < 1)
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Tempo precisa ser maior que um minuto.");
			Player[giveid][MuteTime] = time*60;
			FormatLog("admins", "%s mutou %s por %d minuto(s)",Player[playerid][pName], Player[giveid][pName], time);
			format(thestring, sizeof(thestring), "[ATENÇÃO]: O jogador %s foi mutado pelo administrador %s - Tempo: %d minuto(s)",Player[giveid][pName] ,Player[playerid][pName], time);
			BroadCast(COLOR_ORANGE,thestring);
			MuteUpdate(giveid);
		}
		else
		    SendClientMessage(playerid, COLOR_RED,"[ERRO]:{FFFFFF} O jogador já está mutado.");
	}
	else if(!sscanf(params, "u", giveid))
	{
	    if(Player[giveid][MuteTime] > 0)
	    {
		    Player[giveid][MuteTime] = 0;
			FormatLog("admins", "%s desmutou %s",Player[playerid][pName], Player[giveid][pName]);
			format(thestring, sizeof(thestring), "[ATENÇÃO]: %s foi descalado por %s",Player[giveid][pName] ,Player[playerid][pName]);
			ABroadCast(COLOR_OOC,thestring,1);
		}
		else
		    SendClientMessage(playerid, COLOR_RED,"[ERRO]:{FFFFFF} O jogador não está mutado.");
	}
    else
	{
	    SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/mutar <id/nick> <tempo>");
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}Você pode usar sem tempo para desmutar.");
	}
	return true;
}

CMD:kick(playerid, params[])
{
    if(Player[playerid][pAdmin] < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new giveid, result[64];
	if(sscanf(params, "us[64]", giveid, result))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/kick <id/nick> <motivo>");
	if(Player[giveid][pAdmin] >= 6 && giveid != playerid)
	{
	    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Ih palhação, não se deve tentar kikar administradores masters.");
		SetTimerEx("OnKick",500,false, "i", playerid);
	}
	if(IsPlayerConnected(giveid))
	{
	    if(giveid != INVALID_PLAYER_ID || IsPlayerNPC(giveid))
	    {
			if(strcmp(result,"nick", true) == 0)
			{
				result = "Nick impróprio";
			}
			if(strcmp(result,"an", true) == 0)
			{
				result = "Anúncio Indevido";
			}
			format(thestring, sizeof(thestring), "[ATENÇÃO]: O jogador %s foi kickado pelo administrador %s. Motivo: %s", Player[giveid][pName], Player[playerid][pName], result);
			SendClientMessageToAll(COLOR_OOC, thestring);
			format(thestring, sizeof(thestring), "%s kickado por %s, razão: %s", Player[giveid][pName], Player[playerid][pName], result);
			WriteLog("admins", thestring);
			format(thestring, sizeof(thestring), "Você foi kickado por %s. Motivo: %s", Player[playerid][pName], result);
			SendClientMessage(giveid, COLOR_RED, thestring);
			SetTimerEx("OnKick",500,false, "i", giveid);
			return true;
		}
	}
	else
	{
		format(thestring, sizeof(thestring), "%d não é um jogador ativo.", giveid);
		SendClientMessage(playerid, COLOR_GREY, thestring);
	}
	return true;
}

CMD:skick(playerid, params[])
{
    if(Player[playerid][pAdmin] < 4 && !IsPlayerAdmin(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/skick <id/nick>");
	if(Player[giveid][pAdmin] >= 6)
	{
	    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Palhação, cai fora vai!");
	    return Kick(playerid);
	}
	if(IsPlayerConnected(giveid))
	{
	    if(giveid != INVALID_PLAYER_ID || IsPlayerNPC(giveid))
	    {
	        format(thestring, 128, "{FF0000}[Info]:{FFFFFF} %s deu skick em %s", Player[playerid][pName], Player[giveid][pName]);
		 	ABroadCast(SERVER_INFO,thestring,1);
	        Kick(giveid);
	    }
	}
	else
	{
		format(thestring, sizeof(thestring), "%d não é um jogador ativo.", giveid);
		SendClientMessage(playerid, COLOR_GREY, thestring);
	}
	return true;
}

CMD:tiraraviso(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(Player[playerid][pAdmin] < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new giveid, result[64];
	if(sscanf(params, "us[64]", giveid, result))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/tiraraviso <id/nick> <motivo>");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
            if(Player[giveid][pWarns] == 0)
                return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não possui nenhum aviso.");
			if(Player[giveid][pWarns] == 1)
				format(Player[giveid][pAviso1],2," ");
			else
				format(Player[giveid][pAviso2],2," ");

			Player[giveid][pWarns] -= 1;
			format(thestring, sizeof(thestring), "Você retirou uma advertência sobre %s, razão: %s", Player[giveid][pName], (result));
			SendClientMessage(playerid, COLOR_ORANGE, thestring);
			format(thestring, sizeof(thestring), " %s retirou 1 aviso de %s, razão: %s", Player[playerid][pName], Player[giveid][pName], (result));
			SendClientMessageToAll(COLOR_ORANGE, thestring);
			WriteLog("Admins2",thestring);
			return true;
		}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:veravisos(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/veravisos <id/nick>");

	if(IsPlayerConnected(giveid))
    {
        format(thestring,32,"Aviso 1 - %s", Player[giveid][pAviso1]);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
        format(thestring,32,"Aviso 2 - %s", Player[giveid][pAviso2]);
        SendClientMessage(playerid, COLOR_YELLOW, thestring);
    }
    return true;
}

CMD:aviso(playerid, params[])
{
    if(Player[playerid][pAdmin] < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new result[64], giveid;
	if(sscanf(params, "us[64]", giveid, result))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/aviso <id/nick> <motivo>");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID || IsPlayerNPC(giveid))
        {
            if(Player[giveid][pAdmin] >= 6)
			{
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Palhação, cai fora vai!");
			    return Kick(playerid);
			}

			Aviso(giveid,playerid,result);
			return true;
		}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:punir(playerid, params[])
{
	if(Player[playerid][pAdmin] < 1)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

  	new giveid, tmp2[32];
	if(sscanf(params, "us[32]", giveid, tmp2))
	{
        SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Punir <Id/Nome> <Motivo> {FFFF00}(/Punicoes)");
        SendClientMessage(playerid, COLOR_YELLOW, "[Motivos]: {FFFFFF}DM, DB, RK, Cheat, Surf, ACSM, Abuso, AN, AntiRP, Joy, Ofensa, Evento, Flood, Trote");
        return 1;
	}


    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID || IsPlayerNPC(giveid))
        {
    	    if(strcmp(tmp2,"dm", true) != 0
			&& strcmp(tmp2,"abuso", true) != 0
			&& strcmp(tmp2,"db", true) != 0
			&& strcmp(tmp2,"surf", true) != 0
			&& strcmp(tmp2,"cheat", true) != 0
			&& strcmp(tmp2,"acsm", true) != 0
			&& strcmp(tmp2,"rk", true) != 0
			&& strcmp(tmp2,"an", true) != 0
			&& strcmp(tmp2,"antirp", true) != 0
			&& strcmp(tmp2,"joy", true) != 0
			&& strcmp(tmp2,"ofensa", true) != 0
			&& strcmp(tmp2,"evento", true) != 0
			&& strcmp(tmp2,"flood", true) != 0
			&& strcmp(tmp2,"trote", true) != 0)
			{
		        SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Punir <Id/Nome> <Motivo> {FFFF00}(/Punicoes)");
		        SendClientMessage(playerid, COLOR_YELLOW, "[Motivos]: {FFFFFF}DM, DB, RK, Cheat, Surf, ACSM, Abuso, AN, AntiRP, Joy, Ofensa, Evento, Flood, Trote");
		        return 1;
			}
			else if(Player[giveid][pAdmin] >= 6)
	        {
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Palhação, cai fora vai!");
			    return Kick(playerid);
			}

			/*new Motivo[64];
			if(!strcmp(tmp2,"dm", true)) Motivo = "DM";
			else if(!strcmp(tmp2,"abuso", true)) Motivo= "Abuso de Bugs";
			else if(!strcmp(tmp2,"an", true)) Motivo= "AN Indevido";
			else if(!strcmp(tmp2,"antirp", true)) Motivo= "Anti-RP";
			else if(!strcmp(tmp2,"joy", true)) Motivo= "JoyPad";
			else if(!strcmp(tmp2,"ofenca", true)) Motivo= "Ofença";
			else if(!strcmp(tmp2,"evento", true)) Motivo= "Matar em Evento";
			else if(!strcmp(tmp2,"flood", true)) Motivo= "Flood";
			else if(!strcmp(tmp2,"trote", true)) Motivo= "Trote";*/

			Punir(giveid, playerid, tmp2);
			return 1;
		}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
	return true;
}

CMD:congelar(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/congelar <id/nick>");
	if(GetAdminLevel(giveid) >= 6 && giveid != playerid)
		return SendClientMessage(playerid, COLOR_YELLOW, "Administradores não podem ser congelados.");
    if(IsPlayerConnected(giveid) && giveid != INVALID_PLAYER_ID)
    {
       	Congelar(giveid);
		format(thestring, sizeof(thestring), "%s congelou %s",Player[playerid][pName], Player[giveid][pName]);
		WriteLog("admins",thestring);
		format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} %s foi congelado por %s.",Player[giveid][pName] ,Player[playerid][pName]);
		ABroadCast(SERVER_INFO,thestring,1);
  	}
	return true;
}

CMD:descongelar(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/descongelar <id/nick>");

    if(IsPlayerConnected(giveid))
    {
        if(giveid != INVALID_PLAYER_ID)
        {
    	   	Descongelar(giveid);
			format(thestring, sizeof(thestring), "%s descongelou %s",Player[playerid][pName],  Player[giveid][pName]);
			WriteLog("admins",thestring);
			format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} %s foi descongelado por %s.",Player[giveid][pName] ,Player[playerid][pName]);
			ABroadCast(SERVER_INFO,thestring,1);
		}
	}
	return true;
}

CMD:salvarcontas(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(IsPlayerConnected(playerid))
    {
        if(GetAdminLevel(playerid) >= 7)
		{
			SendClientMessage(playerid, SERVER_INFO, "Todas as contas foram salvas.");
			SaveServer();
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	}
	return true;
}

/*CMD:cam(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
      	new tmp;
		if(sscanf(params, "d", tmp))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/cam <1/2/3/4>");

		Unspec[playerid][sCam] = tmp;
		format(thestring, sizeof(thestring), "Mudando para câmera %d",Unspec[playerid][sCam]);
		SendClientMessage(playerid, COLOR_GREY, thestring);
	}
	return true;
} */

CMD:doadores(playerid)
{
	SendClientMessage(playerid, COLOR_ORANGE, "|-Life Simulation doadores presentes-|");
	foreach(new i: Player)
	{
	    if(Player[i][pDonateRank] > 0)
	    {
			if(DoadorChat[i] == 1)
	        	format(thestring, 128, "(%d) %s (No chat)",i ,Player[i][pName]);
		    else
		        format(thestring, 128, "(%d) %s ",i ,Player[i][pName]);

			SendClientMessage(playerid, COLOR_GREEN, thestring);
	    }
    }
    return true;
}

CMD:vips(playerid)
{
    new strin[500];
    strin="{FFFFFF}";
    foreach(Player, i){
        if(Player[i][pDonateRank] > 0){
            new rank[24];
            switch(Player[i][pDonateRank]){
                case 0: continue;
                case 1: rank = "VIP Bronze";
                case 2: rank = "VIP Prata";
                case 3: rank = "VIP Gold";
            }
            new buffer[64];
            format(buffer, 64, " %s - %s\n", Player[i][pName], rank);
            strcat(strin, buffer);
        }
    }
    if(isnull(strin)) strin="Nenhum VIP online.";
    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Brasil Life Simulation - VIPs Online", strin, "Fechar","");
    return 1;
}

CMD:admins(playerid)
{
    new adms[1024] = "";
	//format(adms, sizeof(adms), "%s", "");
	foreach(new i: Player)
	{
	    if(Player[i][pAdmin] > 0 && !HiddenAdmin[i])
	    {
   			if(AdminAfk[i] == 1)
				format(adms, 1024, "%s\n{228B22}''(%d) %s (%s)'' >> Ausente", adms, i ,Player[i][pName], AccountName(i));
			else if(AdminDuty[i] == MODOSA_JOGANDO)
			    format(adms, 1024, "%s\n{FF0000}''(%d) %s (%s)'' >> Jogando", adms, i ,Player[i][pName], AccountName(i));
			else if(AdminDuty[i] == MODOSA_TRABALHANDO)
			    format(adms, 1024, "%s\n{FFFF00}''(%d) %s (%s)'' >> Trabalhando", adms, i ,Player[i][pName], AccountName(i));
			else if(AdminDuty[i] == MODOSA_RPG)
			    format(adms, 1024, "%s\n{0066FF}''(%d) %s (%s)'' >> Modo RPG", adms, i ,Player[i][pName], AccountName(i));
		}
	}
	ShowPlayerDialog(playerid, 279, DIALOG_STYLE_MSGBOX, "Life Simulation ADM's On-Line", adms, "Fechar", "");
	return true;
}

CMD:esconderadmin(playerid)
{
    if(Player[playerid][pAdmin] < 7)
        return 0;

    if(HiddenAdmin[playerid])
    {
        HiddenAdmin[playerid] = false;
        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Agora você está visivel no /Admins.");
        return 1;
    }
    HiddenAdmin[playerid] = true;
    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Agora você não está visivel no /Admins.");
    return 1;
}

CMD:ignorarrelato(playerid, params[])
{
    if(Player[playerid][pAdmin] < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    new pId;
    if(sscanf(params, "u", pId))
        return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/IgnorarRelato <PlayerID/Nome>");
    if(!IsPlayerConnected(pId))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador Não Conectado.");

    if(!IgnorarRelato[playerid][pId])
    {
        IgnorarRelato[playerid][pId] = true;

        format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Agora você não receberá relatos de %s.", Player[pId][pName]);
        SendClientMessage(playerid, SERVER_INFO, thestring);
        return 1;
    }
    IgnorarRelato[playerid][pId] = false;

    format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Agora você receberá relatos de %s.", Player[pId][pName]);
    SendClientMessage(playerid, SERVER_INFO, thestring);
    return 1;
}

/*CMD:Operadores(playerid)
{
    new hlps[1024] = "";
	//format(hlps, sizeof(hlps), "%s", "");
	foreach(new i: Player)
	{
	    if(Player[i][pAdmin] == 1)
	    {
   			if(AdminAfk[i] == 1)
				format(hlps, 1024, "%s\n{228B22}''(%d) %s'' >> Ausente", hlps, i ,Player[i][pName], AccountName(i));
			else if(AdminDuty[i] == MODOSA_JOGANDO)
			    format(hlps, 1024, "%s\n{FF0000}''(%d) %s'' >> Jogando", hlps, i ,Player[i][pName], AccountName(i));
			else if(AdminDuty[i] == MODOSA_TRABALHANDO)
			    format(hlps, 1024, "%s\n{FFFF00}''(%d) %s'' >> Trabalhando", hlps, i ,Player[i][pName], AccountName(i));
			else if(AdminDuty[i] == MODOSA_RPG)
			    format(hlps, 1024, "%s\n{0066FF}''(%d) %s'' >> Modo RPG", hlps, i ,Player[i][pName], AccountName(i));
		}
	}
	ShowPlayerDialog(playerid, 279, DIALOG_STYLE_MSGBOX, "Life Simulation ADM's On-Line", hlps, "Fechar", "");
	return true;
} */

CMD:lideres(playerid)
{
	SendClientMessage(playerid, COLOR_ORCHID, "|-Life Simulation líderes presentes-|");
	foreach(new i: Player)
	{
        if(Player[i][pLeader] == 0) continue;
	    else if(Player[i][pLeader] == TEAM_PM){format(thestring, 128, "[%d] Policia Militar: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_PM, thestring);}
		else if(Player[i][pLeader] == TEAM_PF){format(thestring, 128, "[%d] Polícia Federal: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_PF, thestring);}
		else if(Player[i][pLeader] == TEAM_FA){format(thestring, 128, "[%d] Forcas Armadas: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_FA, thestring);}
		else if(Player[i][pLeader] == TEAM_BOMBE){format(thestring, 128, "[%d] Bombeiros: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_MEDICOS, thestring);}
		else if(Player[i][pLeader] == TEAM_BALLAS){format(thestring, 128, "[%d] Front Yard Ballas: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_BALLAS, thestring);}
		else if(Player[i][pLeader] == TEAM_GROOVE){format(thestring, 128, "[%d] Grove Street Families: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_GROOVE, thestring);}
		else if(Player[i][pLeader] == TEAM_PREF){format(thestring, 128, "[%d] Prefeito: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_PREF, thestring);}
		else if(Player[i][pLeader] == TEAM_HITMAN){format(thestring, 128, "[%d] Hitman: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_HITMAN, thestring);}
		else if(Player[i][pLeader] == TEAM_SANEWS){format(thestring, 128, "[%d] Reporter: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_SANEWS, thestring);}
		//else if(Player[i][pLeader] == TEAM_LOWRIDERS){format(thestring, 128, "[%d] Lowrider: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_LOWRIDERS, thestring);}
		//else if(Player[i][pLeader] == TEAM_HAMAS){format(thestring, 128, "[%d] Hamas: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_HAMAS, thestring);}
		else if(Player[i][pLeader] == TEAM_VAGOS){format(thestring, 128, "[%d] Los Santos Vagos: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_VAGOS, thestring);}
		else if(Player[i][pLeader] == TEAM_BIKERS){format(thestring, 128, "[%d] Black Pistons: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_PISTONS, thestring);}
		else if(Player[i][pLeader] == TEAM_ANGELS){format(thestring, 128, "[%d] Hell Angels: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_ANGELS, thestring);}
		else if(Player[i][pLeader] == TEAM_AZTECAS){format(thestring, 128, "[%d] Varrio Los Aztecas: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_AZTECAS, thestring);}
		else if(Player[i][pLeader] == TEAM_RUSSA){format(thestring, 128, "[%d] Máfia Russa: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_RUSSA, thestring);}
		else if(Player[i][pLeader] == TEAM_YAKUZA){format(thestring, 128, "[%d] Mafia Yakuza: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_YAKUZA, thestring);}
		//else if(Player[i][pLeader] == TEAM_DRIFTERS){format(thestring, 128, "[%d] Drifters: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_DRIFTERS, thestring);}
		//else if(Player[i][pLeader] == TEAM_CV){format(thestring, 128, "[%d] Comando Vermelho: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_CV, thestring);}
		//else if(Player[i][pLeader] == TEAM_PCC){format(thestring, 128, "[%d] PCC: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_PCC, thestring);}
	    else if(Player[i][pLeader] == TEAM_BOPE){format(thestring, 128, "[%d] BOPE: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_BOPE, thestring);}
	    else if(Player[i][pLeader] == TEAM_ALQAEDA){format(thestring, 128, "[%d] Al-Qaeda: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_ALQAEDA, thestring);}
	    //else if(Player[i][pLeader] == TEAM_PCIVIL){format(thestring, 128, "[%d] Policia Civil: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_PCIVIL, thestring);}
	    //else if(Player[i][pLeader] == TEAM_KINGS){format(thestring, 128, "[%d] King's: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_KINGS, thestring);}
/*        else if(Player[i][pLeader] == TEAM_ROCAM){format(thestring, 128, "[%d] ROCAM: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_KINGS, thestring);}
        else if(Player[i][pLeader] == TEAM_FT){format(thestring, 128, "[%d] Força Tática: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_KINGS, thestring);}*/
  }
	return true;
}

CMD:advogados(playerid)
{
	SendClientMessage(playerid, COLOR_ORCHID, "|-Life Simulation Adovgados Presentes-|");
	foreach(new i: Player)
	{
	    if(Player[i][pJob] == ADVOGADO)
	    {
			format(thestring, 128, "[%d] Advogado {FF0000}%s {FFFFFF}| Contato: {FF0000}%d{FFFFFF}.", i, Player[i][pName], Player[i][pPnumber]);
			SendClientMessage(playerid, 0xFFFFFFFF, thestring);
	    }
	}
	return true;
}


CMD:sublideres(playerid)
{
	SendClientMessage(playerid, COLOR_ORCHID, "|-Life Simulation sub-líderes presentes-|");
	foreach(new i: Player)
	{
		if(Player[i][pRank] == 5)
		{
		    if(Player[i][pMember] == TEAM_PM){format(thestring, 128, "[%d] Policia Militar: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_PM, thestring);}
			else if(Player[i][pMember] == TEAM_PF){format(thestring, 128, "[%d] Polícia Federal: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_PF, thestring);}
			else if(Player[i][pMember] == TEAM_FA){format(thestring, 128, "[%d] Forcas Armadas: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_FA, thestring);}
			else if(Player[i][pMember] == TEAM_BOMBE){format(thestring, 128, "[%d] Bombeiros: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_MEDICOS, thestring);}
			else if(Player[i][pMember] == TEAM_BALLAS){format(thestring, 128, "[%d] Front Yard Ballas: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_BALLAS, thestring);}
			else if(Player[i][pMember] == TEAM_GROOVE){format(thestring, 128, "[%d] Grove Street Families: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_GROOVE, thestring);}
			else if(Player[i][pMember] == TEAM_PREF){format(thestring, 128, "[%d] Prefeito: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_PREF, thestring);}
			else if(Player[i][pMember] == TEAM_HITMAN){format(thestring, 128, "[%d] Hitman: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_HITMAN, thestring);}
			else if(Player[i][pMember] == TEAM_SANEWS){format(thestring, 128, "[%d] Reporter: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_SANEWS, thestring);}
			//else if(Player[i][pMember] == TEAM_LOWRIDERS){format(thestring, 128, "[%d] Lowrider: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_OOC, thestring);}
			//else if(Player[i][pMember] == TEAM_HAMAS){format(thestring, 128, "[%d] Hamas: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_OOC, thestring);}
			else if(Player[i][pMember] == TEAM_VAGOS){format(thestring, 128, "[%d] Los Santos Vagos: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_VAGOS, thestring);}
			else if(Player[i][pMember] == TEAM_BIKERS){format(thestring, 128, "[%d] Black Pistons: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_PISTONS, thestring);}
			else if(Player[i][pMember] == TEAM_ANGELS){format(thestring, 128, "[%d] Hell Angels: %s | Contato: %d.", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_ANGELS, thestring);}
			else if(Player[i][pMember] == TEAM_AZTECAS){format(thestring, 128, "[%d] Varrio Los Aztecas: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_AZTECAS, thestring);}
			else if(Player[i][pMember] == TEAM_RUSSA){format(thestring, 128, "[%d] Máfia Russa: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_RUSSA, thestring);}
			else if(Player[i][pMember] == TEAM_YAKUZA){format(thestring, 128, "[%d] Mafia Yakuza: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_YAKUZA, thestring);}
			//else if(Player[i][pMember] == TEAM_DRIFTERS){format(thestring, 128, "[%d] Drifters: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_OOC, thestring);}
			//else if(Player[i][pMember] == TEAM_CV){format(thestring, 128, "[%d] Comando Vermelho: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_OOC, thestring);}
			//else if(Player[i][pMember] == TEAM_PCC){format(thestring, 128, "[%d] PCC: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_OOC, thestring);}
		    else if(Player[i][pMember] == TEAM_BOPE){format(thestring, 128, "[%d] BOPE: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_BOPE, thestring);}
		    else if(Player[i][pMember] == TEAM_ALQAEDA){format(thestring, 128, "[%d] Al-Qaeda: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_ALQAEDA, thestring);}
		    //else if(Player[i][pMember] == TEAM_PCIVIL){format(thestring, 128, "[%d] Policia Civil: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_OOC, thestring);}
		    //else if(Player[i][pMember] == TEAM_KINGS){format(thestring, 128, "[%d] King's: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_OOC, thestring);}
/*            else if(Player[i][pMember] == TEAM_ROCAM){format(thestring, 128, "[%d] ROCAM: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_OOC, thestring);}
            else if(Player[i][pMember] == TEAM_FT){format(thestring, 128, "[%d] Forças Táticas: %s | Contato: %d", i, Player[i][pName], Player[i][pPnumber]);SendClientMessage(playerid, COLOR_OOC, thestring);}*/
		}
	}
	return true;
}

CMD:vp(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) > 0)
	{
		foreach(new i: Player)
		{
       	    new vid = GetPlayerVehicleID(i);
			if(GetVehicleModel(vid) == 520 || GetVehicleModel(vid) == 425 || GetVehicleModel(vid) == 432 || GetVehicleModel(vid) == 447)
			{
			    format(thestring, 128, "(%d) %s |%d|", i, Player[i][pName],vid);
				SendClientMessage(playerid, COLOR_BLUE, thestring);
			}
		}
	}
	return true;
}

CMD:hosp(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) > 0)
	{
		foreach(new i: Player)
		{
       	    if(PlayerToPoint(8.0, i, 2003.4028,2288.0383,1011.1256))
       	    {
			    format(thestring, 128, "Jogador: (%d) %s", i, Player[i][pName]);
				SendClientMessage(playerid, COLOR_BLUE, thestring);
			}
		}
	}
	return true;
}

CMD:rcs(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 3)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando. ");

    SendClientMessage(playerid, COLOR_ORANGE," RC Bandit = 441.   RC Baron = 464   RC Raider = 465   RC Goblin = 501   RC Tiger = 564   RC Cam = 594    ");
	return true;
}

CMD:daremprego(playerid, params[])//setprof
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 5)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
    if(IsPlayerConnected(playerid))
    {
       	new giveid, profid;
		if(sscanf(params, "ud", giveid, profid))
		{
			SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/daremprego <id/nick> <id do emprego>");
			return cmd_emp(playerid);
		}
		if(IsPlayerConnected(giveid))
		{
			if(giveid != INVALID_PLAYER_ID)
			{
				Player[giveid][pJob] = profid;
				format(thestring, sizeof(thestring), "O emprego de %s foi editado para %s (%d)", Player[giveid][pName],JobsNames[profid], profid);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				format(thestring, sizeof(thestring), "O admin %s editou seu emprego para %s (%d)", Player[playerid][pName], JobsNames[profid], profid);
				SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
			}
		}
	}
 	return true;
}

CMD:darvip(playerid, params[])
{
    if(!IsPlayerAdmin(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new giveid, vip;
	if(sscanf(params, "ud", giveid, vip))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/DarVip <ID/Nome> <Nivel>");

    if(!IsPlayerConnected(giveid) || giveid == INVALID_PLAYER_ID)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador Não Conectado.");

	if(vip < 0 || vip > 3)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nivel vai de 0 à 3.");

	if(vip != 0)
	{
	    new Dia, Mes, Ano;
	    getdate(Ano, Mes, Dia);
		Ano += 1;

	    Player[giveid][pDonateRank] = vip;
	    Player[giveid][pVIP] = PegarIntDia(Dia, Mes, Ano);

		new VIP[24];
		if(Player[giveid][pDonateRank] == 1)
		{
	    	VIP = "{B03060}VIP Bronze";
		}
		else if(Player[giveid][pDonateRank] == 2)
		{
		    VIP = "{BEBEBE}VIP Prata";
		}
		else if(Player[giveid][pDonateRank] == 3)
		{
		    VIP = "{FFD700}VIP Ouro";
		}

		format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Você deu %s{FFFFFF} para %s por 1 Ano.", VIP, Player[giveid][pName]);
		SendClientMessage(playerid, SERVER_INFO, thestring);
		format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} %s te deu %s{FFFFFF} por 1 Ano.", Player[playerid][pName], VIP);
		SendClientMessage(giveid, SERVER_INFO, thestring);
		format(thestring, sizeof(thestring), "%s deu vip %d para %s.", Player[playerid][pName], vip, Player[giveid][pName]);
		WriteLog("EditLog", thestring);
		return 1;
	}
    Player[giveid][pDonateRank] = 0;
    Player[giveid][pVIP] = 0;

	format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Você tirou o Vip de %s.",Player[giveid][pName]);
	SendClientMessage(playerid, SERVER_INFO, thestring);
	format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} %s tirou seu Vip.", Player[playerid][pName]);
	SendClientMessage(giveid, SERVER_INFO, thestring);
	format(thestring, sizeof(thestring), "%s tirou o vip de %s.", Player[playerid][pName], vip);
	WriteLog("EditLog", thestring);
	return true;
}

CMD:pararanim(playerid)
{
    new Float:Velocity[3];
    GetPlayerVelocity(playerid, Velocity[0], Velocity[1], Velocity[2]);
    if(Velocity[2] < 0 || NoHospital[playerid] > 0)
        return SendClientMessage(playerid, COLOR_WHITE, "Você não pode usar este comando agora.");
    else
       	ClearAnimations(playerid);

    return true;
}

CMD:habilidades(playerid, params[]) return cmd_habilidade(playerid, params);

CMD:habilidade(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        new x_nr[6];
		if(sscanf(params, "s[6]", x_nr))
		{
			SendClientMessage(playerid, COLOR_WHITE, "|__________________ Habilidades __________________|");
			SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/habilidade <número>");
	  		SendClientMessage(playerid, COLOR_GREY, "| 1: Detetive            7: Mecânico");
	  		SendClientMessage(playerid, COLOR_GREY, "| 2: Advogado               8: Vendedor de Carros");
	  		SendClientMessage(playerid, COLOR_GREY, "| 3: Prostituta                9: Boxeador");
	  		SendClientMessage(playerid, COLOR_GREY, "| 4: Vendedor de Drogas		  10: Pesca");
	  		SendClientMessage(playerid, COLOR_GREY, "| 5: Ladrão de Carros");
	  		SendClientMessage(playerid, COLOR_GREY, "| 6: Repórter");
			SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________|");
			return true;
		}
	    if(strcmp(x_nr,"1", true) == 0)//Detective
		{
		    new level = Player[playerid][pDetSkill];
			if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Detetive está Level = 1"); format(thestring, sizeof(thestring), "Você precisa encontrar mais %d pessoas para subir de Nível", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Detetive está Level = 2."); format(thestring, sizeof(thestring), "Você precisa encontrar mais %d pessoas para subir de Nível", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Detetive está Level = 3."); format(thestring, sizeof(thestring), "Você precisa encontrar mais %d pessoas para subir de Nível", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Detetive está Level = 4."); format(thestring, sizeof(thestring), "Você precisa encontrar mais %d pessoas para subir de Nível", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Detetive está = 5."); }
		}
		else if(strcmp(x_nr,"2", true) == 0)//Lawyer
		{
		    new level = Player[playerid][pLawSkill];
			if(level >= 0 && level <= 20) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Advogado está Level = 1."); format(thestring, sizeof(thestring), "Você precisa libertar mais %d pessoas para subir de Nível", 20 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 21 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Advogado está Level = 2."); format(thestring, sizeof(thestring), "Você precisa libertar mais %d pessoas para subir de Nível", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Advogado está Level = 3."); format(thestring, sizeof(thestring), "Você precisa libertar mais %d pessoas para subir de Nível", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Advogado está Level = 4."); format(thestring, sizeof(thestring), "Você precisa libertar mais %d pessoas para subir de Nível", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 201) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Advogado está Level = 5."); }
		}
		else if(strcmp(x_nr,"3", true) == 0)//Whore
		{
		    new level = Player[playerid][pSexSkill];
			if(level >= 0 && level <= 20) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Prostituta está Level = 1."); format(thestring, sizeof(thestring), "Você precisa ter Sexo com mais %d para subir de Nível", 20 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 21 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Prostituta está Level = 2."); format(thestring, sizeof(thestring), "Você precisa ter Sexo com mais %d para subir de Nível", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Prostituta está Level = 3."); format(thestring, sizeof(thestring), "Você precisa ter Sexo com mais %d para subir de Nível", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Prostituta está Level = 4."); format(thestring, sizeof(thestring), "Você precisa ter Sexo com mais %d para subir de Nível", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 201) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Prostituta está Level = 5."); }
		}
		else if(strcmp(x_nr,"4", true) == 0)//Drugs Dealer
		{
		    new level = Player[playerid][pDrugsSkill];
			if(level >= 0 && level <= 10000) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Vendedor de Drogas está Level = 1."); format(thestring, sizeof(thestring), "Você precisa vender drogas mais %dg de drogas para subir de Nível", 10000 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level > 10000  && level <= 25000) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Vendedor de Drogas está Level = 2."); format(thestring, sizeof(thestring), "Você precisa vender drogas mais %dg de drogas para subir de Nível", 25000 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level > 25000 && level <= 50000) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Vendedor de Drogas está Level = 3."); format(thestring, sizeof(thestring), "Você precisa vender drogas mais %dg de drogas para subir de Nível", 50000 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level > 50000 && level <= 100000) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Vendedor de Drogas está Level = 4."); format(thestring, sizeof(thestring), "Você precisa vender drogas mais %dg de drogas para subir de Nível", 100000 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level > 100000) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Vendedor de Drogas está Level = 5."); }
		}
		else if(strcmp(x_nr,"5", true) == 0)//Car Jacker
		{
		    new level = Player[playerid][pJackSkill];
			if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Ladrão de Carros está Level = 1."); format(thestring, sizeof(thestring), "Você precisa roubar mais %d carros para subir de Nível", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Ladrão de Carros está Level = 2."); format(thestring, sizeof(thestring), "Você precisa roubar mais %d carros para subir de Nível", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Ladrão de Carros está Level = 3."); format(thestring, sizeof(thestring), "Você precisa roubar mais %d carros para subir de Nível", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Ladrão de Carros está Level = 4."); format(thestring, sizeof(thestring), "Você precisa roubar mais %d carros para subir de Nível", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Ladrão de Carros está = 5."); }
		}
		else if(strcmp(x_nr,"6", true) == 0)//News Repórter
		{
		    new level = Player[playerid][pNewsSkill];
			if(level >= 0 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Repórter está Level = 1."); format(thestring, sizeof(thestring), "Você precisa usar /noticias mais %d vezes para subir de Nível", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Repórter está Level = 2."); format(thestring, sizeof(thestring), "Você precisa usar /noticias mais %d vezes para subir de Nível", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Repórter está Level = 3."); format(thestring, sizeof(thestring), "Você precisa usar /noticias mais %d vezes para subir de Nível", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 401 && level <= 800) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Repórter está Level = 4."); format(thestring, sizeof(thestring), "Você precisa usar /noticias mais %d vezes para subir de Nível", 800 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 801) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Repórter está Level = 5."); }
		}
		else if(strcmp(x_nr,"7", true) == 0)//Car Mechanic
		{
		    new level = Player[playerid][pMechSkill];
			if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Mecânico está Level = 1."); format(thestring, sizeof(thestring), "Você precisa concertar/abastecer mais %d vezes para subir de Nível", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Mecânico está Level = 2."); format(thestring, sizeof(thestring), "Você precisa concertar/abastecer mais %d vezes para subir de Nível", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Mecânico está Level = 3."); format(thestring, sizeof(thestring), "Você precisa concertar/abastecer mais %d vezes para subir de Nível", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Mecânico está Level = 4."); format(thestring, sizeof(thestring), "Você precisa concertar/abastecer mais %d vezes para subir de Nível", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Mecânico está Level = 5."); }
		}
		else if(strcmp(x_nr,"8", true) == 0)//Car Dealer
		{
		    new level = Player[playerid][pCarSkill];
			if(level >= 0 && level <= 10) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Vendedor de Carros está Level = 1."); format(thestring, sizeof(thestring), "Você precisa vender mais %d carros para subir de Nível", 10 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 11 && level <= 20) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Vendedor de Carros está Level = 2."); format(thestring, sizeof(thestring), "Você precisa vender mais %d carros para subir de Nível", 20 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 21 && level <= 40) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Vendedor de Carros está Level = 3."); format(thestring, sizeof(thestring), "Você precisa vender mais %d carros para subir de Nível", 40 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 41 && level <= 70) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Vendedor de Carros está Level = 4."); format(thestring, sizeof(thestring), "Você precisa vender mais %d carros para subir de Nível", 70 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 71) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Vendedor de Carros está Level = 5."); }
		}
		else if(strcmp(x_nr,"9", true) == 0)//Boxer
		{
		    new level = Player[playerid][pBoxSkill];
			if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Boxeador está Level = 1."); format(thestring, sizeof(thestring), "Você precisa vencer mais %d partidas para subir de Nível", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Boxeador está Level = 2."); format(thestring, sizeof(thestring), "Você precisa vencer mais %d partidas para subir de Nível", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Boxeador está Level = 3."); format(thestring, sizeof(thestring), "Você precisa vencer mais %d partidas para subir de Nível", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Boxeador está Level = 4."); format(thestring, sizeof(thestring), "Você precisa vencer mais %d partidas para subir de Nível", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade como Boxeador está Level = 5."); }
		}
		else if(strcmp(x_nr,"10", true) == 0)//Fishing
		{
		    new level = Player[playerid][pFishSkill];
			if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade em Pesca está Level = 1."); format(thestring, sizeof(thestring), "Você precisa pescar mais %d peixes para subir de Nível", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 51 && level <= 250) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade em Pesca está Level = 2."); format(thestring, sizeof(thestring), "Você precisa pescar mais %d peixes para subir de Nível", 250 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 251 && level <= 500) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade em Pesca está Level = 3."); format(thestring, sizeof(thestring), "Você precisa pescar mais %d peixes para subir de Nível", 500 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 501 && level <= 999) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade em Pesca está Level = 4."); format(thestring, sizeof(thestring), "Você precisa pescar mais %d peixes para subir de Nível", 1000 - level); SendClientMessage(playerid, COLOR_YELLOW, thestring); }
			else if(level >= 1000) { SendClientMessage(playerid, COLOR_YELLOW, "Sua habilidade em Pesca está Level = 5."); }
		}
		else
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Número Inválido.");
	}
	return true;
}

CMD:licenciartodas(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(IsPlayerConnected(playerid))
    {
       	new giveid;
		if(sscanf(params, "u", giveid))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/licenciartodas <id/nick>");

		if(GetAdminLevel(playerid) >= 4)
		{
		    if(IsPlayerConnected(giveid))
		    {
		        if(giveid != INVALID_PLAYER_ID)
		        {
            		Player[giveid][pCarLic] = 1;
					Player[giveid][pCarLicPoints] = 0;
		            Player[giveid][pFlyLic] = 1;
		            Player[giveid][pBoatLic] = 1;
		            Player[giveid][pFishLic] = 1;
		            Player[giveid][pGunLic] = 1;
		            SendClientMessage(giveid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Um admin te deu todas as licenças.");
		            SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você deu todas as licenças.");
				}
			}
		}
	}
    return true;
}

CMD:licenciar(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(IsPlayerConnected(playerid))
    {
        if(GetAdminLevel(playerid) > 4)
        {
            new x_nr[16], giveid;
			if(sscanf(params, "s[16]u", x_nr, giveid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/licenciar <nome> <id/nick>");
			    SendClientMessage(playerid, COLOR_WHITE, "Nomes: terrestre, aerea, nautica, pesca, armas");
				return true;
			}
			if(strcmp(x_nr,"terrestre", true) == 0)
			{
  				if(IsPlayerConnected(giveid))
				{
				    if(giveid != INVALID_PLAYER_ID)
				    {
			            format(thestring, sizeof(thestring), "Você deu uma licença terrestre a %s",Player[giveid][pName]);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				        format(thestring, sizeof(thestring), "O instrutor %s lhe deu uma licença terrestre.",Player[playerid][pName]);
				        SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
				        Player[giveid][pCarLic] = 1;
				        Player[giveid][pCarLicPoints] = 0;
				        return true;
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
				    return true;
				}
			}
			else if(strcmp(x_nr,"aerea", true) == 0)
			{
				if(IsPlayerConnected(giveid))
				{
				    if(giveid != INVALID_PLAYER_ID)
				    {
			            format(thestring, sizeof(thestring), "Você deu uma licença aérea a %s",Player[giveid][pName]);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				        format(thestring, sizeof(thestring), "O instrutor %s lhe deu uma licença aérea.",Player[playerid][pName]);
				        SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
				        Player[giveid][pFlyLic] = 1;
				        return true;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
				    return true;
				}
			}
			else if(strcmp(x_nr,"nautica", true) == 0)
			{
				if(IsPlayerConnected(giveid))
				{
				    if(giveid != INVALID_PLAYER_ID)
				    {
			            format(thestring, sizeof(thestring), "Você deu uma licença náutica a %s.",Player[giveid][pName]);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				        format(thestring, sizeof(thestring), "O instrutor %s lhe deu uma licença náutica.",Player[playerid][pName]);
				        SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
				        Player[giveid][pBoatLic] = 1;
				        return true;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "Jogador Offline.");
				    return true;
				}
			}
			else if(strcmp(x_nr,"pesca", true) == 0)
			{
				if(IsPlayerConnected(giveid))
				{
				    if(giveid != INVALID_PLAYER_ID)
				    {
			            format(thestring, sizeof(thestring), "Você deu uma licença de pesca a %s.",Player[giveid][pName]);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				        format(thestring, sizeof(thestring), "O instrutor %s lhe deu uma licença de pesca.",Player[playerid][pName]);
				        SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
				        Player[giveid][pFishLic] = 1;
				        return true;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "Jogador Offline.");
				    return true;
				}
			}
			else if(strcmp(x_nr,"armas", true) == 0)
			{
				if(IsPlayerConnected(giveid))
				{
				    if(giveid != INVALID_PLAYER_ID)
				    {
			            format(thestring, sizeof(thestring), "Você deu uma licença de armas a %s.",Player[giveid][pName]);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				        format(thestring, sizeof(thestring), "O instrutor %s lhe deu uma licença de armas.",Player[playerid][pName]);
				        SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
				        Player[giveid][pGunLic] = 1;
				        return true;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado!");
				    return true;
				}
			}
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um tem permissão para usar este comando!");
            return true;
        }
    }
    return true;
}

CMD:admincam(playerid, params[])
{
    if(GetAdminLevel(playerid) < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando.");

    if(!strcmp(params, "Sair", true))
    {
        if(Unspec[playerid][sNum] == -1)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está vendo uma Camera.");

        SafeSetPlayerPos(playerid, Unspec[playerid][Coords][0], Unspec[playerid][Coords][1], Unspec[playerid][Coords][2]);
        SetPlayerVirtualWorld(playerid, Unspec[playerid][sPvw]);
        SetPlayerInterior(playerid, Unspec[playerid][sPint]);

        Descongelar(playerid);
    	SetCameraBehindPlayer(playerid);

        Player[playerid][pLocal] = Unspec[playerid][sLocal];

        Unspec[playerid][sNum] = -1;
        Unspec[playerid][sArea] = 0;
        return 1;
    }

	new number;
	if(sscanf(params, "d", number))
	{
		SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/AdminCam <Número> ou /AdminCam Sair");
		return true;
	}
	if(number < 1 || number > 2)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O número só pode ser entre 1 e 2.");

	if(Unspec[playerid][sNum] == -1)
    {
        GetPlayerPos(playerid, Unspec[playerid][Coords][0], Unspec[playerid][Coords][1], Unspec[playerid][Coords][2]);
        Unspec[playerid][sPint] = GetPlayerInterior(playerid);
        Unspec[playerid][sPvw] = GetPlayerVirtualWorld(playerid);
        Unspec[playerid][sLocal] = Player[playerid][pLocal];
    }
    Unspec[playerid][sNum] = number;

	Congelar(playerid);
	if(number == 1)
	{
		SetPlayerInterior(playerid,1);
		SetPlayerCameraPos(playerid,2002.6595,2284.1914,1012.5668);
		SetPlayerCameraLookAt(playerid,2003.4644,2288.8337,1011.1256);
		SafeSetPlayerPos(playerid,2003.3408,2287.8298,1014.3624);
	}//DP
    else if(number == 2)
	{
		SetPlayerInterior(playerid,6);
		SetPlayerCameraPos(playerid,262.8993,76.0259,1003.1171);
		SetPlayerCameraLookAt(playerid,265.3147,78.6520,1001.0391);
		SafeSetPlayerPos(playerid,262.9715,77.6275,1006.3545);
	}//suibidapref
	return true;
}

CMD:radar(playerid, params[])
{
    if(!IsPlayerConnected(playerid))
        return 1;
    if(!IsACop(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Policial.");
	if(!IsAtMonitor(playerid) && Unspec[playerid][sArea] != 1)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um Monitor.");

    if(!strcmp(params, "Sair", true))
    {
        if(Unspec[playerid][sNum] == -1)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está vendo um Radar.");

        SafeSetPlayerPos(playerid, Unspec[playerid][Coords][0], Unspec[playerid][Coords][1], Unspec[playerid][Coords][2]);
        SetPlayerVirtualWorld(playerid, Unspec[playerid][sPvw]);
        SetPlayerInterior(playerid, Unspec[playerid][sPint]);

        Descongelar(playerid);
    	SetCameraBehindPlayer(playerid);

        Player[playerid][pLocal] = Unspec[playerid][sLocal];

        Unspec[playerid][sNum] = -1;
        Unspec[playerid][sArea] = 0;
        return 1;
    }

	new number;
	if(sscanf(params, "d", number))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Radar <Número> ou /Radar Sair");

	if(number < 1 || number > MAX_RADARS)
    {
        format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} Número Invalido. Use de 1 à %d.", MAX_RADARS);
		SendClientMessage(playerid, COLOR_RED, thestring);
        return 1;
    }
    number --;

	if(Unspec[playerid][sNum] == -1)
    {
        GetPlayerPos(playerid, Unspec[playerid][Coords][0], Unspec[playerid][Coords][1], Unspec[playerid][Coords][2]);
        Unspec[playerid][sPint] = GetPlayerInterior(playerid);
        Unspec[playerid][sPvw] = GetPlayerVirtualWorld(playerid);
        Unspec[playerid][sLocal] = Player[playerid][pLocal];
    }
    Unspec[playerid][sNum] = number;
    Unspec[playerid][sArea] = 1;

	Congelar(playerid);

    if(number != 6)
        SetPlayerCameraPos(playerid, Radars[number][rCoordX] + 3.0, Radars[number][rCoordY] + 3.0, Radars[number][rCoordZ] + 30.0);
    else
        SetPlayerCameraPos(playerid, 1319.2435, -1648.0969, Radars[number][rCoordZ] + 3.0);

    SetPlayerCameraLookAt(playerid, Radars[number][rCoordX], Radars[number][rCoordY], Radars[number][rCoordZ] + 3.0);
    SafeSetPlayerPos(playerid, Radars[number][rCoordX], Radars[number][rCoordY], Radars[number][rCoordZ] - 10.0);

    SetPlayerInterior(playerid, 0);
    SetPlayerVirtualWorld(playerid, 0);
	return true;
}

CMD:camera(playerid, params[])
{
	if(!IsPlayerConnected(playerid))
        return 1;
	if(!IsACop(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Policial.");

    if(!strcmp(params, "Sair", true))
    {
        if(Unspec[playerid][sNum] == -1)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está vendo uma Câmera.");

        SafeSetPlayerPos(playerid, Unspec[playerid][Coords][0], Unspec[playerid][Coords][1], Unspec[playerid][Coords][2]);
        SetPlayerVirtualWorld(playerid, Unspec[playerid][sPvw]);
        SetPlayerInterior(playerid, Unspec[playerid][sPint]);

        Descongelar(playerid);
    	SetCameraBehindPlayer(playerid);

        Player[playerid][pLocal] = Unspec[playerid][sLocal];

        Unspec[playerid][sNum] = -1;
        Unspec[playerid][sArea] = 0;
        return 1;
    }

    new info[32], number;
    if(sscanf(params, "s[32]D(-1)", info, number))
        return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Camera <Número> ou /Camera Sair");

    if(!strcmp(info, "Bangu", true))
    {
    	if(!PlayerToPoint(1.5, playerid, 211.622200, 1811.95650, 21.859400)    //Bangu
        && !PlayerToPoint(1.5, playerid, 313.412100, -159.62920, 999.59370)    //HQ FA
        && Unspec[playerid][sArea] != 3)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está no Monitor da FA ou do Bangu.");

      	/*new number;
    	if(sscanf(params, "d", number))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Camera <Número> ou /Camera Sair");*/

        if(number == -1)
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Camera Bangu <Número> ou /Camera Sair");
    	if(number < 1 || number > 5)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Número Inválido. Use de 1 à 5.");

    	if(Unspec[playerid][sNum] == -1)
        {
            GetPlayerPos(playerid, Unspec[playerid][Coords][0], Unspec[playerid][Coords][1], Unspec[playerid][Coords][2]);
            Unspec[playerid][sPint] = GetPlayerInterior(playerid);
            Unspec[playerid][sPvw] = GetPlayerVirtualWorld(playerid);
            Unspec[playerid][sLocal] = Player[playerid][pLocal];
        }
        Unspec[playerid][sNum] = number;
        Unspec[playerid][sArea] = 3;

        if(PlayerToPoint(1.5, playerid, 313.412100, -159.62920, 999.59370))
            SafeSetPlayerPos(playerid, 251.4972, 1861.0468, 2.7578);

    	Congelar(playerid);
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);

        switch(number)
        {
            case 1:
            {
                SetPlayerCameraPos(playerid, 118.1011,1931.3221,22.5527);
                SetPlayerCameraLookAt(playerid, 98.9656,1920.9819,18.2180);
            }
            case 2:
            {
                SetPlayerCameraPos(playerid, 213.5340,1875.3075,17.6406);
                SetPlayerCameraLookAt(playerid, 213.8679,1884.1714,13.8945);
            }
            case 3:
            {
                SetPlayerCameraPos(playerid, 266.0640,1894.8856,38.6459);
                SetPlayerCameraLookAt(playerid, 224.0039,1887.1532,17.6406);
            }
            case 4:
            {
                SetPlayerCameraPos(playerid, 260.8112,1808.0175,38.6303);
                SetPlayerCameraLookAt(playerid, 227.5645,1818.4778,17.6406);
            }
            case 5:
            {
                SetPlayerCameraPos(playerid, 114.5196,1814.3483,38.6029);
                SetPlayerCameraLookAt(playerid, 123.6176,1846.4792,17.6549);
            }
        }
        return 1;
    }
    if(!IsAtMonitor(playerid)
    && Unspec[playerid][sArea] != 2)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um Monitor.");

  	/*new number;
	if(sscanf(params, "d", number))
        return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Camera <Número> ou /Camera Sair");*/

    if(!IsNumeric(info))
        return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Camera <Número> ou /Camera Sair");
    number = strval(info);

	if(number < 1 || number > 13)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Número Inválido. Use de 1 à 13.");

	if(Unspec[playerid][sNum] == -1)
    {
        GetPlayerPos(playerid, Unspec[playerid][Coords][0], Unspec[playerid][Coords][1], Unspec[playerid][Coords][2]);
        Unspec[playerid][sPint] = GetPlayerInterior(playerid);
        Unspec[playerid][sPvw] = GetPlayerVirtualWorld(playerid);
        Unspec[playerid][sLocal] = Player[playerid][pLocal];
    }
    Unspec[playerid][sNum] = number;
    Unspec[playerid][sArea] = 2;

	Congelar(playerid);
    SetPlayerInterior(playerid, 0);
    SetPlayerVirtualWorld(playerid, 0);

	if(number == 1) { SetPlayerInterior(playerid,0);SetPlayerCameraPos(playerid,1529.6855,-1716.9825,19.9760); SetPlayerCameraLookAt(playerid,1529.6429,-1663.3251,13.3828); SafeSetPlayerPos(playerid,1529.5024,-1665.3890,0.0134); Congelar(playerid); }//DP
	else if(number == 2) { SetPlayerInterior(playerid,0);SetPlayerCameraPos(playerid,1450.0038,-1712.8108,28.2787); SetPlayerCameraLookAt(playerid,1473.9692,-1740.3461,13.5469); SafeSetPlayerPos(playerid,1529.5024,-1665.3890,0.0134); Congelar(playerid); }//preflado
	else if(number == 3) { SetPlayerInterior(playerid,0);SetPlayerCameraPos(playerid,1513.3926,-1726.1639,27.3893); SetPlayerCameraLookAt(playerid,1486.2648,-1745.9539,14.8573); SafeSetPlayerPos(playerid,1529.5024,-1665.3890,0.0134); Congelar(playerid); }//preflado
    else if(number == 4) { SetPlayerInterior(playerid,0);SetPlayerCameraPos(playerid,1146.1245,-2061.5034,75.5020); SetPlayerCameraLookAt(playerid,1123.9908,-2036.0399,69.8859); SafeSetPlayerPos(playerid,1160.7737,-2037.4275,63.6029); Congelar(playerid); }//suibidapref
	else if(number == 5) { SetPlayerInterior(playerid,0);SetPlayerCameraPos(playerid,1149.8187,-2013.8593,76.6997); SetPlayerCameraLookAt(playerid,1123.9816,-2036.2600,69.8859); SafeSetPlayerPos(playerid,1277.2673,-2033.9362,47.3611); Congelar(playerid); }//subidapref
    else if(number == 6) { SetPlayerInterior(playerid,3);SetPlayerCameraPos(playerid,367.7772,187.9766,1011.1427); SetPlayerCameraLookAt(playerid,359.0456,168.3220,1008.9466); SafeSetPlayerPos(playerid,359.2299,168.8518,1003.5008); Congelar(playerid); }//materiais
	else if(number == 7) { SetPlayerInterior(playerid,3); SetPlayerCameraPos(playerid,354.4671,173.8744,1010.7997); SetPlayerCameraLookAt(playerid,379.0359,174.0471,1008.6026); SafeSetPlayerPos(playerid,348.7832,175.7886,1006.8215); Congelar(playerid); }//prefint2
    else if(number == 8) { SetPlayerInterior(playerid,0); SetPlayerCameraPos(playerid,1486.2341,-1736.7844,7.5716); SetPlayerCameraLookAt(playerid,1486.6981,-1727.9337,7.4015); SafeSetPlayerPos(playerid,1486.6959,-1727.2010,1.6855); Congelar(playerid); }//drogas
    else if(number == 9) { SetPlayerInterior(playerid,0); SetPlayerCameraPos(playerid,1523.1571,-1051.9237,35.8634); SetPlayerCameraLookAt(playerid,1479.2277,-1035.6715,24.6379); SafeSetPlayerPos(playerid,1461.5634,-1031.4911,20.3054); Congelar(playerid); }//banco
    else if(number == 10) { SetPlayerInterior(playerid,0); SetPlayerCameraPos(playerid,1580.7581,-1168.3329,37.2620); SetPlayerCameraLookAt(playerid,1620.5953,-1156.6425,23.8969); SafeSetPlayerPos(playerid,1597.8075,-1173.6843,37.3850); Congelar(playerid); }//banco
    else if(number == 11) { SetPlayerInterior(playerid,1);SetPlayerCameraPos(playerid,2148.1855,1608.0289,996.3745); SetPlayerCameraLookAt(playerid,2144.3733,1624.0513,993.6882); SafeSetPlayerPos(playerid,2170.1155,1609.4409,997.6093); Congelar(playerid); }//materiais
    else if(number == 12) { SetPlayerInterior(playerid,1); SetPlayerCameraPos(playerid,2245.6157,1634.6495,1011.6312); SetPlayerCameraLookAt(playerid,2238.0427,1616.6454,1006.1836); SafeSetPlayerPos(playerid,2250.4543,1638.8346,1011.6555); Congelar(playerid); }//banco
    else if(number == 13) { SetPlayerInterior(playerid,1); SetPlayerCameraPos(playerid,2201.6970,1574.3754,1013.4380); SetPlayerCameraLookAt(playerid,2193.9802,1597.8473,1005.0625); SafeSetPlayerPos(playerid,2202.4705,1564.7296,1013.5360); Congelar(playerid); }//banco
    //else if(number == 14) { SetPlayerInterior(playerid,0); SetPlayerCameraPos(playerid,1184.9761,-1688.8286,23.0184); SetPlayerCameraLookAt(playerid,1191.0057,-1655.8400,13.8633); SafeSetPlayerPos(playerid,1180.4524,-1656.3756,10.5024); Congelar(playerid); }//prefint
    return 1;
}

CMD:divorcio(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        if(Player[playerid][pMarried] < 1)
		{
		    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está casado.");
			return true;
        }
        new giveid;
		if(sscanf(params, "u", giveid))
		{
			SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/divorcio <id/nick>");
			return true;
		}
		if(IsPlayerConnected(giveid))
		{
		    if(giveid != INVALID_PLAYER_ID)
		    {
		        if(ProxDetectorS(8.0, playerid, giveid))
				{
				    if(giveid == playerid) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode propor a sí mesmo."); return true; }
				    new dthestring[MAX_PLAYER_NAME];
					new wthestring[MAX_PLAYER_NAME];
					format(thestring, sizeof(thestring), "%s", Player[giveid][pName]);
					strmid(wthestring, thestring, 0, strlen(thestring), 255);
					format(thestring, sizeof(thestring), "%s", pMarriedTo[playerid]);
					strmid(dthestring, thestring, 0, strlen(thestring), 255);
					if(strcmp(dthestring ,wthestring, true ) == 0 )
					{
					    format(thestring, sizeof(thestring), "Você entregou os papeis de divórcio a %s.", Player[giveid][pName]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
						format(thestring, sizeof(thestring), "%s lhe entregou papeis de divórcio (digite /aceitar divórcio) para aceitar.", Player[playerid][pName]);
						SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
				        DivorceOffer[giveid] = playerid;
				        return true;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está casado (a) com você.");
					    return true;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está próximo a você.");
					return true;
				}
		    }
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
		    return true;
		}
	}
	return true;
}

CMD:descasar(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 6)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
    new plo;
	if(sscanf(params, "u", plo))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/descasar <id/nick>");
	if(IsPlayerConnected(plo))
	{
	    if(plo != INVALID_PLAYER_ID)
	    {
	        format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Você divorciou %s.", Player[plo][pName]);
            SendClientMessage(playerid, SERVER_INFO, thestring);
            format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} O admin %s te concedeu o divórcio.", Player[playerid][pName]);
            SendClientMessage(plo, SERVER_INFO, thestring);
            ClearMarriage(plo);
    	}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:casar(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        if(GetPlayerGP(playerid) < 10000)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O casamento e a recepcão custam R$10.000.");
        if(Player[playerid][pMarried] > 0)
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já está casado.");
        if(Player[playerid][pHouseKey] == 255)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Casa.");
        new giveid;
		if(sscanf(params, "u", giveid))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/casar <id/nick>");

		if(IsPlayerConnected(giveid))
		{
		    if(giveid != INVALID_PLAYER_ID)
		    {
		        if(Player[giveid][pMarried] > 0)
		            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador já está casado.");
		        if(Player[giveid][pHouseKey] != 255)
		            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador já tem uma casa, não poderá casar.");
		        if(Player[giveid][pBizKey] != 255)
		            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador tem uma empresa, não se pode casar.");

		        if(ProxDetectorS(8.0, playerid, giveid))
				{
				    if(giveid == playerid)
						return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode propor a sí mesmo");

					format(thestring, sizeof(thestring), "Você pediu a mão de %s em casamento!", Player[giveid][pName]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					format(thestring, sizeof(thestring), "%s pediu a mão de %s em casamento!", PlayerGetName(playerid), PlayerGetName(giveid));
					SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(thestring, sizeof(thestring), "%s pediu sua mão em casamento! (digite /aceitar casamento) para aceitar", Player[playerid][pName]);
					SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
				    ProposeOffer[giveid] = playerid;
				}
				else
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não está próximo.");
			}
		}
		else
		    return SendClientMessage(playerid, COLOR_RED, "Offline.");
  	}
	return true;
}

CMD:padrinho(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        new giveid;
		if(sscanf(params, "u", giveid))
		{
			SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/padrinho <id/nick>");
			return true;
		}
		if(IsPlayerConnected(giveid))
		{
		    if(giveid != INVALID_PLAYER_ID)
		    {
		        if(ProxDetectorS(8.0, playerid, giveid))
				{
				    if(giveid == playerid)
					{
						SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode propor a sí mesmo.");
						return true;
					}
					format(thestring, sizeof(thestring), "Você convidou %s para ser padrinho do seu casamento", Player[giveid][pName]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					format(thestring, sizeof(thestring), "%s convidou você para ser padrinho de seu casamento (digite /aceitar padrinho) para aceitar.", Player[playerid][pName]);
					SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
			        MarryWitnessOffer[giveid] = playerid;
				}
				else
				{
					SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está próximo.");
					return true;
				}
		    }
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "Offline.");
		    return true;
		}
	}
	return true;
}

CMD:impostos(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        if(Player[playerid][pLeader] != 7)
        {
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é Prefeito de Los Santos.");
			return true;
        }
        new moneys;
        if(sscanf(params, "d", moneys))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Impostos <Preco>");

		if(moneys < 0 || moneys > 600) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Taxa somente entre R$0 e R$600.");

		Tax = moneys;

		format(thestring, sizeof(thestring), "O Prefeito %s mudou a taxa de impostos para R$%d.", Player[playerid][pName], Tax);
		SendClientMessageToAll(COLOR_YELLOW, thestring);
	}
	return true;
}

CMD:entrega(playerid, params[])
{
	if(IsACop(playerid))
    {
    	if(!PlayerToPoint(8.0,playerid,96.9123,1920.5088,18.1473))
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está no portão de entrada da área 51.");

		new giveid;
		if(sscanf(params, "u", giveid))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/entrega <id/nick>");

		if(IsPlayerConnected(giveid))
		{
		    if(giveid != INVALID_PLAYER_ID)
		    {
		        if(giveid == playerid) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode se jogar ao bangu."); return true; }
		        if(WantedPoints[giveid] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador precisa estar sendo procurado ao menos com nível 1 para ir ao bangu."); return true; }
		        if(IsACop(giveid)) { return true; }
				if(ProxDetectorS(8.0, playerid, giveid))
				{
					format(thestring, sizeof(thestring), "Você prendeu %s no bangu.", Player[giveid][pName]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					format(thestring, sizeof(thestring), "Você foi preso no bangu por %s.", Player[playerid][pName]);
					SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					GameTextForPlayer(giveid, "~w~bem vindo ao ~n~~r~bangu", 5000, 1);
					WantedPoints[giveid] = 0;
					WantedPoints[giveid] = 0;
					Player[giveid][pJailed] = 2;
					Player[giveid][pJailTime] = 1800;
					SafeSetPlayerPos(giveid, 107.2300,1920.6311,18.5208);
					SetPlayerWorldBounds(giveid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
				}
				else
				    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está próximo a você.");

			}
			else
			    return SendClientMessage(playerid, COLOR_RED, "Jogador Offline.");
	    }
	}
	return true;
}

CMD:apostar(playerid, params[])
{
	if(Player[playerid][pLottoNr] > 0)
    	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já tem um Ticket.");

    new lottonr;
	if(sscanf(params, "d", lottonr))
		return SendClientMessage(playerid, COLOR_WHITE,"[Uso]: {FFFFFF}/Apostar <Ticket>");

	if(lottonr < 1 || lottonr > LOTTO_NUM)
    {
        format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} O Ticket deve ser entre 1 e %d.", LOTTO_NUM);
        SendClientMessage(playerid, COLOR_RED, thestring);
        return true;
    }

    if(!Pay(playerid, BizLotericaPrice))
        return 1;

	format(thestring, sizeof(thestring), "{FF0000}[Info]:{FFFFFF} Você comprou um Ticket com o Número %d. Boa Sorte!", lottonr);
	SendClientMessage(playerid, SERVER_INFO, thestring);

	Player[playerid][pLottoNr] = lottonr;

    GiveBizMoney(Biz_Loterica, BizLotericaPrice);
    return true;
}

CMD:chamarcorrida(playerid)
{
    if(GetPlayerOrg(playerid) != TEAM_BIKERS && GetPlayerOrg(playerid) != TEAM_ANGELS)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro dos Black Pistons/Hell Angels.");
    if(!RaceInfo[rAllowRace])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você deve esperar 10 minutos entre cada corrida.");
    if(RaceInfo[rAllowInvite])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Alguem já usou o /ChamarCorrida.");
    if(!IsPlayerInAnyVehicle(playerid) || !IsABike(GetVehicleModel(GetPlayerVehicleID(playerid))))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em uma Moto da sua Org.");
    if(VehicleInfo[GetPlayerVehicleID(playerid)][vGas] < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este veículo não tem Gasolina.");

    new bool:Found = false;
    for(new i = 0; i < MAX_RACEGZ; i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, RacePickupPos[i][0], RacePickupPos[i][1], RacePickupPos[i][2]))
        {
            Found = true;
            RaceInfo[rGZ] = i;
            break;
        }
    }
    if(!Found)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em uma GangZone de Corrida.");
    if(RaceGZ[RaceInfo[rGZ]][rOwner] == GetPlayerOrg(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Sua ORG comanda essa GangZone.");

    Found = false;
    if(GetPlayerOrg(playerid) == TEAM_BIKERS)
    {
        for(new i = 0; i < sizeof(BPCars); i++)
        {
            if(GetPlayerVehicleID(playerid) == BPCars[i])
            {
                Found = true;
                break;
            }
        }
    }
    else
    {
        for(new i = 0; i < sizeof(HACars); i++)
        {
            if(GetPlayerVehicleID(playerid) == HACars[i])
            {
                Found = true;
                break;
            }
        }
    }
    if(!Found)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em uma Moto da sua Org.");

    if(RaceGZ[RaceInfo[rGZ]][rOwner] == 0)
    {
        SendClientMessage(playerid, COLOR_LIGHTYELLOW, "Corrida: {FFFFFF}Você pegou a área.");

        GangZoneShowForAll(RaceGZID[RaceInfo[rGZ]], OrgsColors[GetPlayerOrg(playerid)]);

        RaceGZ[RaceInfo[rGZ]][rOwner] = GetPlayerOrg(playerid);
        return 1;
    }

    new datString[155];
    format(datString, 155, "Corrida: {FFFFFF}A gangue {%s}%s{FFFFFF} está intimando sua gangue para uma corrida pelo território {0066FF}%s{FFFFFF}.", OrgsColorTags[GetPlayerOrg(playerid)], OrgsNames[GetPlayerOrg(playerid)], RaceGZ[RaceInfo[rGZ]][rName]);

    new orgInimiga;
    if(GetPlayerOrg(playerid) == TEAM_BIKERS)
        orgInimiga = TEAM_ANGELS;
    else
        orgInimiga = TEAM_BIKERS;

    SendTeamMessage(orgInimiga, COLOR_LIGHTBLUE, datString);
    SendTeamMessage(orgInimiga, COLOR_LIGHTYELLOW, "Corrida: {FFFFFF}Se a corrida não iniciar em 5 minutos sua gangue perderá o território.");
    SendTeamMessage(orgInimiga, COLOR_LIGHTYELLOW, "Corrida: {FFFFFF}Ao chegar na área use /AceitarCorrida para que a corrida se inicie.");

    RaceInfo[rRacer][0] = playerid;
    RaceInfo[rVeh][0] = GetPlayerVehicleID(playerid);
    RaceInfo[rVehModel][0] = GetVehicleModel(RaceInfo[rVeh][0]);

    RaceInfo[rAllowInvite] = true;

    SendClientMessage(playerid, COLOR_LIGHTYELLOW, "Corrida: {FFFFFF}Aguarde 5 minutos pelo seu oponente. Você irá correr pela sua gangue.");

    RaceTimer = SetTimerEx("EndRace", (5*60*1000), false, "dd", RACE_LOST_NOPLAYER, playerid);
    return 1;
}

CMD:aceitarcorrida(playerid)
{
    if(GetPlayerOrg(playerid) != TEAM_BIKERS && GetPlayerOrg(playerid) != TEAM_ANGELS)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro de uma gangue de motoqueiros.");
    if(!RaceInfo[rAllowInvite])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Primeiro alguém deve usar /ChamarCorrida.");
    if(!IsPlayerInAnyVehicle(playerid) || !IsABike(GetVehicleModel(GetPlayerVehicleID(playerid))))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em uma Moto da sua gangue.");
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, RacePickupPos[RaceInfo[rGZ]][0], RacePickupPos[RaceInfo[rGZ]][1], RacePickupPos[RaceInfo[rGZ]][2]))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está no território correto.");
    if(GetPlayerOrg(RaceInfo[rRacer][0]) == GetPlayerOrg(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode correr contra seu próprio membro.");
    if(VehicleInfo[GetPlayerVehicleID(playerid)][vGas] < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este veículo não tem Gasolina.");

    new bool:Found = false;
    if(GetPlayerOrg(playerid) == TEAM_BIKERS)
    {
        for(new i = 0; i < sizeof(BPCars); i++)
        {
            if(IsPlayerInVehicle(playerid, BPCars[i]))
            {
                Found = true;
                break;
            }
        }
    }
    else if(GetPlayerOrg(playerid) == TEAM_ANGELS)
    {
        for(new i = 0; i < sizeof(HACars); i++)
        {
            if(IsPlayerInVehicle(playerid, HACars[i]))
            {
                Found = true;
                break;
            }
        }
    }
    if(!Found)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em uma Moto da sua gangue.");

    RaceInfo[rRacer][1] = playerid;
    RaceInfo[rVeh][1] = GetPlayerVehicleID(playerid);
    RaceInfo[rVehModel][1] = GetVehicleModel(RaceInfo[rVeh][1]);

    KillTimer(RaceTimer);

    PrepareGZRace();
    return 1;
}

CMD:apreender(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        if(IsACop(playerid))
        {
            if(Player[playerid][pRank] < 2)
                return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa ter cargo maior ou igual a 2.");

            if(!IsACop(playerid) || OnDuty[playerid] == 0)
		        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está identificado, pegue seu crachá no LSPD HQ.");

            new x_nr[14], giveid;
			if(sscanf(params, "s[14]u", x_nr, giveid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "|__________________ Recolher __________________|");
				SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/apreender <nome> <id/nick>");
		  		SendClientMessage(playerid, COLOR_WHITE, "Nomes Disponíveis: motorista, aérea, náutica, armaslic, armas, drogas, materiais, dinamite");
				SendClientMessage(playerid, COLOR_WHITE, "|___________________________________________________|");
				return true;
			}
		    if(strcmp(x_nr,"motorista",true)==0)
			{
				if(IsPlayerConnected(giveid))
				{
				    if(giveid != INVALID_PLAYER_ID)
				    {
				        if(ProxDetectorS(8.0, playerid, giveid))
						{
					        format(thestring, sizeof(thestring), "Você apreendeu a licença de motorista de %s", Player[giveid][pName]);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					        format(thestring, sizeof(thestring), "O oficial %s recolheu sua licença de motorista", Player[playerid][pName]);
					        SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					        Player[giveid][pCarLic] = 0;
					        Player[giveid][pCarLicPoints] = 0;
						}
						else
						    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está próximo à você.");
				    }
				}
				else
				    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
			}
			else if(strcmp(x_nr,"aerea",true)==0)
			{
				if(IsPlayerConnected(giveid))
				{
				    if(giveid != INVALID_PLAYER_ID)
				    {
				        if(ProxDetectorS(8.0, playerid, giveid))
						{
					        format(thestring, sizeof(thestring), "Você apreendeu a licença aérea de %s", Player[giveid][pName]);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					        format(thestring, sizeof(thestring), "O oficial %s recolheu sua licença aérea", Player[playerid][pName]);
					        SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					        Player[giveid][pFlyLic] = 0;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Jogador não está próximo à você.");
						    return true;
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
				    return true;
				}
			}
			else if(strcmp(x_nr,"armaslic",true)==0)
			{
				if(IsPlayerConnected(giveid))
				{
				    if(giveid != INVALID_PLAYER_ID)
				    {
				        if(ProxDetectorS(8.0, playerid, giveid))
						{
					        format(thestring, sizeof(thestring), "Você retirou a licença de armas de %s", Player[giveid][pName]);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					        format(thestring, sizeof(thestring), "O oficial %s retirou sua licença de armas", Player[playerid][pName]);
					        SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					        Player[giveid][pGunLic] = 0;
				        }
				        else
						{
						    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está próximo à você.");
						    return true;
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
				    return true;
				}
			}
			else if(strcmp(x_nr,"náutica",true)==0)
			{
				if(IsPlayerConnected(giveid))
				{
				    if(giveid != INVALID_PLAYER_ID)
				    {
				        if(ProxDetectorS(8.0, playerid, giveid))
						{
					        format(thestring, sizeof(thestring), "Você apreendeu a licença náutica de %s", Player[giveid][pName]);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					        format(thestring, sizeof(thestring), "O oficial %s retirou sua licença náutica.", Player[playerid][pName]);
					        SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					        Player[giveid][pBoatLic] = 0;
				        }
				        else
						{
						    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está próximo à você.");
						    return true;
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
				    return true;
				}
			}
			else if(strcmp(x_nr,"armas",true)==0)
			{
				if(IsPlayerConnected(giveid))
				{
				    if(giveid != INVALID_PLAYER_ID)
				    {
				        if(IsACop(giveid))
				        {
				            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Aproxime-se mais.");
						    return true;
				        }
				        if(ProxDetectorS(8.0, playerid, giveid))
						{
					        format(thestring, sizeof(thestring), "Você apreendeu as armas de %s", Player[giveid][pName]);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
							format(thestring, sizeof(thestring), "O oficial %s recolheu suas armas.", Player[playerid][pName]);
						    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
						    ResetPlayerWeapons(giveid);
		        		}
					    else
						{
						    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Aproxime-se mais.");
						    return true;
						}
		    		}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
				    return true;
				}
			}
			else if(strcmp(x_nr,"drogas",true)==0)
			{
				if(IsPlayerConnected(giveid))
				{
				    if(giveid != INVALID_PLAYER_ID)
				    {
				        if(ProxDetectorS(8.0, playerid, giveid))
						{
						    format(thestring, sizeof(thestring), "Você apreendeu as drogas encontradas nos bolsos de %s", Player[giveid][pName]);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					        format(thestring, sizeof(thestring), "O oficial %s recolheu suas drogas nos bolsos", Player[playerid][pName]);
					        SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					        Player[giveid][pDrugs] = 0;
						}
				        else
						{
						    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador está longe de Você.");
						    return true;
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
				    return true;
				}
			}
			else if(strcmp(x_nr,"materiais",true)==0)
			{
				if(IsPlayerConnected(giveid))
				{
				    if(giveid != INVALID_PLAYER_ID)
				    {
				        if(ProxDetectorS(8.0, playerid, giveid))
						{
						    format(thestring, sizeof(thestring), "Você apreendeu os materiais de %s", Player[giveid][pName]);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					        format(thestring, sizeof(thestring), "O oficial %s recolheu seus materiais", Player[playerid][pName]);
					        SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					        Player[giveid][pMats] = 0;
						}
				        else
						{
						    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Jogador está longe de você.");
						    return true;
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "Jogador Offline.");
				    return true;
				}
			}
			else if(strcmp(x_nr,"dinamite",true)==0)
			{
				if(IsPlayerConnected(giveid))
				{
				    if(giveid != INVALID_PLAYER_ID)
				    {
				        if(ProxDetectorS(8.0, playerid, giveid))
						{
						    format(thestring, sizeof(thestring), "Você apreendeu a dinamite de %s", Player[giveid][pName]);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					        format(thestring, sizeof(thestring), "O oficial %s recolheu sua dinamite", Player[playerid][pName]);
					        SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					        Player[giveid][pExplosivo] = false;
						}
				        else
						{
						    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Jogador está longe de você.");
						    return true;
						}
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "Jogador Offline.");
				    return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nome Indefinido.");
				return true;
			}
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um COP.");
            return true;
        }
    }
    return true;
}

CMD:bafometro(playerid, params[])
{
    if(Player[playerid][pMember] == TEAM_PM)
	{
      	new giveid;
		if(sscanf(params, "u", giveid))
		{
			SendClientMessage(playerid, COLOR_RED, "/bafometro <id/nick>");
	    	return true;
		}
		if(IsPlayerConnected(playerid))
		{
			if(ProxDetectorS(5.0, playerid, giveid))
			{
			  	if(PlayerDrunk[giveid] >= 0)
			  	{
			    	format(thestring, sizeof(thestring), "O bafômetro mostra: (%d ml) de álcool no sangue", PlayerDrunk[giveid]);
				   	SendClientMessage(playerid, COLOR_YELLOW, thestring);
			       	format(thestring, sizeof(thestring), "* %s fez teste do Bafômetro em %s.",PlayerGetName(playerid) ,PlayerGetName(giveid));
			       	ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			       	return true;
			  	}
      		}
		}
		else
		{
	        SendClientMessage(playerid, COLOR_RED, "Jogador não está conectado/logado.");
	    	return true;
		}
	}
	return true;
}

CMD:escolherradio(playerid)
{
    new type = GetVehicleType(GetPlayerVehicleID(playerid));
	if(type != VTYPE_CAR && type != VTYPE_SPORT && type != VTYPE_MAV && type != VTYPE_HEAVY)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Esse veículo não tem rádio.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Só o motorista pode mudar a rádio do carro.");

    new iRadio[sizeof(Radios)*32];
    for(new i = 0; i <sizeof(Radios); i ++)
		format(iRadio,sizeof(iRadio),"%s\n - %s",iRadio,Radios[i]);

    strcat(iRadio,"\n - Desligar");
    ShowPlayerDialog(playerid, DIALOG_RADIO, DIALOG_STYLE_LIST,"{FF0000}Life {FFFFFF}Simulation RPG - Escolha a rádio",iRadio,"Ouvir","Sair");
	return true;
}

CMD:ipod(playerid)
{
   	if(Player[playerid][pCDPlayer] == 1)
	{
	    new iPod[sizeof(Musicas)*72];
	    for(new i = 0; i <sizeof(Musicas); i ++)
			format(iPod,sizeof(iPod),"%s\n - %s",iPod,Musicas[i]);

		strcat(iPod,"\n - Ouvir rádio\n - Desligar");
        SendClientMessage(playerid,SERVER_INFO,"{FF0000}{FF0000}[Info]:{FFFFFF}{FFFFFF} Escolha o que deseja ouvir!");
		ShowPlayerDialog(playerid, DIALOG_MP3, DIALOG_STYLE_LIST,"{FF0000}Life {FFFFFF}Simulation RPG - iPod - Selecione uma musica",iPod,"Ouvir","Sair");
	}
	else
	{
    	SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não tem um iPod. Compre um nas Lojas 24-7.");
	}
	return true;
}

CMD:venderpeixe(playerid, params[])
{
    if(!IsAtLoja(playerid))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em uma 24-7.");
	new fishid;
	if(sscanf(params, "d", fishid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/venderpeixe <peixe>");

	new price;
	if(fishid < 1 || fishid > 6) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O número só poderá ser entre 1 e 6."); return true; }
	else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não capturou um peixe no número (1)."); return true; }
	else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não capturou um peixe no número (2)."); return true; }
	else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não capturou um peixe no número (3)."); return true; }
	else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não capturou um peixe no número (4)."); return true; }
	else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não capturou um peixe no número (5)."); return true; }
	else if(fishid == 6 && Fishes[playerid][pWeight6] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não capturou um peixe no número (6)."); return true; }
	ConsumingMoney[playerid] = 1;
	switch (fishid)
	{
	    case 1:
	    {
	        if(Fishes[playerid][pWeight1] < 20)
	            return SendClientMessage(playerid, COLOR_WHITE, "Nós estamos apenas interessados em peixes com 20 KGs ou mais.");
            price = FishCost(playerid, Fishes[playerid][pFid1]);
            price = price * Fishes[playerid][pWeight1];
            if(Player[playerid][pTraderPerk] > 0)
	        {
	            new skill = price / 700;
	            new payout = (skill)*(3);
	            price += payout;
	        }
            GameTextForPlayer(playerid, "~g~peixe~n~~r~vendido", 3000, 1);
    		format(thestring, sizeof(thestring), "Você vendeu seu %s pesando %d , por R$ %d.", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			GivePlayerGP(playerid, price);
			ClearFishID(playerid, 1);
		}
		case 2:
		{
			if(Fishes[playerid][pWeight2] < 20)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nós estamos apenas interessados em peixes com 20 KGs ou mais.");
				return true;
	        }
    		price = FishCost(playerid, Fishes[playerid][pFid2]);
            price = price * Fishes[playerid][pWeight2];
            if(Player[playerid][pTraderPerk] > 0)
			{
				new skill = price / 700;
				new payout = (skill)*(3);
				price += payout;
			}
            GameTextForPlayer(playerid, "~g~peixe~n~~r~vendido", 3000, 1);
            format(thestring, sizeof(thestring), "Você vendeu seu %s pesando %d, por R$ %d.", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			GivePlayerGP(playerid, price);
			ClearFishID(playerid, 2);
		}
		case 3:
		{
			if(Fishes[playerid][pWeight3] < 20)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nós estamos apenas interessados em peixes com 20 KGs ou mais.");
				return true;
			}
            price = FishCost(playerid, Fishes[playerid][pFid3]);
            price = price * Fishes[playerid][pWeight3];
            if(Player[playerid][pTraderPerk] > 0)
			{
				new skill = price / 700;
				new payout = (skill)*(3);
				price += payout;
	        }
         	GameTextForPlayer(playerid, "~g~peixe~n~~r~vendido", 3000, 1);
            format(thestring, sizeof(thestring), "Você vendeu seu %s pesando %d, por R$ %d.", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			GivePlayerGP(playerid, price);
			ClearFishID(playerid, 3);
		}
		case 4:
		{
			if(Fishes[playerid][pWeight4] < 20)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nós estamos apenas interessados em peixes com 20 KGs ou mais.");
				return true;
			}
            price = FishCost(playerid, Fishes[playerid][pFid4]);
            price = price * Fishes[playerid][pWeight4];
            if(Player[playerid][pTraderPerk] > 0)
			{
				new skill = price / 700;
				new payout = (skill)*(3);
				price += payout;
			}
            GameTextForPlayer(playerid, "~g~peixe~n~~r~vendido", 3000, 1);
            format(thestring, sizeof(thestring), "Você vendeu seu %s pesando %d, por R$ %d.", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			GivePlayerGP(playerid, price);
			ClearFishID(playerid, 4);
		}
		case 5:
		{
			if(Fishes[playerid][pWeight5] < 20)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nós estamos apenas interessados em peixes com 20 KGs ou mais.");
				return true;
			}
            price = FishCost(playerid, Fishes[playerid][pFid5]);
            price = price * Fishes[playerid][pWeight5];
            if(Player[playerid][pTraderPerk] > 0)
			{
				new skill = price / 700;
				new payout = (skill)*(3);
				price += payout;
			}
            GameTextForPlayer(playerid, "~g~peixe~n~~r~vendido", 3000, 1);
            format(thestring, sizeof(thestring), "Você vendeu seu %s pesando %d, por R$ %d.", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			GivePlayerGP(playerid, price);
			ClearFishID(playerid, 5);
		}
		case 6:
		{
			if(Fishes[playerid][pWeight6] < 20)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Nós estamos apenas interessados em peixes com 20 KGs ou mais.");
				return true;
			}
            price = FishCost(playerid, Fishes[playerid][pFid6]);
            price = price * Fishes[playerid][pWeight6];
            if(Player[playerid][pTraderPerk] > 0)
			{
				new skill = price / 700;
				new payout = (skill)*(3);
				price += payout;
			}
            GameTextForPlayer(playerid, "~g~peixe~n~~r~vendido", 3000, 1);
            format(thestring, sizeof(thestring), "Você vendeu seu %s pesando %d, por R$ %d.", Fishes[playerid][pFish6],Fishes[playerid][pWeight6],price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			GivePlayerGP(playerid, price);
			ClearFishID(playerid, 6);
		}
	}
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	return true;
}

CMD:venderpreparo(playerid, params[])
{
	new cookid, giveid;
	if(sscanf(params, "du", cookid, giveid))
	{
		SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/vender preparo <preparo> <id/nick>");
		return true;
	}
	if(cookid < 1 || cookid > 5) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O número de preparo só poderá ser entre 1 e 5."); return true; }
	else if(cookid == 1 && Cooking[playerid][pCWeight1] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não preparou nada neste item (1)."); return true; }
	else if(cookid == 2 && Cooking[playerid][pCWeight2] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não preparou nada neste item (2)."); return true; }
	else if(cookid == 3 && Cooking[playerid][pCWeight3] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não preparou nada neste item (3)."); return true; }
	else if(cookid == 4 && Cooking[playerid][pCWeight4] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não preparou nada neste item (4)."); return true; }
	else if(cookid == 5 && Cooking[playerid][pCWeight5] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não preparou nada neste item (5)."); return true; }
	if(IsPlayerConnected(giveid))
	{
	    if(giveid != INVALID_PLAYER_ID)
	    {
	        switch(cookid)
	        {
				case 1:
				{
				    if(Cooking[giveid][pCWeight1] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook1]);
					    strmid(Cooking[giveid][pCook1], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight1] = Cooking[playerid][pCWeight1];
					    Cooking[giveid][pCookID1] = Cooking[playerid][pCookID1];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook1],Cooking[giveid][pCWeight1]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight2] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook1]);
					    strmid(Cooking[giveid][pCook2], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight2] = Cooking[playerid][pCWeight1];
					    Cooking[giveid][pCookID2] = Cooking[playerid][pCookID1];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook2],Cooking[giveid][pCWeight2]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight3] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook1]);
					    strmid(Cooking[giveid][pCook3], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight3] = Cooking[playerid][pCWeight1];
					    Cooking[giveid][pCookID3] = Cooking[playerid][pCookID1];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook3],Cooking[giveid][pCWeight3]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight4] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook1]);
					    strmid(Cooking[giveid][pCook4], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight4] = Cooking[playerid][pCWeight1];
					    Cooking[giveid][pCookID4] = Cooking[playerid][pCookID1];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook4],Cooking[giveid][pCWeight4]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight5] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook1]);
					    strmid(Cooking[giveid][pCook5], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight5] = Cooking[playerid][pCWeight1];
					    Cooking[giveid][pCookID5] = Cooking[playerid][pCookID1];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook5],Cooking[giveid][pCWeight5]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não tem espaco sobrando na lista de preparos.");
				        return true;
				    }
				}
				case 2:
				{
				    if(Cooking[giveid][pCWeight1] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook2]);
					    strmid(Cooking[giveid][pCook1], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight1] = Cooking[playerid][pCWeight2];
					    Cooking[giveid][pCookID1] = Cooking[playerid][pCookID2];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook1],Cooking[giveid][pCWeight1]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight2] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook2]);
					    strmid(Cooking[giveid][pCook2], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight2] = Cooking[playerid][pCWeight2];
					    Cooking[giveid][pCookID2] = Cooking[playerid][pCookID2];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook2],Cooking[giveid][pCWeight2]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight3] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook2]);
					    strmid(Cooking[giveid][pCook3], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight3] = Cooking[playerid][pCWeight2];
					    Cooking[giveid][pCookID3] = Cooking[playerid][pCookID2];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook3],Cooking[giveid][pCWeight3]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight4] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook2]);
					    strmid(Cooking[giveid][pCook4], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight4] = Cooking[playerid][pCWeight2];
					    Cooking[giveid][pCookID4] = Cooking[playerid][pCookID2];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook4],Cooking[giveid][pCWeight4]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight5] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook2]);
					    strmid(Cooking[giveid][pCook5], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight5] = Cooking[playerid][pCWeight2];
					    Cooking[giveid][pCookID5] = Cooking[playerid][pCookID2];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook5],Cooking[giveid][pCWeight5]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não tem espaco sobrando na lista de preparos.");
				        return true;
				    }
				}
				case 3:
				{
				    if(Cooking[giveid][pCWeight1] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook3]);
					    strmid(Cooking[giveid][pCook1], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight1] = Cooking[playerid][pCWeight3];
					    Cooking[giveid][pCookID1] = Cooking[playerid][pCookID3];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook1],Cooking[giveid][pCWeight1]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight2] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook3]);
					    strmid(Cooking[giveid][pCook2], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight2] = Cooking[playerid][pCWeight3];
					    Cooking[giveid][pCookID2] = Cooking[playerid][pCookID3];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook2],Cooking[giveid][pCWeight2]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight3] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook3]);
					    strmid(Cooking[giveid][pCook3], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight3] = Cooking[playerid][pCWeight3];
					    Cooking[giveid][pCookID3] = Cooking[playerid][pCookID3];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook3],Cooking[giveid][pCWeight3]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight4] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook3]);
					    strmid(Cooking[giveid][pCook4], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight4] = Cooking[playerid][pCWeight3];
					    Cooking[giveid][pCookID4] = Cooking[playerid][pCookID3];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook4],Cooking[giveid][pCWeight4]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight5] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook3]);
					    strmid(Cooking[giveid][pCook5], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight5] = Cooking[playerid][pCWeight3];
					    Cooking[giveid][pCookID5] = Cooking[playerid][pCookID3];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook5],Cooking[giveid][pCWeight5]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não tem espaco sobrando na lista de preparos.");
				        return true;
				    }
				}
				case 4:
				{
				    if(Cooking[giveid][pCWeight1] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook4]);
					    strmid(Cooking[giveid][pCook1], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight1] = Cooking[playerid][pCWeight4];
					    Cooking[giveid][pCookID1] = Cooking[playerid][pCookID4];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook1],Cooking[giveid][pCWeight1]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight2] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook4]);
					    strmid(Cooking[giveid][pCook2], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight2] = Cooking[playerid][pCWeight4];
					    Cooking[giveid][pCookID2] = Cooking[playerid][pCookID4];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook2],Cooking[giveid][pCWeight2]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight3] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook4]);
					    strmid(Cooking[giveid][pCook3], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight3] = Cooking[playerid][pCWeight4];
					    Cooking[giveid][pCookID3] = Cooking[playerid][pCookID4];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook3],Cooking[giveid][pCWeight3]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
						format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],Player[giveid][pName]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					}
				    else if(Cooking[giveid][pCWeight4] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook4]);
					    strmid(Cooking[giveid][pCook4], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight4] = Cooking[playerid][pCWeight4];
					    Cooking[giveid][pCookID4] = Cooking[playerid][pCookID4];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook4],Cooking[giveid][pCWeight4]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight5] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook4]);
					    strmid(Cooking[giveid][pCook5], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight5] = Cooking[playerid][pCWeight4];
					    Cooking[giveid][pCookID5] = Cooking[playerid][pCookID4];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook5],Cooking[giveid][pCWeight5]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não tem espaco sobrando na lista de preparos.");
				        return true;
				    }
				}
				case 5:
				{
				    if(Cooking[giveid][pCWeight1] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook5]);
					    strmid(Cooking[giveid][pCook1], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight1] = Cooking[playerid][pCWeight5];
					    Cooking[giveid][pCookID1] = Cooking[playerid][pCookID5];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook1],Cooking[giveid][pCWeight1]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight2] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook5]);
					    strmid(Cooking[giveid][pCook2], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight2] = Cooking[playerid][pCWeight5];
					    Cooking[giveid][pCookID2] = Cooking[playerid][pCookID5];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook2],Cooking[giveid][pCWeight2]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight3] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook5]);
					    strmid(Cooking[giveid][pCook3], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight3] = Cooking[playerid][pCWeight5];
					    Cooking[giveid][pCookID3] = Cooking[playerid][pCookID5];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook3],Cooking[giveid][pCWeight3]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight4] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook5]);
					    strmid(Cooking[giveid][pCook4], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight4] = Cooking[playerid][pCWeight5];
					    Cooking[giveid][pCookID4] = Cooking[playerid][pCookID5];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook4],Cooking[giveid][pCWeight4]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else if(Cooking[giveid][pCWeight5] < 1)
				    {
				        format(thestring, sizeof(thestring), "%s", Cooking[playerid][pCook5]);
					    strmid(Cooking[giveid][pCook5], thestring, 0, strlen(thestring), 255);
					    Cooking[giveid][pCWeight5] = Cooking[playerid][pCWeight5];
					    Cooking[giveid][pCookID5] = Cooking[playerid][pCookID5];
					    format(thestring, sizeof(thestring), " %s deu-lhe um %s com ponderacão %d (use /preparos para ve-los).",Player[playerid][pName],Cooking[giveid][pCook5],Cooking[giveid][pCWeight5]);
					    SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					    format(thestring, sizeof(thestring), "Você deu um %s com ponderacão %d para %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],Player[giveid][pName]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não tem espaco sobrando na lista de preparos.");
				        return true;
				    }
				}
			}//switch
			ClearCookingID(playerid, cookid);
		}
	}
	return true;
}
/*
CMD:bomba(playerid)
{
    new dinid,Float:x,Float:y,Float:z;
	if(BombTime[playerid] == 1)
		return SendClientMessage(playerid, COLOR_GREY, "Você precisa esperar 4 minutos para usar esse comando denovo.");
    if(nobangu[playerid] == true || Player[playerid][pJailed] > 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando enquanto estiver preso.");
	if(noteste[playerid] == true || noevento[playerid] == true)
        return SendClientMessage(playerid, COLOR_GREY, "Você não pode usar este comando agora.");
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar esse comando em um carro!");

	if(!PlayerToPoint(40.0, playerid, 245.9469,75.8629,1003.6406) && !PlayerToPoint(40.0, playerid, 2003.3408,2288.0269,1011.1256))
	{
    	if(IsATerror(playerid))
		{
	            GetPlayerPos(playerid,x,y,z);
	            ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
	            SetTimerEx("CriarExplosaos",8000,false,"fffdf",x,y,z,6,2000.0);
	            SetTimerEx("CriarExplosaoss",8000,false,"fffdf",x,y,z,7,2000.0);
	            SetTimerEx("CriarExplosaosss",8000,false,"fffdf",x,y,z,10,2000.0);
	            SetTimerEx("CriarExplosaossss",8000,false,"fffdf",x,y,z,7,2000.0);
	            GivePlayerGP(playerid, 100);
	            dinid = CreateDynamicObject(1252,x+1,y-1,z-0.8,0,0,0);
	            SetTimerEx("DestruirObjetos",8000,false,"d",dinid);
	            SendClientMessage(playerid,COLOR_YELLOW,"Você armou a bomba e ganhou R$100.");
				BombTime[playerid] = 1;
	            SetTimerEx("BombTimer", 240000, false, "i", playerid);
	            WantedPoints[playerid]+=1;
	            SetPlayerCriminal(playerid,255,"Atentado terrorista", "Desconhecido");
	      		format(thestring, sizeof(thestring), "BIP BIP BIP  -  %s", PlayerGetName(playerid));
	      		ProxDetector(10.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	      		return true;
		}
    	else
			return SendClientMessage(playerid, COLOR_GREY,"Você não é um Terrorista.");
	}
	else
	    return SendClientMessage(playerid,COLOR_YELLOW,"É proibido usar este comando na DP / Hospital.");
}
*/
CMD:carrobomba(playerid)
{
    new Float:X,Float:Y,Float:Z;
    if(CarroBombaTime[playerid] == 1)
		return SendClientMessage(playerid, COLOR_GREY, "Voce precisa esperar 12 minutos para usar esse comando novamente.");
    if(!IsATerror(playerid))
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um terrorista.");

    new vid = GetPlayerVehicleID(playerid);
    for(new i = 0; i < sizeof(TerrorCar); i ++)
	{
		if(vid == TerrorCar[i])
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
			    RemovePlayerFromVehicle(playerid);
           	    SetVehicleHealth(GetPlayerVehicleID(playerid), 100.0);
               	GetVehiclePos(GetPlayerVehicleID(playerid), X,Y,Z);
                CreateExplosion(X+1,Y+1,Z+1,10,2000.0);
   	            GivePlayerGP(playerid, 500);
			    format(thestring, 128, "BIP BIP BIP");
			    ProxDetector(10.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
               	SendClientMessage(playerid,COLOR_YELLOW,"Você armou a bomba e ganhou R$500");
                CarroBombaTime[playerid] = 1;
   	            WantedPoints[playerid] += 1;
       	        SetPlayerCriminal(playerid,255,"Atentado terrorista", "Desconhecido");
			    SetTimerEx("CarroBombaTimer", 720000, false, "i", playerid);
		    	return true;
	    	}
		}
	}
    /*for(new i = 0; i < sizeof(HamasCar); i ++)
	{
		if(vid == HamasCar[i])
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
			    RemovePlayerFromVehicle(playerid);
           	    SetVehicleHealth(GetPlayerVehicleID(playerid), 100.0);
               	GetVehiclePos(GetPlayerVehicleID(playerid), X,Y,Z);
                CreateExplosion(X+1,Y+1,Z+1,10,2000.0);
   	            GivePlayerGP(playerid, 500);
			    format(thestring, 128, "BIP BIP BIP");
			    ProxDetector(10.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
               	SendClientMessage(playerid,COLOR_YELLOW,"Você armou a bomba!e ganhou R$500");
                CarroBombaTime[playerid] = 1;
   	            WantedPoints[playerid] += 1;
       	        SetPlayerCriminal(playerid,255,"Atentado terrorista", "Desconhecido");
			    SetTimerEx("CarroBombaTimer", 720000, false, "i", playerid);
		    	return true;
	    	}
		}
	}*/
   	SendClientMessage(playerid, COLOR_GREY, "Você só pode explodir um carro de terrorista.");
	return true;
}

/*
Desbugar '-'
CMD:dinamite(playerid)
{
    new dinid,Float:x,Float:y,Float:z;
   	if(GetTickCount() - AntiFlood[playerid][10] < 60000)
	{
       	format(thestring, 128, "[ERRO]:{FFFFFF} Você precisa esperar %d segundos para usar esse comando novamente!",60-(GetTickCount() - AntiFlood[playerid][10])/1000);
		SendClientMessage(playerid, COLOR_GREY, thestring);
       	return true;
   	}
    if(Player[playerid][pMember] == TEAM_BALLAS || Player[playerid][pMember] == TEAM_GROOVE || Player[playerid][pMember] == TEAM_VAGOS || Player[playerid][pMember] == TEAM_AZTECAS || Player[playerid][pMember] == TEAM_CV || Player[playerid][pMember] == TEAM_PCC || Player[playerid][pMember] == TEAM_BIKERS || Player[playerid][pMember] == TEAM_DRIFTERS
	|| Player[playerid][pMember] == TEAM_MUNICIPAL || Player[playerid][pMember] == TEAM_RUSSA || Player[playerid][pMember] == TEAM_YAKUZA || Player[playerid][pMember] == TEAM_BOPE || Player[playerid][pMember] == TEAM_LOWRIDERS)
	{
        if(PlayerToPoint(10, playerid,824.5576,10.0396,1004.1797))
		{
            GetPlayerPos(playerid,x,y,z);
            ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
            SetTimerEx("CriarExplosaod",20000,false,"fffdf",x,y,z,10,2000.0);
            dinid = CreateDynamicObject(1654,x+1,y-1,z-0.8,0,0,0);
            SetTimerEx("DestruirObjeto",20000,false,"d",dinid);
            SendClientMessage(playerid,COLOR_YELLOW,"Você armou a dinamite!Saia de perto rápido!!");
	    	AntiFlood[playerid][10] = GetTickCount();
            SetTimer("PortaoLoterica", 140000, 0);
       	}
        else
			SendClientMessage(playerid, COLOR_GREY,"Nenhuma porta para explodir neste local.");
	}
    else
		return SendClientMessage(playerid, COLOR_GREY,"Você não é membro de gang.");

	return true;
} */

CMD:plantarbomba(playerid)
{
    new dinid,Float:x,Float:y,Float:z;
    if(GetTickCount() - AntiFlood[playerid][11] < 60000)
	{
       	format(thestring, 128, "[ERRO]:{FFFFFF} Você precisa esperar %d segundos para usar esse comando novamente!",60-(GetTickCount() - AntiFlood[playerid][11])/1000);
		SendClientMessage(playerid, COLOR_RED, thestring);
       	return true;
	}

    if(!Player[playerid][pExplosivo])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Dinamite.");

    if(IsACrime(playerid))
	{
        for(new i = 0; i < MAX_ATMS; i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 3.0, ATMs[i][ATMPosX], ATMs[i][ATMPosY], ATMs[i][ATMPosZ]))
            {
                if(ATMs[i][ATMRoubado])
                    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este ATM foi roubado a pouco tempo.");

                KillTimer(ATMsTimer[i]);

                new Float:caixaX, Float:caixaY, Float:caixaZ, Float:caixaRot;
                GetDynamicObjectPos(ATMs[i][ATMObj], caixaX, caixaY, caixaZ);
                GetDynamicObjectRot(ATMs[i][ATMObj], uselessFloat, uselessFloat, caixaRot);

                new Dynamite = CreateDynamicObject(1654, caixaX, caixaY, caixaZ + 0.615, 0.0, 90.0, caixaRot);

                SetTimerEx("DestruirObjeto", 20000, false, "d", Dynamite);
                ATMsTimer[i] = SetTimerEx("ExplodirCaixa", 20000, false, "dd", i, GetPlayerOrg(playerid));

                Player[playerid][pExplosivo] = false;

                SendClientMessage(playerid, COLOR_YELLOW, "Você armou a dinamite! Saia de perto rápido!!");

                Streamer_Update(playerid);
                return 1;
            }
        }
        if(PlayerToPoint(3.0, playerid, 2144.1770, 1626.5814, 993.6882))
		{
            GetPlayerPos(playerid, x, y, z);
            ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
            dinid = CreateDynamicObject(1654, x + 1, y - 1, z - 0.8, 0, 0, 0);
	    	AntiFlood[playerid][11] = GetTickCount();
            SendClientMessage(playerid, COLOR_YELLOW, "Você armou a dinamite! Saia de perto rápido!!");

            SetTimerEx("CriarExplosao", 20000, false, "fffdf", x, y, z, 10, 2000.0);
            SetTimerEx("DestruirObjeto", 20000, false, "d", dinid);
            SetTimer("PortaoCassino", (30*60*1000), false);

            Player[playerid][pExplosivo] = false;
       	}
        else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2526.1499, -1300.1000, 1033.0500))
        {
            GetPlayerPos(playerid, x, y, z);
            ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
            dinid = CreateDynamicObject(1654, x + 1, y - 1, z - 0.8, 0, 0, 0);
	    	AntiFlood[playerid][11] = GetTickCount();
            SendClientMessage(playerid, COLOR_YELLOW, "Você armou a dinamite! Saia de perto rápido!!");

            Player[playerid][pExplosivo] = false;

            SetTimerEx("CriarExplosaoEx", 20000, false, "fffdf", x, y, z, 10, 2000.0);
            SetTimerEx("DestruirObjeto", 20000, false, "d", dinid);

            if(!PortaExplodida[0])
            {
                SetTimer("PortaBanco_1", 20000, false);
                SetTimer("ResetarBanco_1", (30*60*1000), false);
                PortaExplodida[0] = true;

                SetTimer("IniciarAlarmeBanco", 40000, false);
                SetTimer("PararAlarmeBanco", (10*60*1000) + 40000, false);
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2526.2000, -1316.2000, 1033.0500))
        {
            GetPlayerPos(playerid, x, y, z);
            ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
            dinid = CreateDynamicObject(1654, x + 1, y - 1, z - 0.8, 0, 0, 0);
	    	AntiFlood[playerid][11] = GetTickCount();
            SendClientMessage(playerid, COLOR_YELLOW, "Você armou a dinamite! Saia de perto rápido!!");

            Player[playerid][pExplosivo] = false;

            SetTimerEx("CriarExplosaoEx", 20000, false, "fffdf", x, y, z, 10, 2000.0);
            SetTimerEx("DestruirObjeto", 20000, false, "d", dinid);

            if(!PortaExplodida[1])
            {
                SetTimer("PortaBanco_2", 20000, false);
                SetTimer("ResetarBanco_2", (30*60*1000), false);
                PortaExplodida[1] = true;
            }
        }
        else
            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nenhuma porta para explodir neste local.");
	}
    else
        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro de gang.");
	return true;
}

CMD:pizzaria(playerid)
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1568.0610, -1896.8332, 13.5605))
        return SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você esta na Pizzaria.");

    PizzaDialog[playerid] = 1;
	ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
	return 1;
}

CMD:cardapiobar(playerid)
{
    BarCMD(playerid);
	return 1;
}

CMD:comerpastilha(playerid)
{
	if(Player[playerid][pPastilhas] == 0) return SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem nem uma pastilha.");
	else if(FicarRoco[playerid] <= 0) return SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não precisa de uma pastilha.");

	Player[playerid][pPastilhas] --;
	FicarRoco[playerid] -= 5;
	format(thestring, sizeof(thestring), "* %s come uma pastilha.", PlayerGetName(playerid));
	ProxDetector(10.0, playerid, thestring, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

CMD:comer(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
        if(PlayerBoxing[playerid] > 0)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode comer nada durante uma batalha.");

        new cookid;
		if(sscanf(params, "d", cookid))
		{
			SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/comer <número do preparo>");
			return true;
		}
  		if(cookid < 1 || cookid > 5) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O número do preparo deve ser entre 1 e 5."); return true; }
		else if(cookid == 1 && Cooking[playerid][pCWeight1] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não preparou nada neste item (1)."); return true; }
		else if(cookid == 2 && Cooking[playerid][pCWeight2] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não preparou nada neste item (2)."); return true; }
		else if(cookid == 3 && Cooking[playerid][pCWeight3] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não preparou nada neste item (3)."); return true; }
		else if(cookid == 4 && Cooking[playerid][pCWeight4] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não preparou nada neste item (4)."); return true; }
		else if(cookid == 5 && Cooking[playerid][pCWeight5] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não preparou nada neste item (5)."); return true; }
		new Float:health;
		if(GetPlayerHealth(playerid, health) < 40)
		{
		    new hp = 0;
		    switch (cookid)
		    {
				case 1:
				{
				    if(Cooking[playerid][pCookID1] == 16 || Cooking[playerid][pCookID1] == 18)
					{//Dolphin ou Turtle
					    WantedPoints[playerid] += 1;
						SetPlayerCriminal(playerid,255, "Consumir espécies ameacadas", "Desconhecido");
					}
				    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight1] / 3));
				    hp = Cooking[playerid][pCWeight1];
				    format(thestring, sizeof(thestring), "* %s comeu %s.", PlayerGetName(playerid), Cooking[playerid][pCook1]);
					ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    format(thestring, sizeof(thestring), "Você comeu %s com peso %d, e isso foi adicionado à sua saúde.",Cooking[playerid][pCook1], hp);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				}
				case 2:
				{
				    if(Cooking[playerid][pCookID2] == 16 || Cooking[playerid][pCookID2] == 18)
					{//Dolphin ou Turtle
						WantedPoints[playerid] += 1;
				    	SetPlayerCriminal(playerid,255, "Consumir espécies ameacadas", "Desconhecido");
					}
				    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight2] / 3));
				    hp = Cooking[playerid][pCWeight2];
				    format(thestring, sizeof(thestring), "* %s comeu %s.", PlayerGetName(playerid), Cooking[playerid][pCook2]);
					ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    format(thestring, sizeof(thestring), "Você comeu %s com peso %d, e isso foi adicionado à sua saúde.",Cooking[playerid][pCook2], hp);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				}
				case 3:
				{
				    if(Cooking[playerid][pCookID3] == 16 || Cooking[playerid][pCookID3] == 18)
					{//Dolphin ou Turtle
					    WantedPoints[playerid] += 1;
						SetPlayerCriminal(playerid,255, "Consumir espécies ameacadas", "Desconhecido");
					}
				    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight3] / 3));
				    hp = Cooking[playerid][pCWeight3];
				    format(thestring, sizeof(thestring), "* %s comeu %s.", PlayerGetName(playerid), Cooking[playerid][pCook3]);
					ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    format(thestring, sizeof(thestring), "Você comeu %s com peso %d, e isso foi adicionado à sua saúde.",Cooking[playerid][pCook3], hp);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				}
				case 4:
				{
				    if(Cooking[playerid][pCookID4] == 16 || Cooking[playerid][pCookID4] == 18)
					{//Dolphin ou Turtle
					    WantedPoints[playerid] += 1;
						SetPlayerCriminal(playerid,255, "Consumir espécies ameacadas", "Desconhecido");
					}
				    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight4] / 3));
				    hp = Cooking[playerid][pCWeight4];
				    format(thestring, sizeof(thestring), "* %s comeu %s.", PlayerGetName(playerid), Cooking[playerid][pCook4]);
					ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    format(thestring, sizeof(thestring), "Você comeu %s com peso %d, e isso foi adicionado à sua saúde.",Cooking[playerid][pCook4], hp);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				}
				case 5:
				{
				    if(Cooking[playerid][pCookID5] == 16 || Cooking[playerid][pCookID5] == 18)
					{//Dolphin ou Turtle
					    WantedPoints[playerid] += 1;
						SetPlayerCriminal(playerid,255, "Consumir espécies ameacadas", "Desconhecido");
					}
				    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight5] / 3));
				    hp = Cooking[playerid][pCWeight5];
				    format(thestring, sizeof(thestring), "* %s comeu %s.", PlayerGetName(playerid), Cooking[playerid][pCook5]);
					ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    format(thestring, sizeof(thestring), "Você comeu %s com peso %d, e isso foi adicionado à sua saúde.",Cooking[playerid][pCook5], hp);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				}
		    }
			ClearCookingID(playerid, cookid);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Sua saúde é alta o suficiente, só pode comer com 40% da saúde.");
		    return true;
		}
    }
    return true;
}

CMD:preparar(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(IsAtCookPlace(playerid))
	    {
	    	new x_nr[16], fishid;
			if(!sscanf(params, "s[16]d", x_nr, fishid))
			{
			    if(strcmp(x_nr,"peixe", true) == 0)
				{
				    new found = 0;
				    if(sscanf(params, "s[16]d", x_nr, fishid))
				        return SendClientMessage(playerid, COLOR_WHITE, "[Uso]: {FFFFFF}/preparar peixe <id do peixe>");

					if(fishid < 1 || fishid > 6) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O número do peixe só poderá ser entre 1 e 5."); return true; }
					else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você sequer pegou um peixe em que o número é (1)."); return true; }
					else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você sequer pegou um peixe em que o número é (2)."); return true; }
					else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você sequer pegou um peixe em que o número é (3)."); return true; }
					else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você sequer pegou um peixe em que o número é (4)."); return true; }
					else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você sequer pegou um peixe em que o número é (5)."); return true; }
					else if(fishid == 6 && Fishes[playerid][pWeight6] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você sequer pegou um peixe em que o número é (6)."); return true; }
					if(Cooking[playerid][pCWeight1] == 0)
					{
					    RemovePlayerAttachedObject(playerid,0);
					    if(fishid == 1)
					    {
						    format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish1]);
						    strmid(Cooking[playerid][pCook1], thestring, 0, strlen(thestring), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight1];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid1];
						    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
					    	SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
					    }
						else if(fishid == 2)
					 	{
						    format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish2]);
						    strmid(Cooking[playerid][pCook1], thestring, 0, strlen(thestring), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight2];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid2];
						    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						}
						else if(fishid == 3)
						{
						    format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish3]);
						    strmid(Cooking[playerid][pCook1], thestring, 0, strlen(thestring), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight3];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid3];
						    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						}
						else if(fishid == 4)
						{
						    format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish4]);
						    strmid(Cooking[playerid][pCook1], thestring, 0, strlen(thestring), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight4];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid4];
						    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						}
						else if(fishid == 5)
						{
						    format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish5]);
						    strmid(Cooking[playerid][pCook1], thestring, 0, strlen(thestring), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight5];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid5];
						    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						}
						else if(fishid == 6)
						{
						    format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish6]);
						    strmid(Cooking[playerid][pCook1], thestring, 0, strlen(thestring), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight6];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid6];
						    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight2] == 0)
					{
					    RemovePlayerAttachedObject(playerid,0);
						if(fishid == 1)
					    {
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook2], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID2] = Fishes[playerid][pFid1];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
			    		}
						else if(fishid == 2)
						{
						    format(thestring, sizeof(thestring), "Preparou %s", Fishes[playerid][pFish2]);
						    strmid(Cooking[playerid][pCook2], thestring, 0, strlen(thestring), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight2];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid2];
						    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						}
						else if(fishid == 3)
						{
						    format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish3]);
						    strmid(Cooking[playerid][pCook2], thestring, 0, strlen(thestring), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight3];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid3];
						    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						}
						else if(fishid == 4)
						{
						    format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish4]);
						    strmid(Cooking[playerid][pCook2], thestring, 0, strlen(thestring), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight4];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid4];
						    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						}
						else if(fishid == 5)
						{
						    format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish5]);
						    strmid(Cooking[playerid][pCook2], thestring, 0, strlen(thestring), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight5];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid5];
						    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						}
						else if(fishid == 6)
						{
						    format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish6]);
						    strmid(Cooking[playerid][pCook2], thestring, 0, strlen(thestring), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight6];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid6];
						    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight3] == 0)
					{
					    RemovePlayerAttachedObject(playerid,0);
						if(fishid == 1)
					    {
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook3], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid1];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
			    		}
						else if(fishid == 2)
						{
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook3], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid2];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
    					}
						else if(fishid == 3)
						{
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook3], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid3];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
			    		}
						else if(fishid == 4)
						{
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook3], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid4];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
			    		}
						else if(fishid == 5)
						{
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook3], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid5];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
			    		}
			    		else if(fishid == 6)
						{
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish6]);
							strmid(Cooking[playerid][pCook3], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight6];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid6];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
			    		}
						found = 1;
   					}
					else if(Cooking[playerid][pCWeight4] == 0)
					{
					    RemovePlayerAttachedObject(playerid,0);
						if(fishid == 1)
					    {
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook4], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid1];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
			    		}
						else if(fishid == 2)
						{
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook4], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid2];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
			    		}
						else if(fishid == 3)
						{
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook4], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid3];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
			    		}
						else if(fishid == 4)
						{
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook4], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid4];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
			    		}
						else if(fishid == 5)
						{
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook4], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid5];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
    					}
    					else if(fishid == 6)
						{
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish6]);
							strmid(Cooking[playerid][pCook4], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight6];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid6];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
    					}
						found = 1;
		    		}
					else if(Cooking[playerid][pCWeight5] == 0)
					{
					    RemovePlayerAttachedObject(playerid,0);
						if(fishid == 1)
					    {
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook5], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid1];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
			    		}
						else if(fishid == 2)
						{
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook5], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid2];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
			    		}
						else if(fishid == 3)
						{
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook5], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid3];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
			    		}
						else if(fishid == 4)
						{
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook5], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid4];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
			    		}
						else if(fishid == 5)
						{
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook5], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid5];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
			    		}
			    		else if(fishid == 6)
						{
							format(thestring, sizeof(thestring), "%s", Fishes[playerid][pFish6]);
							strmid(Cooking[playerid][pCook5], thestring, 0, strlen(thestring), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight6];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid6];
							format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
			    		}
						found = 1;
   					}
					else
					{
						SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem espaco em sua lista de preparos.");
					    return true;
		    		}
					if(found)
					{
					    ClearFishID(playerid, fishid);
						Fishes[playerid][pLastFish] = 0;
			   			Fishes[playerid][pFishID] = 0;
					}
				}
			}
			else if(!sscanf(params, "s[16]", x_nr))
			{
				if(strcmp(x_nr,"baiacu", true) == 0)
				{
				    if(Fishes[playerid][pLastFish] > 0)
	        		{
					    new found = 0;
					    if(Cooking[playerid][pCWeight1] == 0)
					    {
						    format(thestring, sizeof(thestring), "%s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook1], thestring, 0, strlen(thestring), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFishID];
						    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight2] == 0)
					    {
						    format(thestring, sizeof(thestring), "%s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook2], thestring, 0, strlen(thestring), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFishID];
						    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight3] == 0)
					    {
						    format(thestring, sizeof(thestring), "%s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook3], thestring, 0, strlen(thestring), 255);
						    Cooking[playerid][pCWeight3] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID3] = Fishes[playerid][pFishID];
						    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight4] == 0)
					    {
						    format(thestring, sizeof(thestring), "%s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook4], thestring, 0, strlen(thestring), 255);
						    Cooking[playerid][pCWeight4] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID4] = Fishes[playerid][pFishID];
						    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    found = 1;
					    }
					    else if(Cooking[playerid][pCWeight5] == 0)
					    {
						    format(thestring, sizeof(thestring), "%s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook5], thestring, 0, strlen(thestring), 255);
						    Cooking[playerid][pCWeight5] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID5] = Fishes[playerid][pFishID];
						    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    found = 1;
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem nenhum espaco na sua lista de preparos.");
					        return true;
					    }
					    if(found)
					    {
					        ClearFishID(playerid, Fishes[playerid][pLastFish]);
				            Fishes[playerid][pLastFish] = 0;
				            Fishes[playerid][pFishID] = 0;
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não capturou nenhum peixe ainda.");
				        return true;
				    }
				}
				else if(strcmp(x_nr,"frango", true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,369.9786,-4.0798,1001.8589))
				    {//Cluckin Bell
				        if(Groceries[playerid][pChicken] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(thestring, sizeof(thestring), "Frango");
							    strmid(Cooking[playerid][pCook1], thestring, 0, strlen(thestring), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(thestring, sizeof(thestring), "");
							    strmid(Cooking[playerid][pCook2], thestring, 0, strlen(thestring), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(thestring, sizeof(thestring), "Frango");
							    strmid(Cooking[playerid][pCook3], thestring, 0, strlen(thestring), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(thestring, sizeof(thestring), "Frango");
							    strmid(Cooking[playerid][pCook4], thestring, 0, strlen(thestring), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(thestring, sizeof(thestring), "Frango");
							    strmid(Cooking[playerid][pCook5], thestring, 0, strlen(thestring), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem espaco na lista de preparos.");
						        return true;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem frango consigos.");
				            return true;
				        }
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa estar no chuckin bell parar preparar isso.");
					    return true;
				    }
				}
				else if(strcmp(x_nr,"hamburger", true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,376.4466,-60.9574,1001.5078) || PlayerToPoint(3.0,playerid,378.1215,-57.4928,1001.5078))
					{//Burgershot
					    if(Groceries[playerid][pHamburger] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(thestring, sizeof(thestring), "Hamburger");
							    strmid(Cooking[playerid][pCook1], thestring, 0, strlen(thestring), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(thestring, sizeof(thestring), "Hamburger");
							    strmid(Cooking[playerid][pCook2], thestring, 0, strlen(thestring), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(thestring, sizeof(thestring), "Hamburger");
							    strmid(Cooking[playerid][pCook3], thestring, 0, strlen(thestring), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(thestring, sizeof(thestring), "Hamburger");
							    strmid(Cooking[playerid][pCook4], thestring, 0, strlen(thestring), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(thestring, sizeof(thestring), "Hamburger");
							    strmid(Cooking[playerid][pCook5], thestring, 0, strlen(thestring), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem espaco na lista de preparos.");
						        return true;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem hamburges consigo.");
				            return true;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa estar no burguer shot para preparar isso.");
					    return true;
					}
				}
				else if(strcmp(x_nr,"pizza", true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,374.1185,-113.6361,1001.4922) || PlayerToPoint(3.0,playerid,377.7971,-113.7668,1001.4922))
					{//Well Stacked Pizza
					    if(Groceries[playerid][pPizza] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(thestring, sizeof(thestring), "Pizza");
							    strmid(Cooking[playerid][pCook1], thestring, 0, strlen(thestring), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(thestring, sizeof(thestring), "Pizza");
							    strmid(Cooking[playerid][pCook2], thestring, 0, strlen(thestring), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(thestring, sizeof(thestring), "Pizza");
							    strmid(Cooking[playerid][pCook3], thestring, 0, strlen(thestring), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(thestring, sizeof(thestring), "Pizza");
							    strmid(Cooking[playerid][pCook4], thestring, 0, strlen(thestring), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(thestring, sizeof(thestring), "Pizza");
							    strmid(Cooking[playerid][pCook5], thestring, 0, strlen(thestring), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(thestring, sizeof(thestring), "Você preparou %s, com peso %d KGs.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, thestring);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem espaco na lista de preparos.");
						        return true;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem pizzas consigo.");
				            return true;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa estar na Well Stacked Pizza Co para preparar isso.");
					    return true;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nome de preparo inválido.");
				    return true;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/preparar <nome>");
				SendClientMessage(playerid, COLOR_WHITE, "Nomes Disponíveis: baiacu, peixe, frango, hamburger, pizza.");
				return true;
			}
		}
   		else
	    {
	    	SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está nos lugares de preparo (Burguer Shot / Well Stacked Pizza Co / Chuckin Bell).");
	        return true;
      	}
   	}
	return true;
}

CMD:preparos(playerid)
{
	SendClientMessage(playerid, COLOR_WHITE, "|__________________ Preparos __________________|");
	format(thestring, sizeof(thestring), "(1) Preparo: %s.   Calorias: %d.", Cooking[playerid][pCook1], Cooking[playerid][pCWeight1]);
	SendClientMessage(playerid, COLOR_GREY, thestring);
	format(thestring, sizeof(thestring), "(2) Preparo: %s.   Calorias: %d.", Cooking[playerid][pCook2], Cooking[playerid][pCWeight2]);
	SendClientMessage(playerid, COLOR_GREY, thestring);
	format(thestring, sizeof(thestring), "(3) Preparo: %s.   Calorias: %d.", Cooking[playerid][pCook3], Cooking[playerid][pCWeight3]);
	SendClientMessage(playerid, COLOR_GREY, thestring);
	format(thestring, sizeof(thestring), "(4) Preparo: %s.   Calorias: %d.", Cooking[playerid][pCook4], Cooking[playerid][pCWeight4]);
	SendClientMessage(playerid, COLOR_GREY, thestring);
	format(thestring, sizeof(thestring), "(5) Preparo: %s.   Calorias: %d.", Cooking[playerid][pCook5], Cooking[playerid][pCWeight5]);
	SendClientMessage(playerid, COLOR_GREY, thestring);
	SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
	return true;
}

CMD:licencas(playerid)   // licensas
{
	if(IsPlayerConnected(playerid))
	{
		new text1[14];
		new text2[14];
		new text3[14];
		new text4[14];
		new text5[14];
		if(Player[playerid][pCarLic]) { text1 = "Passou"; } else { text1 = "Não Passou"; }
		if(Player[playerid][pFlyLic]) { text4 = "Passou"; } else { text4 = "Não Passou"; }
		if(Player[playerid][pBoatLic]) { text2 = "Passou"; } else { text2 = "Não Passou"; }
		if(Player[playerid][pFishLic]) { text3 = "Passou"; } else { text3 = "Não Passou"; }
		if(Player[playerid][pGunLic]) { text5 = "Passou"; } else { text5 = "Não Passou"; }
		SendClientMessage(playerid, COLOR_WHITE, "|__________________ licenças __________________|");
		format(thestring, sizeof(thestring), "licença terrestre: %s - %d/20 pontos.", text1, Player[playerid][pCarLicPoints]);
		SendClientMessage(playerid, COLOR_YELLOW, thestring);
		format(thestring, sizeof(thestring), "licença aérea: %s.", text4);
		SendClientMessage(playerid, COLOR_YELLOW, thestring);
		format(thestring, sizeof(thestring), "licença náutica: %s.", text2);
		SendClientMessage(playerid, COLOR_YELLOW, thestring);
		format(thestring, sizeof(thestring), "licença de pesca: %s.", text3);
		SendClientMessage(playerid, COLOR_YELLOW, thestring);
		format(thestring, sizeof(thestring), "licença de armas: %s.", text5);
		SendClientMessage(playerid, COLOR_YELLOW, thestring);
		SendClientMessage(playerid, COLOR_WHITE, "|______________________________________________|");
	}
 	return true;
}

CMD:gf(playerid)
{
	if(PlayerTied[playerid] > 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você foi sequestrado, e está incomunicável!");

	new teamnumber;
	if(Player[playerid][pLeader] != 0) teamnumber = Player[playerid][pLeader];
	else if(Player[playerid][pMember] != 0) teamnumber = Player[playerid][pMember];

	if(Player[playerid][pRequestingBackup] != 1)
	{
		if(IsACrime(playerid))
		{
			format(thestring, sizeof(thestring), "[Gangue]: %s está pedindo reforço, Vá para a marca rosa .", Player[playerid][pName]);
			Player[playerid][pRequestingBackup] = 1;
			foreach(new i: Player)
			{
				if(Player[i][pMember] == teamnumber || Player[i][pLeader] == teamnumber)
				{
					SetPlayerMarkerForPlayer(i, playerid, COLOR_PINK);
					SetPlayerMarkerForPlayer(i, playerid, COLOR_PINK);
					SendClientMessage(i, COLOR_PINK, thestring);
				}
			}
			SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[Info]:{FFFFFF} Digite /rgf pra retirar o alerta.");
			SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é de uma gang");
	}
	else
		SendClientMessage(playerid, COLOR_GREY, "Você já tem um pedido de reforço ativo!");

	return true;
}

CMD:rgf(playerid)
{
	BackupClearGang(playerid, 0);
	return true;
}

CMD:mostrarlicencas(playerid, params[])
{
	return cmd_ml(playerid, params);
}

CMD:ml(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		new giveid;
		if(sscanf(params, "u", giveid))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/ml <id/nick>");

		if(IsPlayerConnected(giveid))
		{
			if(giveid != INVALID_PLAYER_ID)
			{
				if(ProxDetectorS(8.0, playerid, giveid))
				{
					if(giveid == playerid) { SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/licencas. Você não pode fazer isto.!"); return true; }
					new text1[20];
					new text2[20];
					new text3[20];
					new text4[20];
					new text5[20];
					if(Player[playerid][pCarLic]) { text1 = "Passou"; } else { text1 = "Não Passou"; }
					if(Player[playerid][pFlyLic]) { text4 = "Passou"; } else { text4 = "Não Passou"; }
					if(Player[playerid][pBoatLic]) { text2 = "Passou"; } else { text2 = "Não Passou"; }
					if(Player[playerid][pFishLic]) { text3 = "Passou"; } else { text3 = "Não Passou"; }
					if(Player[playerid][pGunLic]) { text5 = "Passou"; } else { text5 = "Não Passou"; }
					format(thestring, sizeof(thestring), "|__________ Licenças de %s __________|", Player[playerid][pName]);
					SendClientMessage(giveid, COLOR_WHITE, thestring);
					format(thestring, sizeof(thestring), "licença terrestre: %s - %d/20 pontos.", text1, Player[playerid][pCarLicPoints]);
					SendClientMessage(giveid, COLOR_GREY, thestring);
					format(thestring, sizeof(thestring), "licença aérea: %s.", text4);
					SendClientMessage(giveid, COLOR_GREY, thestring);
					format(thestring, sizeof(thestring), "licença náutica: %s.", text2);
					SendClientMessage(giveid, COLOR_GREY, thestring);
					format(thestring, sizeof(thestring), "licença de pesca: %s.", text3);
					SendClientMessage(giveid, COLOR_GREY, thestring);
					format(thestring, sizeof(thestring), "licença de armas: %s.", text5);
					SendClientMessage(giveid, COLOR_GREY, thestring);
					format(thestring, sizeof(thestring), "%s mostrou suas licenças para você", Player[playerid][pName]);
					SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					format(thestring, sizeof(thestring), "Você mostrou suas licenças para %s.", Player[giveid][pName]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				}
				else
				{
					SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Esse jogador não está próximo à você.");
					return true;
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
			return true;
		}
	}
	return true;
}

CMD:revistar(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
	    new giveid;
	    if(!IsACop(playerid))
			return SendClientMessage(playerid, COLOR_WHITE, "Você Presisa Ser FA/PM/PF para revistar!");
		if(sscanf(params, "u", giveid))
			return SendClientMessage(playerid, COLOR_WHITE, "[Uso]: {FFFFFF}/revistar <id/nick>");

		if(IsPlayerConnected(giveid))
		{
			if(giveid != INVALID_PLAYER_ID)
			{
			    if(ProxDetectorS(8.0, playerid, giveid))
				{
				    if(giveid == playerid) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode mostrar para si mesmo!"); return true; }

				    format(thestring, sizeof(thestring), "Itens de %s:", Player[giveid][pName]);
			        SendClientMessage(playerid, 0x0066FFFF, thestring);

                    new bool:found = false;
                    //Ilegais
				    if(Player[giveid][pDrugs] > 0)
                    {
                        new str[64];
                        format(str, 64, "- {FFFFFF}Drogas (%dg)", Player[giveid][pDrugs]);
                        SendClientMessage(playerid, COLOR_YELLOW, str);

                        found = true;
                    }
				    if(Player[giveid][pMats] > 0)
                    {
                        SendClientMessage(playerid, COLOR_YELLOW, "- {FFFFFF}Materiais");

                        found = true;
                    }
                    if(Player[giveid][pExplosivo])
                    {
                        SendClientMessage(playerid, COLOR_YELLOW, "- {FFFFFF}Dinamite");

                        found = true;
                    }
                    //+/- Ilegais
                    if(Player[giveid][pCorda] > 0)
                    {
                        if(Player[giveid][pCorda] == 1)
                            SendClientMessage(playerid, 0xFFFF00FF, "- {FFFFFF}Corda");
                        else
                            SendClientMessage(playerid, 0xFFFF00FF, "- {FFFFFF}Cordas");

                        found = true;
                    }
                    if(Fishes[giveid][pWeight1] > 0 || Fishes[giveid][pWeight2] > 0 || Fishes[giveid][pWeight3] > 0 || Fishes[giveid][pWeight4] > 0 || Fishes[giveid][pWeight5] > 0 || Fishes[giveid][pWeight6] > 0)
                    {
                        SendClientMessage(playerid, 0xFFFF00FF, "- {FFFFFF}Peixes");

                        found = true;
                    }
                    //Legais
                    if(Player[playerid][pPhone] > 0)
                    {
                        SendClientMessage(playerid, 0x0066FFFF, "- {FFFFFF}Celular");

                        found = true;
                    }
                    if(Player[giveid][pCDPlayer] > 0)
                    {
                        SendClientMessage(playerid, 0x0066FFFF, "- {FFFFFF}iPod");

                        found = true;
                    }
                    if(Player[giveid][pPhoneBook] > 0)
                    {
                        SendClientMessage(playerid, 0x0066FFFF, "- {FFFFFF}Agenda");

                        found = true;
                    }

                    if(!found)
                        SendClientMessage(playerid, 0x0066FFFF, "- {FFFFFF}Nada.");

                    SendClientMessage(playerid, 0x0066FFFF, "|---|");

					format(thestring, sizeof(thestring), "* %s revistou %s.", PlayerGetName(playerid), PlayerGetName(giveid));
					ProxDetector(30.0, playerid, thestring, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está perto de você.");
				    return true;
				}
			}
		}
        else
        {
            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
            return true;
        }
	}
    return true;
}

CMD:distintivo(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(IsACop(playerid))
		{
			new giveid;
			if(sscanf(params, "u", giveid))
			{
				SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/distintivo <id/nick>");
				return true;
			}
			if(IsPlayerConnected(giveid))
			{
				if(giveid != INVALID_PLAYER_ID)
				{
					if(ProxDetectorS(8.0, playerid, giveid))
					{
						if(giveid == playerid) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode Mostrar Pra Si mesmo!"); return true; }
						format(thestring, sizeof(thestring), "* %s mostrou seu dinstintivo para %s.", PlayerGetName(playerid) ,PlayerGetName(giveid));
						ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SendClientMessage(giveid,COLOR_YELLOW,"=========Distintivo========");
                        format(thestring, sizeof(thestring), "%s: %s", GetPlayerRank(playerid), Player[playerid][pName]);
/*						if(Player[playerid][pMember] == TEAM_PM || Player[playerid][pLeader] == TEAM_PM
                        || GetPlayerOrg(playerid) == TEAM_ROCAM || GetPlayerOrg(playerid) == TEAM_FT)//PD Ranks
						{
							if(Player[playerid][pRank] == 1) {  }
							else if(Player[playerid][pRank] == 2) { format(thestring, sizeof(thestring), "Cabo: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 3) { format(thestring, sizeof(thestring), "Oficial: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 4) { format(thestring, sizeof(thestring), "Capitão: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 5) { format(thestring, sizeof(thestring), "Coronel: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 6) { format(thestring, sizeof(thestring), "Chefe de Estado Maior: %s", Player[playerid][pName]); }
						}
						else if(Player[playerid][pMember] == TEAM_PF || Player[playerid][pLeader] == TEAM_PF)//FBI Ranks
						{
							if(Player[playerid][pRank] == 1) { format(thestring, sizeof(thestring), "Escrivão: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 2) { format(thestring, sizeof(thestring), "Investigador: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 3) { format(thestring, sizeof(thestring), "Investigador Especial: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 4) { format(thestring, sizeof(thestring), "Agente federal: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 5) { format(thestring, sizeof(thestring), "Chefe de departamento: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 6) { format(thestring, sizeof(thestring), "Delegado Federal: %s", Player[playerid][pName]); }
						}
						else if(Player[playerid][pMember] == TEAM_FA || Player[playerid][pLeader] == TEAM_FA)//FA Ranks
						{
							if(Player[playerid][pRank] == 1) { format(thestring, sizeof(thestring), "Soldado: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 2) { format(thestring, sizeof(thestring), "Sargento: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 3) { format(thestring, sizeof(thestring), "Tenente: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 4) { format(thestring, sizeof(thestring), "Capitão: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 5) { format(thestring, sizeof(thestring), "Coronel: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 6) { format(thestring, sizeof(thestring), "General: %s", Player[playerid][pName]); }
						}
						else if(Player[playerid][pMember] == TEAM_MUNICIPAL || Player[playerid][pLeader] == TEAM_MUNICIPAL)//GN Ranks
						{
							if(Player[playerid][pRank] == 1) { format(thestring, sizeof(thestring), "Estagiário Guarda: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 2) { format(thestring, sizeof(thestring), "Policial Rodoviário: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 3) { format(thestring, sizeof(thestring), "Sub-Inspetor Guarda: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 4) { format(thestring, sizeof(thestring), "Inspetor Guarda: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 5) { format(thestring, sizeof(thestring), "Sub-Chefe Guarda: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 6) { format(thestring, sizeof(thestring), "Chefe da Guarda: %s", Player[playerid][pName]); }
						}
						else if(Player[playerid][pMember] == TEAM_BOPE || Player[playerid][pLeader] == TEAM_BOPE)//BOPE Ranks
						{
							if(Player[playerid][pRank] == 1) { format(thestring, sizeof(thestring), "Aspirante %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 2) { format(thestring, sizeof(thestring), "Soldado: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 3) { format(thestring, sizeof(thestring), "Sargento: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 4) { format(thestring, sizeof(thestring), "Tenente %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 5) { format(thestring, sizeof(thestring), "Tenente-Coronel: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 6) { format(thestring, sizeof(thestring), "Comandante: %s", Player[playerid][pName]); }
						}
						else if(Player[playerid][pMember] == TEAM_PCIVIL || Player[playerid][pLeader] == TEAM_PCIVIL)
						{
							if(Player[playerid][pRank] == 6) { format(thestring, sizeof(thestring), "Delegado Civil: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 5) { format(thestring, sizeof(thestring), "Chefe de departamento: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 4) { format(thestring, sizeof(thestring), "Agente Civil: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 3) { format(thestring, sizeof(thestring), "Espião Civil: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 2) { format(thestring, sizeof(thestring), "Investigador Civil: %s", Player[playerid][pName]); }
							else if(Player[playerid][pRank] == 1) { format(thestring, sizeof(thestring), "Escrivão Civil: %s", Player[playerid][pName]); }
						}*/
						SendClientMessage(giveid, COLOR_YELLOW, thestring);
						SendClientMessage(giveid,COLOR_YELLOW,"==========================");
					}
					else
					{
						SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está perto de você!");
						return true;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador está offline!");
				return true;
			}
		}
	}
	return true;
}

CMD:revistararmas(playerid, params[])
{
	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/revistararmas <id/nick>");
	if(giveid == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, COLOR_GREY, " O jogador está offline");
	if(!IsACop(playerid) || !ProxDetectorS(8.0, playerid, giveid))
		return SendClientMessage(playerid, COLOR_WHITE, "Você Presisa Ser FA/PM/PF para revistar ou está longe do suspeito!");

	new sweapon, sammo, wname[32];
	if(giveid == playerid) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode mostrar para si mesmo!"); return true; }

	format(thestring, sizeof(thestring), "* %s Revistou %s para quaisquer itens ilegais.", PlayerGetName(playerid) ,PlayerGetName(giveid));
	ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	format(thestring, sizeof(thestring), "%s possui as seguintes armas:", Player[giveid][pName]);
	SendClientMessage(playerid, COLOR_ORANGE, thestring);
	for(new i=0; i<13; i++)
	{
		GetPlayerWeaponData(giveid, i, sweapon, sammo);
		GetWeaponName(sweapon, wname,32);
		if(sweapon != 0)
		{
			format(thestring, sizeof(thestring), "Slot: %d, Arma: %s, ArmaID: %d, Munição: (%d)", i, wname, sweapon, sammo);
			SendClientMessage(playerid, COLOR_YELLOW, thestring);
		}
	}
	return true;
}

CMD:fakekill(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 1)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    if(TipoAntiFK[playerid] == 0)
    {
        TipoAntiFK[playerid] = 1;
        SendClientMessage(playerid, COLOR_GREY, "Anti Fakekill Ligado.");
    }
    else if(TipoAntiFK[playerid] == 1)
    {
        TipoAntiFK[playerid] = 2;
        SendClientMessage(playerid, COLOR_GREY, "Anti Fakekill alterado para Texto.");
    }
    else if(TipoAntiFK[playerid] == 2)
    {
        TipoAntiFK[playerid] = 0;
        SendClientMessage(playerid, COLOR_GREY, "Anti Fakekill Desligado.");
    }
    return true;
}

CMD:dropweapon(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 3)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(!dw)
	{
		dw = true;
		format(thestring, sizeof(thestring), "Drop Weapon ativado por %s !",ReturnPlayer(playerid));
		ABroadCast(COLOR_GREY,thestring, 1);
		return true;
	}
	else
	{
		dw = false;
        format(thestring, sizeof(thestring), "Drop Weapon desativado por %s !",ReturnPlayer(playerid));
		ABroadCast(COLOR_GREY,thestring, 1);
		return true;
	}
}

CMD:allowrain(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 3)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	if(!allowRain)
	{
		allowRain = true;
		format(thestring, sizeof(thestring), "Chuva ativado por %s !", ReturnPlayer(playerid));
		ABroadCast(COLOR_GREY,thestring, 1);
		return true;
	}
	else
	{
		allowRain = false;
        format(thestring, sizeof(thestring), "Chuva desativado por %s !", ReturnPlayer(playerid));
		ABroadCast(COLOR_GREY,thestring, 1);
		return true;
	}
}

CMD:timefix(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return 0;
	if(GetAdminLevel(playerid) < 7)
		return 0;

	new time;
	if(sscanf(params, "d", time))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/TimeFix <Time>");

    timeFixer = time;
    return 1;
}

CMD:verarmas(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 1)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/verarmas <id/nick>");
	if(giveid == INVALID_PLAYER_ID)
		return SendClientMessage(playerid, COLOR_GREY, "O jogador está offline");

	new sweapon, sammo, wname[32];
    format(thestring, sizeof(thestring), "%s possui as seguintes armas:", Player[giveid][pName]);
    SendClientMessage(playerid, COLOR_ORANGE, thestring);
	for(new i=0; i<13; i++)
	{
		GetPlayerWeaponData(giveid, i, sweapon, sammo);
		GetWeaponName(sweapon, wname,32);
		if(sweapon != 0)
		{
			format(thestring, sizeof(thestring), "Arma: %s, ID: %d, Municão: (%d)", wname, sweapon, sammo);
			SendClientMessage(playerid, COLOR_YELLOW, thestring);
		}
	}
	return true;
}

CMD:laptop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(Player[playerid][pMember] == TEAM_HITMAN || Player[playerid][pLeader] == TEAM_HITMAN)
		{
			if(ConnectedToLaptop[playerid] == true)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você desligou seu Laptop, e desconectou da Agência.");
				ConnectedToLaptop[playerid] = false;
				return true;
			}
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "[AGÊNCIA]: Você abriu seu Laptop, e conectou à Agência. ");
			SendClientMessage(playerid, COLOR_GREEN, "Computador da Agencia:");
			SendClientMessage(playerid, COLOR_WHITE, "- Contratos");
			SendClientMessage(playerid, COLOR_WHITE, "- Atribuir");
			SendClientMessage(playerid, COLOR_WHITE, "- Informação dos contratos");
			SendClientMessage(playerid, COLOR_WHITE, "- Membros");
			SendClientMessage(playerid, COLOR_WHITE, "- Logout");
			format(thestring, sizeof(thestring), "Mês: %s | Dia: %d | Hora: %02d:%02d", MonthNames[ClockTime[dMonth]-1], ClockTime[dDay], ClockTime[tHour], ClockTime[tMinute]);
			SendClientMessage(playerid, COLOR_WHITE, thestring);
			SendClientMessage(playerid, COLOR_GREEN, "|---|");
			ConnectedToLaptop[playerid] = true;
		}
		else
		{
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Hitman.");
			return true;
		}
	}
	return true;
}

CMD:email(playerid)
{
    if(Player[playerid][pPC] == 1)
    {
	    new listitems[] = "Ler\nEnviar\nApagar";
	    ShowPlayerDialog(playerid, 25, DIALOG_STYLE_LIST, "Meu email : ", listitems,"Selecionar","Sair");
	}
	else
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não possui um computador.");

    return true;
}

/*CMD:contrabando(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(Player[playerid][pJob] != VARMAS)
		{
			SendClientMessage(playerid,COLOR_GREY,"Você não é um Vendedor de Armas.");
			return true;
		}
		new x_nr[16], moneys;
		if(!sscanf(params, "s[16]d", x_nr, moneys))
		{
			if(strcmp(x_nr,"obter", true) == 0)
			{
				if(PlayerToPoint(3.0,playerid,284.5544,-103.3899,1001.5229))
				{
					if(MatsHolding[playerid] >= 15)
					{
						SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode carregar mais pacotes.");
						return true;
					}
					if(moneys < 1 || moneys > 20) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O número de pacotes deve ser entre 1 a 20."); return true; }
					new price = moneys * 20;
					if(GetPlayerGP(playerid) >= price)
					{
						format(thestring, sizeof(thestring), "Você fez a compra de %d materias para troca por R$ %d.", moneys, price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "Siga o checkpoint para chegar ao local de entrega.");
						GivePlayerGP(playerid, - price);
						MatsHolding[playerid] = moneys;
						SetPlayerCheckpoint(playerid, 848.8222, -1360.2641, 13.5468, 2.0);
						CP[playerid] = CP_Marcos + CP_Material;
					}
					else
					{
						format(thestring, sizeof(thestring), "Você não possui esse dinheiro (R$ %d).", price);
						SendClientMessage(playerid, COLOR_GREY, thestring);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na Ammu nation.");
					return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nome não indentificado.");
				return true;
			}
		}
		else if(!sscanf(params, "s[16]", x_nr))
		{
			if(strcmp(x_nr,"materiais", true) == 0)
			{
				if(PlayerToPoint(3.0,playerid, 848.8222, -1360.2641, 13.5468))
				{
					if(MatsHolding[playerid] > 0)
					{
						new payout = (100)*(MatsHolding[playerid]);
						format(thestring, sizeof(thestring), "Você recebeu seus %d materiais encomendados.", payout);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
						Player[playerid][pMats] += payout;
						MatsHolding[playerid] = 0;
						CP[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem encomendas nenhuma.");
						return true;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa estar no local de entrega. Use /gps.");
					return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nome não indentificado.");
				return true;
			}
		}
		else if(sscanf(params, "s[16]d", x_nr, moneys))
            return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/contrabando obter <quantia>");
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/contrabando <nome>");
			SendClientMessage(playerid, COLOR_WHITE, "Nomes Disponíveis: obter, materiais.");
			return true;
		}
	}
	return true;
}*/

CMD:tacarfogo(playerid)
{
	if(Player[playerid][pJailTime] > 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando na prisão.");

	if(GetPlayerInterior(playerid) != 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando em interiores");

	if(!IsACrime(playerid))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um criminoso.");

	if(Player[playerid][pMorto] == 1)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando agora.");

	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando em um veículo.");

	if(GetTickCount() - AntiFlood[playerid][0] < 900000)
	{
		format(thestring, 128, "[ERRO]:{FFFFFF} Você precisa esperar %d segundos para usar esse comando novamente!",900-(GetTickCount() - AntiFlood[playerid][0])/1000);
		SendClientMessage(playerid, COLOR_RED, thestring);
		return true;
	}
	AntiFlood[playerid][0] = GetTickCount();

	new Float:Velocity[3];
	GetPlayerVelocity(playerid, Velocity[0], Velocity[1], Velocity[2]);
	if(Velocity[2] != 0)
	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando agora.");

	new Float:X, Float:Y, Float:Z, Float:A;
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, A);
	new i;
	for(i=0; i<50; i++)
	{
		if(fogo[i] == 0)
		{
			fogo[i] = 2;
			fogoobj[i] = CreateDynamicObject(18691, X, Y+1, Z-2, 0.0, 0.0, A+180);
			fogoposX[i] = X;
			fogoposY[i] = Y;
			fogoposZ[i] = Z;
			GivePlayerGP(playerid, 200);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você ganhou R$200 por provocar um incêndio.");
			format(thestring, sizeof(thestring), "%s tacou fogo.", ReturnPlayer(playerid));
			WriteLog("Fogo",thestring);
            foreach(new j: Player)
                if(Player[j][pMember] == TEAM_BOMBE)
			     SetPlayerMapIcon(j, i + 50, X,Y,Z,20,2,MAPICON_GLOBAL);
			return true;
		}
		if(i == 49)
			return SendClientMessage(playerid, COLOR_RED, "O limite de fogos no servidor foi atingido.");

	}
	return true;
}

//Resolver venda de armas

CMD:venderarmas(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(Player[playerid][pJob] != VARMAS)
			return SendClientMessage(playerid,COLOR_GREY,"Você não é um vendedor de armas.");

		if(PlayerToPoint(40.0, playerid, 245.9469,75.8629,1003.6406))
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode vender armas na DP! ");

		new x_weapon[40],weapon[MAX_PLAYERS],ammo[MAX_PLAYERS],price[MAX_PLAYERS];
		new giveid;
		if(sscanf(params, "us[40]", giveid, x_weapon))
		{
			SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/venderarmas <id/nick> <nome da arma>");
			SendClientMessage(playerid, COLOR_GREY, "Armas: flores(25) sdpistol(100) eagle(150) mp5(200) escopeta(200)");
			SendClientMessage(playerid, COLOR_GREY, "Armas: ak47(600) m4(600) rifle (600) paraquedas (100)");
			return true;
		}
		if(IsPlayerConnected(giveid))
		{
			if(giveid != INVALID_PLAYER_ID)
			{
				if(strcmp(x_weapon,"sdpistol", true) == 0) { if(Player[playerid][pMats] > 99) { weapon[playerid] = 23; price[playerid] = 100; ammo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para esta arma."); return true; } }
				else if(strcmp(x_weapon,"flores", true) == 0) { if(Player[playerid][pMats] > 24) { weapon[playerid] = 14; price[playerid] = 25; ammo[playerid] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para esta arma."); return true; } }
				else if(strcmp(x_weapon,"eagle", true) == 0) { if(Player[playerid][pMats] > 199) { weapon[playerid] = 24; price[playerid] = 150; ammo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para esta arma."); return true; } }
				else if(strcmp(x_weapon,"mp5", true) == 0) {	if(Player[playerid][pMats] > 199) { weapon[playerid] = 29; price[playerid] = 200; ammo[playerid] = 200; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para esta arma."); return true; } }
				else if(strcmp(x_weapon,"escopeta", true) == 0) { if(Player[playerid][pMats] > 199) { weapon[playerid] = 25; price[playerid] = 200; ammo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para esta arma."); return true; } }
				else if(strcmp(x_weapon,"ak47", true) == 0) { if(Player[playerid][pMats] > 599) { weapon[playerid] = 30; price[playerid] = 600; ammo[playerid] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para esta arma."); return true; } }
				else if(strcmp(x_weapon,"m4", true) == 0) { if(Player[playerid][pMats] > 599) { weapon[playerid] = 31; price[playerid] = 600; ammo[playerid] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para esta arma."); return true; } }
				else if(strcmp(x_weapon,"rifle", true) == 0) { if(Player[playerid][pMats] > 599) { weapon[playerid] = 33; price[playerid] = 600; ammo[playerid] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para esta arma."); return true; } }
				else if(strcmp(x_weapon,"paraquedas", true) == 0) { if(Player[playerid][pMats] > 99) { weapon[playerid] = 46; price[playerid] = 100; ammo[playerid] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para esta arma."); return true; } }
				else if(strcmp(x_weapon,"spray", true) == 0) { if(Player[playerid][pMats] > 20) { weapon[playerid] = 41; price[playerid] = 50; ammo[playerid] = 300; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para esta arma."); return true; } }
				else { SendClientMessage(playerid,COLOR_GREY,"Nome inexistente."); return true; }
				if(ProxDetectorS(5.0, playerid, giveid))
				{
					if(giveid == playerid)
						return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode vender armas a você mesmo");

					if(Player[playerid][pMiserPerk] > 0)
					{
						new skill = 2 * Player[playerid][pMiserPerk];
						new mats = price[playerid] / 100;
						price[playerid] -= (mats)*(skill);
					}
					ConsumingMoney[playerid] = 1;
					format(thestring, sizeof(thestring), "Você deu a %s uma %s com %d municões usando %d materiais.", Player[giveid][pName],x_weapon, ammo[playerid], price[playerid]);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GREY, thestring);
					format(thestring, sizeof(thestring), "Você recebeu uma %s com %d de %s.", x_weapon, ammo[playerid], Player[playerid][pName]);
					SendClientMessage(giveid, COLOR_GREY, thestring);
					PlayerPlaySound(giveid, 1052, 0.0, 0.0, 0.0);
					format(thestring, sizeof(thestring), "* %s recebeu armas de %s.", PlayerGetName(giveid), PlayerGetName(playerid));
					ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					new gunname[100];
					GetWeaponName(weapon[playerid], gunname, sizeof(gunname));
					format(thestring, sizeof(thestring), "* %s vendeu uma %s para %s.", PlayerGetName(playerid), gunname,PlayerGetName(giveid));
					ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SafeGivePlayerWeapon(giveid,weapon[playerid],ammo[playerid]);
					Player[playerid][pMats] -= price[playerid];
				}
				else
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Aproxime-se.");
			}

		}
		else
		{
			format(thestring, sizeof(thestring), "%d Inválido.", giveid);
			SendClientMessage(playerid, COLOR_GREY, thestring);
		}
	}
	return true;
}

CMD:pegar(playerid, params[])
{
	new x_job[14], ammount;
	if(!sscanf(params, "s[14]d", x_job, ammount))
	{
	    if(strcmp(x_job,"drogas", true) == 0)
		{
		    if(ammount < 1) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Quantidade Minima: 1.");
		    else if(Player[playerid][pJob] != VDROGAS) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é Vendedor de Drogas.");
		    else if(!PlayerToPoint(2.0, playerid, 2548.3142,-1293.8187,1044.1250)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta na Casa do Crack.");

			new tel,
				price,
				maxd,
				level = Player[playerid][pDrugsSkill];

			if(level >= 0 && level <= 10000) //Level 1
			{
				level = 1;
				tel = 10;
				maxd = 1000;
			}
			else if(level > 10000 && level <= 25000) //Level 2
			{
				level = 2;
				tel = 8;
				maxd = 5000;
			}
			else if(level > 25000 && level <= 50000) //Level 3
			{
				level = 3;
				tel = 6;
				maxd = 10000;
			}
			else if(level > 50000 && level <= 100000) //Level 4
			{
				level = 4;
				tel = 4;
				maxd = 15000;
			}
			else if(level > 100000) //Level 5
			{
				level = 5;
				tel = 2;
				maxd = 20000;
			}
			price = ammount * tel;

			if(Player[playerid][pDrugs] > maxd || Player[playerid][pDrugs] + ammount > maxd)
			{
			    format(thestring, 256, "[ERRO]:{FFFFFF} Vendedores Nível %d so Podem Portar %dg de Drogas.", level, maxd);
			    SendClientMessage(playerid, SERVER_INFO, thestring);
			    return 1;
			}
			else if(GetPlayerGP(playerid) < price)
			{
			    format(thestring, 256, "[ERRO]:{FFFFFF} Você não tem {009900}R$%d{AA3333}.", tel * ammount);
			    SendClientMessage(playerid, SERVER_INFO, thestring);
			    return 1;
			}
			format(thestring, sizeof(thestring), "* Você comprou %dg de Drogas por {009900}R$%d{33CCFF}.", ammount, price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			GivePlayerGP(playerid, -price);
			Player[playerid][pDrugs] += ammount;
			return 1;
		}
		else
			goto ErrorMsg;
	}
	else if(!sscanf(params, "s[14]", x_job))
	{
	    if(strcmp(x_job,"gasolina", true) == 0)
		{
			if(IsAtGasStation(playerid))
			{
			    if(Player[playerid][pFuel] >= 100)
                    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já tem muita gasolina.");
                if(!Pay(playerid, floatround(BizPostoPrice * 20)))
                    return 1;

				new price = floatround(BizPostoPrice * 20);
				format(thestring, sizeof(thestring), "Você pegou um galão com 20 litros pelo preço de R$ %d", price);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				Player[playerid][pFuel] += 20;
                GiveBizMoney(Biz_Posto, price);
				return true;
			}
			else
			{
				SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não está num posto de gasolina!");
				return true;
			}
		}
		else
			goto ErrorMsg;
	}
	else
	{
		ErrorMsg:
		SendClientMessage(playerid, COLOR_WHITE, "|__________________ Pegando __________________|");
		SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/pegar <nome> <quantidade>");
		SendClientMessage(playerid, COLOR_WHITE, "Nomes Disponíveis: drogas, gasolina");
		SendClientMessage(playerid, COLOR_GREEN, "|_________________________________________|");
		return true;
	}
	return true;
}

CMD:emprego(playerid)
{
	if(Player[playerid][pJob] == DESEMPREGADO)
	{
		if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid, 1215.1304, -11.8431, 1000.9219))
		{
            new Job = PROSTITUTA;

            if(!AllowedJob(playerid, Job))
                return ShowAllowedOrgs(playerid, Job, false);

			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você está prestes a tornar-se uma Prostituta, e obter um contrato por 30 minutos.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você tem que terminar este contrato em primeiro lugar, se você deseja sair do trabalho mais tarde.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Se você tiver a certeza de se tornar um Prostituta, digite /aceitar emprego");
			GettingJob[playerid] = Job;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,2568.6938,-1296.7518,1044.1250))
		{
            new Job = VDROGAS;

            if(!AllowedJob(playerid, Job))
                return ShowAllowedOrgs(playerid, Job, false);

			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você está prestes a tornar-se um Vendedor de Drogas, e obter um contrato por 30 minutos.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você tem que terminar este contrato em primeiro lugar, se você deseja sair do trabalho mais tarde.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Se você tiver a certeza de se tornar um Vendedor de Drogas, digite /aceitar emprego");
			GettingJob[playerid] = Job;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,1615.3705,-1502.8062,14.2257))
		{
            new Job = LCARROS;

            if(!AllowedJob(playerid, Job))
                return ShowAllowedOrgs(playerid, Job, false);

			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você está prestes a tornar-se um Ladrão de Carros, e obter um contrato por 30 minutos.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você tem que terminar este contrato em primeiro lugar, se você deseja sair do trabalho mais tarde.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Se você tiver a certeza de se tornar um Ladrão de Carros, digite /aceitar emprego");
			GettingJob[playerid] = Job;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid, 308.07620, -140.61480, 999.601))
		{
            new Job = VARMAS;

            if(!AllowedJob(playerid, Job))
                return ShowAllowedOrgs(playerid, Job, false);

			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você está prestes a tornar-se um Vendedor de Armas, e obter um contrato por 30 minutos.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você tem que terminar este contrato em primeiro lugar, se você deseja sair do trabalho mais tarde.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Se você tiver a certeza de se tornar um Vendedor de Armas, digite /aceitar emprego");
			GettingJob[playerid] = Job;
		}
		else if(GetPlayerState(playerid) == 1 && PlayerToPoint(3.0, playerid,362.1023,201.5996,1008.3828))
		{
            new Job = JORNALEIRO;

            if(!AllowedJob(playerid, Job))
                return ShowAllowedOrgs(playerid, Job, false);

			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você está prestes a tornar-se um Jornaleiro, e obter um contrato por 30 minutos.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você tem que terminar este contrato em primeiro lugar, se você deseja sair do trabalho mais tarde.");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Se você tiver a certeza de se tornar um Jornaleiro, digite /aceitar emprego");
			GettingJob[playerid] = Job;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um lugar de emprego ou sua organização não permite pegar este emprego!");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já tem um emprego, para sair digite (/desempregar)");

	return true;
}

CMD:imo(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		new giveid;
		if(sscanf(params, "u", giveid))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/imo <id/nick>");

		if(IsACop(playerid))
		{
			if(ProxDetectorS(1.0, playerid, giveid))
			{
				if(IsACop(giveid))
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode imobilizar militares!");

				if(IsPlayerInAnyVehicle(giveid))
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode imobilizar um jogador no veiculo!");

				new randt = random(4)+1;
				if(randt == 1)
				{
					format(thestring, sizeof(thestring), "* %s tentou imobilizar %s, mas não conseguiu.", PlayerGetName(playerid) ,PlayerGetName(giveid));
					ProxDetector(10.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					format(thestring, sizeof(thestring), "Você foi imobilizado pelo oficial %s por 20 segundos.", Player[playerid][pName]);
					SendClientMessage(giveid, COLOR_WHITE, thestring);
					format(thestring, sizeof(thestring), "Você imobilizou %s por 20 segundos..", Player[giveid][pName]);
					SendClientMessage(playerid, COLOR_WHITE, thestring);
					format(thestring, sizeof(thestring), "* %s atirou o tazer em %s e o imobilizou .", PlayerGetName(playerid) ,PlayerGetName(giveid));
					ProxDetector(10.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(giveid, "~r~Imobilizado", 2500, 1);
					Congelar(giveid);
					PlayerCuffed[giveid] = 1;
					PlayerCuffedTime[giveid] = 20;
				}
			}
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é policial!");
	}
	return true;
}

CMD:rf(playerid)
{
	return cmd_reforco(playerid);
}

CMD:reforco(playerid)
{
	if(IsACop(playerid))
	{
		if(PlayerTied[playerid] > 0)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você foi sequestrado, e está incomunicável!");

		if(Player[playerid][pRequestingBackup] != 1)
		{
			format(thestring, sizeof(thestring), "Todas as unidades: %s está pedindo reforco, Vá para a marca vermelha .", Player[playerid][pName]);
			SendTeamMessage(GetPlayerOrg(playerid), COLOR_PM, thestring);
			Player[playerid][pRequestingBackup] = 1;
			foreach(new i: Player)
			{
				if(IsACop(i))
				{
					SetPlayerMarkerForPlayer(i, playerid, COLOR_YELLOW);
					SetPlayerMarkerForPlayer(i, playerid, COLOR_YELLOW);
				}
			}
			SendClientMessage(playerid, COLOR_PM, "Digite /rcr pra retirar o alerta.");
			SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já tem um pedido de reforco ativo!");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é COP");

	return true;
}

CMD:rcr(playerid)
{
	return cmd_reforcoretirar(playerid);
}

CMD:reforcoretirar(playerid)
{
    if(IsACop(playerid))
	{
		BackupClear(playerid, 0);
		return true;
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é militar");

	return true;
}

CMD:algemar(playerid, params[])
{
    if(!IsPlayerConnected(playerid))
        return 1;
	if(!IsACop(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Policial.");

	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_WHITE, "[Uso]: {FFFFFF}/Algemar <ID/Nick>");

	if(!IsPlayerConnected(giveid) || giveid == INVALID_PLAYER_ID || giveid == playerid)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador Não Conectado.");
    if(!ProxDetectorS(5.0, playerid, giveid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Aquele jogador não está perto de você.");
	if(IsACop(giveid))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode algemar um Policial.");
	if(PlayerCuffed[giveid] == 2 || PlayerCuffed[giveid] == 3)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador já esta Algemado.");
    if(GetPlayerState(giveid) == PLAYER_STATE_DRIVER)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não pode estar dirigindo.");
    if(GetPlayerSpecialAction(giveid) != SPECIAL_ACTION_HANDSUP)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não esta rendido.");

	format(thestring, sizeof(thestring), "* %s algemou %s.", PlayerGetName(playerid) ,PlayerGetName(giveid));
	ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	GameTextForPlayer(giveid, "~r~ALGEMADO", 2500, 1);

  //SetPlayerAttachedObject(giveid, 7, 19418, 6, -0.031999, 0.024000, -0.024000, -7.900000, -32.000011, -72.299987, 1.115998, 1.322000, 1.406000);
    SetPlayerAttachedObject(giveid, 7, 19418, 5, 0.017218, 0.033125, -0.012651, 0.000000, 0.000000, 98.266059, 0.780400, 1.000000, 1.977341);
	SetPlayerSpecialAction(giveid, SPECIAL_ACTION_CUFFED);

	PlayerCuffed[giveid] = 2;
	PlayerCuffedTime[giveid] = 180 + random(60);
	return true;
}

CMD:desalgemar(playerid, params[])
{
    if(!IsPlayerConnected(playerid))
        return 1;
	if(!IsACop(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Policial.");

	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Desalgemar <ID/Nick>");

	if(!IsPlayerConnected(giveid) || giveid == INVALID_PLAYER_ID || giveid == playerid)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador Não Conectado.");
    if(!ProxDetectorS(5.0, playerid, giveid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Aquele jogador não está perto de você.");
	if(PlayerCuffed[giveid] != 2 && PlayerCuffed[giveid] != 3)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não esta Algemado.");

	format(thestring, sizeof(thestring), "* %s desalgemou %s.", PlayerGetName(playerid) ,PlayerGetName(giveid));
	ProxDetector(30.0, playerid, thestring, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);

    GameTextForPlayer(giveid, "~g~DESALGEMADO", 2500, 1);

    RemovePlayerAttachedObject(giveid, 7);
    SetPlayerSpecialAction(giveid, SPECIAL_ACTION_NONE);

    PlayerCuffed[giveid] = 0;

    if(Camburao[giveid])
    {
        Descongelar(giveid);
        Camburao[giveid] = false;
    }
	return true;
}

CMD:camburao(playerid, params[])
{
    if(!IsPlayerConnected(playerid))
        return 1;
	if(!IsACop(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Policial.");

    new vehicleid;
	for(vehicleid = 0; vehicleid < MAX_VEHICLES; vehicleid++)
	    if(CheckPlayerDistanceToVehicle(4.0, playerid, vehicleid))
            break;

    if(vehicleid == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está proximo a um Veiculo.");

	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Camburao <ID/Nick>");

	if(!IsPlayerConnected(giveid) || giveid == INVALID_PLAYER_ID || giveid == playerid)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador Não Conectado.");
    if(!ProxDetectorS(5.0, playerid, giveid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Aquele jogador não está perto de você.");
	if(IsACop(giveid))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode fazer isso.");
	if(PlayerCuffed[giveid] != 2 && PlayerCuffed[giveid] != 3)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não esta Algemado.");

    if(Camburao[giveid])
    {
        Camburao[giveid] = false;
        Descongelar(giveid);

        PlayerCuffed[giveid] = 2;

    	format(thestring, sizeof(thestring), "* %s liberou %s do camburão.", PlayerGetName(playerid) ,PlayerGetName(giveid));
    	ProxDetector(30.0, playerid, thestring, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
        return 1;
    }
    new bool:Avaliable[8] = {true, ...};
    foreach(Player, i)
        if(IsPlayerInVehicle(i, vehicleid))
            Avaliable[GetPlayerVehicleSeat(i)] = false;

    new bool:Entrou = false;
    for(new i = 1; i != GetVehicleSeats(vehicleid); i++)
    {
        if(Avaliable[i])
        {
            PutPlayerInVehicle(giveid, vehicleid, i);
            Entrou = true;
        }
    }
    if(!Entrou)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não há vagas neste veículo.");

    Congelar(giveid);
    Camburao[giveid] = true;

    PlayerCuffed[giveid] = 3;
    PlayerCuffedTime[giveid] = 300;

	format(thestring, sizeof(thestring), "* %s colocou %s no camburão.", PlayerGetName(playerid) ,PlayerGetName(giveid));
	ProxDetector(30.0, playerid, thestring, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
    return 1;
}

CMD:sequestrar(playerid, params[])
{
	if(Player[playerid][pCorda] > 0)
	{
		new giveid, preco;
		if(sscanf(params, "ud", giveid, preco))
			return SendClientMessage(playerid, COLOR_WHITE, "[Uso]: {FFFFFF}/sequestrar <id/nick> <preço>");

		if(preco < 1 && preco > 4000)
			return SendClientMessage(playerid,COLOR_GREY,"[Uso]: {FFFFFF}Preço até R$4000.");

		if(IsPlayerConnected(giveid))
		{
			if(giveid != INVALID_PLAYER_ID)
			{
				if(PlayerTied[giveid] > 0)
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador já está amarrado.");

				if(Player[giveid][pLevel] == 2)
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode sequestrar um novato!");

				if(ProxDetectorS(8.0, playerid, giveid))
				{
					new car = GetPlayerVehicleID(playerid);
					if(giveid == playerid) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode se amarrar!"); return true; }
					if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveid, car))
					{
						format(thestring, sizeof(thestring), "Você foi sequestrado por %s.", Player[playerid][pName]);
						SendClientMessage(giveid, COLOR_WHITE, thestring);
						format(thestring, sizeof(thestring), "* %s amarrou %s para que ele não fuja.", PlayerGetName(playerid) ,PlayerGetName(giveid));
						ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(giveid, "~r~Amarrado", 2500, 1);
						Congelar(giveid);
						PlayerTied[giveid] = 1;
						Sequestrador[playerid] = 1;
						format(thestring, sizeof(thestring), "|SEQUESTRO| %s foi sequestrado por %s. Resgate : R$ %d,00", Player[giveid][pName], Player[playerid][pName],preco);
						SendClientMessageToAll(COLOR_OOC, thestring);
						format(thestring, sizeof(thestring), "Você amarrou %s . Você pode vendar a vítima usando /vendar", Player[giveid][pName]);
						SendClientMessage(playerid, COLOR_WHITE, thestring);
						Player[playerid][pCorda]--;
						WantedPoints[playerid] += 1;
						SetPlayerCriminal(playerid,255, "Sequestro", "Desconhecido");
					}
					else
						return SendClientMessage(playerid, COLOR_GREY, "Jogador não está no carro.");
				}
				else
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador está longe de você.");
			}
		}
		else
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador esta offline.");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem a corda.");

	return true;
}

CMD:liberarrefem(playerid, params[])
{
	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_WHITE, "[Uso]: {FFFFFF}/liberarrefem <id/nick>");

	if(IsPlayerConnected(giveid))
	{
		if(giveid != INVALID_PLAYER_ID)
		{
			if(ProxDetectorS(8.0, playerid, giveid))
			{
				if(giveid == playerid) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode se liberar"); return true; }
				if(PlayerTied[giveid])
				{
					format(thestring, sizeof(thestring), "Você foi libertado por %s.", Player[playerid][pName]);
					SendClientMessage(giveid, COLOR_WHITE, thestring);
					format(thestring, sizeof(thestring), "Você foi liberado %s.", Player[giveid][pName]);
					SendClientMessage(playerid, COLOR_WHITE, thestring);
					GameTextForPlayer(giveid, "~g~Libertado", 2500, 1);
					Descongelar(giveid);
					PlayerTied[giveid] = 1;
					format(thestring, sizeof(thestring), "* %s liberou %s e o desamarrou.", PlayerGetName(playerid), PlayerGetName(giveid));
					ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					Player[playerid][pCorda]++;
					PlayerTied[giveid] = 0;
				}
				else
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não esta sequestrado!");
			}
			else
				return SendClientMessage(playerid, COLOR_GREY, "O jogador esta longe de você!");
		}
	}
	else
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:rebite(playerid)
{
	if(Player[playerid][pJob] == CAMINHONEIRO && PlayerToPoint(2.0,playerid,-50.5683,-232.3341,6.7646))
	{
		format(thestring, 128, "* %s comprou por R$ 100 um rebite, para viajar mais tranquilamente.",PlayerGetName(playerid));
		SendClientMessage(playerid, COLOR_GREY, "Use /usardrogas para usar o rebite!");
		ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		//SafeGivePlayerWeapon(playerid, 25, 30);
		Player[playerid][pDrugs] += 4;
		GivePlayerGP(playerid, -100);
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Falha ao comprar.");
	return true;
}

CMD:atentado(playerid)
{
	new dinid,Float:x,Float:y,Float:z;
	if(AtentadoTime[playerid] == 1)
	{
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa esperar 15 minutos para usar esse comando novamente.");
		return true;
	}
	if(!IsATerror(playerid)) return SendClientMessage(playerid, COLOR_GREY,"Você não é um Terrorista.");
	if(PlayerToPoint(40.0,playerid,1682.7742,-2285.8457,-1.2359))
	{
		GetPlayerPos(playerid,x,y,z);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		SetTimerEx("CriarExplosaos",8000,false,"fffdf",x,y,z,6,2000.0);
		SetTimerEx("CriarExplosaoss",8000,false,"fffdf",x,y,z,7,2000.0);
		SetTimerEx("CriarExplosaosss",8000,false,"fffdf",x,y,z,10,2000.0);
		SetTimerEx("CriarExplosaossss",8000,false,"fffdf",x,y,z,7,2000.0);
		GivePlayerGP(playerid, 150);
		dinid = CreateDynamicObject(1252,x+1,y-1,z-0.8,0,0,0);
		SetTimerEx("DestruirObjetos",8000,false,"d",dinid);
		SendClientMessage(playerid,COLOR_YELLOW,"Você armou a bomba e ganhou R$150");
		AtentadoTime[playerid] = 1;
		SetTimerEx("AtentadoTimer", 900000, false, "i", playerid);
		WantedPoints[playerid]+=1;
		SetPlayerCriminal(playerid,255,"Atentado terrorista", "Aeroporto");
		format(thestring, sizeof(thestring), "BIP BIP BIP", PlayerGetName(playerid));
		ProxDetector(10.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(thestring,128,"O terrorista %s executou um atentado terrorista ao aeroporto.",Player[playerid][pName]);
		SendClientMessageToAll(COLOR_YELLOW, thestring);
	}
	else if(PlayerToPoint(15.0,playerid,1579.5988,-1620.2450,13.5469))
	{
		GetPlayerPos(playerid,x,y,z);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		SetTimerEx("CriarExplosaos",8000,false,"fffdf",x,y,z,6,2000.0);
		SetTimerEx("CriarExplosaoss",8000,false,"fffdf",x,y,z,7,2000.0);
		SetTimerEx("CriarExplosaosss",8000,false,"fffdf",x,y,z,10,2000.0);
		SetTimerEx("CriarExplosaossss",8000,false,"fffdf",x,y,z,7,2000.0);
		GivePlayerGP(playerid, 150);
		dinid = CreateDynamicObject(1252,x+1,y-1,z-0.8,0,0,0);
		SetTimerEx("DestruirObjetos",8000,false,"d",dinid);
		SendClientMessage(playerid,COLOR_YELLOW,"Você armou a bomba e ganhou R$150");
		AtentadoTime[playerid] = 1;
		SetTimerEx("AtentadoTimer", 900000, false, "i", playerid);
		WantedPoints[playerid]+=1;
		SetPlayerCriminal(playerid,255,"Atentado terrorista", "Delegacia de Policia");
		format(thestring, sizeof(thestring), "BIP BIP BIP", PlayerGetName(playerid));
		ProxDetector(10.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(thestring,128,"O terrorista %s executou um atentado terrorista à DP.",Player[playerid][pName]);
		SendClientMessageToAll(COLOR_YELLOW, thestring);
	}
	else if(PlayerToPoint(40.0,playerid,1584.9474,-1322.6150,16.4763))
	{
		GetPlayerPos(playerid,x,y,z);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		SetTimerEx("CriarExplosaos",8000,false,"fffdf",x,y,z,6,2000.0);
		SetTimerEx("CriarExplosaoss",8000,false,"fffdf",x,y,z,7,2000.0);
		SetTimerEx("CriarExplosaosss",8000,false,"fffdf",x,y,z,10,2000.0);
		SetTimerEx("CriarExplosaossss",8000,false,"fffdf",x,y,z,7,2000.0);
		GivePlayerGP(playerid, 150);
		dinid = CreateDynamicObject(1252,x+1,y-1,z-0.8,0,0,0);
		SetTimerEx("DestruirObjetos",8000,false,"d",dinid);
		SendClientMessage(playerid,COLOR_YELLOW,"Você armou a bomba e ganhou R$150");
		AtentadoTime[playerid] = 1;
		SetTimerEx("AtentadoTimer", 900000, false, "i", playerid);
		WantedPoints[playerid]+=1;
		SetPlayerCriminal(playerid,255,"Atentado terrorista", "Prédio");
		format(thestring, sizeof(thestring), "BIP BIP BIP", PlayerGetName(playerid));
		ProxDetector(10.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(thestring,128,"O terrorista %s executou um atentado terrorista ao Prédio.",Player[playerid][pName]);
		SendClientMessageToAll(COLOR_YELLOW, thestring);
	}
	else if(PlayerToPoint(40.0, playerid, 1126.8783, -2036.6783, 69.8838))
	{
	    GetPlayerPos(playerid, x, y, z);
        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		SetTimerEx("CriarExplosaos",8000,false,"fffdf",x,y,z,6,2000.0);
		SetTimerEx("CriarExplosaoss",8000,false,"fffdf",x,y,z,7,2000.0);
		SetTimerEx("CriarExplosaosss",8000,false,"fffdf",x,y,z,10,2000.0);
		SetTimerEx("CriarExplosaossss",8000,false,"fffdf",x,y,z,7,2000.0);
		GivePlayerGP(playerid, 150);
		dinid = CreateDynamicObject(1252,x+1,y-1,z-0.8,0,0,0);
		SetTimerEx("DestruirObjetos",8000,false,"d",dinid);
		SendClientMessage(playerid,COLOR_YELLOW,"Você armou a bomba e ganhou R$150");
		AtentadoTime[playerid] = 1;
		SetTimerEx("AtentadoTimer", 900000, false, "i", playerid);
		WantedPoints[playerid]+=1;
		SetPlayerCriminal(playerid,255,"Atentado terrorista", "Prédio");
		format(thestring, sizeof(thestring), "BIP BIP BIP", PlayerGetName(playerid));
		ProxDetector(10.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(thestring,128,"O terrorista %s executou um atentado terrorista à Prefeitura.",Player[playerid][pName]);
		SendClientMessageToAll(COLOR_YELLOW, thestring);
	}
	else
		return SendClientMessage(playerid, COLOR_GREY, "Você não está num local de atentado. (DP/Prédio/Aeroporto/Prefeitura)");

	return true;
}

new ArmaMerdaColor[6][32];
CMD:pegararma(playerid)
{
	if(ReduceTimeArmas[playerid] == 1)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa esperar 2 minutos para usar esse comando novamente.");

	if(PlayerToPoint(10.0,playerid,-689.948181, 942.725524, 13.632812))
	{
		if(Player[playerid][pMember] == TEAM_HITMAN || Player[playerid][pLeader] == TEAM_HITMAN)
		{
			GetPlayerName(playerid,Player[playerid][pName],256);
			format(thestring, 128, "* %s pegou as armas",PlayerGetName(playerid));
			ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 90);
			SetPlayerWeapon(playerid, 4, 1);
			SetPlayerWeapon(playerid, 24, 100);
			SetPlayerWeapon(playerid, 29, 500);
			SetPlayerWeapon(playerid, 34, 60);
			return true;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um assassino!");
	}
	else if(PlayerToPoint(10.0, playerid, 1267.0629, -786.8563, 1084.0148) && GetPlayerVirtualWorld(playerid) == 0)
	{
		if(Player[playerid][pMember] == TEAM_RUSSA || Player[playerid][pLeader] == TEAM_RUSSA)
		{
			/*GetPlayerName(playerid,Player[playerid][pName],256);
			format(thestring, 128, "%s pegou as armas",Player[playerid][pName]);
			ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SafeGivePlayerWeapon(playerid, 8, 1);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 90);
			SafeGivePlayerWeapon(playerid, 24, 100);
			SafeGivePlayerWeapon(playerid, 29, 500);
			SafeGivePlayerWeapon(playerid, 31, 500);
			SafeGivePlayerWeapon(playerid, 34, 150);*/
			if(Player[playerid][pLeader] == 0)
			{
			    for(new i = 0; i < 6; i++) { ArmaMerdaColor[i] = "{FF0000}"; }
			    for(new i = 0; i < 5; i++)
			        if(Player[playerid][pRank] >= i + 1)
						ArmaMerdaColor[i] = "{FFFFFF}";

				format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - %sEagle MP5\t\t50\n2 - %s+ Katana\t\t10\n3 - %s+ AK-47\t\t25\n4 - %s+ ShotGun\t\t25\n5 - %s+ Rifle\t\t35", ArmaMerdaColor[0], ArmaMerdaColor[1], ArmaMerdaColor[2], ArmaMerdaColor[3], ArmaMerdaColor[4]);
			}
			else
			{
			    format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Katana\t10\n3 - {FFFFFF}+ AK-47\t\t25\n4 - {FFFFFF}+ ShotGun\t\t25\n5 - {FFFFFF}+ Rifle\t\t35");
			}
			ShowPlayerDialog(playerid, 6542, DIALOG_STYLE_LIST, "Equipar:", thestring, "Equipar", "Sair");
			return true;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Mafioso Russo!");
	}
	else if(PlayerToPoint(10.0,playerid,321.9505,1118.5170,1083.8828))
	{
		if(Player[playerid][pMember] == TEAM_BALLAS || Player[playerid][pLeader] == TEAM_BALLAS)
		{
			/*GetPlayerName(playerid,Player[playerid][pName],256);
			format(thestring, 128, "%s pegou as armas",Player[playerid][pName]);
			ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SafeGivePlayerWeapon(playerid, 41, 800);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 90);
			SafeGivePlayerWeapon(playerid, 24, 150);
			SafeGivePlayerWeapon(playerid, 29, 150);
			SafeGivePlayerWeapon(playerid, 5, 1);
			SafeGivePlayerWeapon(playerid, 1, 1);*/
			if(Player[playerid][pLeader] == 0)
			{
			    for(new i = 0; i < 6; i++) { ArmaMerdaColor[i] = "{FF0000}"; }
			    for(new i = 0; i < 5; i++)
			        if(Player[playerid][pRank] >= i + 1)
						ArmaMerdaColor[i] = "{FFFFFF}";

				format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - %sEagle MP5\t\t50\n2 - %s+ Spray\t\t10\n3 - %s+ AK-47\t\t25\n4 - %s+ ShotGun\t\t25", ArmaMerdaColor[0], ArmaMerdaColor[1], ArmaMerdaColor[2], ArmaMerdaColor[3]);
			}
			else
			{
			    format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Spray\t\t10\n3 - {FFFFFF}+ AK-47\t\t25\n4 - {FFFFFF}+ ShotGun\t\t25");
			}
			ShowPlayerDialog(playerid, 6541, DIALOG_STYLE_LIST, "Equipar:", thestring, "Equipar", "Sair");
			return true;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro da Front Yard Ballas!");
	}
	else if(PlayerToPoint(10.0,playerid,2498.0517,-1698.6381,1014.7421))
 {
		if(Player[playerid][pMember] == TEAM_GROOVE || Player[playerid][pLeader] == TEAM_GROOVE)
		{
			/*GetPlayerName(playerid,Player[playerid][pName],256);
			format(thestring, 128, "%s pegou as armas",Player[playerid][pName]);
			ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SafeGivePlayerWeapon(playerid, 41, 800);
			SafeGivePlayerWeapon(playerid, 24, 150);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 90);
			SafeGivePlayerWeapon(playerid, 29, 150);
			SafeGivePlayerWeapon(playerid, 5, 1);
			SafeGivePlayerWeapon(playerid, 1, 1);*/
			if(Player[playerid][pLeader] == 0)
   {
			    for(new i = 0; i < 6; i++) { ArmaMerdaColor[i] = "{FF0000}"; }
			    for(new i = 0; i < 5; i++)
			        if(Player[playerid][pRank] >= i + 1)
						ArmaMerdaColor[i] = "{FFFFFF}";

				format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - %sEagle MP5\t\t50\n2 - %s+ Spray\t\t10\n3 - %s+ AK-47\t\t25\n4 - %s+ ShotGun\t\t25", ArmaMerdaColor[0], ArmaMerdaColor[1], ArmaMerdaColor[2], ArmaMerdaColor[3]);
			}
			else
			{
			    format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Spray\t\t10\n3 - {FFFFFF}+ AK-47\t\t25\n4 - {FFFFFF}+ ShotGun\t\t25");
			}
			ShowPlayerDialog(playerid, 6541, DIALOG_STYLE_LIST, "Equipar:", thestring, "Equipar", "Sair");
			return true;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro da Grove Street Families!");
	}
	/*else if(PlayerToPoint(10.0,playerid,1117.5264,0.5784,1000.7054))
	{
		if(Player[playerid][pMember] == TEAM_LOWRIDERS || Player[playerid][pLeader] == TEAM_LOWRIDERS)
		{
			GetPlayerName(playerid,Player[playerid][pName],256);
			format(thestring, 128, "%s pegou as armas",Player[playerid][pName]);
			ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SafeGivePlayerWeapon(playerid, 41, 800);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 90);
			SafeGivePlayerWeapon(playerid, 24, 150);
			SafeGivePlayerWeapon(playerid, 29, 150);
			SafeGivePlayerWeapon(playerid, 5, 1);
			SafeGivePlayerWeapon(playerid, 1, 1);
			if(Player[playerid][pRank] >= 5) SafeGivePlayerWeapon(playerid, 30, 150);
			if(Player[playerid][pLeader] == 0)
			{
			    for(new i = 0; i < 6; i++) { ArmaMerdaColor[i] = "{FF0000}"; }
			    for(new i = 0; i < 5; i++)
			        if(Player[playerid][pRank] >= i + 1)
						ArmaMerdaColor[i] = "{FFFFFF}";

				format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - %sEagle MP5\t\t50\n2 - %s+ Bastão\t\t10\n3 - %s+ AK-47\t\t25\n4 - %s+ ShotGun\t\t25\n5 - %s+ Rifle\t\t35", ArmaMerdaColor[0], ArmaMerdaColor[1], ArmaMerdaColor[2], ArmaMerdaColor[3], ArmaMerdaColor[4]);
			}
			else
			{
			    format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Bastão\t\t10\n3 - {FFFFFF}+ AK-47\t\t25\n4 - {FFFFFF}+ ShotGun\t\t25\n5 - {FFFFFF}+ Rifle\t\t35");
			}
			ShowPlayerDialog(playerid, 6541, DIALOG_STYLE_LIST, "Equipar:", thestring, "Equipar", "Sair");
			return true;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um LowRider!");
	}*/
	else if(PlayerToPoint(10.0,playerid,2805.5715,-1170.9835,1025.5703) && GetPlayerVirtualWorld(playerid) == 1)
	{
		if(Player[playerid][pMember] == TEAM_VAGOS || Player[playerid][pLeader] == TEAM_VAGOS)
		{
/*			GetPlayerName(playerid,Player[playerid][pName],256);
			format(thestring, 128, "%s pegou as armas",Player[playerid][pName]);
			ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SafeGivePlayerWeapon(playerid, 41, 800);
			SafeGivePlayerWeapon(playerid, 24, 150);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 90);
			SafeGivePlayerWeapon(playerid, 29, 150);
			SafeGivePlayerWeapon(playerid, 5, 1);
			SafeGivePlayerWeapon(playerid, 1, 1);*/
			if(Player[playerid][pLeader] == 0)
			{
			    for(new i = 0; i < 6; i++) { ArmaMerdaColor[i] = "{FF0000}"; }
			    for(new i = 0; i < 5; i++)
			        if(Player[playerid][pRank] >= i + 1)
						ArmaMerdaColor[i] = "{FFFFFF}";

				format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - %sEagle MP5\t\t50\n2 - %s+ Spray\t\t10\n3 - %s+ AK-47\t\t25\n4 - %s+ ShotGun\t\t25", ArmaMerdaColor[0], ArmaMerdaColor[1], ArmaMerdaColor[2], ArmaMerdaColor[3]);
			}
			else
			{
			    format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Spray\t\t10\n3 - {FFFFFF}+ AK-47\t\t25\n4 - {FFFFFF}+ ShotGun\t\t25");
			}
			ShowPlayerDialog(playerid, 6541, DIALOG_STYLE_LIST, "Equipar:", thestring, "Equipar", "Sair");
			return true;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro dos Los Santos Vagos!");
	}
	else if(PlayerToPoint(10.0,playerid,503.3531,-75.3996,998.7650) && GetPlayerVirtualWorld(playerid) == 0)
	{
		if(Player[playerid][pMember] == TEAM_BIKERS || Player[playerid][pLeader] == TEAM_BIKERS)
		{
/*			GetPlayerName(playerid,Player[playerid][pName],256);
			format(thestring, 128, "%s pegou as armas",Player[playerid][pName]);
			ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SafeGivePlayerWeapon(playerid, 41, 800);
			SafeGivePlayerWeapon(playerid, 24, 150);
			SafeGivePlayerWeapon(playerid, 29, 150);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 90);
			SafeGivePlayerWeapon(playerid, 5, 1);
			SafeGivePlayerWeapon(playerid, 1, 1);*/
			if(Player[playerid][pLeader] == 0)
			{
			    for(new i = 0; i < 6; i++) { ArmaMerdaColor[i] = "{FF0000}"; }
			    for(new i = 0; i < 5; i++)
			        if(Player[playerid][pRank] >= i + 1)
						ArmaMerdaColor[i] = "{FFFFFF}";

				format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - %sEagle MP5\t\t50\n2 - %s+ Spray\t\t10\n3 - %s+ AK-47\t\t25\n4 - %s+ ShotGun\t\t25", ArmaMerdaColor[0], ArmaMerdaColor[1], ArmaMerdaColor[2], ArmaMerdaColor[3]);
			}
			else
			{
			    format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Spray\t\t10\n3 - {FFFFFF}+ AK-47\t\t25\n4 - {FFFFFF}+ ShotGun\t\t25");
			}
			ShowPlayerDialog(playerid, 6541, DIALOG_STYLE_LIST, "Equipar:", thestring, "Equipar", "Sair");
			return true;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro dos Black Pistons!");
	}
	else if(PlayerToPoint(10.0,playerid,503.3531,-75.3996,998.7650) && GetPlayerVirtualWorld(playerid) == 1)
	{
		if(Player[playerid][pMember] == TEAM_ANGELS || Player[playerid][pLeader] == TEAM_ANGELS)
		{
/*			GetPlayerName(playerid,Player[playerid][pName],256);
			format(thestring, 128, "%s pegou as armas",Player[playerid][pName]);
			ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SafeGivePlayerWeapon(playerid, 41, 800);
			SafeGivePlayerWeapon(playerid, 24, 150);
			SafeGivePlayerWeapon(playerid, 29, 150);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 90);
			SafeGivePlayerWeapon(playerid, 5, 1);
			SafeGivePlayerWeapon(playerid, 1, 1);*/
			if(Player[playerid][pLeader] == 0)
			{
			    for(new i = 0; i < 6; i++) { ArmaMerdaColor[i] = "{FF0000}"; }
			    for(new i = 0; i < 5; i++)
			        if(Player[playerid][pRank] >= i + 1)
						ArmaMerdaColor[i] = "{FFFFFF}";

				format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - %sEagle MP5\t\t50\n2 - %s+ Spray\t\t10\n3 - %s+ AK-47\t\t25\n4 - %s+ ShotGun\t\t25", ArmaMerdaColor[0], ArmaMerdaColor[1], ArmaMerdaColor[2], ArmaMerdaColor[3]);
			}
			else
			{
			    format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Spray\t\t10\n3 - {FFFFFF}+ AK-47\t\t25\n4 - {FFFFFF}+ ShotGun\t\t25");
			}
			ShowPlayerDialog(playerid, 6541, DIALOG_STYLE_LIST, "Equipar:", thestring, "Equipar", "Sair");
			return true;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro dos Hell Angels!");
	}
	else if(PlayerToPoint(10.0,playerid,2805.5715,-1170.9835,1025.5703) && GetPlayerVirtualWorld(playerid) == 0)
	{
		if(Player[playerid][pMember] == TEAM_AZTECAS || Player[playerid][pLeader] == TEAM_AZTECAS)
		{
/*			GetPlayerName(playerid,Player[playerid][pName],256);
			format(thestring, 128, "%s pegou as armas",Player[playerid][pName]);
			ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SafeGivePlayerWeapon(playerid, 41, 800);
			SafeGivePlayerWeapon(playerid, 24, 150);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 90);
			SafeGivePlayerWeapon(playerid, 29, 150);
			SafeGivePlayerWeapon(playerid, 5, 1);
			SafeGivePlayerWeapon(playerid, 1, 1);*/
			if(Player[playerid][pLeader] == 0)
			{
			    for(new i = 0; i < 6; i++) { ArmaMerdaColor[i] = "{FF0000}"; }
			    for(new i = 0; i < 5; i++)
			        if(Player[playerid][pRank] >= i + 1)
						ArmaMerdaColor[i] = "{FFFFFF}";

				format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - %sEagle MP5\t\t50\n2 - %s+ Spray\t\t10\n3 - %s+ AK-47\t\t25\n4 - %s+ ShotGun\t\t25", ArmaMerdaColor[0], ArmaMerdaColor[1], ArmaMerdaColor[2], ArmaMerdaColor[3]);
			}
			else
			{
			    format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Spray\t\t10\n3 - {FFFFFF}+ AK-47\t\t25\n4 - {FFFFFF}+ ShotGun\t\t25");
			}
			ShowPlayerDialog(playerid, 6541, DIALOG_STYLE_LIST, "Equipar:", thestring, "Equipar", "Sair");
			return true;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro dos Varrio Los Aztecas!");
	}
	else if(PlayerToPoint(10.0,playerid,-2162.1049,646.9216,1057.5860))
	{
		if(Player[playerid][pMember] == TEAM_YAKUZA || Player[playerid][pLeader] == TEAM_YAKUZA)
		{
/*			GetPlayerName(playerid,Player[playerid][pName],256);
			format(thestring, 128, "%s pegou as armas",Player[playerid][pName]);
			ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SafeGivePlayerWeapon(playerid, 24, 150);
			SafeGivePlayerWeapon(playerid, 29, 300);
			SafeGivePlayerWeapon(playerid, 31, 300);
			SafeGivePlayerWeapon(playerid, 8, 1);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 90);
			SafeGivePlayerWeapon(playerid, 1, 1);*/
			if(Player[playerid][pLeader] == 0)
			{
			    for(new i = 0; i < 6; i++) { ArmaMerdaColor[i] = "{FF0000}"; }
			    for(new i = 0; i < 5; i++)
			        if(Player[playerid][pRank] >= i + 1)
						ArmaMerdaColor[i] = "{FFFFFF}";

				format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - %sEagle MP5\t\t50\n2 - %s+ Katana\t\t20\n3 - %s+ AK-47\t\t25\n4 - %s+ ShotGun\t\t25\n5 - %s+ Rifle\t\t35", ArmaMerdaColor[0], ArmaMerdaColor[1], ArmaMerdaColor[2], ArmaMerdaColor[3], ArmaMerdaColor[4]);
			}
			else
			{
			    format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Katana\t\t20\n3 - {FFFFFF}+ AK-47\t\t25\n4 - {FFFFFF}+ ShotGun\t\t25\n5 - {FFFFFF}+ Rifle\t\t35");
			}
			ShowPlayerDialog(playerid, 6542, DIALOG_STYLE_LIST, "Equipar:", thestring, "Equipar", "Sair");
			return true;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro da Máfia Yakuza!");
	}
	/*else if(PlayerToPoint(10.0,playerid,-222.3987,1411.1451,27.7734))
	{
		if(Player[playerid][pMember] == TEAM_DRIFTERS || Player[playerid][pLeader] == TEAM_DRIFTERS)
		{
			GetPlayerName(playerid,Player[playerid][pName],256);
			format(thestring, 128, "%s pegou as armas",Player[playerid][pName]);
			ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SafeGivePlayerWeapon(playerid, 41, 800);
			SafeGivePlayerWeapon(playerid, 24, 150);
			SafeGivePlayerWeapon(playerid, 29, 150);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 90);
			SafeGivePlayerWeapon(playerid, 5, 1);
			SafeGivePlayerWeapon(playerid, 1, 1);
			if(Player[playerid][pLeader] == 0)
			{
			    for(new i = 0; i < 6; i++) { ArmaMerdaColor[i] = "{FF0000}"; }
			    for(new i = 0; i < 5; i++)
			        if(Player[playerid][pRank] >= i + 1)
						ArmaMerdaColor[i] = "{FFFFFF}";

				format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - %sEagle MP5\t\t50\n2 - %s+ Bastão\t\t10\n3 - %s+ AK-47\t\t25\n4 - %s+ ShotGun\t\t25\n5 - %s+ Rifle\t\t35", ArmaMerdaColor[0], ArmaMerdaColor[1], ArmaMerdaColor[2], ArmaMerdaColor[3], ArmaMerdaColor[4]);
			}
			else
			{
			    format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Bastão\t\t10\n3 - {FFFFFF}+ AK-47\t\t25\n4 - {FFFFFF}+ ShotGun\t\t25\n5 - {FFFFFF}+ Rifle\t\t35");
			}
			ShowPlayerDialog(playerid, 6541, DIALOG_STYLE_LIST, "Equipar:", thestring, "Equipar", "Sair");
			return true;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro dos Drifters!");
	}*/
	/*else if(PlayerToPoint(10.0,playerid,417.1714,2534.9667,10.0000))
	{
		if(Player[playerid][pMember] == TEAM_CV || Player[playerid][pLeader] == TEAM_CV)
		{
			GetPlayerName(playerid,Player[playerid][pName],256);
			format(thestring, 128, "%s pegou as armas",Player[playerid][pName]);
			ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SafeGivePlayerWeapon(playerid, 41, 800);
			SafeGivePlayerWeapon(playerid, 24, 150);
			SafeGivePlayerWeapon(playerid, 29, 150);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 90);
			SafeGivePlayerWeapon(playerid, 5, 1);
			SafeGivePlayerWeapon(playerid, 1, 1);
			if(Player[playerid][pLeader] == 0)
			{
			    for(new i = 0; i < 6; i++) { ArmaMerdaColor[i] = "{FF0000}"; }
			    for(new i = 0; i < 5; i++)
			        if(Player[playerid][pRank] >= i + 1)
						ArmaMerdaColor[i] = "{FFFFFF}";

				format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - %sEagle MP5\t\t50\n2 - %s+ Bastão\t\t10\n3 - %s+ AK-47\t\t25\n4 - %s+ ShotGun\t\t25\n5 - %s+ Rifle\t\t35", ArmaMerdaColor[0], ArmaMerdaColor[1], ArmaMerdaColor[2], ArmaMerdaColor[3], ArmaMerdaColor[4]);
			}
			else
			{
			    format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Bastão\t\t10\n3 - {FFFFFF}+ AK-47\t\t25\n4 - {FFFFFF}+ ShotGun\t\t25\n5 - {FFFFFF}+ Rifle\t\t35");
			}
			ShowPlayerDialog(playerid, 6541, DIALOG_STYLE_LIST, "Equipar:", thestring, "Equipar", "Sair");
			return true;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é do Comando Vermelho!");
	}
	else if(PlayerToPoint(10.0,playerid,2553.5957,-1291.4465,1060.9843))
	{
		if(Player[playerid][pMember] == TEAM_PCC || Player[playerid][pLeader] == TEAM_PCC)
		{
			GetPlayerName(playerid,Player[playerid][pName],256);
			format(thestring, 128, "%s pegou as armas",Player[playerid][pName]);
			ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SafeGivePlayerWeapon(playerid, 41, 800);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 90);
			SafeGivePlayerWeapon(playerid, 24, 150);
			SafeGivePlayerWeapon(playerid, 29, 150);
			SafeGivePlayerWeapon(playerid, 5, 1);
			SafeGivePlayerWeapon(playerid, 1, 1);
			if(Player[playerid][pLeader] == 0)
			{
			    for(new i = 0; i < 6; i++) { ArmaMerdaColor[i] = "{FF0000}"; }
			    for(new i = 0; i < 5; i++)
			        if(Player[playerid][pRank] >= i + 1)
						ArmaMerdaColor[i] = "{FFFFFF}";

				format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - %sEagle MP5\t\t50\n2 - %s+ Bastão\t\t10\n3 - %s+ AK-47\t\t25\n4 - %s+ ShotGun\t\t25\n5 - %s+ Rifle\t\t35", ArmaMerdaColor[0], ArmaMerdaColor[1], ArmaMerdaColor[2], ArmaMerdaColor[3], ArmaMerdaColor[4]);
			}
			else
			{
			    format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Bastão\t\t10\n3 - {FFFFFF}+ AK-47\t\t25\n4 - {FFFFFF}+ ShotGun\t\t25\n5 - {FFFFFF}+ Rifle\t\t35");
			}
			ShowPlayerDialog(playerid, 6541, DIALOG_STYLE_LIST, "Equipar:", thestring, "Equipar", "Sair");
			return true;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro dos PCC!");
	}
	else if(PlayerToPoint(10.0,playerid,439.0771,-18.6395,1001.1328))
	{
		if(Player[playerid][pMember] == TEAM_KINGS || Player[playerid][pLeader] == TEAM_KINGS)
		{
			GetPlayerName(playerid,Player[playerid][pName],256);
			format(thestring, 128, "%s pegou as armas",Player[playerid][pName]);
			ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SafeGivePlayerWeapon(playerid, 41, 800);
			SafeGivePlayerWeapon(playerid, 24, 150);
			SafeGivePlayerWeapon(playerid, 29, 150);
			SafeGivePlayerWeapon(playerid, 5, 1);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 90);
			SafeGivePlayerWeapon(playerid, 1, 1);
			if(Player[playerid][pLeader] == 0)
			{
			    for(new i = 0; i < 6; i++) { ArmaMerdaColor[i] = "{FF0000}"; }
			    for(new i = 0; i < 5; i++)
			        if(Player[playerid][pRank] >= i + 1)
						ArmaMerdaColor[i] = "{FFFFFF}";

				format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - %sEagle MP5\t\t50\n2 - %s+ Bastão\t\t10\n3 - %s+ AK-47\t\t25\n4 - %s+ ShotGun\t\t25\n5 - %s+ Rifle\t\t35", ArmaMerdaColor[0], ArmaMerdaColor[1], ArmaMerdaColor[2], ArmaMerdaColor[3], ArmaMerdaColor[4]);
			}
			else
			{
			    format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Bastão\t\t10\n3 - {FFFFFF}+ AK-47\t\t25\n4 - {FFFFFF}+ ShotGun\t\t25\n5 - {FFFFFF}+ Rifle\t\t35");
			}
			ShowPlayerDialog(playerid, 6541, DIALOG_STYLE_LIST, "Equipar:", thestring, "Equipar", "Sair");
			return true;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro dos Kings!");
	}*/
	else if(PlayerToPoint(10.0,playerid,146.4011,2546.5224,17.9191))
	{
		if(Player[playerid][pMember] == TEAM_ALQAEDA || Player[playerid][pLeader] == TEAM_ALQAEDA)
		{
/*			GetPlayerName(playerid,Player[playerid][pName],256);
			format(thestring, 128, "%s pegou as armas",Player[playerid][pName]);
			ProxDetector(20.0,playerid,thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SafeGivePlayerWeapon(playerid, 30, 600);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid, 90);
			SafeGivePlayerWeapon(playerid, 24, 150);
			SafeGivePlayerWeapon(playerid, 35, 1);
			SafeGivePlayerWeapon(playerid, 39, 2);
			SafeGivePlayerWeapon(playerid, 40, 2);
			SafeGivePlayerWeapon(playerid, 29, 150);*/
			if(Player[playerid][pLeader] == 0)
			{
			    for(new i = 0; i < 6; i++) { ArmaMerdaColor[i] = "{FF0000}"; }
			    for(new i = 0; i < 5; i++)
			        if(Player[playerid][pRank] >= i + 1)
						ArmaMerdaColor[i] = "{FFFFFF}";

				format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - %sEagle MP5\t\t50\n2 - %s+ Soco Englês\t15\n3 - %s+ M4\t\t\t35\n4 - %s+ Sniper\t\t40\n5 - %s+ C4\t\t\t50\n6 - %s+ Bazooca\t\t75", ArmaMerdaColor[0], ArmaMerdaColor[1], ArmaMerdaColor[2], ArmaMerdaColor[3], ArmaMerdaColor[4]);
			}
			else
			{
			    format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Soco Inglês\t15\n3 - {FFFFFF}+ M4\t\t\t35\n4 - {FFFFFF}+ Sniper\t\t40\n5 - {FFFFFF}+ C4\t\t\t50\n6 - {FFFFFF}+ Bazooca\t\t75");
			}
			ShowPlayerDialog(playerid, 6543, DIALOG_STYLE_LIST, "Equipar:", thestring, "Equipar", "Sair");
			return true;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é membro da Al-Qaeda!");
	}
	/*else if(PlayerToPoint(10.0,playerid,1084.5673, 1297.5679, 10.8203))
	{
		if(Player[playerid][pMember] == TEAM_HAMAS || Player[playerid][pLeader] == TEAM_HAMAS)
		{
			if(Player[playerid][pLeader] == 0)
			{
			    for(new i = 0; i < 6; i++) { ArmaMerdaColor[i] = "{FF0000}"; }
			    for(new i = 0; i < 5; i++)
			        if(Player[playerid][pRank] >= i + 1)
						ArmaMerdaColor[i] = "{FFFFFF}";

				format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - %sEagle MP5\t\t50\n2 - %s+ Soco Englês\t15\n3 - %s+ M4\t\t\t35\n4 - %s+ Sniper\t\t40\n5 - %s+ C4\t\t\t50\n6 - %s+ Bazooca\t\t75", ArmaMerdaColor[0], ArmaMerdaColor[1], ArmaMerdaColor[2], ArmaMerdaColor[3], ArmaMerdaColor[4]);
			}
			else
			{
			    format(thestring, 256, "0 - {FFFFFF}Colete\t\tDrogas\n1 - {FFFFFF}Eagle MP5\t\t50\n2 - {FFFFFF}+ Soco Englês\t15\n3 - {FFFFFF}+ M4\t\t\t35\n4 - {FFFFFF}+ Sniper\t\t40\n5 - {FFFFFF}+ C4\t\t\t50\n6 - {FFFFFF}+ Bazooca\t\t75");
			}
			ShowPlayerDialog(playerid, 6543, DIALOG_STYLE_LIST, "Equipar:", thestring, "Equipar", "Sair");
			return true;
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é da Hamas!");
	}*/
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está no local correto.");

	return true;
}

CMD:fazerdinamite(playerid)
{
    if(!IsACrime(playerid) && GetPlayerOrg(playerid) != TEAM_HITMAN)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é Gangster/Mafioso/Terrorista.");
    if(Player[playerid][pMats] < 600)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem 600 materiais.");
    if(Player[playerid][pExplosivo])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já tem uma Dinamite.");

	if((PlayerToPoint(10.0, playerid, 1267.0629, -786.8563, 1084.0148) && GetPlayerOrg(playerid) == TEAM_RUSSA && GetPlayerVirtualWorld(playerid) == 0)
    || (PlayerToPoint(10.0, playerid, 321.95050, 1118.5170, 1083.8828) && GetPlayerOrg(playerid) == TEAM_BALLAS)
	|| (PlayerToPoint(10.0, playerid, 2498.0517, -1698.638, 1014.7421) && GetPlayerOrg(playerid) == TEAM_GROOVE)
	//|| (PlayerToPoint(10.0, playerid, 1117.5264, 0.5784000, 1000.7054) && GetPlayerOrg(playerid) == TEAM_LOWRIDERS)
    || (PlayerToPoint(10.0, playerid, 2805.5715, -1170.983, 1025.5703) && GetPlayerOrg(playerid) == TEAM_VAGOS && GetPlayerVirtualWorld(playerid) == 1)
	|| (PlayerToPoint(10.0, playerid, 503.35310, -75.39960, 998.76500) && GetPlayerOrg(playerid) == TEAM_BIKERS && GetPlayerVirtualWorld(playerid) == 0)
	|| (PlayerToPoint(10.0, playerid, 503.35310, -75.39960, 998.76500) && GetPlayerOrg(playerid) == TEAM_ANGELS && GetPlayerVirtualWorld(playerid) == 1)
	|| (PlayerToPoint(10.0, playerid, 2805.5715, -1170.983, 1025.5703) && GetPlayerOrg(playerid) == TEAM_AZTECAS && GetPlayerVirtualWorld(playerid) == 0)
	|| (PlayerToPoint(10.0, playerid, -2162.104, 646.92160, 1057.5860) && GetPlayerOrg(playerid) == TEAM_YAKUZA)
	//|| (PlayerToPoint(10.0, playerid, -222.3987, 1411.1451, 27.773400) && GetPlayerOrg(playerid) == TEAM_DRIFTERS)
	//|| (PlayerToPoint(10.0, playerid, 417.17140, 2534.9667, 10.000000) && GetPlayerOrg(playerid) == TEAM_CV)
	//|| (PlayerToPoint(10.0, playerid, 2553.5957, -1291.446, 1060.9843) && GetPlayerOrg(playerid) == TEAM_PCC)
	//|| (PlayerToPoint(10.0, playerid, 439.07701, -18.63950, 1001.1328) && GetPlayerOrg(playerid) == TEAM_KINGS)
	|| (PlayerToPoint(10.0, playerid, 146.40101, 2546.5224, 17.919100) && GetPlayerOrg(playerid) == TEAM_ALQAEDA))
	//|| (PlayerToPoint(10.0, playerid, 1084.5673, 1297.5679, 10.820300) && GetPlayerOrg(playerid) == TEAM_HAMAS))
	{
        Player[playerid][pMats] -= 600;
        Player[playerid][pExplosivo] = true;

        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você fez uma Dinamite.");
        return 1;
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está no local correto.");
	return true;
}

CMD:disfarce(playerid, params[])
{
	if(GetPlayerOrg(playerid) != TEAM_HITMAN && GetPlayerOrg(playerid) != TEAM_ALQAEDA)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode se Disfarcar.");

	new skin;
	if(sscanf(params, "d", skin))
 		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/disfarce <skin>");

    if(skin < 0 || skin > 299)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} ID Inexistente ou você não pode usá-lo.");

	if(skin == 0) skin = Player[playerid][pModel];
	else if(skin == 211 || skin == 217) skin = 145;

	if(PlayerToPoint(10.0,playerid,-689.948181, 942.725524, 13.632812) && GetPlayerOrg(playerid) == TEAM_HITMAN)
		return SetPlayerSkin(playerid,skin);
	/*else if(PlayerToPoint(10.0,playerid,2294.7925, 2459.7183, 10.8203) && GetPlayerOrg(playerid) == TEAM_PCIVIL)
	    return SetPlayerSkin(playerid,skin);*/
	/*else if(PlayerToPoint(10.0,playerid,1084.5673, 1297.5679, 10.8203) && GetPlayerOrg(playerid) == TEAM_HAMAS)
	    return SetPlayerSkin(playerid,skin);*/
	else if(PlayerToPoint(10.0,playerid,146.4011,2546.5224,17.9191) && GetPlayerOrg(playerid) == TEAM_ALQAEDA)
	    return SetPlayerSkin(playerid,skin);

	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está no local correto.");
}

CMD:soltarrefem(playerid, params[])
{
	if(IsACop(playerid))
	{
		new giveid;
		if(sscanf(params, "u", giveid))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/soltarrefem <id/nick>");

		if(IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode soltar um jogador no veiculo!");

		if(IsPlayerConnected(giveid))
		{
			if(giveid != INVALID_PLAYER_ID)
			{
				if(ProxDetectorS(8.0, playerid, giveid))
				{
					if(giveid == playerid) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode se soltar!"); return true; }
					format(thestring, sizeof(thestring), "Você foi desamarrou por %s.", Player[playerid][pName]);
					SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					format(thestring, sizeof(thestring), "Você desamarrou %s.", Player[giveid][pName]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					GameTextForPlayer(giveid, "~g~DESAMARRADO", 2500, 1);
					Descongelar(giveid);
				}
				else
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está próximo a você.");
			}
		}
		else
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um PM / PF / FA.");

	return true;
}

CMD:abastecimento(playerid, params[])
{
	if(Player[playerid][pJob] != MECANICO)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Mecânico.");

	new giveid, money;
	if(sscanf(params, "ud", giveid, money))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/abastecimento <id/nick> <preco>");
	if(money < 1 || money > 10000)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preco entre : R$1 e R$10000!");
	if(IsPlayerConnected(giveid))
	{
		if(giveid != INVALID_PLAYER_ID)
		{
			if(ProxDetectorS(8.0, playerid, giveid)&& IsPlayerInAnyVehicle(giveid))
			{
				if(giveid == playerid)
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não pode fazer isso.");
				format(thestring, sizeof(thestring), "Você ofereceu a %s para abastecer seu veículo por R$ %d",Player[giveid][pName],money);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				format(thestring, sizeof(thestring), "O mecânico %s ofereceu a você um abastecimento por R$ %d (digite /aceitar abastecer) para aceitar.",Player[playerid][pName],money);
				SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
				RefillOffer[giveid] = playerid;
				RefillPrice[giveid] = money;
				PedidoConcluido(giveid, MECANICO);
			}
			else
				SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está próximo a você / Não está em um Veículo");
		}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador Offline.");

	return true;
}

CMD:libertar(playerid, params[])
{
	if(Player[playerid][pJob] != ADVOGADO)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um advogado.");

	new giveid, money;
	if(sscanf(params, "ud", giveid, money))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/libertar <id/nick> <preco>");
	if(money < 1000 || money > 10000)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preco entre : R$1000 e R$10000!");

	if(!IsPlayerConnected(giveid)
    || giveid == INVALID_PLAYER_ID)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador Offline.");
	if(!ProxDetectorS(8.0, playerid, giveid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está próximo a você.");
	if(giveid == playerid)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não pode fazer isso.");

    if(Player[giveid][pJailed] == 1)
    {
        if(!IsPlayerInRangeOfPoint(playerid, 5.0, 267.4805,77.6161,1001.0391))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está nas Celas.");
    }
    else if(Player[giveid][pJailed] == 3)
    {
        if(!IsPlayerInRangeOfPoint(playerid, 5.0, 198.0737, 178.3433, 1003.0234))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está nas Celas.");
    }
    else if(Player[giveid][pJailed] == 4)
    {
        if(GetPlayerVirtualWorld(playerid) != 1
        || !IsPlayerInRangeOfPoint(playerid, 5.0, 223.4776, 113.9726, 999.01560))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está nas Celas.");
    }
    else if(Player[giveid][pJailed] == 5)
    {
        if(GetPlayerVirtualWorld(playerid) != 0
        || !IsPlayerInRangeOfPoint(playerid, 5.0, 223.4776, 113.9726, 999.01560))
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está nas Celas.");
    }
    else
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este Jogador não pode ser Solto.");

	format(thestring, sizeof(thestring), "Você ofereceu um habeas corpus à %s por R$ %d",Player[giveid][pName],money);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
	format(thestring, sizeof(thestring), "O advogado %s ofereceu a você um habeas corpus por R$ %d (digite /aceitar advogado) para aceitar.",Player[playerid][pName],money);
	SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
	AdvOffer[giveid] = playerid;
	AdvPrice[giveid] = money;
	return true;
}

CMD:conserto(playerid, params[])
{
	if(Player[playerid][pJob] != MECANICO)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é Mecânico.");

	new giveid, money;
	if(sscanf(params, "ud", giveid, money))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/conserto <id/nick> <preco>");
	if(money < 1000 || money > 10000)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preco entre R$1000 e R$10000");
	if(IsPlayerConnected(giveid))
	{
		if(giveid != INVALID_PLAYER_ID)
		{
			if(ProxDetectorS(8.0, playerid, giveid)&& IsPlayerInAnyVehicle(giveid))
			{
				if(giveid == playerid)
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não pode fazer isso.");

				format(thestring, sizeof(thestring), "Você ofereceu %s para um conserto por R$ %d",Player[giveid][pName],money);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				format(thestring, sizeof(thestring), "O mecânico %s lhe ofereceu um conserto por R$ %d (digite /aceitar conserto) para aceitar",Player[playerid][pName],money);
				SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
				RepairOffer[giveid] = playerid;
				RepairPrice[giveid] = money;
				PedidoConcluido(playerid,MECANICO);
			}
			else
				SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está próximo a você ou não está em um Carro");
		}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:noticias(playerid, params[])   // /no
{
	if(Player[playerid][pMember] == TEAM_SANEWS || Player[playerid][pLeader] == TEAM_SANEWS)
	{
		if(Player[playerid][MuteTime] > 0)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está mutado.");

		new newcar = GetVehicleModel(GetPlayerVehicleID(playerid));
		if(newcar == 488 || newcar ==582)
		{
		    new texto[80];
			if(sscanf(params, "s[80]", texto))
				return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/no(ticias) <texto>");

			format(thestring, sizeof(thestring), "[San News] Repórter %s: %s", Player[playerid][pName], texto);
			OOCNews(COLOR_NOTICIA,thestring);
			Player[playerid][pNewsSkill] ++;
			if(Player[playerid][pNewsSkill] == 100)
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade é nível 2 agora, logo você é capaz de voar de Notícias Chopper e conversar ao vivo.");
			else if(Player[playerid][pNewsSkill] == 200)
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade é nível 3 agora, logo você é capaz de voar de Notícias Chopper e conversar ao vivo.");
			else if(Player[playerid][pNewsSkill] == 400)
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade é nível 4 agora, você é capaz de voar no Helicóptero da Empresa agora.");
			else if(Player[playerid][pNewsSkill] == 800)
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade é nível 5 agora, você está posibilitado de conversar ao vivo agora.");
		}
		else
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na Van ou no Helicoptero.");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Repórter.");

	return true;
}

CMD:aovivo(playerid, params[])
{
	if(Player[playerid][pMember] == TEAM_SANEWS || Player[playerid][pLeader] == TEAM_SANEWS)
	{
		if(TalkingLive[playerid] != 255)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Conversa Ao Vivo terminada.");
			SendClientMessage(TalkingLive[playerid], COLOR_LIGHTBLUE, "Conversa Ao Vivo terminada.");
			Descongelar(playerid);
			TogglePlayerControllable(TalkingLive[playerid], 1);
			TalkingLive[TalkingLive[playerid]] = 255;
			TalkingLive[playerid] = 255;
			return true;
		}
		if(Player[playerid][pRank] < 4)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Sua habilidade como Repórter é insuficiente para conversar ao vivo.");

		new giveid;
		if(sscanf(params, "u", giveid))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/aovivo <id/nick>");

		if(IsPlayerConnected(giveid))
		{
			if(giveid != INVALID_PLAYER_ID)
			{
				if(ProxDetectorS(5.0, playerid, giveid))
				{
					if(giveid == playerid)
						return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode conversar ao vivo com você mesmo.");
					format(thestring, sizeof(thestring), "Você ofereceu a %s uma conversa ao vivo.", Player[giveid][pName]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					format(thestring, sizeof(thestring), "%s lhe ofereceu uma conversa ao vivo, digite (/aceitar aovivo) para aceitar.", Player[playerid][pName]);
					SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					LiveOffer[giveid] = playerid;
				}
				else
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está longe desse jogador!");
			}
		}
		else
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Repórter.");

	return true;
}

CMD:avisados(playerid)
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) >= 1)
	{
		SendClientMessage(playerid, COLOR_WHITE, "|-Life Simulation Avisados online-|");
		new count;
		foreach(new i: Player)
		{
			if(Player[i][pWarns] > 0)
			{
				count++;
				format(thestring, 128, "%d. %s (id: %d) - %d aviso(s) - %d ban(s)", count, Player[i][pName], i, Player[i][pWarns],Player[i][pBan]);
				SendClientMessage(playerid, COLOR_YELLOW, thestring);
			}
		}
	}
	return true;
}

CMD:presos(playerid)
{
	SendClientMessage(playerid, COLOR_WHITE, "|-Life Simulation Presos online-|");

	foreach(new i: Player)
	{
		if(Player[i][pJailed] != 0)
		{
			format(thestring, 256, "%s (id: %d) preso por %s - Motivo: %s (Preso n%s)", Player[i][pName], i, Convert(Player[i][pJailTime]), Player[i][JailReason], JailName[Player[i][pJailed] - 1]);
			SendClientMessage(playerid, COLOR_YELLOW, thestring);
		}
	}
	return true;
}

CMD:procurados(playerid)
{
	if(IsACop(playerid))
	{
        format(thestring, sizeof(thestring), "- {FFFFFF}Atuais suspeitos procurados pelo(a) %s", OrgsNamesSmall[GetPlayerOrg(playerid)]);
        new lvlMin = 1,
            lvlMax = 999999;
        if(GetPlayerOrg(playerid) == TEAM_PM)
        {
            lvlMin = 5;
            lvlMax = 10;
            strcat(thestring, " (Level 5 à 10)", sizeof(thestring));
        }
        else if(GetPlayerOrg(playerid) == TEAM_PF)
        {
            lvlMin = 5;
            lvlMax = 20;
            strcat(thestring, " (Level 5 à 20)", sizeof(thestring));
        }
        else if(GetPlayerOrg(playerid) == TEAM_FA)
        {
            lvlMin = 10;
            strcat(thestring, " (Level 10+)", sizeof(thestring));
        }
        /*else if(GetPlayerOrg(playerid) == TEAM_PCIVIL)
        {
            lvlMax = 5;
            strcat(thestring, " (Level 1 à 5)", sizeof(thestring));
        }*/

        new bool:Found = false;
		SendClientMessage(playerid, COLOR_GREEN, thestring);
		foreach(new i: Player)
		{
			if(WantedPoints[i] >= lvlMin && WantedPoints[i] <= lvlMax)
			{
				format(thestring, sizeof(thestring), "- {FFFFFF}Elemento: %s(%d), Level %d.",Player[i][pName],i,WantedPoints[i]);
				SendClientMessage(playerid, COLOR_GREEN, thestring);
                Found = true;
			}
		}
        if(!Found)
            SendClientMessage(playerid, COLOR_GREEN, "- {FFFFFF}Nenhum");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um PM / PF / FA / BOPE.");

	return true;
}

CMD:multados(playerid)
{
	if(IsACop(playerid))
	{
		SendClientMessage(playerid, COLOR_GREEN, "|-Jogadores com multas pendentes-|");
		foreach(new i: Player)
		{
			if(multa[i] >= 0)
			{
				format(thestring, sizeof(thestring), "Elemento: %s (id: %d) - Dívida em Multas: R$%d",Player[i][pName],i,multa[i]);
				SendClientMessage(playerid, COLOR_RED, thestring);
			}
		}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um PM / PF / FA / BOPE.");

	return true;
}

CMD:venderdrogas(playerid, params[])
{
	if(Player[playerid][pJob] != VDROGAS)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é vendedor de drogas.");

	new giveid, money, needed;
	if(sscanf(params, "udd", giveid, money, needed))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/venderdrogas <id/nick> <preco> <drogas>");
	if(needed < 1 || needed > 100000)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Drogas entre 1 e 100.000.");
	if(money < 1 || money > 1000000)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preço somente entre 1 e 1.000.000.");
	if(needed > Player[playerid][pDrugs])
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem essa quantidade com você.");

	if(IsPlayerConnected(giveid))
	{
		if(giveid != INVALID_PLAYER_ID)
  		{
			if(ProxDetectorS(8.0, playerid, giveid))
			{
				format(thestring, sizeof(thestring), "Você ofereceu %s para comprar %d gramas por R$%d.", Player[giveid][pName], needed, money);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				format(thestring, sizeof(thestring), "O vendedor de drogas %s lhe ofecereu %d gramas por R$ %d (digite /aceitar drogas) para aceitar.", Player[playerid][pName], needed, money);
				SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
				DrugOffer[giveid] = playerid;
				DrugPrice[giveid] = money;
				DrugGram[giveid] = needed;
			}
			else
				SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está próximo a você.");
		}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:usardrogas(playerid)
{
	if(PlayerBoxing[playerid] > 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar drogas durante uma luta.");
    if(noevento[playerid])
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar drogas durante um evento.");

	if(Player[playerid][pDrugs] > 1)
	{
        AddColete(playerid, 10.0, 90.0);
		Player[playerid][pDrugs] -= 2;

		format(thestring, sizeof(thestring), "* %s usou drogas.", PlayerGetName(playerid));
		ProxDetector(20.0, playerid, thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[Info]:{FFFFFF} Você usou drogas, e aumentou 10 do seu colete.");

		PlayerStoned[playerid] = 1;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);

		KillTimer(UsarDrogaTime[playerid]);
		if(Player[playerid][pDrugPerk] == 0) UsarDrogaTime[playerid] = SetTimerEx("CurarDorga", 15000, false, "i", playerid);
		else if(Player[playerid][pDrugPerk] == 1) UsarDrogaTime[playerid] = SetTimerEx("CurarDorga", 11667, false, "i", playerid);
		else if(Player[playerid][pDrugPerk] == 2) UsarDrogaTime[playerid] = SetTimerEx("CurarDorga", 83334, false, "i", playerid);
		else if(Player[playerid][pDrugPerk] == 3) UsarDrogaTime[playerid] = SetTimerEx("CurarDorga", 5000, false, "i", playerid);

		if(DSTPlayer[playerid] == 1)
		{
			DSTPlayer[playerid] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você já não está infectado com uma doenca sexualmente transmissível mais por causa da droga.");
		}
		else if(DSTPlayer[playerid] == 2)
		{
			DSTPlayer[playerid] = 1;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você reduziu a DST à clamídia devido a droga.");
		}
		else if(DSTPlayer[playerid] == 3)
		{
			DSTPlayer[playerid] = 2;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você reduziu a DST à gonorréia devido a droga.");
		}
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem gramas suficientes.");

	return true;
}

CMD:plano(playerid, params[])
{
	if(!PlayerToPoint(3, playerid,1173.2563,-1323.3102,15.3943)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está no hospital.");
	if(Player[playerid][pPlano] > 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já tem um plano de saúde!");

	new plano;
	if(sscanf(params, "d", plano))
	{
		SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/plano <Item>");
		SendClientMessage(playerid, COLOR_GREY, "|_______ Planos de saúde _______|");
		SendClientMessage(playerid, COLOR_GREY, "| 1: Pacote 10 Internações: R$2200");
		SendClientMessage(playerid, COLOR_GREY, "| 2: Pacote 15 Internações: R$3400");
		SendClientMessage(playerid, COLOR_GREY, "| 3: Pacote 20 Internações: R$4200");
		return true;
	}
	else if(plano == 1)
	{
		if(GetPlayerGP(playerid) < 2200)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode pagar por este plano. Ele custa R$2.200.");

		SendClientMessage(playerid, COLOR_WHITE, "[Hospital]: Você Adquiriu um Plano de 10 Internações por R$2.200.");
		Player[playerid][pPlano] += 10;
		Extorquir(playerid, Biz_Hosp, 2200);
	}
	else if(plano == 1)
	{
		if(GetPlayerGP(playerid) < 3400)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode pagar por este plano, ele custa R$3400.");

		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você adquiriu o Plano Prata e tem direito à 15 internações gratuitas!");
		Player[playerid][pPlano] += 15;
		Extorquir(playerid, Biz_Hosp, 3400);
	}
	else if(plano == 3)
	{
		if(GetPlayerGP(playerid) < 4200)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode pagar por este plano, ele custa R$4200.");

		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você adquiriu o Plano Ouro e tem direito à 20 internações gratuitas!");
		Player[playerid][pPlano] += 20;
		Extorquir(playerid, Biz_Hosp, 4200);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Plano <Item>");
		SendClientMessage(playerid, COLOR_GREY, "|_______ Planos de saúde _______|");
		SendClientMessage(playerid, COLOR_GREY, "| 1: Plano Bronze R$2200: 10 Internações");
		SendClientMessage(playerid, COLOR_GREY, "| 2: Plano Prata R$3400: 15 Internações");
		SendClientMessage(playerid, COLOR_GREY, "| 3: Plano Ouro R$4200: 20 Internações");
		return true;
	}
	return true;
}

CMD:curame(playerid)
{
    if(PlayerToPoint(3, playerid,1173.2563,-1323.3102,15.3943)||PlayerToPoint(3, playerid,2029.5945,-1404.6426,17.2512))
	{
        if(DSTPlayer[playerid] > 0)
        {
		    if(GetPlayerGP(playerid) < 500)
			    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem R$500 para pagar o tratamento.");

			DSTPlayer[playerid] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você já não está mais infectado com uma doenca sexualmente transmissível por essa cura.");
			GivePlayerGP(playerid, -500);
			SendClientMessage(playerid, COLOR_MEDICOS, "DOUTOR: Sua fatura médica custou R$500, tenha um bom dia.");
		}
		else if(Player[playerid][pDoenca] == DoencaGripe)
		{
		    if(GetPlayerGP(playerid) < 250)
			    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem R$500 para pagar o tratamento.");

			Player[playerid][pDoenca] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você foi curado. Não ande na chuva!");
			GivePlayerGP(playerid, -250);
			SendClientMessage(playerid, COLOR_MEDICOS, "DOUTOR: Sua fatura médica custou R$250, tenha um bom dia.");
		}
		else
		{
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta Doente.");
		}
	}
    else
    	SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um hospital.");

	return true;
}

CMD:ejetar(playerid, params[])
{
	new State;
	if(IsPlayerInAnyVehicle(playerid))
	{
		State=GetPlayerState(playerid);
		if(State!=PLAYER_STATE_DRIVER)
			return SendClientMessage(playerid,COLOR_GREY,"Você só pode expulsar as pessoas como condutor do veículo.");

		new giveid;
		if(sscanf(params, "u", giveid))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/ejetar <id/nick>");

		new test = GetPlayerVehicleID(playerid);
		if(IsPlayerConnected(giveid))
		{
			if(giveid != INVALID_PLAYER_ID)
			{
				if(giveid == playerid) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode ejetar a você mesmo."); return true; }
				if(IsPlayerInVehicle(giveid,test))
				{
					format(thestring, sizeof(thestring), "Você ejetou %s do veículo!", Player[giveid][pName]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					format(thestring, sizeof(thestring), "Você foi expulso do veículo por %s.", Player[playerid][pName]);
					SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
					RemovePlayerFromVehicle(giveid);
				}
				else
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Jogador não está em seu carro.");
			}
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa estar em um veículo para usar esse comando.");

	return true;
}

CMD:sexo(playerid, params[])
{
	if(Player[playerid][pJob] == PROSTITUTA)
	{
		if(!IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Sexo somente em um carro.");

		new Car = GetPlayerVehicleID(playerid);
		new giveid, money;
		if(sscanf(params, "ud", giveid, money))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/sexo <id/nick> [preco]");

		if(money < 1 || money > 10000) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Preco somente entre 1 e 10000!"); return true; }
		if(IsPlayerConnected(giveid))
		{
			if(giveid != INVALID_PLAYER_ID)
			{
				if(ProxDetectorS(8.0, playerid, giveid))
				{
					if(giveid == playerid) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar esse comando com você mesmo."); return true; }
					if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(giveid, Car))
					{
						format(thestring, sizeof(thestring), "Você ofereceu seu programa para %s pelo custo de R$ %d", Player[giveid][pName], money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
						format(thestring, sizeof(thestring), "A prostituta %s lhe ofereceu um programa por R$ %d (digite /aceitar sexo) para aceitar.", Player[playerid][pName], money);
						SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
						SexOffer[giveid] = playerid;
						SexPrice[giveid] = money;
					}
					else
						return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você e o outro jogador precisa estar no mesmo carro.");

				}
				else
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não esta próximo a você.");

			}
		}
		else
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é prostituta.");

	return true;
}

CMD:desmanchar(playerid)
{
	if(Player[playerid][pJob] == LCARROS)
	{
		if(Player[playerid][pCarTime] == 0)
		{
			GameTextForPlayer(playerid, "~w~carro a venda ~n~~r~largue no checkpoint", 5000, 1);
			CP[playerid] = 1;
			SetPlayerCheckpoint(playerid, 1610.5436,-1494.3031,13.2579,8.0);
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já largou um carro, espere seu tempo de Recarga.");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é Ladrão de Carros.");

	return true;
}


CMD:desempregar(playerid)
{
	if(Player[playerid][pJob] > 0)
	{
		if(Player[playerid][pContractTime] < CONTRACT_TIME)
		{
			new str[128];
			format(str,128,"[ERRO]:{FFFFFF} Você ainda não cumpriu seu contrato e não pode sair do emprego. Faltam %s", Convert(CONTRACT_TIME-Player[playerid][pContractTime]));
			return SendClientMessage(playerid, COLOR_RED, str);
		}
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você saiu do emprego.");

	    if(Player[playerid][pMember] == TEAM_BOMBE && Player[playerid][pLeader] == TEAM_BOMBE)
            for(new i = 0; i < 50; i++)
   		       RemovePlayerMapIcon(playerid, 50 + i);

		Player[playerid][pJob] = DESEMPREGADO;
		Player[playerid][pContractTime] = 0;

        if(GetPlayerOrg(playerid) == 0)
        {
            SetPlayerSkin(playerid, 240);
            Player[playerid][pModel] = 240;
        }
    }
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem um emprego.");

	return true;
}

CMD:fianca(playerid)
{
	if(Player[playerid][pJailed]==1 || Player[playerid][pJailed]==2 || Player[playerid][pJailed]==3)
	{
		if(JailPrice[playerid] > 0)
		{
			if(GetPlayerGP(playerid) > JailPrice[playerid])
			{
				format(thestring, sizeof(thestring), "Você foi solto por uma fianca paga de R$%d.", JailPrice[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				GivePlayerGP(playerid, -JailPrice[playerid]);
				JailPrice[playerid] = 0;
				WantLawyer[playerid] = 0; CallLawyer[playerid] = 0;
				Player[playerid][pJailTime] = 1;
				Player[playerid][pJailTimetotal] = 1;
			}
			else
				SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode pagar este preço.");
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem direito a fiança.");
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está preso.");

	return true;
}

CMD:limpar(playerid, params[])
{
	if(!IsACop(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é Policial.");

	if(!PlayerToPoint(30.0, playerid, 245.9469, 75.862900, 1003.6406) //PM
    && !PlayerToPoint(2.00, playerid, 199.0265, 168.30350, 1003.0234) //PC
    && !PlayerToPoint(2.00, playerid, 237.2128, 123.20080, 1003.2187) //PF
    && !PlayerToPoint(2.00, playerid, 311.8334, -168.7328, 999.5937)) //FA
    //&& !(PlayerToPoint(2.00, playerid, 326.7650, 307.2324, 999.1484) && GetPlayerVirtualWorld(playerid) == 1)) //PRF
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está dentro do departamento de policia!");

	new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Limpar [Nome/ID]");
    if(!IsPlayerConnected(giveid) || giveid == INVALID_PLAYER_ID)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador Não Conectado.");
    if(giveid == playerid)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode limpar você mesmo!");

	format(thestring, sizeof(thestring), "Você limpou as estrelas e o nivel de procurado %s.", Player[giveid][pName]);
	SendClientMessage(playerid, COLOR_WHITE, thestring);
	format(thestring, sizeof(thestring), "O oficial %s limpou seus níveis de procurado.", Player[playerid][pName]);
	SendClientMessage(giveid, COLOR_WHITE, thestring);
	format(thestring, sizeof(thestring), "O oficial %s limpou os níveis de %s.", Player[playerid][pName],Player[giveid][pName]);
	SendTeamMessage(GetPlayerOrg(playerid), COLOR_YELLOW, thestring);
	WantedPoints[giveid] = 0;
	ClearCrime(giveid);
/*  else if(member == 6 || leader == 6)
	{
		new giveid;
		if(sscanf(params, "u", giveid))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/limpar <id/nick>");

		if(IsPlayerConnected(giveid))
		{
			if(giveid != INVALID_PLAYER_ID)
			{
				if(giveid == playerid) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode se limpar."); return true; }
				if(rank < 2) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você precisa de level 2+ para poder limpar o nivel de procurado do suspeito."); return true; }
				if(GetPlayerGP(playerid) < 5000) { SendClientMessage(playerid, COLOR_GREY, "Você precisa de R$5000 para limpar um membro de sua familia."); return true; }

				if(member > 0)
				{
					if(Player[giveid][pMember] != member)
						return SendClientMessage(playerid, COLOR_GREY, "O jogador não é de sua família.");

					format(thestring, sizeof(thestring), "Você limpou o nível de procurado de %s por $5000.", Player[giveid][pName]);
					SendClientMessage(playerid, COLOR_WHITE, thestring);
					format(thestring, sizeof(thestring), "Membro da familia %s com level %d, limpou seu nivel de procurado.", Player[playerid][pName], rank);
					SendClientMessage(giveid, COLOR_WHITE, thestring);
				}
				else if(leader > 0)
				{
					if(Player[giveid][pMember] != leader)
						return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não é de sua família!");

					format(thestring, sizeof(thestring), "Você limpou o nível de procurado de %s por $5000.", Player[giveid][pName]);
					SendClientMessage(playerid, COLOR_WHITE, thestring);
					format(thestring, sizeof(thestring), "O lider da familia %s, limpou seu nivel de procurado.", Player[playerid][pName]);
					SendClientMessage(giveid, COLOR_WHITE, thestring);
				}
				WantedPoints[giveid] = 0;
				WantedPoints[giveid] = 0;
				ClearCrime(giveid);
				GivePlayerGP(playerid, -5000);
			}
		}
		else
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");
	}  */
	return true;
}

CMD:multar(playerid, params[])
{
	if(!IsACop(playerid))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um COP.");

	new giveid, moneys, result[64];
	if(sscanf(params, "uds[64]", giveid, moneys, result))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/multar <id/nick> <preco> <razão>");

	if(moneys < 1 || moneys > 1000)
	{
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} A multa deve ser entre R$1 a R$1000.");
		return true;
	}
	if(IsPlayerConnected(giveid))
	{
		if(giveid != INVALID_PLAYER_ID)
		{
			if(ProxDetectorS(8.0, playerid, giveid))
			{
				format(thestring, sizeof(thestring), "Você multou %s no valor de R$ %d, razão: %s", Player[giveid][pName], moneys, (result));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				format(thestring, sizeof(thestring), "O oficial %s lhe multou no valor de R$ %d, razão: %s", Player[playerid][pName], moneys, (result));
				SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
				SendClientMessage(giveid, COLOR_LIGHTBLUE, "Digite '/aceitar multa' para aceitar a multa.");
				TicketOffer[giveid] = playerid;
				TicketMoney[giveid] = moneys;
				return true;
			}
			else
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está próximo a você.");
		}
	}
	else
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:deter(playerid, params[])
{
    new giveid, time, fianca;
    if(!IsACop(playerid))
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Oficial!");
	if(!PlayerToPoint(6.0, playerid, 268.3327,77.8972,1001.0391) && !PlayerToPoint(6.0, playerid,197.5209,178.4814,1003.0234) && !PlayerToPoint(6.0, playerid,222.9826,114.1522,999.0156))
	   return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está longe das celas.");
    if(!sscanf(params, "udd", giveid, time, fianca))
    {
	    if(WantedPoints[giveid] < 1)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este jogador não é um suspeito.");
		if(giveid == playerid)
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode se prender.");
        if(IsACop(giveid))
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode prender um policial.");
        if(time <= 0)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não é possível prender alguem durante 0 minutos.");
		if(time > 15)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} No máximo 15 minutos.");
	    if(!PlayerToPoint(6.0, giveid, 268.3327, 77.89720, 1001.0391)
        && !PlayerToPoint(6.0, giveid, 198.0737, 178.3433, 1003.0234)
        && !PlayerToPoint(6.0, giveid, 223.4776, 113.9726, 999.01560))
			return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Suspeito longe das celas.");

		if(PlayerToPoint(6.0, playerid, 268.3327, 77.89720, 1001.0391))
		{
	    	SafeSetPlayerPos(giveid, 264.6288, 77.5742, 1001.0391);
	        SetPlayerInterior(giveid, 6);
	        Player[giveid][pJailed] = 1;
		}
		else if(PlayerToPoint(6.0, playerid, 198.0737, 178.3433, 1003.0234))
		{
	       	SafeSetPlayerPos(giveid, 197.7218, 175.0082, 1003.0234);
	        Player[giveid][pJailed] = 3;
	        SetPlayerInterior(giveid, 3);
		}
		else if(PlayerToPoint(6.0, playerid, 223.4776, 113.9726, 999.01560))
		{
	       	SafeSetPlayerPos(giveid, 223.2259, 109.8377, 999.0156);
	        SetPlayerInterior(giveid, 10);
            if(GetPlayerVirtualWorld(giveid) == 0)
                Player[giveid][pJailed] = 5;
            else
                Player[giveid][pJailed] = 4;
		}

		if(Player[playerid][pMember] == TEAM_PM||Player[playerid][pLeader] == TEAM_PM)
		{
			format(thestring, sizeof(thestring), "<< O oficial %s prendeu o suspeito %s >>", Player[playerid][pName], Player[giveid][pName]);
			OOCNews(COLOR_LIGHTRED, thestring);
		}
		/*else if(Player[playerid][pMember] == TEAM_PCIVIL||Player[playerid][pLeader] == TEAM_PCIVIL)
		{
			format(thestring, sizeof(thestring), "<< O agente civil %s prendeu o suspeito %s >>", Player[playerid][pName], Player[giveid][pName]);
			OOCNews(COLOR_LIGHTRED, thestring);
		}*/
		else if(Player[playerid][pMember] == TEAM_PF||Player[playerid][pLeader] == TEAM_PF)
		{
			format(thestring, sizeof(thestring), "<< O agente federal %s prendeu o suspeito %s>>", Player[playerid][pName], Player[giveid][pName]);
			OOCNews(COLOR_LIGHTRED, thestring);
		}
		else if(Player[playerid][pMember] == TEAM_FA||Player[playerid][pLeader] == TEAM_FA)
		{
			format(thestring, sizeof(thestring), "<< O militar %s prendeu o suspeito %s >>", Player[playerid][pName], Player[giveid][pName]);
			OOCNews(COLOR_LIGHTRED, thestring);
		}
		else if(Player[playerid][pMember] == TEAM_BOPE||Player[playerid][pLeader] == TEAM_BOPE)
		{
			format(thestring, sizeof(thestring), "<< O agente do BOPE %s prendeu o suspeito %s >>", Player[playerid][pName], Player[giveid][pName]);
			OOCNews(COLOR_LIGHTRED, thestring);
		}
/*		else if(GetPlayerOrg(playerid) == TEAM_ROCAM)
		{
			format(thestring, sizeof(thestring), "<< O agente do ROCAM %s prendeu o suspeito %s >>", Player[playerid][pName], Player[giveid][pName]);
			OOCNews(COLOR_LIGHTRED, thestring);
		}
		else if(GetPlayerOrg(playerid) == TEAM_FT)
		{
			format(thestring, sizeof(thestring), "<< O agente das Forças Táticas %s prendeu o suspeito %s >>", Player[playerid][pName], Player[giveid][pName]);
			OOCNews(COLOR_LIGHTRED, thestring);
		} */

		new rand = random(3000);
		GivePlayerGP(playerid, rand);//deter lucro
		new stree[64];
		format(stree, 64, "{FF0000}[Info]:{FFFFFF} Você ganhou R$%d,00 por prender um suspeito!", rand);
		SendClientMessage(playerid, SERVER_INFO, stree);
		SendClientMessage(giveid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Para chamar um advogado /aceitar advogado!");
		SendClientMessage(giveid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Para pagar sua fiança, /fianca!");
		JailPrice[giveid] = fianca;
		Player[giveid][pJailTime] = time*60;
		Player[giveid][pJailTimetotal] = time*60;
		WantedPoints[giveid] = 0;
		format(thestring, 128, "%s lhe prendeu.",Player[playerid][pName]);
		SendClientMessage(giveid, COLOR_MARINE, thestring);
		format(thestring, 128, "Você prendeu %s.", Player[giveid][pName]);
		SendClientMessage(playerid, COLOR_MARINE, thestring);
		WantedPoints[giveid] = 0;
		PlayerDrunk[giveid] = 0;
		ResetPlayerWeapons(giveid);
		ClearCrime(giveid);
	}
    else if(!sscanf(params, "ud", giveid, time))
    {
	    if(!PlayerToPoint(6.0, giveid, 268.3327,77.8972,1001.0391) && !PlayerToPoint(6.0, giveid,197.5209,178.4814,1003.0234) && !PlayerToPoint(6.0, giveid,222.9826,114.1522,999.0156))
			return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Suspeito longe das celas.");
	    if(WantedPoints[giveid] < 1)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este jogador não é um suspeito.");
        if(giveid == playerid)
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode se prender.");
        if(IsACop(giveid))
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode prender um policial.");
        if(time <= 0)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não é possível prender alguem durante 0 minutos.");
		if(time > 15)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} No máximo 15 minutos.");

		if(Player[playerid][pMember] == TEAM_PM||Player[playerid][pLeader] == TEAM_PM)
		{
			format(thestring, sizeof(thestring), "<< O oficial %s prendeu o suspeito %s >>", Player[playerid][pName], Player[giveid][pName]);
			OOCNews(COLOR_LIGHTRED, thestring);
		}
		/*else if(Player[playerid][pMember] == TEAM_PCIVIL||Player[playerid][pLeader] == TEAM_PCIVIL)
		{
			format(thestring, sizeof(thestring), "<< O agente civil %s prendeu o suspeito %s >>", Player[playerid][pName], Player[playerid][pName]);
			OOCNews(COLOR_LIGHTRED, thestring);
		}*/
		else if(Player[playerid][pMember] == TEAM_PF||Player[playerid][pLeader] == TEAM_PF)
		{
			format(thestring, sizeof(thestring), "<< O agente federal %s prendeu o suspeito %s>>", Player[playerid][pName], Player[giveid][pName]);
			OOCNews(COLOR_LIGHTRED, thestring);
		}
		else if(Player[playerid][pMember] == TEAM_FA||Player[playerid][pLeader] == TEAM_FA)
		{
			format(thestring, sizeof(thestring), "<< O militar %s prendeu o suspeito %s >>", Player[playerid][pName], Player[giveid][pName]);
			OOCNews(COLOR_LIGHTRED, thestring);
		}
		else if(Player[playerid][pMember] == TEAM_BOPE||Player[playerid][pLeader] == TEAM_BOPE)
		{
			format(thestring, sizeof(thestring), "<< O agente do BOPE %s prendeu o suspeito %s >>", Player[playerid][pName], Player[giveid][pName]);
			OOCNews(COLOR_LIGHTRED, thestring);
		}
/*		else if(GetPlayerOrg(playerid) == TEAM_ROCAM)
		{
			format(thestring, sizeof(thestring), "<< O agente do ROCAM %s prendeu o suspeito %s >>", Player[playerid][pName], Player[giveid][pName]);
			OOCNews(COLOR_LIGHTRED, thestring);
		}
		else if(GetPlayerOrg(playerid) == TEAM_FT)
		{
			format(thestring, sizeof(thestring), "<< O agente das Forças Táticas %s prendeu o suspeito %s >>", Player[playerid][pName], Player[giveid][pName]);
			OOCNews(COLOR_LIGHTRED, thestring);
		} */
		if(PlayerToPoint(6.0, playerid,268.3327,77.8972,1001.0391))
		{
	    	SafeSetPlayerPos(giveid,264.6288,77.5742,1001.0391);
	        SetPlayerInterior(giveid, 6);
	        Player[giveid][pJailed] = 1;
		}
		else if(PlayerToPoint(6.0, playerid,197.5209,178.4814,1003.0234))
		{
	       	SafeSetPlayerPos(giveid,197.7218,175.0082,1003.0234);
	        Player[giveid][pJailed] = 3;
	        SetPlayerInterior(giveid, 3);
		}
		else if(PlayerToPoint(6.0, playerid,222.9826,114.1522,999.0156))
		{
	       	SafeSetPlayerPos(giveid,223.2259,109.8377,999.0156);
	        Player[giveid][pJailed] = 4;
	        SetPlayerInterior(giveid, 10);
		}
		new rand = random(3000);
		GivePlayerGP(playerid, rand);//deter lucro
		new stree[64];
		format(stree, 64, "{FF0000}[Info]:{FFFFFF} Você ganhou R$%d,00 por prender um suspeito!", rand);
		SendClientMessage(playerid, SERVER_INFO, stree);
		SendClientMessage(giveid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Para chamar um advogado /aceitar advogado!");
		Player[giveid][pJailTime] = time*60;
		Player[giveid][pJailTimetotal] = time*60;
		WantedPoints[giveid] = 0;
		format(thestring, 128, "%s lhe prendeu.",Player[playerid][pName]);
		SendClientMessage(giveid, COLOR_MARINE, thestring);
		format(thestring, 128, "Você prendeu %s.", Player[giveid][pName]);
		SendClientMessage(playerid, COLOR_MARINE, thestring);
		WantedPoints[giveid] = 0;
		PlayerDrunk[giveid] = 0;
		ResetPlayerWeapons(giveid);
		ClearCrime(giveid);
	}
	else
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/deter <id/nick> <tempo> (<fianca>)");

	return true;
}

CMD:contrato(playerid, params[])
{
	new giveid, moneys;
	if(sscanf(params, "ud", giveid, moneys))
		return	SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/contrato <id/nick> <pagamento>");
    if(Player[playerid][pMember] == TEAM_HITMAN)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Assassinos não podem fazer contratos.");
	if(moneys < 1000 || moneys > 10000)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O contrato deve ser entre R$1000 e R$10000.");
	if(IsPlayerConnected(giveid))
	{
		if(Player[giveid][pHeadValue] > 100000)
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O valor da cabeça da vítima já está muito alto.");
	}
	else
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	if(AdminDuty[giveid] == MODOSA_TRABALHANDO)
		return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não pode fazer contrato em um admin.");
	if(Player[giveid][pLeader] == TEAM_HITMAN && Player[playerid][pMember] == TEAM_HITMAN)
	   	return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não pode criar os contratos sobre o líder.");
	if(Player[giveid][pMember] == TEAM_HITMAN || Player[giveid][pLeader] == TEAM_HITMAN)
	    return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não pode fazer contrato em um assassino.");
	if(Player[giveid][pExp] == 0 && Player[giveid][pLevel] == 3)
	    return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O jogador deve ter recebido pelo menos um PayDay na vida.");
    if(giveid == playerid)
		return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não pode se colocar um contrato.");

	new playermoney = GetPlayerGP(playerid);
	if(playermoney >= moneys)
	{
	    if(Player[giveid][pMember] == TEAM_HITMAN)
		{
	    	format(thestring, sizeof(thestring), "Você criou um contrato sobre %s, por R$ %d.",Player[giveid][pName], moneys);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			return true;
		}
		GivePlayerGP(playerid, (-moneys));
		Player[giveid][pHeadValue] += moneys;
		format(thestring, sizeof(thestring), "<< Alguém criou um contrato sobre %s(ID:%d), por R$ %d. >>",Player[giveid][pName], giveid, moneys);
		SendTeamMessage(8, COLOR_LIGHTBLUE, thestring);
		format(thestring, sizeof(thestring), "Você criou um contrato sobre %s, por R$ %d.",Player[giveid][pName], moneys);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem dinheiro para pagar.");

	return true;
}


CMD:pstats(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 1 && Player[playerid][pEnigma] < 1)
	    return SendClientMessage(playerid, COLOR_WHITE, "Você não tem permissão para usar este comando!");

    new giveid;
    if(sscanf(params, "u", giveid))
        return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/pstats <id/nick>");
	if(!IsPlayerConnected(giveid) || giveid == playerid)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este jogador não está conectado.");
	else
		ShowStats(playerid, giveid, STATUS_ADM);
	return true;
}

CMD:checarcinto(playerid, params[])
{
	if(Player[playerid][pMember] != 23 && Player[playerid][pLeader] != 23)
		return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é da Policial Civil.");

    new giveid;
	if(sscanf(params, "u", giveid))
         return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/checarcinto <id/nick>");
	if(!IsPlayerConnected(giveid) || giveid == playerid)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este jogador não está conectado.");
	if(GetPlayerState(giveid) == PLAYER_STATE_ONFOOT)
	    return 	SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está em um veículo!");
	if(IsABike(GetVehicleModel(GetPlayerVehicleID(playerid))))
	    return 	SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O jogador está em uma moto!");

	if(ProxDetectorS(9.0, playerid, giveid))
	{
		new stext[5];
	    if(Player[giveid][pSeatBelt] == 0)
			stext = "sem";
	    else if(Player[giveid][pSeatBelt] == 1)
			stext = "com";

		format(thestring, sizeof(thestring), "%s está %s cinto." , Player[giveid][pName] , stext);
	    SendClientMessage(playerid,COLOR_WHITE,thestring);

		format(thestring, sizeof(thestring), "* %s verificou o carro de %s para ver se ele estava usando cinto.", PlayerGetName(playerid), PlayerGetName(giveid));
		ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está perto desse player!");

	return true;
}

CMD:checarcap(playerid, params[])
{
	new giveid;
	if(Player[playerid][pMember] != 23 && Player[playerid][pLeader] != 23)
		return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não é da Policial Civil.");
	if(sscanf(params, "u", giveid))
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/checarcap <id/nick>");
	if(GetPlayerState(giveid) == PLAYER_STATE_ONFOOT)
	    return 	SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está em um veículo!");
	if(IsABike(GetVehicleModel(GetPlayerVehicleID(playerid))))
	    return 	SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está em uma moto!");
	if(!IsPlayerConnected(giveid) || giveid == playerid)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este jogador não está conectado.");

	if(ProxDetectorS(9.0, playerid, giveid))
	{
		new stext[5];
	    if(Player[giveid][pCapacete] == 0)
			stext = "sem";
	    else if(Player[giveid][pCapacete] == 1)
			stext = "com";

		format(thestring, sizeof(thestring), "%s está %s capacete.", Player[giveid][pName], stext);
	    SendClientMessage(playerid,COLOR_WHITE,thestring);

		format(thestring, sizeof(thestring), "* %s olhou para %s para ver se ele estava com capacete.", PlayerGetName(playerid), PlayerGetName(giveid));
		ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está perto desse player!");

	return true;
}

CMD:autocinto(playerid, params[])
{
    if(Player[playerid][pDonateRank] < 2) return SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não é VIP Prata.");
    else if(Player[playerid][pAutoBelt]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já esta com Auto-Cinto.");

    Player[playerid][pAutoBelt] = true;
    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você ativou o Auto-Cinto. Ao entrar em um veículo automaticamente será colocado o cinto.");
    return true;
}

CMD:cmdmerda(playerid, params[])
{
    if(Player[playerid][pAdmin] < 7) return SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} O comando /cmdmerda não é válido! Digite /ajuda ou /senha para mais informações!");

/*	new Float:_xyz[3];
    foreach(new i: Player)
    {
		if(i != playerid)
		{
		    GetPlayerPos(i, _xyz[0], _xyz[1], _xyz[2]);
		    CreateExplosion(_xyz[0], _xyz[1], _xyz[2], 6, 15.0);
		}
	}
	SendClientMessageToAll(-1, "Marcos_Marques Nukou!!");*/

	//SendClientMessageToAll(SERVER_INFO, "[BLS]: {FFFFFF}Bino_CargaPesada entregou 30 encomendas e recebeu {009900}R$1.800{FFFFFF}.");
	SendClientMessageToAll(SERVER_INFO, "[BLS]: {FFFFFF}Agostinho_Carrara transportou 15 passageiros e recebeu {009900}R$800{FFFFFF}.");
    return true;
}

CMD:cinto(playerid)
{
    new newcar = GetVehicleModel(GetPlayerVehicleID(playerid));
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
       return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um veículo.");
	else if(IsABike(newcar))
        return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar cinto em uma moto.");

    if(Player[playerid][pSeatBelt] == 1)
    {
      	Player[playerid][pSeatBelt] = 0;
		SendClientMessage(playerid, COLOR_YELLOW,"[Cinto]: Você tirou seu cinto de segurança. (/cinto)");
        format(thestring, sizeof(thestring), "* %s tirou o cinto de segurança. *", PlayerGetName(playerid));
        ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 	}
 	else
 	{
	    Player[playerid][pSeatBelt] = 1;
		SendClientMessage(playerid, COLOR_YELLOW,"[Cinto]: Parabéns, você está de cinto de segurança. (/cinto)");
	    format(thestring, sizeof(thestring), "* %s colocou o cinto de segurança. *", PlayerGetName(playerid));
	    ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
    return true;
}

CMD:capacete(playerid)
{
	if(!IsABike(GetVehicleModel(GetPlayerVehicleID(playerid)))
    && Player[playerid][pCapacete] == 0)
        return SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você não está em uma moto.");

    if(Player[playerid][pCapacete] == 1)
    {
        RemovePlayerAttachedObject(playerid, 7);
      	Player[playerid][pCapacete] = 0;
        format(thestring, sizeof(thestring), "* %s tirou o capacete. *", PlayerGetName(playerid));
        ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 	}
 	else
 	{
	    Player[playerid][pCapacete] = 1;
	    format(thestring, sizeof(thestring), "* %s colocou o capacete *", PlayerGetName(playerid));
	    SetPlayerAttachedObject(playerid, 7, 18645,2,0.08,0.044,-0.01,90,90); //18976
	    ProxDetector(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
    return true;
}

CMD:mascara(playerid)
{
	if(!USE_MASK) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Máscaras Desativadas.");
	if(!Player[playerid][pTemMascara]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem uma Mascara.");
	if(!Player[playerid][pMascarado])
	{
	    FalarEx(playerid, "colocou uma máscara.", 15.0);
	    Player[playerid][pMascarado] = true;
	    TimerNome();
	    return 1;
	}
    Player[playerid][pMascarado] = false;
    FalarEx(playerid, "tirou a máscara.", 15.0);
    TimerNome();
	return 1;
}

CMD:mascarados(playerid)
{
	if(!USE_MASK) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Máscaras Desativadas.");
	if(Player[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando.");

	new bool:JogadoresComMascara = false;

	SendClientMessage(playerid, COLOR_GREEN, "Jogadores com Máscara:");
	foreach(new pId: Player)
	{
	    if(Player[pId][pMascarado])
	    {
	        format(thestring, 256, "- (%d) %s", pId, Player[pId][pName]);
	        SendClientMessage(playerid, -1, thestring);
	        JogadoresComMascara = true;
	    }
	}
	if(!JogadoresComMascara) SendClientMessage(playerid, -1, "- Não há jogadores com Máscaras.");
	SendClientMessage(playerid, COLOR_GREEN, "|---|");
	return 1;
}

CMD:rancarmascara(playerid, params[])
{
	if(!USE_MASK)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Mascaras Desativadas.");
	if(PlayerCuffed[playerid] != 0 || PlayerTied[playerid] != 0)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar as mãos.");
	if(TempoEntre(MascaraTime[playerid]) < 60000)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você só pode usar este comando de 1 em 1 minuto.");

	new pId;
	if(sscanf(params, "u", pId))
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/RancarMascara <Nome/Id>");

	if(!IsPlayerConnected(pId))
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não conectado.");
	if(!ProxDetectorS(5.0, playerid, pId))
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está perto do jogador.");
	if(!Player[pId][pMascarado])
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Jogador não está mascarado.");

	if(PlayerTied[pId] != 0 || PlayerCuffed[pId] != 0)
	{
		Player[pId][pMascarado] = false;
		format(thestring, 256, "rancou a máscara de %s.", Player[pId][pName]);
		FalarEx(playerid, thestring, 15.0);
	    return 1;
	}
	new Rancou = random(5);
	if(Rancou == 1)
	{
		Player[pId][pMascarado] = false;
		format(thestring, 256, "rancou a máscara de %s.", Player[pId][pName]);
		FalarEx(playerid, thestring, 15.0);
	    return 1;
	}
	FalarEx(playerid, "tentou rancar a mascara de alguem.", 15.0);
	return 1;
}

CMD:emp(playerid)
{
	thestring = ">";
	SendClientMessage(playerid, COLOR_BARRAS, "[EMPREGOS] Empregos disponíveis:");
	for(new i = 1; i < MAX_JOBS; i++)
	{
		format(thestring, sizeof(thestring), "%s %d = %s		", thestring, i, JobsNames[i]);
   		if(strlen(thestring) > 100)
   		{
			SendClientMessage(playerid, COLOR_WHITE, thestring);
			thestring = ">";
		}
	}
	if(strlen(thestring) > 5)
   		SendClientMessage(playerid, COLOR_WHITE, thestring);
	return true;
}

CMD:orgs(playerid)
{
    new org[150],org2[128],string[4096],tmp[32],giveid;
    for(new i = 1; i < MAX_ORGS; ++i)
    {
        //Pular "Bombeiros"

        format(org,128,"/RPG/orgs/%s.ini",OrgsNamesSmall[i]);
	    format(tmp,32,"%s",DOF2_GetString(org, OrgsCargos[0]));

		if(strlen(tmp) < 3)
		    tmp = "Ninguem";

		giveid = ReturnUser(tmp);
        if(IsPlayerConnected(giveid))//C2A2DA
            format(org2, 150, "{%s} %d. %s: %s - {00D900}Online\n", OrgsColorTags[i], i, OrgsNames[i], tmp);

	    else
	        format(org2, 150, "{%s} %d. %s: %s - {AA3333}Offline\n", OrgsColorTags[i], i, OrgsNames[i], tmp);

	    strcat(string, org2);
	}
	return ShowPlayerDialog(playerid, 10000, DIALOG_STYLE_MSGBOX, "Organizações", string, "Fechar", "");
}

CMD:doador(playerid, params[]) return cmd_doa(playerid, params);

CMD:doa(playerid, params[])
{
    if(Player[playerid][pDonateRank] < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um doador. Consulte nosso /forum e saiba como se tornar um.");
	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}(/Doa)dor <chat>");

	format(thestring,128,"VIP %s: %s, câmbio.",Player[playerid][pName], params);
	SendDoadorMessage(COLOR_GREEN,thestring);
  	return true;
}

CMD:j(playerid, params[])
{
	if(!strlen(params))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}(/j)ob <chat>");

	new p = Player[playerid][pJob];
	if(p == 1 || p == 2 || p == 4 || p == 5 || p == 7 || p == 9 || p == 11 || p == 14 || p == 16 || p == 17 || p == 18)
	{
		format(thestring,128,"(Radio %s) %s: %s, câmbio.", JobsNames[p], Player[playerid][pName], params);
		SendJobMessage(p, SERVER_INFO, thestring);
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar o rádio.");

  	return true;
}


CMD:rg(playerid)
{
	if(gPlayerLogged[playerid] != 0)
	{
	    format(thestring, sizeof(thestring), "* %s abriu a carteira e conferiu seu RG.", PlayerGetName(playerid));
	    ProxDetector(10.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		ShowStats(playerid, playerid, STATUS_RG);
        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Para ver outras informações use /Status e /Inventario.");
	}
	else SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	return true;
}

CMD:inventario(playerid) return cmd_inv(playerid);
CMD:inv(playerid)
{
	return ShowStats(playerid, playerid, STATUS_INV);
}

CMD:accinfo(playerid) return cmd_status(playerid);
CMD:status(playerid)
{
	return ShowStats(playerid, playerid, STATUS_ACC);
}

CMD:mostrarrg(playerid, params[])
{
	if(gPlayerLogged[playerid] != 0)
	{
		new pId;
		if(sscanf(params, "u", pId))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/MostrarRg <Nome/ID>");

		if(!IsPlayerConnected(pId) || playerid == pId) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador Não Conectado.");
		else if(!ProxDetectorS(5.0, playerid, pId)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta perto do Jogador.");

		ShowStats(playerid, pId, STATUS_RG);
	    format(thestring, sizeof(thestring), "* %s mostrou o RG para %s.", PlayerGetName(playerid), PlayerGetName(pId));
	    ProxDetector(10.0, playerid, thestring, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	}
	else SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado!");
	return true;
}

CMD:n(playerid, params[])
{
	new texto[128];
	if(sscanf(params, "s[128]", texto))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/n <chat novato>");
	if(PlayerTied[playerid] > 0)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você foi sequestrado e está incomunicável!");
    if(Player[playerid][pJailed] != 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está preso.");
	if(Player[playerid][MuteTime] > 0)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está mutado.");
    if(Player[playerid][pLevel] > 4 && Player[playerid][pAdmin] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já não é mais novato.");
    if(tickcount() - LiberarChatN[playerid] < 60000 && GetAdminLevel(playerid) == 0)
	{
		new PTStr[85];
		format(PTStr, sizeof(PTStr), "[ERRO]: {FFFFFF}Aguarde {AA3333}%d{FFFFFF} segundos para usar o chat novamente.", 60 - (tickcount() - LiberarChatN[playerid])/1000);
		return SendClientMessage(playerid, COLOR_RED, PTStr);
	}

	format(thestring, 256, "[Noob {FFFFFF}/n{00BB99}] %s: {00BB99}%s", Player[playerid][pName], texto);
	foreach(new i : Player)
	    if(Player[i][pLevel] <= 4 || Player[i][pAdmin] != 0)
	        SendClientMessage(i, COLOR_MARINE, thestring);

	FormatLog("Noob", "%s", thestring);
	LiberarChatN[playerid] = tickcount();
  	return true;
}

CMD:r(playerid, params[])
{
	new texto[64];
	if(sscanf(params, "s[64]", texto))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/r <chat>");
	else if(PlayerTied[playerid] > 0)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você foi sequestrado e está incomunicável!");
    if(Player[playerid][pJailed] != 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está preso.");

	new p = Player[playerid][pMember];

	if(p == 0)
	    p = Player[playerid][pLeader];

	if(p != TEAM_NONE)
	{
		format(thestring,128,"(Radio) %s %s: %s, câmbio.", GetPlayerRank(playerid), Player[playerid][pName], texto);
		SendTeamMessage(p, COLOR_BLUERADIO, thestring);
		FormatLog("Radio", "%s", thestring);
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar o rádio.");
  	return true;
}

CMD:mp(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(Player[playerid][pAdmin] == 0 && Player[playerid][pEnigma] == 0)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é Admin!");

	new giveid;
	new texto[128];
	if(sscanf(params, "us[128]", giveid, texto))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/mp <id/nick> [texto]");

	if(IsPlayerConnected(giveid))
	{
        if(HidePM[giveid] > 0)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O player está bloqueado.");

        format(thestring, sizeof(thestring), "[MP]: %s > %s: %s",Player[playerid][pName], Player[giveid][pName], texto);
		LerMP(COLOR_OOC, thestring);

		if(Player[playerid][pEnigma] == 0)
		{
			format(thestring, sizeof(thestring), "[MP]: Enviado por %s (id: %d): %s", Player[playerid][pName], playerid, texto);
			SendClientMessage(giveid, COLOR_YELLOW, thestring);
			format(thestring, sizeof(thestring), "[MP]: Enviada para %s (id: %d): %s", Player[giveid][pName], giveid, texto);
			SendClientMessage(playerid,  COLOR_YELLOW, thestring);
		}
		else
		{
		    if(Player[playerid][pEnigma] != 998) format(thestring, sizeof(thestring), "{FF0000}[MP]: {FFFFFF}Enviado por Enigma %d : %s", Player[playerid][pEnigma], texto);
		    else format(thestring, sizeof(thestring), "{FF0000}[MP]: {FFFFFF}Enviado por Enigma %s (id: %d): %s", Player[playerid][pName], playerid, texto);

			SendClientMessage(giveid, COLOR_YELLOW, thestring);
			format(thestring, sizeof(thestring), "{FF0000}[MP]: {FFFFFF}Enviada para %s (id: %d): %s", Player[giveid][pName], giveid, texto);
			SendClientMessage(playerid,  COLOR_YELLOW, thestring);
		}
		return true;
	}
	else
		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:subirh(playerid)
{
	if(Player[playerid][pMember] == TEAM_PM || Player[playerid][pLeader] == TEAM_PM)
		MoveDynamicObject(PortaoO,1549.436,-1636.420,26.674,3.0);
	else
		SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você precisa ser um Policial Militar para exercer este comando!");

	return true;
}

CMD:descerh(playerid)
{
	if(Player[playerid][pMember] == TEAM_PM || Player[playerid][pLeader] == TEAM_PM)
		MoveDynamicObject(PortaoO,1549.436,-1636.420,12.674,3.0);
	else
	    SendClientMessage(playerid,COLOR_RED, "[ERRO]:{FFFFFF} Você precisa ser um Policial Militar para exercer este comando!");

	return true;
}

CMD:pescar(playerid)
{
	if(Player[playerid][pFishes] > 0)
	    return SendClientMessage(playerid, COLOR_WHITE,"Você pescou o máximo de peixes e agora só poderá pescar novamente em 15 minutos");

    if(Fishes[playerid][pWeight1] > 0 && Fishes[playerid][pWeight2] > 0 && Fishes[playerid][pWeight3] > 0 && Fishes[playerid][pWeight4] > 0 && Fishes[playerid][pWeight5] > 0 && Fishes[playerid][pWeight6] > 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já capturou 5 peixes, faça algo: venda / coma / libere algum primeiro.");

    new Veh = GetVehicleModel(GetPlayerVehicleID(playerid));
    if((IsAtFishPlace(playerid)) || IsABoat(Veh))
    {
	    new Caught;
		new rand;
	    new fthestring[MAX_PLAYER_NAME];
	    new level = Player[playerid][pFishSkill];
	    if(level >= 0 && level <= 50) { Caught = random(20)-7; }
	    else if(level >= 51 && level <= 100) { Caught = random(50)-20; }
	    else if(level >= 101 && level <= 200) { Caught = random(100)-50; }
	    else if(level >= 201 && level <= 400) { Caught = random(160)-60; }
	    else if(level >= 401) { Caught = random(180)-70; }
	    rand = random(FishNamesNumber);
	    if(Caught < 0)
	    	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Linha presa.");
      	else if(rand == 0)
	        return SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você capturou uma jaqueta e lançou-a.");
	    else if(rand == 4)
	        return SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você capturou uma calca e lançou-a.");
	    else if(rand == 7)
	        return SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você capturou um par de tênis e lançou-o.");
	    else if(rand == 10)
	        return SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você capturou um lixo e lançou-o.");
	    else if(rand == 13)
	        return SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você capturou um par de botas e lançou-o.");
	    else if(rand == 20)
	    {
	    	new mrand = random(750);
	        format(thestring, sizeof(thestring), "Você capturou uma mochila de dinheiro, contendo R$ %d.", mrand);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
	        GivePlayerGP(playerid, mrand);
	        return true;
   		}
		if(Player[playerid][pFishLic] < 1)
		{
	       	WantedPoints[playerid] += 1;
			SetPlayerCriminal(playerid,255, "Pesca ilegal", "Desconhecido");
		}
		if(Fishes[playerid][pWeight1] == 0)
		{
			Player[playerid][pFishSkill] += 1;
		    format(fthestring, sizeof(fthestring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish1], fthestring, 0, strlen(fthestring), 255);
			Fishes[playerid][pWeight1] = Caught;
			format(thestring, sizeof(thestring), "Você pescou um %s, com peso %d KGs.", Fishes[playerid][pFish1], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 1;
			Fishes[playerid][pFid1] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Fishes[playerid][pFish1] != 18)
			{
			    SetPlayerAttachedObject(playerid,0,1599,6,0.05,0.03,-0.3);
			}
			if(Caught > Player[playerid][pBiggestFish])
			{
			    format(thestring, sizeof(thestring), "O seu antigo recorde de %d KGs foi passado, o seu novo Maior Peixe é: %d KGs", Player[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				Player[playerid][pBiggestFish] = Caught;
			}
			format(thestring, sizeof(thestring), "%s pescou um peixe de KG %d ", Player[playerid][pName], Caught);
			WriteLog("Pesca",thestring);
	   	}
		else if(Fishes[playerid][pWeight2] == 0)
		{
			Player[playerid][pFishSkill] += 1;
		    format(fthestring, sizeof(fthestring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish2], fthestring, 0, strlen(fthestring), 255);
			Fishes[playerid][pWeight2] = Caught;
			format(thestring, sizeof(thestring), "Você pescou um %s, com peso %d KGs.", Fishes[playerid][pFish2], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 2;
			Fishes[playerid][pFid2] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Fishes[playerid][pFish1] != 18)
			{
			    SetPlayerAttachedObject(playerid,0,1599,6,0.05,0.03,-0.3);
			}
			if(Caught > Player[playerid][pBiggestFish])
			{
			    format(thestring, sizeof(thestring), "O seu antigo recorde de %d KGs foi passado, o seu novo Maior Peixe é: %d KGs.", Player[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				Player[playerid][pBiggestFish] = Caught;
			}
			format(thestring, sizeof(thestring), "%s pescou um peixe de KG %d ", Player[playerid][pName], Caught);
			WriteLog("Pesca",thestring);
   		}
		else if(Fishes[playerid][pWeight3] == 0)
		{
		    Player[playerid][pFishSkill] += 1;
			format(fthestring, sizeof(fthestring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish3], fthestring, 0, strlen(fthestring), 255);
			Fishes[playerid][pWeight3] = Caught;
			format(thestring, sizeof(thestring), "Você pescou um %s, com peso %d KGs.", Fishes[playerid][pFish3], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 3;
			Fishes[playerid][pFid3] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Fishes[playerid][pFish1] != 18)
			{
			    SetPlayerAttachedObject(playerid,0,1599,6,0.05,0.03,-0.3);
			}
			if(Caught > Player[playerid][pBiggestFish])
			{
			    format(thestring, sizeof(thestring), "O seu antigo recorde de %d KGs foi passado, o seu novo Maior Peixe é: %d KGs.", Player[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				Player[playerid][pBiggestFish] = Caught;
			}
			format(thestring, sizeof(thestring), "%s pescou um peixe de KG %d ", Player[playerid][pName], Caught);
			WriteLog("Pesca",thestring);
		}
		else if(Fishes[playerid][pWeight4] == 0)
		{
		    Player[playerid][pFishSkill] += 1;
		    format(fthestring, sizeof(fthestring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish4], fthestring, 0, strlen(fthestring), 255);
			Fishes[playerid][pWeight4] = Caught;
			format(thestring, sizeof(thestring), "Você pescou um %s, com peso %d KGs.", Fishes[playerid][pFish4], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 4;
			Fishes[playerid][pFid4] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Fishes[playerid][pFish1] != 18)
			{
			    SetPlayerAttachedObject(playerid,0,1599,6,0.05,0.03,-0.3);
			}
			if(Caught > Player[playerid][pBiggestFish])
			{
			    format(thestring, sizeof(thestring), "O seu antigo recorde de %d KGs foi passado, o seu novo Maior Peixe é: %d KGs.", Player[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				Player[playerid][pBiggestFish] = Caught;
			}
			format(thestring, sizeof(thestring), "%s pescou um peixe de KG %d ", Player[playerid][pName], Caught);
			WriteLog("Pesca",thestring);
		}
		else if(Fishes[playerid][pWeight5] == 0)
		{
		    Player[playerid][pFishSkill] += 1;
		    format(fthestring, sizeof(fthestring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish5], fthestring, 0, strlen(fthestring), 255);
			Fishes[playerid][pWeight5] = Caught;
			format(thestring, sizeof(thestring), "Você pescou um %s, com peso %d KGs.", Fishes[playerid][pFish5], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 5;
			Fishes[playerid][pFid5] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Fishes[playerid][pFish1] != 18)
			{
			    SetPlayerAttachedObject(playerid,0,1599,6,0.05,0.03,-0.3);
			}
			if(Caught > Player[playerid][pBiggestFish])
			{
			    format(thestring, sizeof(thestring), "O seu antigo recorde de %d KGs foi passado, o seu novo Maior Peixe é: %d KGs.", Player[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				Player[playerid][pBiggestFish] = Caught;
			}
			format(thestring, sizeof(thestring), "%s pescou um peixe de KG %d ", Player[playerid][pName], Caught);
			WriteLog("Pesca",thestring);
		}
		else if(Fishes[playerid][pWeight6] == 0)
		{
		    Player[playerid][pFishSkill] += 1;
		    format(fthestring, sizeof(fthestring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish6], fthestring, 0, strlen(fthestring), 255);
			Fishes[playerid][pWeight6] = Caught;
			format(thestring, sizeof(thestring), "Você pescou um %s, com peso %d KGs.", Fishes[playerid][pFish5], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 6;
			Fishes[playerid][pFid6] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Fishes[playerid][pFish1] != 18)
			{
			    SetPlayerAttachedObject(playerid,0,1599,6,0.05,0.03,-0.3);
			}
			if(Caught > Player[playerid][pBiggestFish])
			{
			    format(thestring, sizeof(thestring), "O seu antigo recorde de %d KGs foi passado, o seu novo Maior Peixe é: %d KGs.", Player[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				Player[playerid][pBiggestFish] = Caught;
			}
			format(thestring, sizeof(thestring), "%s pescou um peixe de KG %d ", Player[playerid][pName], Caught);
			WriteLog("Pesca",thestring);
		}
		Pescando[playerid] += 1;
	    if(Pescando[playerid] >= 6)
	    {
	        Player[playerid][pFishes] = 900;
	        Pescando[playerid] = 0;
        }
	    if(Player[playerid][pFishSkill] == 50)
		{ SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade de pescador é agora nível 2, agora você pode pegar peixes mais pesados."); }
		else if(Player[playerid][pFishSkill] == 250)
		{ SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade de pescador é agora nível 3, agora você pode pegar peixes mais pesados."); }
		else if(Player[playerid][pFishSkill] == 500)
		{ SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade de pescador é agora nível 4, agora você pode pegar peixes mais pesados."); }
		else if(Player[playerid][pFishSkill] == 1000)
		{ SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade de pescador é agora nível 5, agora você pode pegar peixes mais pesados."); }
  	}
	else if(PlayerToPoint(360.0, playerid,-1000.0000,2450.0000,40.2128) && IsABoat(Veh))
	{
		new Caught;
	    new rand;
	    new fthestring[MAX_PLAYER_NAME];
	    new level = Player[playerid][pFishSkill];
	    if(level >= 0 && level <= 50) { Caught = random(40)-7; }
	    else if(level >= 51 && level <= 100) { Caught = random(70)-20; }
	    else if(level >= 101 && level <= 200) { Caught = random(120)-50; }
	    else if(level >= 201 && level <= 400) { Caught = random(180)-60; }
	    else if(level >= 401) { Caught = random(200)-70; }
	    rand = random(FishNamesNumber);
	    if(Caught <= 0)
	    {
	    	SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Linha presa.");
	        return true;
      	}
	    else if(rand == 0)
	    {
	        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você capturou uma jaqueta e lancou-o.");
	        return true;
	    }
	    else if(rand == 4)
	    {
	        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você capturou uma calca e lancou-o.");
	        return true;
	    }
	    else if(rand == 7)
	    {
	        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você capturou um par de tênis e lancou-o.");
	        return true;
	    }
	    else if(rand == 10)
    	{
	        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você capturou um lixo e lancou-o.");
	        return true;
	    }
	    else if(rand == 13)
		{
	        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você capturou um par de botas e lancou-o.");
	        return true;
	    }
	    else if(rand == 20)
	    {
	        new mrand = random(500);
	        format(thestring, sizeof(thestring), "Você capturou uma mochila de dinheiro, contendo R$ %d", mrand);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
	        GivePlayerGP(playerid, mrand);
	        return true;
	    }
		if(Player[playerid][pFishLic] < 1)
		{
	       	WantedPoints[playerid] += 1;
			SetPlayerCriminal(playerid,255, "Pesca ilegal", "Desconhecido");
		}
		if(Fishes[playerid][pWeight1] == 0)
		{
		    Player[playerid][pFishSkill] += 1;
		    format(fthestring, sizeof(fthestring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish1], fthestring, 0, strlen(fthestring), 255);
			Fishes[playerid][pWeight1] = Caught;
			format(thestring, sizeof(thestring), "Você pescou um %s, com peso %d KGs.", Fishes[playerid][pFish1], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 1;
			Fishes[playerid][pFid1] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Fishes[playerid][pFish1] != 18)
			{
			    SetPlayerAttachedObject(playerid,0,1599,6,0.05,0.03,-0.3);
			}
			if(Caught > Player[playerid][pBiggestFish])
			{
			    format(thestring, sizeof(thestring), "O seu antigo recorde de %d KGs foi passado, o seu novo Maior Peixe é: %d KGs", Player[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				Player[playerid][pBiggestFish] = Caught;
			}
			format(thestring, sizeof(thestring), "%s pescou um peixe de KG %d ", Player[playerid][pName], Caught);
			WriteLog("Pesca",thestring);
     	}
		else if(Fishes[playerid][pWeight2] == 0)
		{
		    Player[playerid][pFishSkill] += 1;
		    format(fthestring, sizeof(fthestring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish2], fthestring, 0, strlen(fthestring), 255);
			Fishes[playerid][pWeight2] = Caught;
			format(thestring, sizeof(thestring), "Você pescou um %s, com peso %d KGs.", Fishes[playerid][pFish2], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 2;
			Fishes[playerid][pFid2] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Fishes[playerid][pFish1] != 18)
			{
			    SetPlayerAttachedObject(playerid,0,1599,6,0.05,0.03,-0.3);
			}
			if(Caught > Player[playerid][pBiggestFish])
			{
			    format(thestring, sizeof(thestring), "O seu antigo recorde de %d KGs foi passado, o seu novo Maior Peixe é: %d KGs.", Player[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				Player[playerid][pBiggestFish] = Caught;
			}
			format(thestring, sizeof(thestring), "%s pescou um peixe de KG %d ", Player[playerid][pName], Caught);
			WriteLog("Pesca",thestring);
   		}
		else if(Fishes[playerid][pWeight3] == 0)
		{
		    Player[playerid][pFishSkill] += 1;
		    format(fthestring, sizeof(fthestring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish3], fthestring, 0, strlen(fthestring), 255);
			Fishes[playerid][pWeight3] = Caught;
			format(thestring, sizeof(thestring), "Você pescou um %s, com peso %d KGs.", Fishes[playerid][pFish3], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 3;
			Fishes[playerid][pFid3] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Fishes[playerid][pFish1] != 18)
			{
			    SetPlayerAttachedObject(playerid,0,1599,6,0.05,0.03,-0.3);
			}
			if(Caught > Player[playerid][pBiggestFish])
			{
			    format(thestring, sizeof(thestring), "O seu antigo recorde de %d KGs foi passado, o seu novo Maior Peixe é: %d KGs.", Player[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				Player[playerid][pBiggestFish] = Caught;
			}
			format(thestring, sizeof(thestring), "%s pescou um peixe de KG %d ", Player[playerid][pName], Caught);
			WriteLog("Pesca",thestring);
		}
		else if(Fishes[playerid][pWeight4] == 0)
		{
		    Player[playerid][pFishSkill] += 1;
		    format(fthestring, sizeof(fthestring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish4], fthestring, 0, strlen(fthestring), 255);
			Fishes[playerid][pWeight4] = Caught;
			format(thestring, sizeof(thestring), "Você pescou um %s, com peso %d KGs.", Fishes[playerid][pFish4], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 4;
			Fishes[playerid][pFid4] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Fishes[playerid][pFish1] != 18)
			{
			    SetPlayerAttachedObject(playerid,0,1599,6,0.05,0.03,-0.3);
			}
			if(Caught > Player[playerid][pBiggestFish])
			{
			    format(thestring, sizeof(thestring), "O seu antigo recorde de %d KGs foi passado, o seu novo Maior Peixe é: %d KGs.", Player[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				Player[playerid][pBiggestFish] = Caught;
			}
			format(thestring, sizeof(thestring), "%s pescou um peixe de KG %d ", Player[playerid][pName], Caught);
			WriteLog("Pesca",thestring);
   		}
		else if(Fishes[playerid][pWeight5] == 0)
		{
		    Player[playerid][pFishSkill] += 1;
		    format(fthestring, sizeof(fthestring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish5], fthestring, 0, strlen(fthestring), 255);
			Fishes[playerid][pWeight5] = Caught;
			format(thestring, sizeof(thestring), "Você pescou um %s, com peso %d KGs.", Fishes[playerid][pFish5], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 5;
			Fishes[playerid][pFid5] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Fishes[playerid][pFish1] != 18)
			{
			    SetPlayerAttachedObject(playerid,0,1599,6,0.05,0.03,-0.3);
			}
			if(Caught > Player[playerid][pBiggestFish])
			{
			    format(thestring, sizeof(thestring), "O seu antigo recorde de %d KGs foi passado, o seu novo Maior Peixe é: %d KGs.", Player[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				Player[playerid][pBiggestFish] = Caught;
			}
			format(thestring, sizeof(thestring), "%s pescou um peixe de KG %d ", Player[playerid][pName], Caught);
			WriteLog("Pesca",thestring);
   		}
		else if(Fishes[playerid][pWeight6] == 0)
		{
		    Player[playerid][pFishSkill] += 1;
		    format(fthestring, sizeof(fthestring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish6], fthestring, 0, strlen(fthestring), 255);
			Fishes[playerid][pWeight6] = Caught;
			format(thestring, sizeof(thestring), "Você pescou um %s, com peso %d KGs.", Fishes[playerid][pFish6], Caught);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 6;
			Fishes[playerid][pFid6] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Fishes[playerid][pFish1] != 18)
			{
				SetPlayerAttachedObject(playerid,0,1599,6,0.05,0.03,-0.3);
			}
			if(Caught > Player[playerid][pBiggestFish])
			{
			    format(thestring, sizeof(thestring), "O seu antigo recorde de %d KGs foi passado, o seu novo Maior Peixe é: %d KGs.", Player[playerid][pBiggestFish], Caught);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
				Player[playerid][pBiggestFish] = Caught;
			}
			format(thestring, sizeof(thestring), "%s pescou um peixe de KG %d ", Player[playerid][pName], Caught);
			WriteLog("Pesca",thestring);
   		}
		Pescando[playerid] += 1;
	    if(Pescando[playerid] >= 6)
	    {
	        Player[playerid][pFishes] = 900;
	        Pescando[playerid] = 0;
        }
	    if(Player[playerid][pFishSkill] == 50)
		{ SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade de pescador é agora nível 2, agora você pode pegar peixes mais pesados."); }
		else if(Player[playerid][pFishSkill] == 250)
		{ SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade de pescador é agora nível 3, agora você pode pegar peixes mais pesados."); }
		else if(Player[playerid][pFishSkill] == 500)
		{ SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade de pescador é agora nível 4, agora você pode pegar peixes mais pesados."); }
		else if(Player[playerid][pFishSkill] == 1000)
		{ SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade de pescador é agora nível 5, agora você pode pegar peixes mais pesados."); }
	}
 	else
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em zona de pesca / local de pesca / barco de pesca.");

    return true;
}

CMD:peixes(playerid)
{
	SendClientMessage(playerid, COLOR_WHITE, "|__________________ Peixes __________________|");
    format(thestring, sizeof(thestring), "(1) Peixe: %s.   Peso: %d.", Fishes[playerid][pFish1], Fishes[playerid][pWeight1]);
	SendClientMessage(playerid, COLOR_GREY, thestring);
	format(thestring, sizeof(thestring), "(2) Peixe: %s.   Peso: %d.", Fishes[playerid][pFish2], Fishes[playerid][pWeight2]);
	SendClientMessage(playerid, COLOR_GREY, thestring);
	format(thestring, sizeof(thestring), "(3) Peixe: %s.   Peso: %d.", Fishes[playerid][pFish3], Fishes[playerid][pWeight3]);
	SendClientMessage(playerid, COLOR_GREY, thestring);
	format(thestring, sizeof(thestring), "(4) Peixe: %s.   Peso: %d.", Fishes[playerid][pFish4], Fishes[playerid][pWeight4]);
	SendClientMessage(playerid, COLOR_GREY, thestring);
	format(thestring, sizeof(thestring), "(5) Peixe: %s.   Peso: %d.", Fishes[playerid][pFish5], Fishes[playerid][pWeight5]);
	SendClientMessage(playerid, COLOR_GREY, thestring);
	format(thestring, sizeof(thestring), "(6) Peixe: %s.   Peso: %d.", Fishes[playerid][pFish6], Fishes[playerid][pWeight6]);
	SendClientMessage(playerid, COLOR_GREY, thestring);
	SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
    return true;
}

CMD:liberar(playerid, params[])
{
   	new fishid;
	if(sscanf(params, "d", fishid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/liberar <peixe>");

	if(fishid < 1 || fishid > 6) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Número somente entre 1 e 6."); return true; }
	else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pegou nenhum peixe neste item (1)."); return true; }
	else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pegou nenhum peixe neste item (2)."); return true; }
	else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pegou nenhum peixe neste item (3)."); return true; }
	else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pegou nenhum peixe neste item (4)."); return true; }
	else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pegou nenhum peixe neste item (5)."); return true; }
	else if(fishid == 6 && Fishes[playerid][pWeight6] < 1) { SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pegou nenhum peixe neste item (6)."); return true; }
	ClearFishID(playerid, fishid);
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	return true;
}

CMD:atirar(playerid)
{
    if(Fishes[playerid][pLastFish] > 0)
	{
        //RemovePlayerAttachedObject(playerid,0);
        ClearFishID(playerid, Fishes[playerid][pLastFish]);
        Fishes[playerid][pLastFish] = 0;
    	Fishes[playerid][pFishID] = 0;
    }
    else
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não capturou nenhum peixe até agora.");

    return true;
}

CMD:atirartodos(playerid)
{
    if(Fishes[playerid][pWeight1] > 0 || Fishes[playerid][pWeight2] > 0 || Fishes[playerid][pWeight3] > 0 || Fishes[playerid][pWeight4] > 0 || Fishes[playerid][pWeight5] > 0 || Fishes[playerid][pWeight6] > 0)
	{
        ClearFishes(playerid);
		Fishes[playerid][pLastFish] = 0;
		Fishes[playerid][pFishID] = 0;
    }
    else
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não capturou nenhum peixe até agora.");

    return true;
}

CMD:encontrar(playerid, params[])
{
    if(Player[playerid][pJob] != DETETIVE)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Detetive.");

    if(GetTickCount() - AntiFlood[playerid][15] < TempoEncontrar[playerid]*1000)
    {
        format(thestring, 128, "[ERRO]:{FFFFFF} Você precisa esperar %d segundos para usar esse comando novamente!",TempoEncontrar[playerid]-(GetTickCount() - AntiFlood[playerid][15])/1000);
		SendClientMessage(playerid, COLOR_RED, thestring);
        return true;
	}

    new giveid;
	if(sscanf(params, "u", giveid))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/encontrar <id/nick>");

	if(IsPlayerConnected(giveid))
	{
	    if(giveid != INVALID_PLAYER_ID)
	    {
	        if(PlayerTied[giveid] > 0)
		        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador foi sequestrado, não é possível saber sua localização!");
		    if(AdminDuty[giveid] == MODOSA_TRABALHANDO)
		        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode encontrar um admin.");
	        if(giveid == playerid)
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode procurar a sí mesmo!");

	        new erro;
	        new level = Player[playerid][pDetSkill];

            SetPlayerMarkerForPlayer(playerid, Procurado[playerid], 0xFFFFFF00);
            AntiFlood[playerid][15] = GetTickCount();
            Procurado[playerid] = giveid;
			if(level >= 0 && level <= 50)
			{
				erro = 25;
				TempoEncontrar[playerid] = 40;
				Encontrando[playerid] = 5;
			}
			else if(level >= 51 && level <= 100)
			{
				erro = 20;
				TempoEncontrar[playerid] = 30;
				Encontrando[playerid] = 10;
			}
			else if(level >= 101 && level <= 200)
			{
				erro = 15;
				TempoEncontrar[playerid] = 20;
				Encontrando[playerid] = 10;
			}
			else if(level >= 201 && level <= 400)
			{
				erro = 10;
				TempoEncontrar[playerid] = 10;
				Encontrando[playerid] = 15;
			}
			else if(level >= 401)
			{
				erro = 5;
				TempoEncontrar[playerid] = 1;
				Encontrando[playerid] = 20;
			}
            SetPlayerMarkerForPlayer(playerid, giveid, COLOR_YELLOW);
            SetPlayerMarkerForPlayer(playerid, giveid, COLOR_YELLOW);
			Player[playerid][pDetSkill] ++;
            Encontrar(playerid, giveid, erro);

			if(Player[playerid][pDetSkill] == 50)
			{ SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade como detetive agora é nível 2, seu tempo de espera diminuiu para 90 segundos e a precisão aumentou para 40%"); }
			else if(Player[playerid][pDetSkill] == 100)
			{ SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade como detetive agora é nível 3, seu tempo de espera diminuiu para 60 segundos e a precisão aumentou para 60%"); }
			else if(Player[playerid][pDetSkill] == 200)
			{ SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade como detetive agora é nível 4, seu tempo de espera diminuiu para 30 segundos e a precisão aumentou para 80%"); }
			else if(Player[playerid][pDetSkill] == 400)
			{ SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade como detetive agora é nível 5, seu tempo de espera diminuiu para 5 segundos e a precisão aumentou para 99%"); }
		}
	}
	else
	    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador não encontrado.");

	return true;
}

CMD:cancelar(playerid, params[])
{
	new x_job[16];
	if(sscanf(params, "s[16]", x_job))
	{
		SendClientMessage(playerid, COLOR_WHITE, "|__________________ Cancelar __________________|");
		SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/cancelar <nome>");
		SendClientMessage(playerid, COLOR_WHITE, "Nomes disponíveis: sexo, drogas, conserto, advogado, seguranca, emprego, aereo.");
		SendClientMessage(playerid, COLOR_WHITE, "Nomes disponíveis: taxi, boxe, médico, mecânico, abastecer, divórcio.");
		SendClientMessage(playerid, COLOR_WHITE, "Nomes disponíveis: convite, jornal, multa, padrinho, casamento, AoVivo, Cura.");
		SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		return true;
	}
	if(strcmp(x_job,"sexo", true) == 0) { SexOffer[playerid] = 999; SexPrice[playerid] = 0; }
	else if(strcmp(x_job,"drogas", true) == 0) { DrugOffer[playerid] = 999; DrugPrice[playerid] = 0; DrugGram[playerid] = 0; }
    else if(strcmp(x_job,"convite", true) == 0) { Invite[playerid] = 0; InviteJob[playerid] = 0; SetPlayerSkin(playerid, 240);}
	else if(strcmp(x_job,"conserto", true) == 0) {	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0; }
	else if(strcmp(x_job,"advogado", true) == 0) { WantLawyer[playerid] = 0; CallLawyer[playerid] = 0; }
	else if(strcmp(x_job,"aovivo", true) == 0) { LiveOffer[playerid] = 999; }
	else if(strcmp(x_job,"abastecer", true) == 0) { RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; }
	else if(strcmp(x_job,"carro", true) == 0) { CarOffer[playerid] = 999; CarPrice[playerid] = 0; CarID[playerid] = 0; }
	else if(strcmp(x_job,"boxe", true) == 0) { BoxOffer[playerid] = 999; }
	else if(strcmp(x_job,"cura", true) == 0) { CuraAcc[playerid] = 999; }
	else if(strcmp(x_job,"emprego", true) == 0) { GettingJob[playerid] = 0; }
	else if(strcmp(x_job,"jornal", true) == 0) { PaperOffer[playerid] = 999; }
	else if(strcmp(x_job,"padrinho", true) == 0) { MarryWitnessOffer[playerid] = 999; }
	else if(strcmp(x_job,"casamento", true) == 0) { ProposeOffer[playerid] = 999; }
	else if(strcmp(x_job,"divórcio",true) == 0 || strcmp(x_job,"divorcio", true) == 0) { DivorceOffer[playerid] = 999; }
	else if(strcmp(x_job,"multa", true) == 0) { TicketOffer[playerid] = 999; TicketMoney[playerid] = 0; }
	else if(strcmp(x_job,"médico",true) == 0 || strcmp(x_job,"medico", true) == 0) Cancelando(playerid,MEDICO);
	else if(strcmp(x_job,"mecânico",true) == 0 || strcmp(x_job,"mecanico", true) == 0) Cancelando(playerid,MECANICO);
	else if(strcmp(x_job,"Pizza", true) == 0) Cancelando(playerid,EPIZZA);
	else if(strcmp(x_job,"taxi", true) == 0) Cancelando(playerid,TAXISTA);
	else if(strcmp(x_job,"aereo", true) == 0) Cancelando(playerid,TAXISTAAEREO);
	else if(strcmp(x_job,"aovivo", true) == 0)
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Conversa Ao Vivo terminada.");
		SendClientMessage(TalkingLive[playerid], COLOR_LIGHTBLUE, "Conversa Ao Vivo terminada.");
		Descongelar(playerid);
		TogglePlayerControllable(TalkingLive[playerid], 1);
		TalkingLive[TalkingLive[playerid]] = 255;
		TalkingLive[playerid] = 255;
	}
	return true;
}

CMD:servico(playerid, params[])
{
    if(IsPlayerConnected(playerid))
    {
		new x_nr[16];
		if(sscanf(params, "s[16]", x_nr))
		{
			SendClientMessage(playerid, COLOR_WHITE, "|__________________ Servicos __________________|");
			SendClientMessage(playerid, COLOR_GREY,  "[Uso]: {FFFFFF}/servico <nome>");
	  		SendClientMessage(playerid, COLOR_WHITE, "Nomes Disponíveis: taxi, medico, mecanico , pizza , advogado, aereo");
			SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________|");
			return true;
		}
	    if(strcmp(x_nr,"taxi",true)==0)
		{
		    if(TaxistaNum < 1)
	            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não há Taxistas em trabalho no momento, tente novamente mais tarde.");
        	if(Solicitando[playerid][TAXISTA] == true)
        	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já solicitou este serviço. Aguarde.");

        	new string[128];
        	format(string, sizeof(string), "[Taxistas]: {FFFFFF}%s (ID %d) está solicitando uma Corrida. Use /Aceitar Taxi [ID].", ReturnPlayer(playerid), playerid);
           	SendJobMessage(TAXISTA, 0xFFFF00FF, string);
           	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você solicitou uma Corrida. Aguarde...");
           	Solicitando[playerid][TAXISTA] = true;
	    	return true;
		}
		else if(strcmp(x_nr,"aereo",true)==0)
		{
		    if(TaxistaNum < 1)
	            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não há Taxistas em trabalho no momento, tente novamente mais tarde.");
        	if(Solicitando[playerid][TAXISTAAEREO] == true)
        	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já solicitou este serviço. Aguarde.");

        	new string[128];
        	format(string, sizeof(string), "[Taxistas]: {FFFFFF}%s(%d) está solicitando uma Corrida Aérea. Use /Aceitar Aereo [ID].", ReturnPlayer(playerid), playerid);
           	SendJobMessage(TAXISTAAEREO, 0xFFFF00FF, string);
           	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você solicitou uma Corrida Aérea. Aguarde...");
           	Solicitando[playerid][TAXISTAAEREO] = true;
	    	return true;
		}
		else if(strcmp(x_nr,"pizza",true)==0)
		{
   			if(PizzaBoys < 1)
           		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não há nenhum PizzaBoy trabalhando no momento, ligue mais tarde.");
        	if(Solicitando[playerid][EPIZZA] == true)
        	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já solicitou este serviço. Aguarde.");

        	new string[128];
        	format(string, sizeof(string), "[PizzaBoys]: {FFFFFF}%s(%d) está solicitando uma Pizza. Use /Aceitar Pizza [ID].", ReturnPlayer(playerid), playerid);
           	SendJobMessage(EPIZZA, 0xFF6200FF, string);
           	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você solicitou uma Pizza. Aguarde...");
           	Solicitando[playerid][EPIZZA] = true;
   			return true;
		}
		else if(strcmp(x_nr,"medico",true)==0)
		{
		    if(Medics < 1)
	            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não há médicos em trabalho, tente novamente mais tarde.");
        	if(Solicitando[playerid][MEDICO] == true)
        	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já solicitou este serviço. Aguarde.");

        	new string[128];
        	format(string, sizeof(string), "[Medicos]: {FFFFFF}%s(%d) está solicitando um Médico. Use /Aceitar Medico [ID].", ReturnPlayer(playerid), playerid);
           	SendJobMessage(MEDICO, COLOR_YELLOW, string);
           	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você solicitou um Médico. Aguarde...");
           	Solicitando[playerid][MEDICO] = true;
	    	return true;
		}
		else if(strcmp(x_nr,"advogado",true)==0)
		{
		    format(thestring, sizeof(thestring), "[Advogados]: {FFFFFF}%s requisitou um habeas Corpus. Vá até a DP para Aceitar.", Player[playerid][pName]);
	    	SendJobMessage(2, 0x4529FFFF, thestring);
	    	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você solicitou um Advogado. Aguarde...");
	    	return true;
		}
		else if(strcmp(x_nr,"mecanico",true)==0)
		{
		    if(Mechanics < 1)
	            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não há mecânicos em trabalho, tente novamente mais tarde.");
        	if(Solicitando[playerid][MECANICO] == true)
        	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já solicitou este serviço. Aguarde.");

        	new string[128];
        	format(string, sizeof(string), "[Mecanicos]: {FFFFFF}%s(%d) está solicitando um Mecânico. Use /Aceitar Mecanico [ID].", ReturnPlayer(playerid), playerid);
           	SendJobMessage(MECANICO, 0xCCCCCCFF, string);
           	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você solicitou um Mecânico. Aguarde...");
           	Solicitando[playerid][MECANICO] = true;
	    	return true;
		}
		else
		    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Servico Inexistente.");

	}
	return true;
}

CMD:aceitar(playerid, params[])
{
	new x_job[16];
	new giveid;
	if(sscanf(params, "s[16]", x_job))
	{
		SendClientMessage(playerid, COLOR_WHITE, "|__________________ Aceitando __________________|");
		SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/aceitar <nome>");
		SendClientMessage(playerid, COLOR_WHITE, "Nomes disponíveis: sexo, drogas, conserto, advogado, seguranca, emprego, pintura");
		SendClientMessage(playerid, COLOR_WHITE, "Nomes disponíveis: boxe, abastecer, divórcio, casamento, AoVivo");
		SendClientMessage(playerid, COLOR_WHITE, "Nomes disponíveis: convite, jornal, multa, padrinho");
		SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________|");
		return true;
	}
	else if(!sscanf(params, "s[16]u", x_job, giveid))
	{
	    if(strcmp(x_job, "mecanico", true) == 0 || strcmp(x_job, "mecânico", true) == 0)
	    {
			if(Player[playerid][pJob] != MECANICO)
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um mecânico!");

			Aceitando(playerid, giveid, MECANICO);
			return true;
		}
		else if(strcmp(x_job, "médico", true) == 0 || strcmp(x_job, "medico", true) == 0)
		{
		    if(Player[playerid][pJob] != MEDICO)
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um médico!");

			Aceitando(playerid, giveid, MEDICO);
			return true;
		}
		else if(strcmp(x_job, "aereo", true) == 0 || strcmp(x_job, "aéreo", true) == 0)
		{
		    if(TaxistaIn[playerid] == false)
		        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é taxista aéreo ou não usou o /contagem.");

			Aceitando(playerid,giveid,TAXISTAAEREO);
			return true;
		}
		else if(strcmp(x_job, "taxi", true) == 0 || strcmp(x_job, "táxi", true) == 0)
		{
  			if(TaxistaIn[playerid] == false)
		        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é taxista ou não usou o /contagem.");

			Aceitando(playerid, giveid, TAXISTA);
			return true;
		}
		else if(strcmp(x_job, "pizza", true) == 0)
		{
		    if(Player[playerid][pJob] != EPIZZA)
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um piza boy!");

			Aceitando(playerid, giveid, EPIZZA);
			return true;
		}
	}
	else
	{
		if(strcmp(x_job,"convite", true) == 0)
		{
			if(Invite[playerid] == 1)
			{
				if(IsPlayerConnected(InviteOffer[playerid]))
				{
   					new str[128];
					giveid = InviteOffer[playerid];
	                Player[playerid][pLocalSpawn] = 2;
	                new Job = InviteJob[playerid];

				    Invite[playerid] = 0;
                    InviteJob[playerid] = 0;
                    InviteOffer[playerid] = 0;

                    if(Job > 0 && Job < MAX_ORGS)
                    {
                        if(!IsJobAllowedAtOrg(Player[playerid][pJob], Job))
                        {
                            SendClientMessage(playerid, COLOR_RED, "Seu emprego não é permitido nesta Org. Você perdeu o Emprego.");
                            Player[playerid][pJob] = DESEMPREGADO;
                        }

    				   	format(str, 128, "%s aceitou seu convite proposto da organização '%s'.", Player[playerid][pName], OrgsNames[Job]);
    				   	SendClientMessage(giveid, COLOR_LIGHTBLUE, str);
    				   	format(str, 128, "Você aceitou o convite da organização '%s' proposto por %s, parabéns.", OrgsNames[Job], Player[giveid][pName]);
    				   	SendClientMessage(playerid, COLOR_LIGHTBLUE, str);

    					Player[playerid][pMember] = Job;
    				    Player[playerid][pRank] = 1;

//			    		SetPlayerColor(playerid, OrgsColors[Player[playerid][pMember]]); // Cor no Nick

    				    CompletarNonRepMilestone(playerid, 4);

                        AddMembro(playerid);
                        if(OrgsSkins[Job] != -1)
                        {
                            SetPlayerSkinEx(playerid, OrgsSkins[Job]);
                            Descongelar(playerid);
                        }
                    }
                    else
                    {
    				   	format(str, 128, "%s aceitou seu convite proposto da organização.", Player[playerid][pName]);
    				   	SendClientMessage(giveid, COLOR_LIGHTBLUE, str);
    				   	format(str, 128, "Você aceitou o convite da organização proposto por %s, parabéns.", Player[giveid][pName]);
    				   	SendClientMessage(playerid, COLOR_LIGHTBLUE, str);

    					Player[playerid][pMember] = Job;
    				    Player[playerid][pRank] = 1;
                    }
                    return 1;
				}
				else
					return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador que lhe convidou não está conectado.");
			}
			else
				return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não foi convidado de absolutamente nada.");
		}
		else if(strcmp(x_job,"divórcio",true) == 0 || strcmp(x_job,"divorcio", true) == 0)
		{
		    if(DivorceOffer[playerid] < 999)
		    {
		        if(IsPlayerConnected(DivorceOffer[playerid]))
		        {
		            if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid]))
					{
						format(thestring, sizeof(thestring), "Você aceitou o divórcio com %s.", Player[DivorceOffer[playerid]][pName]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
						format(thestring, sizeof(thestring), "%s aceitou seu pedido de divórcio.", Player[playerid][pName]);
						SendClientMessage(DivorceOffer[playerid], COLOR_LIGHTBLUE, thestring);
						ClearMarriage(playerid);
						ClearMarriage(DivorceOffer[playerid]);
						Player[playerid][pHouseKey] = 255;
						Player[playerid][pPaluguelkey] = 255;
						Player[playerid][pBizKey] = 255;
						return true;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está próximo a você.");
					    return true;
					}
		        }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Ninguém lhe enviou papeis de divórcio.");
			    return true;
			}
		}
		else if(strcmp(x_job,"padrinho", true) == 0)
		{
		    if(MarryWitnessOffer[playerid] < 999)
		    {
		        if(IsPlayerConnected(MarryWitnessOffer[playerid]))
		        {
		            if(ProxDetectorS(10.0, playerid, MarryWitnessOffer[playerid]))
					{
						format(thestring, sizeof(thestring), "Você aceitou o pedido de %s para ser padrinho do casamento.", Player[MarryWitnessOffer[playerid]][pName]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
						format(thestring, sizeof(thestring), "%s aceitou seu pedido para se tornar padrinho do casamento.", Player[playerid][pName]);
						SendClientMessage(MarryWitnessOffer[playerid], COLOR_LIGHTBLUE, thestring);
						MarryWitness[MarryWitnessOffer[playerid]] = playerid;
						MarryWitnessOffer[playerid] = 999;
						return true;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador que pediu a você para ser padrinho está distante.");
					    return true;
					}
		        }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Ninguém aceitou ser padrinho do seu casamento ainda.");
			    return true;
			}
		}
		else if(strcmp(x_job,"casamento", true) == 0)
		{
		    if(ProposeOffer[playerid] < 999)
		    {
				if(!PlayerToPoint(10.0, playerid, 369.0977,2324.0381,1890.6047))
				{
				    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na Igreja de Jefferson .");
					return true;
				}
				if(IsPlayerConnected(ProposeOffer[playerid]))
				{
				    if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid]))
					{
					    if(MarryWitness[ProposeOffer[playerid]] == 999)
					    {
					        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Quem lhe propros não tem um padrinho!");
					        return true;
					    }
					    if(IsPlayerConnected(MarryWitness[ProposeOffer[playerid]]))
					    {
						    if(ProxDetectorS(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]]))
							{
								format(thestring, sizeof(thestring), "Você aceitou o pedido de %s", Player[ProposeOffer[playerid]][pName]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
								format(thestring, sizeof(thestring), "%s aceitou sua proposicão", Player[playerid][pName]);
								SendClientMessage(ProposeOffer[playerid], COLOR_LIGHTBLUE, thestring);
								format(thestring, sizeof(thestring), "Sacerdotisa: %s você aceita se casar com %s respeitá-lo(a) e amá-lo(a) por toda vida?", Player[playerid][pName], Player[ProposeOffer[playerid]][pName]);
	                            SendClientMessage(playerid, COLOR_WHITE, thestring);
								SendClientMessage(playerid, COLOR_WHITE,"(digite 'sim') caso contrário será o fim do casamento.");
								MarriageCeremoney[playerid] = 1;
								ProposedTo[ProposeOffer[playerid]] = playerid;
								GotProposedBy[playerid] = ProposeOffer[playerid];
								MarryWitness[ProposeOffer[playerid]] = 999;
								ProposeOffer[playerid] = 999;
								return true;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O padrinho não está próximo a você.");
							    return true;
							}
						}
						return true;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está próximo a pessoa.");
					    return true;
					}
		        }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Ninguém lhe propôs nada.");
			    return true;
			}
		}
		else if(strcmp(x_job,"multa", true) == 0)
		{
		    if(TicketOffer[playerid] < 999)
		    {
		        if(IsPlayerConnected(TicketOffer[playerid]))
		        {
		            if(ProxDetectorS(5.0, playerid, TicketOffer[playerid]))
					{
						if(GetPlayerGP(playerid) < TicketMoney[playerid])
						{
							SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem dinheiro suficiente");
							SendClientMessage(TicketOffer[playerid],COLOR_GREY, "O jogador não tem dinheiro suficiente");
							return true;
						}
						giveid = TicketOffer[playerid];
						format(thestring, sizeof(thestring), "Você pagou uma multa por R$ %d aplicada do oficial %s", TicketMoney[playerid], Player[giveid][pName]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
						format(thestring, sizeof(thestring), "%s pagou a multa aplicada por R$ %d", Player[playerid][pName], TicketMoney[playerid]);
						SendClientMessage(TicketOffer[playerid], COLOR_LIGHTBLUE, thestring);
						GivePlayerGP(playerid, - TicketMoney[playerid]);
						GivePlayerGP(TicketOffer[playerid], TicketMoney[playerid]);
						TicketOffer[playerid] = 999;
						TicketMoney[playerid] = 0;
						return true;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Aproxime-se mais.");
					    return true;
					}
		        }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem multas para quitar.");
			    return true;
			}
		}
		else if(strcmp(x_job,"jornal", true) == 0)
		{
		    if(PaperOffer[playerid] < 999)
		    {
		        if(IsPlayerConnected(PaperOffer[playerid]))
		        {
		            if(BringingPaper[PaperOffer[playerid]] > 0)
		            {
		                if(ProxDetectorS(5.0, playerid, PaperOffer[playerid]))
						{
			            	giveid = PaperOffer[playerid];
							format(thestring, sizeof(thestring), "Você aceitou o jornal de %s.", Player[giveid][pName]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
							format(thestring, sizeof(thestring), "%s aceitou seu jornal.", Player[playerid][pName]);
							SendClientMessage(PaperOffer[playerid], COLOR_LIGHTBLUE, thestring);
							GotPaper[playerid] = 1;
							PaperOffer[playerid] = 999;
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está próximo a você.");
						    return true;
						}
					}
		        }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nenhuma oferta de jornal.");
			    return true;
			}
		}
		else if(strcmp(x_job,"boxe", true) == 0)
		{
		    if(BoxOffer[playerid] < 999)
		    {
		        if(IsPlayerConnected(BoxOffer[playerid]))
		        {
					giveid = BoxOffer[playerid];
		            new points;
		            new mypoints;
		            new level = Player[BoxOffer[playerid]][pBoxSkill];
					if(level >= 0 && level <= 50) { points = 40; }
					else if(level >= 51 && level <= 100) { points = 50; }
					else if(level >= 101 && level <= 200) { points = 60; }
					else if(level >= 201 && level <= 400) { points = 70; }
					else if(level >= 401) { points = 80; }
					if(Player[playerid][pJob] == LUTADOR)
					{
						new clevel = Player[playerid][pBoxSkill];
						if(clevel >= 0 && clevel <= 50) { mypoints = 40; }
						else if(clevel >= 51 && clevel <= 100) { mypoints = 50; }
						else if(clevel >= 101 && clevel <= 200) { mypoints = 60; }
						else if(clevel >= 201 && clevel <= 400) { mypoints = 70; }
						else if(clevel >= 401) { mypoints = 80; }
					}
					else
					{
					    mypoints = 30;
					}
					format(thestring, sizeof(thestring), "Você aceitou o desafio de Boxe com %s, e irá lutar com %d pontos.",Player[BoxOffer[playerid]][pName],mypoints);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					format(thestring, sizeof(thestring), "%s aceitou seu desafio de boxe, e irá lutar com %d pontos.",Player[playerid][pName],points);
					SendClientMessage(BoxOffer[playerid], COLOR_LIGHTBLUE, thestring);
					SetPlayerHealth(playerid, mypoints);
					SetPlayerHealth(BoxOffer[playerid], points);
					SetPlayerInterior(playerid, 5); SetPlayerInterior(BoxOffer[playerid], 5);
					SafeSetPlayerPos(playerid, 762.9852,2.4439,1001.5942); SetPlayerFacingAngle(playerid, 131.8632);
					SafeSetPlayerPos(BoxOffer[playerid], 758.7064,-1.8038,1001.5942); SetPlayerFacingAngle(BoxOffer[playerid], 313.1165);
					Congelar(playerid); TogglePlayerControllable(BoxOffer[playerid], 0);
					GameTextForPlayer(playerid, "~r~espere", 3000, 1); GameTextForPlayer(BoxOffer[playerid], "~r~espere", 3000, 1);
					new dthestring[MAX_PLAYER_NAME];
					new wthestring[MAX_PLAYER_NAME];
					format(dthestring, sizeof(dthestring), "%s", Player[playerid][pName]);
					strmid(wthestring, dthestring, 0, strlen(dthestring), 255);
					if(strcmp(TitelName ,wthestring, true ) == 0 )
					{
					    format(thestring, sizeof(thestring), "Boxe News: O campeão de boxe %s irá lutar contra %s, em 60 segundos (Ginásio da grove street).",  Player[playerid][pName], Player[giveid][pName]);
						SendClientMessageToAll(COLOR_WHITE,thestring);
						TBoxer = playerid;
						BoxDelay = 60;
					}
					format(dthestring, sizeof(dthestring), "%s", Player[giveid][pName]);
					strmid(wthestring, dthestring, 0, strlen(dthestring), 255);
					if(strcmp(TitelName ,wthestring, true ) == 0 )
					{
					    format(thestring, sizeof(thestring), "Boxe News: O campeão de boxe %s irá lutar contra %s, em 60 segundos (Ginásio da grove street).",  Player[giveid][pName], Player[playerid][pName]);
						SendClientMessageToAll(COLOR_WHITE,thestring);
						TBoxer = BoxOffer[playerid];
						BoxDelay = 60;
					}
					BoxWaitTime[playerid] = 1; BoxWaitTime[BoxOffer[playerid]] = 1;
					if(BoxDelay < 1) { BoxDelay = 20; }
					InRing = 1;
					Boxer1 = BoxOffer[playerid];
					Boxer2 = playerid;
					PlayerBoxing[playerid] = 1;
					PlayerBoxing[BoxOffer[playerid]] = 1;
					BoxOffer[playerid] = 999;
					return true;
		        }
		        return true;
		    }
			else
			    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Ninguém te ofereceu uma luta.");
		}
		else if(strcmp(x_job,"advogado",true)==0)
		{
		    if(AdvOffer[playerid] < 999)
		    {
		        if(IsPlayerConnected(AdvOffer[playerid]))
		        {
					if(GetPlayerGP(playerid) < AdvPrice[playerid])
					{
						SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem dinheiro suficiente");
						SendClientMessage(AdvOffer[playerid],COLOR_GREY, "O jogador não tem dinheiro suficiente");
						return true;
					}
					new minima = Player[playerid][pJailTimetotal]/3;
	           		new total = Player[playerid][pJailTimetotal];
	           		new passado = Player[playerid][pJailTime];
	           		if((total-passado) > minima)
	           		{
                        if(Player[playerid][pJailed] == 0 || Player[playerid][pJailed] == 2)
                            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode ser Solto.");

					    giveid = AdvOffer[playerid];
						format(thestring, sizeof(thestring), "O advogado %s te libertou!",Player[giveid][pName]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
						format(thestring, sizeof(thestring), "Você libertou %s .", Player[playerid][pName]);
						SendClientMessage(AdvOffer[playerid], COLOR_LIGHTBLUE, thestring);
						GivePlayerGP(playerid, - AdvPrice[playerid]);
						GivePlayerGP(AdvOffer[playerid], AdvPrice[playerid]);
						AdvOffer[playerid] = 999;
						AdvPrice[playerid] = 0;
						WantLawyer[playerid] = 0;
						CallLawyer[playerid] = 0;
						JailPrice[playerid] = 0;
						Player[playerid][pJailTime] = 0;
						Player[AdvOffer[playerid]][pLawSkill] ++;
						if(Player[AdvOffer[playerid]][pLawSkill] == 50)
							SendClientMessage(AdvOffer[playerid], COLOR_YELLOW, "*Sua habilidade como Advogado agora é nível 2, você vai ganhar mais dinheiro e mais rapidamente do Tempo de Recarga.");
						else if(Player[AdvOffer[playerid]][pLawSkill] == 100)
							SendClientMessage(AdvOffer[playerid], COLOR_YELLOW, "*Sua habilidade como Advogado agora é nível 3, você vai ganhar mais dinheiro e mais rapidamente do Tempo de Recarga.");
						else if(Player[AdvOffer[playerid]][pLawSkill] == 200)
							SendClientMessage(AdvOffer[playerid], COLOR_YELLOW, "*Sua habilidade como Advogado agora é nível 4, você vai ganhar mais dinheiro e mais rapidamente do Tempo de Recarga.");
						else if(Player[AdvOffer[playerid]][pLawSkill] == 400)
							SendClientMessage(AdvOffer[playerid], COLOR_YELLOW, "*Sua habilidade como Advogado agora é nível 5, você vai ganhar mais dinheiro e mais rapidamente do Tempo de Recarga.");
						return true;
					}
	    			else
			    		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador ainda não cumpriu a pena mínima (1/3) , aguarde.");
		        }
		        return true;
			}
			else
			    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Nenhum advogado lhe ofereceu serviço.");
		}
		else if(strcmp(x_job,"emprego",true)==0)
		{
			if(GettingJob[playerid] > 0)
			{
				format(thestring,128,"Emprego confirmado, você começou um contrato de %s.", Convert(CONTRACT_TIME));
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Parabéns com seu novo trabalho, digite (/Ajuda) para ver o seu novo comando.");
		        Player[playerid][pJob] = GettingJob[playerid];
		        GettingJob[playerid] = 0;
		        return true;
		    }
		    else
		        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você deve digitar (/aceitar emprego) em cima de um ícone que representa um emprego secundário.");
		}
		else if(strcmp(x_job,"abastecer",true)==0)
		{
		    if(RefillOffer[playerid] < 999)
		    {
		        if(IsPlayerConnected(RefillOffer[playerid]))
		        {
		            if(GetPlayerGP(playerid) > RefillPrice[playerid])
		            {
						if(floatround(Player[playerid][LastSpeed]) > 1)
							return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Pare o carro antes de reparar.");

		                new car = GetPlayerVehicleID(playerid);
		                new fuel;
		                Player[RefillOffer[playerid]][pMechSkill] ++;
		                if(Player[RefillOffer[playerid]][pMechSkill] == 50)
							SendClientMessage(RefillOffer[playerid], COLOR_LIGHTBLUE, "Sua habilidade de mecânico agora é Nível 2, você pode adicionar mais combustível.");
						else if(Player[RefillOffer[playerid]][pMechSkill] == 100)
							SendClientMessage(RefillOffer[playerid], COLOR_LIGHTBLUE, "Sua habilidade de mecânico agora é Nível 3, você pode adicionar mais combustível.");
						else if(Player[RefillOffer[playerid]][pMechSkill] == 200)
							SendClientMessage(RefillOffer[playerid], COLOR_LIGHTBLUE, "Sua habilidade de mecânico agora é Nível 4, você pode adicionar mais combustível.");
						else if(Player[RefillOffer[playerid]][pMechSkill] == 400)
							SendClientMessage(RefillOffer[playerid], COLOR_LIGHTBLUE, "Sua habilidade de mecânico agora é Nível 5, você pode adicionar mais combustível.");
						new level = Player[RefillOffer[playerid]][pMechSkill];
						if(level >= 0 && level <= 50)
							fuel = 15;
						else if(level >= 51 && level <= 100)
							fuel = 40;
						else if(level >= 101 && level <= 200)
							fuel = 60;
						else if(level >= 201 && level <= 400)
							fuel = 80;
						else if(level >= 401)
							fuel = 100;
		                format(thestring, sizeof(thestring), "O mecânico %s reabasteceu seu veículo com %d litros, por %d.",Player[RefillOffer[playerid]][pName],fuel,RefillPrice[playerid]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
						format(thestring, sizeof(thestring), "Você reabasteceu o carro de %s com %d litros, o R$%d foi adicionado ao seu salário.",Player[playerid][pName],fuel,RefillPrice[playerid]);
						SendClientMessage(RefillOffer[playerid], COLOR_LIGHTBLUE, thestring);
						GivePlayerGP(playerid, -RefillPrice[playerid]);
						GivePlayerGP(RefillOffer[playerid], RefillPrice[playerid]);
						if(VehicleInfo[car][vGas] + fuel < GasMax)
							VehicleInfo[car][vGas] += fuel;
                        else
                        	VehicleInfo[car][vGas] = GasMax;
				        RefillOffer[playerid] = 999;
						RefillPrice[playerid] = 0;
						return true;
		            }
					else
					    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode pagar.");
		        }
		        return true;
		    }
			else
			    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Ninguém ofereceu um abastecimento para seu carro.");
		}
		else if(strcmp(x_job,"aovivo",true)==0)
		{
		    if(LiveOffer[playerid] < 999)
		    {
		        if(IsPlayerConnected(LiveOffer[playerid]))
		        {
			        if(ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
					{
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você ficará congelado até que a conversa ao vivo acabe.");
						SendClientMessage(LiveOffer[playerid], COLOR_LIGHTBLUE, "Você está congelado até que a conversa acabe (digite /aovivo) para acabar.");
						Congelar(playerid);
						TogglePlayerControllable(LiveOffer[playerid], 0);
						TalkingLive[playerid] = LiveOffer[playerid];
						TalkingLive[LiveOffer[playerid]] = playerid;
						LiveOffer[playerid] = 999;
						return true;
					}
					else
					    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você está longe do Repórter.");
				}
				return true;
			}
			else
			    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Ninguém lhe ofereceu uma conversa ao vivo.");
		}
		else if(strcmp(x_job,"drogas",true)==0)
		{
			if(DrugOffer[playerid] < 999)
			{
				if(GetPlayerGP(playerid) > DrugPrice[playerid])
				{
			        if(IsPlayerConnected(DrugOffer[playerid]))
			        {
                        if(DrugGram[playerid] > Player[DrugOffer[playerid]][pDrugs])
                        {
                            format(thestring, 155, "Fatal Error: %s sabe o ''Bug das Drogas''. Avise isso a um Admin Rcon.", Player[DrugOffer[playerid]][pName], ReturnPlayer(playerid));
                            ABroadCast(COLOR_YELLOW, thestring, 1);

                            //V = Vendedor, VD = Vendedor Drogas, DV = Drogas Vendidas, C = Comprador
                            format(thestring, sizeof(thestring), "Error #01: V[%s] VD[%d] DV[%d] C[%s]", Player[DrugOffer[playerid]][pName], Player[DrugOffer[playerid]][pDrugs], DrugGram[playerid], ReturnPlayer(playerid));
                            WriteLog("FatalErrors", thestring);

                            //Fake
        					format(thestring, sizeof(thestring), "Comprou %d grama para $%d do traficante %s.",DrugGram[playerid],DrugPrice[playerid],Player[DrugOffer[playerid]][pName]);
        					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
        					format(thestring, sizeof(thestring), "%s tiver comprado o seu %d grama, o $%d  foi adicionado ao seu salário .",Player[playerid][pName],DrugGram[playerid],DrugPrice[playerid]);
        					SendClientMessage(DrugOffer[playerid], COLOR_LIGHTBLUE, thestring);

        		            DrugOffer[playerid] = 999;
        					DrugPrice[playerid] = 0;
        					DrugGram[playerid] = 0;
                            return 1;
                        }
						format(thestring, sizeof(thestring), "Comprou %d grama para $%d do traficante %s.",DrugGram[playerid],DrugPrice[playerid],Player[DrugOffer[playerid]][pName]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
						format(thestring, sizeof(thestring), "%s tiver comprado o seu %d grama, o $%d  foi adicionado ao seu salário .",Player[playerid][pName],DrugGram[playerid],DrugPrice[playerid]);
						SendClientMessage(DrugOffer[playerid], COLOR_LIGHTBLUE, thestring);
						GivePlayerGP(DrugOffer[playerid], DrugPrice[playerid]);
						GivePlayerGP(playerid, -DrugPrice[playerid]);
						Player[playerid][pDrugs] += DrugGram[playerid];
						Player[DrugOffer[playerid]][pDrugs] -= DrugGram[playerid];
						new OldHab = Player[DrugOffer[playerid]][pDrugsSkill];
						Player[DrugOffer[playerid]][pDrugsSkill] += DrugGram[playerid];
						new NewHab = Player[DrugOffer[playerid]][pDrugsSkill];
						if(OldHab >= 0 && NewHab >= 10001) SendClientMessage(DrugOffer[playerid], COLOR_LIGHTBLUE, "Sua habilidade de traficante agora é Nivel 2, agora você pode comprar mais gramas e mais barato!");
						else if(OldHab >= 10001 && NewHab >= 25001) SendClientMessage(DrugOffer[playerid], COLOR_LIGHTBLUE, "Sua habilidade de traficante agora é Nivel 3, agora você pode comprar mais gramas e mais barato!");
						else if(OldHab >= 25001 && NewHab >= 50001) SendClientMessage(DrugOffer[playerid], COLOR_LIGHTBLUE, "Sua habilidade de traficante agora é Nivel 4, agora você pode comprar mais gramas e mais barato!");
						else if(OldHab >= 50001 && NewHab >= 100001) SendClientMessage(DrugOffer[playerid], COLOR_LIGHTBLUE, "Sua habilidade de traficante agora é Nivel 5, agora você pode comprar mais gramas e mais barato!");
			            DrugOffer[playerid] = 999;
						DrugPrice[playerid] = 0;
						DrugGram[playerid] = 0;
						return true;
					}
					return true;
				}
				else
				    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode permitir essas drogas.");
		    }
		    else
		        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Ninguém ofereceu drogas para você.");
		}
		else if(strcmp(x_job,"sexo",true)==0)
		{
			if(SexOffer[playerid] < 999)
			{
				if(GetPlayerGP(playerid) > SexPrice[playerid])
				{
					if(IsPlayerConnected(SexOffer[playerid]))
					{
					    new Car = GetPlayerVehicleID(playerid);
					    if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(SexOffer[playerid], Car))
					    {
							giveid = SexOffer[playerid];
							format(thestring, sizeof(thestring), "Você teve relacões sexuais com prostituta %s, para $%d.", Player[giveid][pName], SexPrice[playerid]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
							format(thestring, sizeof(thestring), "%s tiveram relacões sexuais com você, o $%d foi adicionado ao seu salário.", Player[playerid][pName], SexPrice[playerid]);
							SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, thestring);
							GivePlayerGP(SexOffer[playerid], SexPrice[playerid]);
							GivePlayerGP(playerid, -SexPrice[playerid]);
							Player[SexOffer[playerid]][pSexSkill] ++;
							if(Player[SexOffer[playerid]][pSexSkill] == 50)
							{ SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "Sua habilidade de sexo agora é Nível 2, você tem a oferecer melhores Sexo (saúde) e menos hipóteses sobre DST."); }
							else if(Player[SexOffer[playerid]][pSexSkill] == 100)
							{ SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "Sua habilidade de sexo agora é Nível 3, você tem a oferecer melhores Sexo (saúde) e menos hipóteses sobre DST."); }
							else if(Player[SexOffer[playerid]][pSexSkill] == 200)
							{ SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "Sua habilidade de sexo agora é Nível 4, você tem a oferecer melhores Sexo (saúde) e menos hipóteses sobre DST."); }
							else if(Player[SexOffer[playerid]][pSexSkill] == 400)
							{ SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "Sua habilidade de sexo agora é Nível 5, você tem a oferecer melhores Sexo (saúde) e menos hipóteses sobre DST."); }
							if(DSTPlayer[playerid] == 0)
							{
							    if(Condom[playerid] < 1)
								{
								    new Float:health;
								    new level = Player[SexOffer[playerid]][pSexSkill];
								    if(level >= 0 && level <= 50)
								    {
								        if(GetPlayerHealth(playerid, health) < 150) {
										SetPlayerHealth(playerid, health + 30.0); }
										new rand = random(sizeof(DST1));
										DSTPlayer[playerid] = DST1[rand];
										DSTPlayer[SexOffer[playerid]] = DST1[rand];
										if(DST1[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tens 30 + Saúde DST embora não tenha Sexo."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "You haven't got a DST while having Sex."); }
										else if(DST1[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tens 30 + um Chlamydia Saúde por causa do Sexo."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "You got a Chlamydia because of the Sex."); }
										else if(DST1[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tens 30 + um Gonorrhea Saúde por causa do Sexo."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "You got a Gonorrhea because of the Sex."); }
										else if(DST1[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tens 30 + um Syphilis Saúde por causa do Sexo."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "You got a Syphilis because of the Sex."); }
									}
									else if(level >= 51 && level <= 100)
								    {
								        if(GetPlayerHealth(playerid, health) < 150) {
										SetPlayerHealth(playerid, health + 60.0); }
										new rand = random(sizeof(DST2));
										DSTPlayer[playerid] = DST2[rand];
										DSTPlayer[SexOffer[playerid]] = DST2[rand];
										if(DST2[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tens 60 + Saúde DST embora não tenha Sexo."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "You haven't got a DST while having Sex."); }
										else if(DST2[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tens 60 + um Chlamydia Saúde por causa do Sexo."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "You got a Chlamydia because of the Sex."); }
										else if(DST2[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tens 60 + um Gonorrhea Saúde por causa do Sexo."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "You got a Gonorrhea because of the Sex."); }
										else if(DST2[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tens 60 + um Syphilis Saúde por causa do Sexo."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "You got a Syphilis because of the Sex."); }
									}
									else if(level >= 101 && level <= 200)
								    {
								        GetPlayerHealth(playerid, health);
								        if(health < 150) {
										SetPlayerHealth(playerid, health + 90.0); }
										new rand = random(sizeof(DST3));
										DSTPlayer[playerid] = DST3[rand];
										DSTPlayer[SexOffer[playerid]] = DST3[rand];
										if(DST3[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tens 90 + Saúde DST embora não tenha Sexo."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "You haven't got a DST while having Sex."); }
										else if(DST3[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tens 90 + um Chlamydia Saúde por causa do Sexo."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "You got a Chlamydia because of the Sex."); }
										else if(DST3[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tens 90 + um Gonorrhea Saúde por causa do Sexo."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "You got a Gonorrhea because of the Sex."); }
										else if(DST3[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tens 90 + um Syphilis Saúde por causa do Sexo."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "You got a Syphilis because of the Sex."); }
									}
									else if(level >= 201 && level <= 400)
								    {
								        GetPlayerHealth(playerid, health);
								        if(health < 150) {
										SetPlayerHealth(playerid, health + 120.0); }
										new rand = random(sizeof(DST4));
										DSTPlayer[playerid] = DST4[rand];
										DSTPlayer[SexOffer[playerid]] = DST4[rand];
										if(DST4[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tens 120 + Saúde DST embora não tenha Sexo."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "You haven't got a DST while having Sex."); }
										else if(DST4[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tens 120 + um Chlamydia Saúde por causa do Sexo."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "You got a Chlamydia because of the Sex."); }
										else if(DST4[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tens 120 + um Gonorrhea Saúde por causa do Sexo."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "You got a Gonorrhea because of the Sex."); }
										else if(DST4[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tens 120 + um Syphilis Saúde por causa do Sexo."); SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "You got a Syphilis because of the Sex."); }
									}
									else if(level >= 401)
									{
										GetPlayerHealth(playerid, health);
									    if(health < 150) {
										SetPlayerHealth(playerid, health + 150.0); }
										SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua habilidade de Sexo é tão alto que você deu o elevado n º de saúde e DST.");
										SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "A prostituta da habilidade de Sexo é tão alto que tem elevado de saúde e n º DST.");
									}
			      				}
								else
								{
								    SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "O jogador utilizava um Condom .");
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você usou um Condom.");
								    Condom[playerid] --;
								}
							}
							else
							    return SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "Esse jogador já estava infectado com uma doenca sexualmente transmissível, não conseguem arranjar um outro.");

							SexOffer[playerid] = 999;
							return true;
						}
						else
						    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você ou a prostituta não estão tanto em um carro.");
					}//Connected or not
					return true;
				}
				else
				    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode permitir o Sexo!");
			}
			else
			    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem nenhuma oferta de uma prostituta.");
		}
		else if(strcmp(x_job,"conserto",true)==0)
		{
		    if(RepairOffer[playerid] < 999)
		    {
		        if(GetPlayerGP(playerid) > RepairPrice[playerid])
			    {
				    if(IsPlayerInAnyVehicle(playerid))
				    {
				        if(IsPlayerConnected(RepairOffer[playerid]))
				        {
				            if(CarShopping[playerid] == true)
								return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode reparar este veículo.");
				            if(floatround(Player[playerid][LastSpeed]) > 1)
				                return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Pare o carro antes de reparar.");
							format(thestring, sizeof(thestring), "O seu carro está sendo reparado por um preço de R$%d  pelo mecânico %s. Conclusão em 10 segundos.",RepairPrice[playerid],Player[RepairOffer[playerid]][pName]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
							format(thestring, sizeof(thestring), "Você está reparando o veículo de %s e ganhou R$%d. Conclusão em 10 segundos.",Player[playerid][pName],RepairPrice[playerid]);
							SendClientMessage(RepairOffer[playerid], COLOR_LIGHTBLUE, thestring);
							Player[RepairOffer[playerid]][pMechSkill] ++;
							SetTimerEx("Reparar",10000,false, "i", playerid);
							SetTimerEx("Reparar",10000,false, "i", RepairOffer[playerid]);
			                if(Player[RepairOffer[playerid]][pMechSkill] == 50)
								SendClientMessage(RepairOffer[playerid], COLOR_LIGHTBLUE, "Sua habilidade de Mecânico agora é Nível 2, você pode adicionar mais combustível para qualquer Players Cars.");
							else if(Player[RepairOffer[playerid]][pMechSkill] == 100)
								SendClientMessage(RepairOffer[playerid], COLOR_LIGHTBLUE, "Sua habilidade de Mecânico agora é Nível 3, você pode adicionar mais combustível para qualquer Players Cars.");
							else if(Player[RepairOffer[playerid]][pMechSkill] == 200)
								SendClientMessage(RepairOffer[playerid], COLOR_LIGHTBLUE, "Sua habilidade de Mecânico agora é Nível 4, você pode adicionar mais combustível para qualquer Players Cars.");
							else if(Player[RepairOffer[playerid]][pMechSkill] == 400)
								SendClientMessage(RepairOffer[playerid], COLOR_LIGHTBLUE, "Sua habilidade de Mecânico agora é Nível 5, você pode adicionar mais combustível para qualquer Players Cars.");
							GivePlayerGP(RepairOffer[playerid], RepairPrice[playerid]);
							GivePlayerGP(playerid, -RepairPrice[playerid]);
					        RepairOffer[playerid] = 999;
							RepairPrice[playerid] = 0;
							return true;
						}
						return true;
					}
					return true;
				}
				else
				    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode permitir a reparacão.");
		    }
		    else
		        return SendClientMessage(playerid, COLOR_GREY, "Ninguém te ofereceu um reparo.");
		}
	}
	return true;
}

CMD:contagem(playerid, params[])
{
	if(Player[playerid][pJob] != TAXISTA && Player[playerid][pJob] != TAXISTAAEREO)
    	return SendClientMessage(playerid,COLOR_GREY,"Você não é um motorista de táxi.");
    if(GetTickCount() - AntiFlood[playerid][12] < 20000)
	{
      	format(thestring, 128, "[ERRO]:{FFFFFF} Você precisa esperar %d segundos para usar esse comando novamente!",20-(GetTickCount() - AntiFlood[playerid][12])/1000);
		SendClientMessage(playerid, COLOR_RED, thestring);
       	return true;
	}

	if(!IsATaxi(GetPlayerVehicleID(playerid)) && !IsAAereo(GetPlayerVehicleID(playerid)))
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um veículo de táxi.");

	new moneys;
	if(sscanf(params, "d", moneys))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/contagem <preço>");
	if((moneys < 1 || moneys > 10) && Player[playerid][pJob] == TAXISTA)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O preço precisa ser entre R$1 e R$10.");
    if((moneys < 50 || moneys > 100) && Player[playerid][pJob] == TAXISTAAEREO)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O preço precisa ser entre R$50 e R$100.");

    TaxistaIn[playerid] = true;
    TaxistaPreco[playerid] = moneys;
    TaxistaNum++;
    if(Player[playerid][pJob] == TAXISTA)
    {
       	format(thestring, sizeof(thestring), "O taxista %s deu início em seu trabalho, corrida: R$ %d.", Player[playerid][pName], moneys);
	}
	else if(Player[playerid][pJob] == TAXISTAAEREO)
	{
	    format(thestring, sizeof(thestring), "O taxista aéreo %s deu início em seu trabalho, corrida: R$ %d.", Player[playerid][pName], moneys);
	}
	OOCNews(COLOR_GROOVE,thestring);
    return true;
}

CMD:setchamp(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(IsPlayerConnected(playerid))
    {
        if(GetAdminLevel(playerid) < 6)
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   		new giveid;
		if(sscanf(params, "u", giveid))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/setchamp <id/nick>");

        if(IsPlayerConnected(giveid))
        {
            if(giveid != INVALID_PLAYER_ID)
            {
                new nthestring[MAX_PLAYER_NAME];
				format(nthestring, sizeof(nthestring), "%s", Player[giveid][pName]);
				strmid(TitelName, nthestring, 0, strlen(nthestring), 255);
				Titel[TitelWins] = Player[giveid][pWins];
				Titel[TitelLoses] = Player[giveid][pLoses];
				SaveBoxer();
				format(thestring, sizeof(thestring), "Você deixou %s como campeão de boxe.", Player[giveid][pName]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
            }
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador está offline.");
            return true;
        }
	}
	return true;
}

CMD:boxstats(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(Player[playerid][pJob] != LUTADOR)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Boxeador.");

        new ttext[20];//Title
        new clevel = Player[playerid][pBoxSkill];
		if(clevel >= 0 && clevel <= 50) { ttext = "Novato"; }
		else if(clevel >= 51 && clevel <= 200) { ttext = "Amador"; }
		else if(clevel >= 201 && clevel <= 400) { ttext = "Profissional"; }
        new ntext[20];//NickName
        new level = Player[playerid][pWins];
        if(level > 0 && Player[playerid][pLoses] == 0)
            ntext = "Indestrutível";
        else
        {
            if(level >= 0 && level <= 10) { ntext = "Iniciante"; }
            else if(level >= 11 && level <= 20) { ntext = "Primeira Porca"; }
            else if(level >= 21 && level <= 30) { ntext = "Cracker"; }
            else if(level >= 31 && level <= 40) { ntext = "Sub-arma"; }
            else if(level >= 41 && level <= 50) { ntext = "Quebrador de Ossos"; }
            else if(level >= 51 && level <= 60) { ntext = "Velocidade da Luz"; }
            else if(level >= 61 && level <= 70) { ntext = "Guerreiro Supremo"; }
            else if(level >= 71) { ntext = "Itallion Stallion"; }
        }
        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Boxe Records __________________|");
        format(thestring, sizeof(thestring), "| Atual Campeão: %s, com [%d] Vitórias e [%d] Perdas.", TitelName,Titel[TitelWins],Titel[TitelLoses]);
		SendClientMessage(playerid, COLOR_GREY, thestring);
		format(thestring, sizeof(thestring), "| Atual Título: %s.", ttext);
		SendClientMessage(playerid, COLOR_GREY, thestring);
		format(thestring, sizeof(thestring), "| Atua Nickname: %s.", ntext);
		SendClientMessage(playerid, COLOR_GREY, thestring);
		format(thestring, sizeof(thestring), "| Total de Vitórias: %d.", Player[playerid][pWins]);
		SendClientMessage(playerid, COLOR_GREY, thestring);
		format(thestring, sizeof(thestring), "| Total de Perdas: %d.", Player[playerid][pLoses]);
		SendClientMessage(playerid, COLOR_GREY, thestring);
        SendClientMessage(playerid, COLOR_WHITE, "|____________________________________________________|");
	}
	return true;
}

CMD:lutar(playerid, params[])
{
	if(IsPlayerConnected(playerid))
 	{
	    if(Player[playerid][pJob] != LUTADOR)
	       	return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Boxeador.");
	    if(InRing > 0)
	        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Existe já uma luta em curso, espere até que se termine.");
	    if(PlayerBoxing[playerid] > 0)
	        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já esta em uma luta.");
	    if(!PlayerToPoint(20.0,playerid,765.9343,0.2761,1000.7173))
	        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está na academia da grove.");

        new giveid;
		if(sscanf(params, "u", giveid))
		{
			SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/lutar <id/nick>");
			return true;
		}
	    if(IsPlayerConnected(giveid))
		{
		    if(giveid != INVALID_PLAYER_ID)
		    {
		        if(ProxDetectorS(8.0, playerid, giveid))
				{
					if(giveid == playerid)
					{
						SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode lutar com você mesmo.");
						return true;
					}
					format(thestring, sizeof(thestring), "Você propros um desafio de boxe a %s.", Player[giveid][pName]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
					format(thestring, sizeof(thestring), "O boxeador %s lhe desafiou (digite /aceitar boxe) para aceita a luta.", Player[playerid][pName]);
					SendClientMessage(giveid, COLOR_LIGHTBLUE, thestring);
			        BoxOffer[giveid] = playerid;
				}
				else
				{
					SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador não está próximo.");
					return true;
				}
		    }
		}
		else
  			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O jogador está offline.");
    }
    return true;
}

CMD:contar(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
	if(GetAdminLevel(playerid) < 1)
	    return SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você não tem permissão para usar esse comando.");
	else
	{
		if(Counting)
		{
		    KillTimer(CD);
		    Counting = false;

			TextDrawHideForAll(CountdownTD[0]);
	  		TextDrawHideForAll(CountdownTD[1]);

			SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Contagem Cancelada.");
			return true;
		}

		new ii, text[32];
		if(sscanf(params, "dS(_)[32]", ii, text))
			return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Contar [Número] (Texto)");

		if(ii < 0 || ii > 600)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Escolha um número de 0 a 600.");

		Counting = true;
		NumCont = ii+1;

        if(strlen(text) > 1)
            if(text[strlen(text) - 1] != ':')
                strcat(text, ":", 32);

		new num[8];
		format(num, 8, "%d", NumCont);
		TextDrawSetString(CountdownTD[1], num);
		TextDrawSetString(CountdownTD[0], text);

		CD = SetTimer("CountDown", 1000, false);

		SendClientMessage(playerid, COLOR_ADMIN, "[Administração]:{008080} Contagem Iniciada.");
		return true;
 	}
}

forward CountDown();
public CountDown()
{
	NumCont --;
	if(NumCont == 0)
	{
		TextDrawShowForAll(CountdownTD[0]);
		TextDrawShowForAll(CountdownTD[1]);

		TextDrawSetString(CountdownTD[1], "~r~Vai ~g~Vai ~b~Vai");
		//GameTextForAll("~r~Vai ~g~Vai ~b~Vai", 1001, 4);

		CD = SetTimer("CountDown", 1000, false);
		return true;
	}
	else if(NumCont == -1)
	{
		TextDrawHideForAll(CountdownTD[0]);
  		TextDrawHideForAll(CountdownTD[1]);

  		Counting = false;
  		return true;
	}

	TextDrawShowForAll(CountdownTD[0]);
	TextDrawShowForAll(CountdownTD[1]);

	new str[8];
	format(str, sizeof(str), "%d", NumCont);
	TextDrawSetString(CountdownTD[1], str);
	//GameTextForAll(str, 1001, 4);

	CD = SetTimer("CountDown", 1000, false);
	return true;
}

public HouseLevel(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new h = Player[playerid][pHouseKey];
		if(h == 255) { return 0; }
		if(h <= 4) { return true; }
		if(h >= 5 && h <= 9)  { return 2; }
		if(h >= 10 && h <= 18) { return 3; }
		if(h >= 19 && h <= 22) { return 4; }
		if(h >= 23 && h <= 25) { return 5; }
		if(h == 26) { return 6; }
		if(h == 27) { return 7; }
		if(h >= 28 && h <= 31) { return 7; }
	}
	return 0;
}

public CHouseLevel(houseid)
{
	if(houseid <= 4) { return 3; }
	if(houseid >= 29 && houseid <= 30) { return 4; }
	if(houseid >= 5 && houseid <= 9) { return 5; }
	if(houseid >= 10 && houseid <= 18 || houseid == 28) { return 7; }
	if(houseid >= 19 && houseid <= 22) { return 8; }
	if(houseid >= 23 && houseid <= 25) { return 9; }
	if(houseid == 26) { return 10; }
	if(houseid == 27) { return 11; }
	if(houseid >= 28 && houseid <= 31) { return 12; }
	return 0;
}

public ProxDetector(Float:radi, playerid, string[], col1, col2, col3, col4, col5)
{
	if(IsPlayerConnected(playerid) && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
        new VW = GetPlayerVirtualWorld(playerid);

		//radi = 2.0; //Trigger Radius
		foreach(new i: Player)
		{
			if(!BigEar[i])
			{
                if(GetPlayerVirtualWorld(i) != VW)
                    continue;

				GetPlayerPos(i, posx, posy, posz);
				tempposx = (oldposx -posx);
				tempposy = (oldposy -posy);
				tempposz = (oldposz -posz);
				if(((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
				{
					SendClientMessage(i, col1, string);
				}
				else if(((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
				{
					SendClientMessage(i, col2, string);
				}
				else if(((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
				{
					SendClientMessage(i, col3, string);
				}
				else if(((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
				{
					SendClientMessage(i, col4, string);
				}
				else if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				{
					SendClientMessage(i, col5, string);
				}
			}
			else
			{
				SendClientMessage(i, col1, string);
			}
		}
	}
	return true;
}

public ProxDetectorEx(Float:radi, playerid, string[], col1)
{
	if(IsPlayerConnected(playerid) && GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
        new VW = GetPlayerVirtualWorld(playerid);

		//radi = 2.0; //Trigger Radius
		foreach(new i: Player)
		{
			if(!BigEar[i])
			{
                if(GetPlayerVirtualWorld(i) != VW)
                    continue;

				GetPlayerPos(i, posx, posy, posz);
				tempposx = (oldposx -posx);
				tempposy = (oldposy -posy);
				tempposz = (oldposz -posz);
				if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				{
					SendClientMessage(i, col1, string);
				}
			}
			else
			{
				SendClientMessage(i, col1, string);
			}
		}
	}
	return true;
}

public CrimInRange(Float:radi, playerid,id)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(id))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(id, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)))
		{
			return true;
		}
	}
	return 0;
}

public OnVehicleDamageStatusUpdate(vehicleid,playerid)
{
	if(Player[playerid][pSeatBelt] == 0)
	{
	    new Float:health;
	    GetVehicleHealth(vehicleid, health);
	    if(health != 1000)
	    {
	   		GetPlayerHealth(playerid, health);
	   		SetPlayerHealth(playerid, health-10);
		}
	}
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    //Marchas[0][playerid] = 0;
    new string[128];
    for(new i=0;i<4;i++)
	    AFK[playerid][i] = i;

	if(ispassenger)
	{
	    if(IsATaxi(vehicleid) || IsAAereo(vehicleid))
	    {
	        foreach(new i: Player)
    		{
			    if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TaxistaIn[i] == true)
		        {
		            if(GetPlayerGP(playerid) >= TaxistaPreco[i])
		            {
		                NoTaxi[playerid][0] = 1;
		                NoTaxi[playerid][1] = 0;
		                NoTaxi[playerid][2] = i;
		                TaxistaPreco[playerid] = TaxistaPreco[i];
						PedidoConcluido(playerid, TAXISTA);
		            }
		            else
		            {
		                RemovePlayerFromVehicle(playerid);
		                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem dinheiro suficiente");
					}
		        }
	        }
		}
	}
    new Float:health;
   	GetVehicleHealth(vehicleid, health);
   	if(health == 280)
   	{
        GetVehicleParamsNew(vehicleid);
   		SetVehicleParamsEx(vehicleid, false, false, false, doors, true, boot, objective);
        VehicleInfo[vehicleid][vEngine] = false;
   		SendClientMessage(playerid, 0xFFFFFFFF,"O motor fundiu, chame um mecânico. {FF0000}/servico mecanico");
   		return true;
	}

	/*if(VehicleInfo[vehicleid][vLock])
	{
		SetVehicleParamsForPlayer(vehicleid, playerid, 0, 1);
		RemovePlayerFromVehicle(playerid);
        Descongelar(playerid);
        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Veículo trancado pelo dono.");
        return true;
	}*/

	if(Player[playerid][pJailTime] > 0)
	{
	    RemovePlayerFromVehicle(playerid);
        Descongelar(playerid);
	    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode entrar no veículo, pois está preso.");
	    //SetVehicleParamsForPlayer(vehicleid, playerid, 0, 1);
	    return true;
	}

    new cV = GetOwnedVehicleID(vehicleid);
    if(cV != INVALID_VEHICLE_ID)
    {
        if(!strcmp(CarInfo[cV][cOwner], Player[playerid][pName]))
    	{
    	    format(string, 128, "** Bem vindo novamente ao seu %s, %s **", CarInfo[cV][cName], Player[playerid][pName]);
    		SendClientMessage(playerid, COLOR_MARINE, string);
        }
    }
/*
    	for(new m = 0; m < MAX_MODS; m++)
    	    if(CarInfo[cV][cMod][m] > 0)
    	        AddVehicleComponent(vehicleid, CarInfo[cV][cMod][m]);

    	if(CarInfo[cV][cPaintjob] < 3)
    	    ChangeVehiclePaintjob(vehicleid, CarInfo[cV][cPaintjob]);
    	if(CarInfo[cV][cColor1] > -1 || CarInfo[cV][cColor2] > -1)
            ChangeVehicleColor(vehicleid, CarInfo[cV][cColor1], CarInfo[cV][cColor2]);
    }
    else
    {
    	for(new m = 0; m < MAX_MODS; m++)
    	    if(VehicleInfo[vehicleid][vMod][m] > 0)
    	        AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMod][m]);

    	if(VehicleInfo[vehicleid][vPaintjob] < 3)
    	    ChangeVehiclePaintjob(vehicleid, VehicleInfo[vehicleid][vPaintjob]);
    	if(VehicleInfo[vehicleid][vColor1] > -1 || VehicleInfo[vehicleid][vColor2] > -1)
            ChangeVehicleColor(vehicleid, VehicleInfo[vehicleid][vColor1], VehicleInfo[vehicleid][vColor2]);
    } */

	/*for(new i = 0; i < sizeof(VeiculosApreendidos); i++)
	{
		if(VeiculosApreendidos[i] == vehicleid)
		{
		    SetVehicleParamsForPlayer(vehicleid, playerid, 0, 1);
		    RemovePlayerFromVehicle(playerid);
        	Descongelar(playerid);
    		SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Veículo apreendido pela Polícia Rodoviária.");
            break;
		}
	}*/
	return true;
}

// Table of legit mods (minus NOS, hydraulic and wheels) for specific vehicles.
new legalmods[48][22] = {
        {400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
        {404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
        {491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
        {492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
        {500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
        {517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
        {518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
        {527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
        {534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
        {535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
        {536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
        {540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
        {542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
        {547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
        {550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
        {551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
        {558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
        {559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
        {560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
        {561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
        {562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
        {565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
        {567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
        {575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
        {600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};

iswheelmodel(modelid)
{
    new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};
    for(new i = 0; i < 17; i++)
	{
        if (modelid == wheelmodels[i])
            return true;
    }
    return false;
}

IllegalCarNitroIde(carmodel)
{
    new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };
    for(new i = 0; i < 29; i++)
	{
        if (carmodel == illegalvehs[i])
            return true;
    }
    return false;
}

// assumes player is in a car - make sure it is.
//illegal_nos_vehicle(PlayerID)
//{
    //new carid = GetPlayerVehicleID(PlayerID);
   // new playercarmodel = GetVehicleModel(carid);
   // return IllegalCarNitroIde(playercarmodel);
//}//

stock islegalcarmod(vehicleide, componentid)
{
    new modok = false;
    // stereo, hydraulics & nos (1x 2x 3x) are special.
    if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010))) {

        new nosblocker = IllegalCarNitroIde(vehicleide);

        if (!nosblocker)
            modok = true;

    } else {

        // check if the specified model CAN use this particular mod.
        for(new i = 0; i < 48; i++)
		{
            if (legalmods[i][0] == vehicleide)
			{ // first is car IDE
                for(new J = 1; J < 22; J++)
				{ // start with 1
                    if (legalmods[i][J] == componentid)
                        modok = true;
                }

            }

        }

    }

    return modok;
}

forward OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ) {
    new str[110];
    format(str, sizeof str, "[Acessórios]:{FFFFFF} Você terminou de editar seu %s(ID:%d).", GetToyNameByModel(PlayerToys[playerid][index][ptModelID]), index + 1);
    SendClientMessage(playerid, 0xFFFF00FF, str);
    SetPlayerAttachedObject(playerid,index,modelid,boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,1,1,1);
    //printf("edited: %d,%f,%f,%f,%f,%f,%f", boneid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ);

    PlayerToys[playerid][index][ptModelID] = modelid;
    PlayerToys[playerid][index][ptBoneID] = boneid;
    PlayerToys[playerid][index][ptOffsetX] = fOffsetX;
    PlayerToys[playerid][index][ptOffsetY] = fOffsetY;
    PlayerToys[playerid][index][ptOffsetZ] = fOffsetZ;
    PlayerToys[playerid][index][ptRotX] = fRotX;
    PlayerToys[playerid][index][ptRotY] = fRotY;
    PlayerToys[playerid][index][ptRotZ] = fRotZ;
    PlayerToys[playerid][index][ptWearing] = true;
    return 1;
}
stock getFreeToySlot(playerid) {
    new total_slots_available, slot = -1;

    if (IsAVip(playerid))
		total_slots_available = MAX_VIP_TOYS;
	else
	    total_slots_available = MAX_FREE_TOYS;

    for (new i; i < total_slots_available; i++) {
		if (PlayerToys[playerid][i][ptModelID] == 0) {
			slot = i;
			break;
		}
    }

    return slot;
}

//mexer
public OnVehicleSpawn(vehicleid)
{
    /*if(VehicleInfo[vehicleid][vPRFLock] == 1)
        SetVehicleToRespawn(vehicleid);*/

    GiveBizMoneyEx(Biz_Mecanica, 10);

    VehicleInfo[vehicleid][vWindows] = 1;

    new cV = GetOwnedVehicleID(vehicleid);
    if(cV != INVALID_VEHICLE_ID && CarInfo[cV][cEstacionou])
    {
        SetVehiclePos(vehicleid, CarInfo[cV][cX], CarInfo[cV][cY], CarInfo[cV][cZ]);
        SetVehicleZAngle(vehicleid, CarInfo[cV][cA]);
        SetVehicleNumberPlateEx(vehicleid, CarInfo[cV][cPlaca]);
        return 1;
    }

    new model = GetVehicleModel(vehicleid);
    if(vehicleid != AutoEscolaCars[0]
    && vehicleid != AutoEscolaCars[1]
    && vehicleid != AutoEscolaCars[2]
    && vehicleid != AutoEscolaCars[3]
    && model != 509
    && model != 481
    && model != 510)
    {
        new engine, lights, alarm, doors, bonnet, boot, objective;
        GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

        if(cV != INVALID_VEHICLE_ID)
            doors = CarInfo[cV][cLock];

        SetVehicleParamsEx(vehicleid, false, lights, false, doors, bonnet, boot, objective);
        VehicleInfo[vehicleid][vEngine] = false;
    }

    if(cV != INVALID_VEHICLE_ID)
    {
     	for(new m = 0; m < MAX_MODS; m++)
       	    if(CarInfo[cV][cMod][m] > 0)
       	        AddVehicleComponent(vehicleid, CarInfo[cV][cMod][m]);

       	if(CarInfo[cV][cPaintjob] < 3)
       	    ChangeVehiclePaintjob(vehicleid, CarInfo[cV][cPaintjob]);
       	if(CarInfo[cV][cColor1] > -1 || CarInfo[cV][cColor2] > -1)
            ChangeVehicleColor(vehicleid, CarInfo[cV][cColor1], CarInfo[cV][cColor2]);
    }
    else
    {
      	for(new m = 0; m < MAX_MODS; m++)
       	    if(VehicleInfo[vehicleid][vMod][m] > 0)
       	        AddVehicleComponent(vehicleid, VehicleInfo[vehicleid][vMod][m]);

       	if(VehicleInfo[vehicleid][vPaintjob] < 3)
       	    ChangeVehiclePaintjob(vehicleid, VehicleInfo[vehicleid][vPaintjob]);
       	if(VehicleInfo[vehicleid][vColor1] > -1 || VehicleInfo[vehicleid][vColor2] > -1)
            ChangeVehicleColor(vehicleid, VehicleInfo[vehicleid][vColor1], VehicleInfo[vehicleid][vColor2]);
    }

    /*if(vehicleid == Drifters[0])
    {
        ChangeVehiclePaintjob(Drifters[0], 1);

    	AddVehicleComponent(Drifters[0],1037);
        AddVehicleComponent(Drifters[0],1036);
        AddVehicleComponent(Drifters[0],1038);
        AddVehicleComponent(Drifters[0],1149);
        AddVehicleComponent(Drifters[0],1140);
        AddVehicleComponent(Drifters[0],1146);
        AddVehicleComponent(Drifters[0],1087);
        AddVehicleComponent(Drifters[0],1149);
        AddVehicleComponent(Drifters[0],1171);
        AddVehicleComponent(Drifters[0],1010);
        AddVehicleComponent(Drifters[0],1079);
        AddVehicleComponent(Drifters[0],1040);
        AddVehicleComponent(Drifters[0],1163);
    }
    else if(vehicleid == Drifters[1])
    {
        ChangeVehiclePaintjob(Drifters[1],1);

        AddVehicleComponent(Drifters[1],1026);
        AddVehicleComponent(Drifters[1],1029);
        AddVehicleComponent(Drifters[1],1031);
        AddVehicleComponent(Drifters[1],1133);
        AddVehicleComponent(Drifters[1],1138);
        AddVehicleComponent(Drifters[1],1140);
        AddVehicleComponent(Drifters[1],1169);
        AddVehicleComponent(Drifters[1],1010);
        AddVehicleComponent(Drifters[1],1079);
        AddVehicleComponent(Drifters[1],1040);
        AddVehicleComponent(Drifters[1],1087);
    }
    else if(vehicleid == Drifters[2])
    {
        ChangeVehiclePaintjob(Drifters[2],2);
        AddVehicleComponent(Drifters[2],1037);
        AddVehicleComponent(Drifters[2],1036);
        AddVehicleComponent(Drifters[2],1038);
        AddVehicleComponent(Drifters[2],1149);
        AddVehicleComponent(Drifters[2],1140);
        AddVehicleComponent(Drifters[2],1146);
        AddVehicleComponent(Drifters[2],1087);
        AddVehicleComponent(Drifters[2],1149);
        AddVehicleComponent(Drifters[2],1171);
        AddVehicleComponent(Drifters[2],1010);
        AddVehicleComponent(Drifters[2],1079);
        AddVehicleComponent(Drifters[2],1040);
        AddVehicleComponent(Drifters[2],1163);
    }
    else if(vehicleid == Drifters[3])
    {
    	ChangeVehiclePaintjob(Drifters[3],1);
    	ChangeVehicleColor(Drifters[3], 6, 6);
        AddVehicleComponent(Drifters[3], 1160);
        AddVehicleComponent(Drifters[3], 1159);
        AddVehicleComponent(Drifters[3], 1158);
        AddVehicleComponent(Drifters[3], 1079);
        AddVehicleComponent(Drifters[3], 1086);
        AddVehicleComponent(Drifters[3], 1087);
        AddVehicleComponent(Drifters[3], 1010);
    }
    else if(vehicleid == Drifters[4])
    {
        ChangeVehiclePaintjob(Drifters[4], 2);
        AddVehicleComponent(Drifters[4], 1088);
        AddVehicleComponent(Drifters[4], 1093);
        AddVehicleComponent(Drifters[4], 1094);
        AddVehicleComponent(Drifters[4], 1079);
        AddVehicleComponent(Drifters[4], 1164);
        AddVehicleComponent(Drifters[4], 1165);
        AddVehicleComponent(Drifters[4], 1168);
        AddVehicleComponent(Drifters[4], 1163);
        AddVehicleComponent(Drifters[4], 1087);
        AddVehicleComponent(Drifters[4], 1010);
    }
    else if(vehicleid == Kings[0])
    {
        AddVehicleComponent(Kings[0],1037);
        AddVehicleComponent(Kings[0],1036);
        AddVehicleComponent(Kings[0],1038);
        AddVehicleComponent(Kings[0],1149);
        AddVehicleComponent(Kings[0],1140);
        AddVehicleComponent(Kings[0],1146);
        AddVehicleComponent(Kings[0],1087);
        AddVehicleComponent(Kings[0],1149);
        AddVehicleComponent(Kings[0],1171);
        AddVehicleComponent(Kings[0],1010);
        AddVehicleComponent(Kings[0],1079);
        AddVehicleComponent(Kings[0],1040);
        AddVehicleComponent(Kings[0],1163);
        ChangeVehiclePaintjob(Kings[0],1);
    }
    else if(vehicleid == Kings[1])
    {
        ChangeVehiclePaintjob(Kings[1],1);
        AddVehicleComponent(Kings[1],1026);
        AddVehicleComponent(Kings[1],1029);
        AddVehicleComponent(Kings[1],1031);
        AddVehicleComponent(Kings[1],1133);
        AddVehicleComponent(Kings[1],1138);
        AddVehicleComponent(Kings[1],1140);
        AddVehicleComponent(Kings[1],1169);
        AddVehicleComponent(Kings[1],1010);
        AddVehicleComponent(Kings[1],1079);
        AddVehicleComponent(Kings[1],1040);
        AddVehicleComponent(Kings[1],1087);
    }
    else if(vehicleid == Kings[2])
    {
        AddVehicleComponent(Kings[2],1037);
        AddVehicleComponent(Kings[2],1036);
        AddVehicleComponent(Kings[2],1038);
        AddVehicleComponent(Kings[2],1149);
        AddVehicleComponent(Kings[2],1140);
        AddVehicleComponent(Kings[2],1146);
        AddVehicleComponent(Kings[2],1087);
        AddVehicleComponent(Kings[2],1149);
        AddVehicleComponent(Kings[2],1171);
        AddVehicleComponent(Kings[2],1010);
        AddVehicleComponent(Kings[2],1079);
        AddVehicleComponent(Kings[2],1040);
        AddVehicleComponent(Kings[2],1163);
        ChangeVehiclePaintjob(Kings[2],2);
    }
    else if(vehicleid == Kings[3])
    {
    	ChangeVehiclePaintjob(Kings[3],1);
    	ChangeVehicleColor(Kings[3], 6, 6);
        AddVehicleComponent(Kings[3], 1160);
        AddVehicleComponent(Kings[3], 1159);
        AddVehicleComponent(Kings[3], 1158);
        AddVehicleComponent(Kings[3], 1079);
        AddVehicleComponent(Kings[3], 1086);
        AddVehicleComponent(Kings[3], 1087);
        AddVehicleComponent(Kings[3], 1010);
    }
    else if(vehicleid == Kings[4])
    {
        ChangeVehiclePaintjob(Kings[4], 2);
        AddVehicleComponent(Kings[4], 1088);
        AddVehicleComponent(Kings[4], 1093);
        AddVehicleComponent(Kings[4], 1094);
        AddVehicleComponent(Kings[4], 1079);
        AddVehicleComponent(Kings[4], 1164);
        AddVehicleComponent(Kings[4], 1165);
        AddVehicleComponent(Kings[4], 1168);
        AddVehicleComponent(Kings[4], 1163);
        AddVehicleComponent(Kings[4], 1087);
        AddVehicleComponent(Kings[4], 1010);
    }
    else if(vehicleid == Kings[5])
    {
        ChangeVehiclePaintjob(Kings[5], 2);
        AddVehicleComponent(Kings[5], 1088);
        AddVehicleComponent(Kings[5], 1093);
        AddVehicleComponent(Kings[5], 1094);
        AddVehicleComponent(Kings[5], 1079);
        AddVehicleComponent(Kings[5], 1164);
        AddVehicleComponent(Kings[5], 1165);
        AddVehicleComponent(Kings[5], 1168);
        AddVehicleComponent(Kings[5], 1163);
        AddVehicleComponent(Kings[5], 1087);
        AddVehicleComponent(Kings[5], 1010);
    }
    else if(vehicleid == Kings[6])
    {
        ChangeVehiclePaintjob(Kings[6], 2);
        AddVehicleComponent(Kings[6], 1088);
        AddVehicleComponent(Kings[6], 1093);
        AddVehicleComponent(Kings[6], 1094);
        AddVehicleComponent(Kings[6], 1079);
        AddVehicleComponent(Kings[6], 1164);
        AddVehicleComponent(Kings[6], 1165);
        AddVehicleComponent(Kings[6], 1168);
        AddVehicleComponent(Kings[6], 1163);
        AddVehicleComponent(Kings[6], 1087);
        AddVehicleComponent(Kings[6], 1010);
    }
    else if(vehicleid == Kings[7])
    {
        ChangeVehiclePaintjob(Kings[7], 2);
        AddVehicleComponent(Kings[7], 1088);
        AddVehicleComponent(Kings[7], 1093);
        AddVehicleComponent(Kings[7], 1094);
        AddVehicleComponent(Kings[7], 1079);
        AddVehicleComponent(Kings[7], 1164);
        AddVehicleComponent(Kings[7], 1165);
        AddVehicleComponent(Kings[7], 1168);
        AddVehicleComponent(Kings[7], 1163);
        AddVehicleComponent(Kings[7], 1087);
        AddVehicleComponent(Kings[7], 1010);
    }
    else if(vehicleid == Lowriders[0])
    {
        AddVehicleComponent(Lowriders[0],1106);
        AddVehicleComponent(Lowriders[0],1126);
        AddVehicleComponent(Lowriders[0],1125);
        AddVehicleComponent(Lowriders[0],1179);
        AddVehicleComponent(Lowriders[0],1186);
        AddVehicleComponent(Lowriders[0],1087);
        AddVehicleComponent(Lowriders[0],1010);
        AddVehicleComponent(Lowriders[0],1077);
        ChangeVehiclePaintjob(Lowriders[0],2);
    }
    else if(vehicleid == Lowriders[1])
    {
        AddVehicleComponent(Lowriders[1],1129);
        AddVehicleComponent(Lowriders[1],1132);
        AddVehicleComponent(Lowriders[1],1130);
        AddVehicleComponent(Lowriders[1],1186);
        AddVehicleComponent(Lowriders[1],1188);
        AddVehicleComponent(Lowriders[1],1010);
        AddVehicleComponent(Lowriders[1],1087);
        AddVehicleComponent(Lowriders[1],1078);
        ChangeVehicleColor(Lowriders[1], 77, 77);
    }
    else if(vehicleid == Lowriders[2])
    {
        ChangeVehiclePaintjob(Lowriders[2], 2);
        AddVehicleComponent(Lowriders[2],1037);
        AddVehicleComponent(Lowriders[2],1036);
        AddVehicleComponent(Lowriders[2],1038);
        AddVehicleComponent(Lowriders[2],1149);
        AddVehicleComponent(Lowriders[2],1128);
        AddVehicleComponent(Lowriders[2],1140);
        AddVehicleComponent(Lowriders[2],1146);
        AddVehicleComponent(Lowriders[2],1010);
        AddVehicleComponent(Lowriders[2],1087);
        AddVehicleComponent(Lowriders[2], 1079);
    }
    else if(vehicleid == Lowriders[3])
    {
    	ChangeVehiclePaintjob(Lowriders[3], 0);
        AddVehicleComponent(Lowriders[3], 1110);
        AddVehicleComponent(Lowriders[3], 1113);
        AddVehicleComponent(Lowriders[3], 1115);
        AddVehicleComponent(Lowriders[3], 1121);
        AddVehicleComponent(Lowriders[3], 1119);
        AddVehicleComponent(Lowriders[3], 1087);
        AddVehicleComponent(Lowriders[3], 1010);
        AddVehicleComponent(Lowriders[3], 1079);
    }
    else if(vehicleid == Lowriders[4])
    {
        ChangeVehicleColor(Lowriders[4], 11, 11);
        AddVehicleComponent(Lowriders[4], 1134);
        AddVehicleComponent(Lowriders[4], 1135);
        AddVehicleComponent(Lowriders[4], 1190);
        AddVehicleComponent(Lowriders[4], 1193);
    	AddVehicleComponent(Lowriders[4], 1010);
        AddVehicleComponent(Lowriders[4], 1087);
    	AddVehicleComponent(Lowriders[4], 1077);
    }*/
	return true;
}
public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return true;
		}
	}
	return 0;
}

public:do CustomPickups()
{
	new string[128];

    new objs = 0;
    for(new p = 0; p < sizeof(Plantacao); p++)
    {
        if(Plantacao[p][plantTime] > 0)
        {
            Plantacao[p][plantTime]--;
            Update3DTextLabelText(PlantacaoText[p], 0x3C7035FF, GetPlantacaoString(p));

            for(new o = objs; o < objs + Plantacao[p][plantAmount]; o++)
                SetDynamicObjectPos(PlantacaoObj[o], PlantacaoObjFinalPos[o][0], PlantacaoObjFinalPos[o][1], floatlerp(PlantacaoObjFinalPos[o][2] - 1.6, PlantacaoObjFinalPos[o][2], ((2 * 60 * 60) - Plantacao[p][plantTime]) / (2.0 * 60.0 * 60.0)));
        }
        objs += Plantacao[p][plantAmount];
    }
	foreach(new i: Player)
	{
	    Player[i][pConnectTime] ++;
        if(AFKTimer[i] != -1)
        {
            AFKTimer[i]--;
            if(AFKTimer[i] == 0)
            {
    	        format(thestring, 128, "[ATENÇÃO]: O jogador %s foi kickado por exceder o tempo de AFK.", ReturnPlayer(i));
    		 	ABroadCast(COLOR_OOC, thestring, 1);
    	        Kick(i);
            }
            else if(AFKTimer[i] == 60)
                SendClientMessage(i, COLOR_GREEN, "Seu tempo de AFK acaba em 1 minuto.");
            else if(AFKTimer[i] == 120)
                SendClientMessage(i, COLOR_GREEN, "Seu tempo de AFK acaba em 2 minutos.");
            else if(AFKTimer[i] == 180)
                SendClientMessage(i, COLOR_GREEN, "Seu tempo de AFK acaba em 3 minutos.");
            else if(AFKTimer[i] == 300)
                SendClientMessage(i, COLOR_GREEN, "Seu tempo de AFK acaba em 5 minutos.");
            else if(AFKTimer[i] == 600)
                SendClientMessage(i, COLOR_GREEN, "Seu tempo de AFK acaba em 10 minutos.");
            else if(AFKTimer[i] == 900)
                SendClientMessage(i, COLOR_GREEN, "Seu tempo de AFK acaba em 15 minutos.");
        }
        if(Player[i][pAdmin] > 0)
        {
            if(AdminAfk[i])
            {
                AdminTime[i][Time_AFKS]++;
                if(AdminTime[i][Time_AFKS] == 60)
                {
                    AdminTime[i][Time_AFKS] = 0;
                    AdminTime[i][Time_AFK]++;
                }
            }
            else if(AdminDuty[i] == MODOSA_TRABALHANDO)
            {
                AdminTime[i][Time_WorkS]++;
                if(AdminTime[i][Time_WorkS] == 60)
                {
                    AdminTime[i][Time_WorkS] = 0;
                    AdminTime[i][Time_Work]++;
                }
            }
            else if(AdminDuty[i] == MODOSA_JOGANDO)
            {
                AdminTime[i][Time_PlayS]++;
                if(AdminTime[i][Time_PlayS] == 60)
                {
                    AdminTime[i][Time_PlayS] = 0;
                    AdminTime[i][Time_Play]++;
                }
            }
            else if(AdminDuty[i] == MODOSA_RPG)
            {
                AdminTime[i][Time_RPGS]++;
                if(AdminTime[i][Time_RPGS] == 60)
                {
                    AdminTime[i][Time_RPGS] = 0;
                    AdminTime[i][Time_RPG]++;
                }
            }
        }
		new tmpcar = GetVehicleModel(GetPlayerVehicleID(i));
        if(IsATruck(tmpcar))
        {
    		for(new h = 0; h < sizeof(BizzInfo); h++)
    		{
    			if(IsPlayerInRangeOfBiz(i, 10.0, h))
    			{
                    //(Branco)NomeDaEmpresa
                    //(Vermelho)Produtos requeridos: (Branco)Prods
                    //(Amarelo)Preço por Produto: (Verde)R$Dinheiro
    				format(string, sizeof(string), "~w~%s~n~~r~Produtos requeridos: ~w~%d~n~~y~Preo por Produto: ~g~R$%d", bMessage[h], (BizzInfo[h][bMaxProducts] - BizzInfo[h][bProducts]), BizzInfo[h][bPriceProd]);
    				GameTextForPlayer(i, string, 2000, 6);
    				return true;
    			}
    		}
        }
		if(PlayerToPoint(200.0, i,1720.0000,-1655.0000,24.2300) && GetPlayerVirtualWorld(i) != 0) //bugcondominio
		{
            new Float:x,Float:y,Float:z;
			GetPlayerPos(i, x, y, z);
			SafeSetPlayerPos(i,HouseInfo[Incasa[i]][hEntrancex],HouseInfo[Incasa[i]][hEntrancey],HouseInfo[Incasa[i]][hEntrancez]);
		    SetPlayerInterior(i,18);
		    SetPlayerVirtualWorld(i,0);
		}
		if(PlayerToPoint(200.0, i,2372.0000,-1432.2593,2445.0841)) //bugcurarcasa
		{
            new Float:x,Float:y,Float:z;
			GetPlayerPos(i, x, y, z);
			if(z < 2446)
			{
				SendClientMessage(i, COLOR_GREY, "Andar de cima");
				SafeSetPlayerPos(i, HouseInfo[Incasa[i]][hExitx], HouseInfo[Incasa[i]][hExity], HouseInfo[Incasa[i]][hExitz]);
			    SetPlayerInterior(i, 18);
			    SetPlayerVirtualWorld(i, 0);
			}
		}
		if(PlayerToPoint(2.0, i,379.1396,-114.2661,1001.4922)) // Pizza Pickup
		{
       		if(Player[i][pJob] != EPIZZA)
   			    return SendClientMessage(i, COLOR_GREY, "Você não é um pizza boy");
   			if(sPizza[i] < 3)
   			{
   				SendClientMessage(i, COLOR_WHITE, "Você pegou pizzas na cozinha, espere por chamadas");
   				sPizza[i] = 10;
   			}
		}
		else if(PlayerToPoint(2.0,i, 1544.0405, -1353.3473, 329.4742))
		{
			SafeGivePlayerWeapon(i, 46, 1);
		}
        else if(PlayerToPoint(1.0,i, 279.3071, 1853.4564, 8.7648))
		{
		 	if(Player[i][pJailed] > 0)
			{
				SetPlayerHealth(i,100);
			}
		}
		else if(PlayerToPoint(11, i, 1570.3708, -1671.0791, 6.8926)) //xiterdp
		{
		    new giveplayer[MAX_PLAYER_NAME];
           	GetPlayerName(i, giveplayer, sizeof(giveplayer));
			format(string, sizeof(string), "Bot_BLS : %s[ID %d] está em local proibido.", giveplayer, i);
			ABroadCast(COLOR_LIGHTRED,string,1);
		}
		else if(PlayerToPoint(200, i, -1394.20, 987.62, 1023.96) && IsAPlane(tmpcar) && Player[i][pAdmin] <= 0) //xiterblood
		{
		    new giveplayer[MAX_PLAYER_NAME];
           	GetPlayerName(i, giveplayer, sizeof(giveplayer));
			format(string, sizeof(string), "Bot_BLS : %s[ID %d] está de avião em local de teste", giveplayer, i);
			ABroadCast(COLOR_LIGHTRED,string,1);
			new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(i, slx, sly, slz);
			SafeSetPlayerPos(i, slx, sly, slz+10);
			ResetPlayerWeapons(i);
			Kick(i);
		}
		else if(PlayerToPoint(6, i,1560.1830,-1684.7896,13.2656)) //xiterdp
		{
		    new giveplayer[MAX_PLAYER_NAME];
           	GetPlayerName(i, giveplayer, sizeof(giveplayer));
			format(string, sizeof(string), "Bot_BLS : %s[ID %d] está em local proibido.", giveplayer,i);
			ABroadCast(COLOR_LIGHTRED,string,1);
		}
		else if(TookColor[i] == 0) //spraycar
        {
	        if(IsAtPayNSpray(i))
            {
    	        if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
		        {
                    GivePlayerGP(i, -100);
                    GiveBizMoney(Biz_PaySpray, 100);
                    SendClientMessage(i, COLOR_WHITE, "{FF0000}[Info]:{FFFFFF} Você pagou R$100,00 para pintar o carro.");
                    TookColor[i] = 1;
                    SetTimerEx("ChangeColor", 12000,false, "i", i);
                    if(LimparNivelSpray[i] == 0)
					{
						if(WantedPoints[i] > 0)
						{
                    	    if(WantedPoints[i] == 1)
							{
							   	ClearCrime(i);
							   	LimparNivelSpray[i] = 1;
							   	WantedPoints[i] = 0;
							   	PaynSprayTimer[i] = SetTimerEx("SprayProcurado", 600000, false, "i", i);
							   	SendClientMessage(i, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você perdeu 1 nivel de procurado por pintar seu carro.");
							}
							else
							{
                            	KillTimer(PaynSprayTimer[i]);
                               	LimparNivelSpray[i] = 1;
                        	    WantedPoints[i] -= 1;
                                PaynSprayTimer[i] = SetTimerEx("SprayProcurado", 600000, false, "i", i);
                                SendClientMessage(i, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você perdeu 1 nivel de procurado por pintar seu carro.");
                             }
       					}
           			}
              	}
           	}
       	}
	}
	return true;
}

public OnPlayerText(playerid, text[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
        return 0;

	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid, X,Y,Z);
	new tmp[24];
	new string[128];
	new giveplayerid;
	if(InGZ[playerid] == 0 && ConnectedToLaptop[playerid] == false)
		SetPlayerChatBubble(playerid, text, COLOR_WHITE, 20.0, 7000);

    new AnimR = random(1);
    if(!NoHospital[playerid] && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_HANDSUP && BombTime[playerid] != 1 && Mobile[playerid] == 255)
	{
	   	if(AnimR == 0 && !IsPlayerInAnyVehicle(playerid))
	   	{
	   	    ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.0, 1, 0, 0, 1, 1);
	   	   	SetTimerEx("SpeakAnim", strlen(text)*200, false, "i", playerid);
	   	}
	   	else if(AnimR == 1 && !IsPlayerInAnyVehicle(playerid))
	   	{
	   	    ApplyAnimation(playerid, "PED", "Idle_Chat_02", 4.0, 1, 0, 0, 1, 1);
	   	   	SetTimerEx("SpeakAnim", strlen(text)*200, false, "i", playerid);
	   	}
 	}
    if(Teste[playerid] == 4)
	{
        new idx;
	    tmp = strtok(text, idx);
        if((strcmp("A", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("A")) || (strcmp("B", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("B")) || (strcmp("C", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("C")))
		{
			if(CPorder[playerid] == 1)
			{
				if((strcmp("A", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("A")))
				{
				    Acertos[playerid]++;
				    CPorder[playerid]++;
			        SendClientMessage(playerid, COLOR_GREEN, "Responda com 'A','B' ou 'C', boa sorte.");
				    SendClientMessage(playerid, COLOR_YELLOW, "O que é preciso para pescar? (Responda, 'A','B' ou 'C')");
				    SendClientMessage(playerid, COLOR_WHITE, "A) Usar o comando /pescar no pier de Los Santos ou em barcos.");
				    SendClientMessage(playerid, COLOR_WHITE, "B) Roubar um barco das Forcas Armadas.");
				    SendClientMessage(playerid, COLOR_WHITE, "C) Estar longe da polícia.");
				    PlayerPlaySound(playerid,1057,X,Y,Z);
		        }
		        else
		        {
				    CPorder[playerid]++;
			        SendClientMessage(playerid, COLOR_GREEN, "Responda com 'A','B' ou 'C', boa sorte.");
				    SendClientMessage(playerid, COLOR_YELLOW, "Qual a punicão para quem pesca ilegalmente? (Responda, 'A','B' ou 'C')");
				    SendClientMessage(playerid, COLOR_WHITE, "A) Prisão.");
				    SendClientMessage(playerid, COLOR_WHITE, "B) Multa.");
				    SendClientMessage(playerid, COLOR_WHITE, "C) Morte.");
				    PlayerPlaySound(playerid,1052,X,Y,Z);
         		}
         		return 0;
         	}
         	if(CPorder[playerid] == 2)
         	{
                if((strcmp("A", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("A")))
				{
                    Acertos[playerid]++;
				    CPorder[playerid]++;
			        SendClientMessage(playerid, COLOR_GREEN, "Responda com 'A','B' ou 'C', boa sorte.");
				    SendClientMessage(playerid, COLOR_YELLOW, "O que acontece se você for pego por estar pescando sem licença?");
			        SendClientMessage(playerid, COLOR_WHITE, "A) Prisão.");
			        SendClientMessage(playerid, COLOR_WHITE, "B) Multa.");
			        SendClientMessage(playerid, COLOR_WHITE, "C) Apreencão da carteira náutica.");
			        PlayerPlaySound(playerid,1057,X,Y,Z);
				}
				else
				{
				    CPorder[playerid]++;
			        SendClientMessage(playerid, COLOR_GREEN, "Responda com 'A','B' ou 'C', boa sorte.");
				    SendClientMessage(playerid, COLOR_YELLOW, "O que acontece se você for pego por estar pescando sem licença?");
			        SendClientMessage(playerid, COLOR_WHITE, "A) Prisão.");
			        SendClientMessage(playerid, COLOR_WHITE, "B) Multa.");
			        SendClientMessage(playerid, COLOR_WHITE, "C) Apreencão da carteira náutica.");
			        PlayerPlaySound(playerid,1052,X,Y,Z);
			    }
			    return 0;
			}
			if(CPorder[playerid] == 3)
			{
                if((strcmp("B", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("B")))
				{
                    Acertos[playerid]++;
				    CPorder[playerid]++;
				    PlayerPlaySound(playerid,1057,X,Y,Z);
				}
				else
				{
				    CPorder[playerid]++;
				    PlayerPlaySound(playerid,1057,X,Y,Z);
				}
			}
			if(Acertos[playerid] == 3)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você passou no teste e adquiriu uma licença para pesca.");
                Player[playerid][pFishLic] = 1;
            } else {
		        SendClientMessage(playerid, COLOR_YELLOW, "Eram necessários acertar todas as três questões.");
			    SendClientMessage(playerid, COLOR_RED, "Você falhou no teste.");
            }
            Descongelar(playerid);
            Acertos[playerid] = 0;
            Teste[playerid] = 0;
            CPorder[playerid] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, " Responda digitando 'A', 'B' ou 'C'");
			return 0;
		}
		return 0;
	}
	else if(Teste[playerid] == 5)
	{
        new idx;
	    tmp = strtok(text, idx);
        if((strcmp("A", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("A")) || (strcmp("B", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("B")) || (strcmp("C", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("C")))
		{
			if(CPorder[playerid] == 1)
			{
				if((strcmp("A", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("A")))
				{
                    Acertos[playerid]++;
				    CPorder[playerid]++;
			        SendClientMessage(playerid, COLOR_GREEN, "Responda com 'A','B' ou 'C', boa sorte.");
				    SendClientMessage(playerid, COLOR_YELLOW, "Aonde é possível comprar armas legalmente?");
				    SendClientMessage(playerid, COLOR_WHITE, "A) Ammu nation.");
				    SendClientMessage(playerid, COLOR_WHITE, "B) Vendedor de armas.");
				    SendClientMessage(playerid, COLOR_WHITE, "C) Loja de armas.");
				    PlayerPlaySound(playerid,1057,X,Y,Z);
		        }
		        else
		        {
				    CPorder[playerid]++;
			        SendClientMessage(playerid, COLOR_GREEN, "Responda com 'A','B' ou 'C', boa sorte.");
				    SendClientMessage(playerid, COLOR_YELLOW, "Aonde é possível comprar armas legalmente?");
				    SendClientMessage(playerid, COLOR_WHITE, "A) Ammu nation.");
				    SendClientMessage(playerid, COLOR_WHITE, "B) Vendedor de armas.");
				    SendClientMessage(playerid, COLOR_WHITE, "C) Loja de armas.");
				    PlayerPlaySound(playerid,1052,X,Y,Z);
         		}
				return 0;
         	}
         	if(CPorder[playerid] == 2)
         	{
			    if((strcmp("C", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("C")))
			    {
                    Acertos[playerid]++;
				    CPorder[playerid]++;
			        SendClientMessage(playerid, COLOR_GREEN, "Responda com 'A','B' ou 'C', boa sorte.");
				    SendClientMessage(playerid, COLOR_YELLOW, "Qual punicão para quem vende armas ilegais?");
				    SendClientMessage(playerid, COLOR_WHITE, "A) R$500 de multa.");
				    SendClientMessage(playerid, COLOR_WHITE, "B) Prisão de 10minutos.");
				    SendClientMessage(playerid, COLOR_WHITE, "C) Prisão de 5 minutos.");
				    PlayerPlaySound(playerid,1057,X,Y,Z);
		        }
		        else
		        {
				    CPorder[playerid]++;
			        SendClientMessage(playerid, COLOR_GREEN, "Responda com 'A','B' ou 'C', boa sorte.");
				    SendClientMessage(playerid, COLOR_YELLOW, "Qual punicão para quem vende armas ilegais?");
				    SendClientMessage(playerid, COLOR_WHITE, "A) R$500 de multa.");
				    SendClientMessage(playerid, COLOR_WHITE, "B) Prisão de 10 minutos.");
				    SendClientMessage(playerid, COLOR_WHITE, "C) Prisão de 5 minutos.");
			        PlayerPlaySound(playerid,1052,X,Y,Z);
         		}
         	    return 0;
         	}
         	if(CPorder[playerid] == 3)
         	{
                if((strcmp("B", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("B")))
			    {
                    Acertos[playerid]++;
				    CPorder[playerid]++;
			        SendClientMessage(playerid, COLOR_GREEN, "Responda com 'A','B' ou 'C', boa sorte.");
				    SendClientMessage(playerid, COLOR_YELLOW, "Qual a multa para quem tem armas sem licença?");
				    SendClientMessage(playerid, COLOR_WHITE, "A) R$50 de multa.");
				    SendClientMessage(playerid, COLOR_WHITE, "B) R$100 de multa.");
				    SendClientMessage(playerid, COLOR_WHITE, "C) R$200 de multa.");
				    PlayerPlaySound(playerid,1057,X,Y,Z);
		        }
		        else
		        {
				    CPorder[playerid]++;
			        SendClientMessage(playerid, COLOR_GREEN, "Responda com 'A','B' ou 'C', boa sorte.");
				    SendClientMessage(playerid, COLOR_YELLOW, "Qual a multa para quem tem armas sem licença?");
				    SendClientMessage(playerid, COLOR_WHITE, "A) R$50 de multa.");
				    SendClientMessage(playerid, COLOR_WHITE, "B) R$100 de multa.");
				    SendClientMessage(playerid, COLOR_WHITE, "C) R$200 de multa.");
			        PlayerPlaySound(playerid,1052,X,Y,Z);
         	    }
			    return 0;
			}
         	if(CPorder[playerid] == 4)
         	{
                if((strcmp("C", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("C")))
				{
                    Acertos[playerid]++;
				    CPorder[playerid]++;
				    PlayerPlaySound(playerid,1057,X,Y,Z);
				}
				else
				{
				    CPorder[playerid]++;
				    PlayerPlaySound(playerid,1057,X,Y,Z);
				}
				if(Acertos[playerid] > 3)
				{
			   	 	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você passou no teste e adquiriu uma licença de armas.");
                	Player[playerid][pGunLic] = 1;
            	}
            	if(Acertos[playerid] < 4)
            	{
		    	    SendClientMessage(playerid, COLOR_YELLOW, "Eram necessários acertar todas as quatro questões.");
				    SendClientMessage(playerid, COLOR_RED, "Você falhou no teste.");
            	}
            	Descongelar(playerid);
            	Acertos[playerid] = 0;
            	Teste[playerid] = 0;
            	CPorder[playerid] = 0;
            }
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, " Responda digitando 'A', 'B' ou 'C'");
			return 0;
		}
		return 0;
	}
	if(Player[playerid][MuteTime] > 0)
	{
		new txt[128];
		format(txt, sizeof(txt), "Você está mutado e não pode usar o chat. %d segundos restantes.", Player[playerid][MuteTime]);
    	SendClientMessage(playerid, COLOR_RED, txt);
    	return 0;
	}
	if(MarriageCeremoney[playerid] > 0)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if((strcmp("sim", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("sim")))
		{
		    if(GotProposedBy[playerid] < 999)
		    {
			    if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
				    format(string, sizeof(string), "Padre: %s você aceita %s como sua amada esposa? (digite 'sim', caso contrário você cancelará o casamento).", giveplayer,sendername);
					SendClientMessage(GotProposedBy[playerid], COLOR_WHITE, string);
					MarriageCeremoney[GotProposedBy[playerid]] = 1;
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
				    return 0;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
			}
			else if(ProposedTo[playerid] < 999)
			{
			    if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					if(Player[playerid][pSex] == 1 && Player[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Padre: %s e %s eu vós os declaro Marido e Mulher, pode beijar a noiva.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Padre: %s e %s eu vós os declaro Marido e Mulher, pode beijar o noivo.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Notícias de casamento: Nós temos um novo casal, %s & %s acabam de se casar.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(Player[playerid][pSex] == 1 && Player[ProposedTo[playerid]][pSex] == 1)
					{
					    format(string, sizeof(string), "Padre: %s e %s eu vós os declaro Marido... e Marido, pode beijar o noivo.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Padre: %s e %s eu vós os declaro Marido... e Marido, pode beijar o noivo.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Notícias de casamento: Nós temos um novo casal gay, %s & %s acabam de se casar.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(Player[playerid][pSex] == 2 && Player[ProposedTo[playerid]][pSex] == 2)
					{
					    format(string, sizeof(string), "Padre: %s e %s eu vós os declaro Mulher e Mulher, pode beijar a noiva.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Padre: %s e %s eu vós os declaro Mulher e Mulher, pode beijar a noiva.", giveplayer, sendername);
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Notícias de casamento: Nós temos um novo casal lésbico, %s & %s acabam de se casar.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					MarriageCeremoney[ProposedTo[playerid]] = 0;
					MarriageCeremoney[playerid] = 0;
					format(string, sizeof(string), "%s", sendername);
					strmid(pMarriedTo[ProposedTo[playerid]], string, 0, strlen(string), 255);
					format(string, sizeof(string), "%s", giveplayer);
					strmid(pMarriedTo[playerid], string, 0, strlen(string), 255);
					GivePlayerGP(playerid, - 10000);
					Player[playerid][pMarried] = 1;
					Player[ProposedTo[playerid]][pMarried] = 1;
					Player[ProposedTo[playerid]][pHouseKey] = Player[playerid][pHouseKey];
					Player[ProposedTo[playerid]][pBizKey] = Player[playerid][pBizKey];
					ProposedTo[playerid] = 999;
					MarriageCeremoney[playerid] = 0;
				    return true;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
		else
		{
		    if(GotProposedBy[playerid] < 999)
		    {
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "Você não quis se casar com %s, pois um 'sim' não foi dito.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "%s não quis casar com você, pois um 'sim' não foi dito por ele(a)",sendername);
				    SendClientMessage(GotProposedBy[playerid], COLOR_YELLOW, string);
				    return 0;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
		    }
		    else if(ProposedTo[playerid] < 999)
			{
			    if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "Você não quer ser casar com %s, não foi dito um 'sim'.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "%s não quis casar com você, não foi dito um 'sim'.",sendername);
				    SendClientMessage(ProposedTo[playerid], COLOR_YELLOW, string);
				    return 0;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
	    return 0;
	}
	if(ConnectedToLaptop[playerid] == true)
	{
		new idx;
	    tmp = strtok(text, idx);
	    if((strcmp("contratos", tmp, true, strlen(tmp)) == 0) && strlen(tmp))
		{
			new bool:HaContratos = false;
            SendClientMessage(playerid, COLOR_GREEN, "Lista de Contratos:");
			foreach(new i: Player)
   			{
			    if(Player[i][pHeadValue] > 0 && SendoProcurado[i] == false)
			    {
			        format(string, 128, "Vítima: (%d)%s | Valor: %d",i,Player[i][pName],Player[i][pHeadValue]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					HaContratos = true;
			    }
			}
			if(!HaContratos) SendClientMessage(playerid, -1, "- Não Há Contratos.");
			SendClientMessage(playerid, COLOR_GREEN, "|---|");
			return 0;
		}
		else if((strcmp("atribuir", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("atribuir")))
		{

			if(Player[playerid][pRank] < 3)
		    {
		        SendClientMessage(playerid, COLOR_HITMAN, "[Agência]: Somente Cargo 3 Pode Atribuir Contratos!");
		        return 0;
	        }

		    tmp = strtok(text, idx);
			if(!strlen(tmp)) //Pegar Assassino
			{
				SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}atribuir <hitman> <vítima>");
				return 0;
			}
			giveplayerid = ReturnUser(tmp);

			tmp = strtok(text, idx);
		    if(!strlen(tmp)) //Pegar Vitima
			{
				SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}atribuir <hitman> <vitima>");
				return 0;
			}
			new giveid = ReturnUser(tmp);

			if(!IsPlayerConnected(giveplayerid))
			{
			    SendClientMessage(playerid, COLOR_HITMAN, "[Agência]: Hitman Inválido.");
			    return 0;
			}
            if(Player[giveplayerid][pMember] != TEAM_HITMAN)
            {
                SendClientMessage(playerid, COLOR_HITMAN, "[Agência]: Este jogador não é um Hitman.");
                return 0;
            }
            if(!IsPlayerConnected(giveid))
			{
                SendClientMessage(playerid, COLOR_HITMAN, "[Agência]: Vitima Inválida.");
                return 0;
			}
		    if(Procurando[giveplayerid] == true)
		    {
		        SendClientMessage(playerid, COLOR_HITMAN, "[Agência]: Este Hitman já tem um Contrato.");
		        return 0;
	        }
	        if(SendoProcurado[giveid] == true)
	        {
		        SendClientMessage(playerid, COLOR_HITMAN, "[Agência]: Algum Hitman já tem este Contrato.");
		        return 0;
	        }
	        if(Player[giveid][pHeadValue] == 0)
	        {
	        	SendClientMessage(playerid, COLOR_HITMAN, "[Agência]: Esse player não está sob contrato.");
		        return 0;
	        }
		    format(string, sizeof(string), "Você atribuiu %s a matar: %s(ID:%d), por R$ %d.", ReturnPlayer(giveplayerid), ReturnPlayer(giveid),giveid,Player[giveid][pHeadValue]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
	        format(string, sizeof(string), "O assassino %s atribuiu a você, matar: %s(ID:%d), por R$ %d.", ReturnPlayer(playerid), ReturnPlayer(giveid),giveid,Player[giveid][pHeadValue]);
			SendClientMessage(giveplayerid, COLOR_YELLOW, string);
        	SendoProcurado[giveid] = true;
            Procurando[giveplayerid] = true;
            Vitima[giveplayerid] = giveid;
			return 0;
		}
		else if((strcmp("cancelar", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("cancelar")))
		{
			if(Player[playerid][pRank] >= 3)
		    {
			    tmp = strtok(text, idx);
			    if(!strlen(tmp))
			    {
					SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}Cancelar [Hitman]");
					return 0;
				}
				giveplayerid = ReturnUser(tmp);

			    if(!IsPlayerConnected(giveplayerid) || giveplayerid == INVALID_PLAYER_ID)
			    {
			        SendClientMessage(playerid, COLOR_HITMAN, "[Agência]: Hitman Invalido.");
			        return 0;
			    }
				else if(GetPlayerOrg(giveplayerid) != TEAM_HITMAN)
				{
			        SendClientMessage(playerid, COLOR_HITMAN, "[Agência]: Este Jogador não é um Hitman.");
			        return 0;
				}
				else if(Procurando[giveplayerid] == false)
				{
			        SendClientMessage(playerid, COLOR_HITMAN, "[Agência]: Este Hitman Não tem um Contrato.");
			        return 0;
			    }

		        new giveid = Vitima[giveplayerid];

			    format(string, sizeof(string), "Você cancelou o contrato de %s para matar %s(ID:%d).", Player[giveplayerid][pName], Player[giveid][pName], giveid);
				SendClientMessage(playerid, COLOR_YELLOW, string);
		        format(string, sizeof(string), "O Hitman %s cancelou o seu contrato de matar %s(ID:%d).", Player[giveplayerid][pName], Player[giveid][pName], giveid);
				SendClientMessage(giveplayerid, COLOR_YELLOW, string);

		        Vitima[giveplayerid] = INVALID_PLAYER_ID;
                Procurando[giveplayerid] = false;
		        SendoProcurado[giveid] = false;
				return 0;
			}
			else
			{
				if(Procurando[playerid] == false)
				{
			        SendClientMessage(playerid, COLOR_HITMAN, "[Agência]: Você não tem um Contrato.");
			        return 0;
			    }

		        new giveid = Vitima[playerid];

			    format(string, sizeof(string), "Você cancelou o seu contrato para matar %s(ID:%d).", Player[giveid][pName], giveid);
				SendClientMessage(playerid, COLOR_YELLOW, string);

		        Vitima[playerid] = 999;
                Procurando[playerid] = false;
		        SendoProcurado[giveid] = false;
			}
            return 0;
		}
		else if((strcmp("membros", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("membros")))
		{
		    cmd_membros(playerid);
		    return 0;
		}
		else if((strcmp("continfo", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("continfo")))
		{
			if(Procurando[playerid] == false)
			{
		        SendClientMessage(playerid, COLOR_HITMAN, "[Agência]: Você não tem um Contrato.");
		        return 0;
		    }

		    new pId = Vitima[playerid];
		    SendClientMessage(playerid, COLOR_GREEN, "Informações do Contrato:");
		    format(thestring, 256, "- Nome: %s", Player[pId][pName]);
		    SendClientMessage(playerid, -1, thestring);
		    format(thestring, 256, "- Emprego: %s", JobsNames[Player[pId][pJob]]);
		    SendClientMessage(playerid, -1, thestring);
		    format(thestring, 256, "- Org: %s", OrgsNames[GetPlayerOrg(pId)]);
		    SendClientMessage(playerid, -1, thestring);
		    format(thestring, 256, "- Cargo: %s", GetPlayerRank(pId));
		    SendClientMessage(playerid, -1, thestring);
		    format(thestring, 256, "- Telefone: %d", Player[pId][pPnumber]);
		    SendClientMessage(playerid, -1, thestring);
		    SendClientMessage(playerid, COLOR_GREEN, "|---|");
		    return 0;
		}
		else if((strcmp("Logout", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Logout")))
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[AGÊNCIA] Você desligou seu Laptop, e desconectou da Agência.");
      		ConnectedToLaptop[playerid] = false;
		    return 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "Computador da Agencia:");
			SendClientMessage(playerid, COLOR_WHITE, "- Contratos");
			SendClientMessage(playerid, COLOR_WHITE, "- Atribuir");
			SendClientMessage(playerid, COLOR_WHITE, "- ContInfo");
			SendClientMessage(playerid, COLOR_WHITE, "- Membros");
			SendClientMessage(playerid, COLOR_WHITE, "- Logout");
			format(thestring, sizeof(thestring), "Mês: %s | Dia: %d | Hora: %02d:%02d", MonthNames[ClockTime[dMonth]-1], ClockTime[dDay], ClockTime[tHour], ClockTime[tMinute]);
			SendClientMessage(playerid, COLOR_WHITE, thestring);
			SendClientMessage(playerid, COLOR_GREEN, "|---|");
		}
		//SendClientMessage(playerid, COLOR_GREY, "Final con.");
	    return 0;
	}
	if(CallLawyer[playerid] == 111111111)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if((strcmp("sim", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("sim")))
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    format(string, sizeof(string), "%s está preso, e precisa de um advogado, vá até o departamento.", sendername);
	    	SendJobMessage(2, COLOR_AZTECAS, string);
	    	SendJobMessage(2, COLOR_AZTECAS, "Quando você estiver no departamento, digite /libertar.");
	    	SendClientMessage(playerid, COLOR_YELLOW, "Uma mensagem foi enviada a todos os advogados, por favor, aguarde.");
	    	WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
	    	return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_RED, "Não existe nenhum advogado disponível para você, Tempo de detencão iniciado.");
		    WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
		    return 0;
		}
	}
	if(TalkingLive[playerid] != 255)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(Player[playerid][pJob] == JORNALEIRO || Player[playerid][pMember] == TEAM_SANEWS)
		{
		    format(string, sizeof(string), "[Ao Vivo] Repórter %s: %s", sendername, text);
			OOCNews(COLOR_LIGHTGREEN, string);
		}
		else
		{
		    format(string, sizeof(string), "[Ao Vivo] Entrevistado %s: %s", sendername, text);
			OOCNews(COLOR_LIGHTGREEN, string);
		}
		return 0;
	}
	if(Mobile[playerid] != 255)
	{
		new idx;
		tmp = strtok(text, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s (ao celular): %s", sendername, text);
		ProxDetector(20.0, playerid, string,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY);
		if(IsPlayerConnected(Mobile[playerid]))
		{
		    if(Mobile[Mobile[playerid]] == playerid)
		    {
				if(Player[Mobile[playerid]][pSpeaker] == 1)
				{
					ProxDetector(20.0, Mobile[playerid], string,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY,COLOR_GREY);
				}
				else
				{
				    SendClientMessage(Mobile[playerid], COLOR_YELLOW,string);
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW,"O jogador saiu....");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}
		return 0;
	}
	else if(EmergencyCall[playerid])
	{
	    if(EmergencyPart[playerid] == 0)
	    {
	        /*new idx;
		    tmp = strtok(text, idx);
		    if(!strlen(tmp))
		    {
				SendClientMessage(playerid, COLOR_YELLOW, "Telefonista (ao celular): Por-Favor, fale o Nome/ID do Jogador.");
				KillTimer(EmergencyTimer[playerid]);
				EmergencyTimer[playerid] = SetTimerEx("EmergenciaDesligar", 15000, false, "i", playerid);
				return 0;
			}*/
			new pId = ReturnUser(text);
			if(!IsPlayerConnected(pId) || pId == INVALID_PLAYER_ID)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Telefonista (ao celular): Não há ninguem com este nome. Por-Favor, fale o Nome/ID do Jogador.");
				KillTimer(EmergencyTimer[playerid]);
				EmergencyTimer[playerid] = SetTimerEx("EmergenciaDesligar", 15000, false, "i", playerid);
				return 0;
			}
			EmergencyPlayer[playerid] = pId;
	        EmergencyPart[playerid] = 1;
			SendClientMessage(playerid, COLOR_YELLOW, "Telefonista (ao celular): Agora de uma Descrição do Crime.");
			KillTimer(EmergencyTimer[playerid]);
			EmergencyTimer[playerid] = SetTimerEx("EmergenciaDesligar", 15000, false, "i", playerid);
			return 0;
	    }
	    else
	    {
			SendClientMessage(playerid, COLOR_YELLOW, "Telefonista (ao celular): Denuncia Registrada.");

		    SendClientMessage(playerid,  COLOR_LIGHTBLUE, "** Desligaram");
		    if(IsPlayerAttachedObjectSlotUsed(playerid, 8)) RemovePlayerAttachedObject(playerid, 8);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);

			KillTimer(EmergencyTimer[playerid]);
		    EmergencyCall[playerid] = false;
		    Denunciar190(playerid, EmergencyPlayer[playerid], text);
			return 0;
	    }
	}
    if(realchat)
	{
	    if(gPlayerLogged[playerid] == 0)
	        return 0;

      	/*GetPlayerName(playerid, sendername, sizeof(sendername));
		{
	        format(string, sizeof(string), "%s diz: %s", sendername, text);
			if(Player[playerid][gSpectateID] == INVALID_PLAYER_ID) ProxDetector(20.0, playerid, string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			else ProxDetector(20.0, Player[playerid][gSpectateID], string, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}*/

		if(IsPlayerInAnyVehicle(playerid)) // Janelas Carro
		{
			new vehid = GetPlayerVehicleID(playerid);
		    new type = GetVehicleType(GetPlayerVehicleID(playerid));
			if((type == VTYPE_CAR || type == VTYPE_SPORT || type == VTYPE_MAV || type == VTYPE_HEAVY) && !VehicleInfo[vehid][vWindows])
			{
			    format(thestring, 256, "{DC69EB}(Veículo){E6E6E6} %s diz: %s", Player[playerid][pName], text);
			    foreach(Player, i)
			    {
			        if(IsPlayerInVehicle(i, vehid))
			        {
			            SendClientMessage(i, COLOR_FADE1, thestring);
			        }
			    }
			    return 0;
			}
		}

		Falar(playerid, "diz", text, 20.0);
  		return 0;
	}
	return true;
}

/*public Sequestrar(playerid)
{
    if(gTeam[playerid] == 7 && gTeam[playerid] == 16)
    {
	    GivePlayerGP(playerid, 2000);
        SendClientMessage(playerid, COLOR_GREEN, "Você foi pago pelo sequestro por favor liberte o refém");
        KillTimer(Sequestrartime[playerid]);
	}
	return true;
}*/
public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return true;
		}
	}
	return 0;
}

public ClearChatbox(playerid, lines)
{
	if(IsPlayerConnected(playerid))
	{
		for(new i=0; i<lines; i++)
		{
			SendClientMessage(playerid, COLOR_GREY, " ");
		}
	}
	return true;
}

forward StealingTimer();
public StealingTimer()
{
	new playerid, orgid;
	for(new i = 1; i < MAX_ROBS; i ++)
	{
	    if(Rob[i][Stealing] == true)
	    {
			if(PlayerToPoint(30.0, Rob[i][Robber], Rob[i][CoordX], Rob[i][CoordY], Rob[i][CoordZ]) && GetPlayerVirtualWorld(Rob[i][Robber]) == Rob[i][RouboVW])
		    {
		        Rob[i][RobStep] ++;
		        if(Rob[i][RobStep] == 9)
		        {
		            playerid = Rob[i][Robber];
		            orgid = GetPlayerOrg(playerid);

		            new capangas = -1,
                        roubo[MAX_PLAYERS],
						rouboTotal;

		            //Roubo Capangas
			        foreach(new pId: Player)
			        {
			        	if(GetPlayerOrg(pId) == orgid && PlayerToPoint(30.0, pId, Rob[i][CoordX], Rob[i][CoordY], Rob[i][CoordZ])
                        && GetPlayerState(pId) != PLAYER_STATE_SPECTATING && AdminDuty[pId] != MODOSA_TRABALHANDO
                        && GetPlayerVirtualWorld(pId) == Rob[i][RouboVW])
			        	{
			        	    capangas++;
			        	    roubo[pId] = random((ROB_CASH_MAX - ROB_CASH_MIN)) + ROB_CASH_MIN;
			        	    rouboTotal += roubo[pId];
                            HoldingOrgMoney[pId] += roubo[pId] - (roubo[pId]/4);

				    		WantedPoints[pId] += 2;
				    		SetPlayerCriminal(pId, 255, "Roubo", Rob[i][LocName]);

				            GivePlayerGP(pId, (roubo[pId]/4));
				            SetPlayerAttachedObject(pId, 9, 1550, 1, 0.1, -0.3, 0, 0, 40, 0, 1, 1, 1);

							SetPlayerCheckpoint(pId, EntradaHQCoords[orgid][0], EntradaHQCoords[orgid][1], EntradaHQCoords[orgid][2], 2.5);
							CP[pId] = CP_Marcos + CP_DinheiroOrg; // 5002
						}
					}

			        //Mensagem
			        foreach(new pId: Player)
			        {
			        	if(GetPlayerOrg(pId) == orgid && PlayerToPoint(30.0, pId, Rob[i][CoordX], Rob[i][CoordY], Rob[i][CoordZ])
                        && GetPlayerState(pId) != PLAYER_STATE_SPECTATING && AdminDuty[pId] != MODOSA_TRABALHANDO
                        && GetPlayerVirtualWorld(pId) == Rob[i][RouboVW])
			        	{
				            SendClientMessage(pId, COLOR_GREEN, "Informações do Roubo:");
					        format(thestring, sizeof(thestring), "- Roubo: {009900}R$%d", roubo[pId]);
					        SendClientMessage(pId, -1, thestring);
					        format(thestring, sizeof(thestring), "- Capangas: {FFFF00}%d", capangas);
					        SendClientMessage(pId, -1, thestring);
					        format(thestring, sizeof(thestring), "- Total do Roubo: {009900}R$%d", rouboTotal);
					        SendClientMessage(pId, -1, thestring);
					        SendClientMessage(pId, COLOR_LIGHTBLUE, "[Roubo]: Leve o dinheiro para a HQ da sua organização.");
						}
					}

					SetTimerEx("AllowSteal", (60*60*1000), false, "i", i);
					Rob[i][Robber] = INVALID_PLAYER_ID;
		            Rob[i][RobStep] = 0;
		            Rob[i][CanSteal] = false;
		            Rob[i][Stealing] = false;

                    if(Rob[i][RouboCofre] != -1)
                        RobCofreMoney(Rob[i][RouboCofre], false);
				}
	        }
	        else
	        {
   		    	SendClientMessage(Rob[i][Robber], COLOR_RED,"Roubo cancelado, você se distanciou do cofre.");
	            Rob[i][CanSteal] = true;
	            Rob[i][Robber] = INVALID_PLAYER_ID;
	            Rob[i][RobStep] = 0;
	            Rob[i][Stealing] = false;
	            //SetTimerEx("AllowSteal", (60*60*1000), false, "i", i);
                if(Rob[i][RouboCofre] != -1)
                    RobCofrePorta(Rob[i][RouboCofre], false);
	        }
		}
	}
	return true;
}

forward AllowSteal(robid);
public AllowSteal(robid)
{
	Rob[robid][CanSteal] = true;
    if(Rob[robid][RouboCofre] != -1)
    {
        RobCofrePorta(Rob[robid][RouboCofre], false);
        RobCofreMoney(Rob[robid][RouboCofre], true);
    }
}

/*forward LoadPlayerVehicle(playerid);
public LoadPlayerVehicle(playerid)
{
	new file[128];
	format(file, 128, "/RPG/carros/%s.ini",ReturnPlayer(playerid));
	printf("Nome do Arquivo: %s", file);
	if(!DOF2_FileExists(file)) return true;

	new v = CreateVehicle(
	    DOF2_GetInt(file, "Modelo"),
		DOF2_GetFloat(file, "ParkX"),
	    DOF2_GetFloat(file, "ParkY"),
	    DOF2_GetFloat(file, "ParkZ"),
		DOF2_GetFloat(file, "ParkA"),
		DOF2_GetInt(file, "Cor1"),
		DOF2_GetInt(file, "Cor2"),
        RESPAWN_TIME
		);

    Player[playerid][pCar] = v;
    printf("Carro criado: %d", v);
	VehicleInfo[v][vModel] = DOF2_GetInt(file, "Modelo");
	VehicleInfo[v][vX] = DOF2_GetFloat(file, "ParkX");
	VehicleInfo[v][vY] = DOF2_GetFloat(file, "ParkY");
	VehicleInfo[v][vZ] = DOF2_GetFloat(file, "ParkZ");
	VehicleInfo[v][vA] = DOF2_GetFloat(file, "ParkA");
    VehicleInfo[v][vColor1] = DOF2_GetInt(file, "Cor1");
  	VehicleInfo[v][vColor2] = DOF2_GetInt(file, "Cor2");
   	VehicleInfo[v][vPaintjob] = DOF2_GetInt(file, "Pintura");
   	format(VehicleInfo[v][vOwner], 32, "%s", DOF2_GetString(file, "Dono"));
   	format(VehicleInfo[v][vName], 32, "%s", vehName[GetVehicleModel(v)-400]);
    VehicleInfo[v][vLock] = DOF2_GetBool(file, "Trancado");
    VehicleInfo[v][vPark] = DOF2_GetInt(file, "Estacionado");
    VehicleInfo[v][vMod][0] = DOF2_GetInt(file, "Mod0");
    VehicleInfo[v][vMod][1] = DOF2_GetInt(file, "Mod1");
    VehicleInfo[v][vMod][2] = DOF2_GetInt(file, "Mod2");
    VehicleInfo[v][vMod][3] = DOF2_GetInt(file, "Mod3");
    VehicleInfo[v][vMod][4] = DOF2_GetInt(file, "Mod4");
    VehicleInfo[v][vMod][5] = DOF2_GetInt(file, "Mod5");
    VehicleInfo[v][vMod][6] = DOF2_GetInt(file, "Mod6");
    VehicleInfo[v][vMod][7] = DOF2_GetInt(file, "Mod7");
    VehicleInfo[v][vMod][8] = DOF2_GetInt(file, "Mod8");
    VehicleInfo[v][vMod][9] = DOF2_GetInt(file, "Mod9");
    VehicleInfo[v][vMod][10] = DOF2_GetInt(file, "Mod10");
    VehicleInfo[v][vMod][11] = DOF2_GetInt(file, "Mod11");
    format(GetVehicleNumberPlate(v),9,"%s", DOF2_GetString(file, "Placa"));
	printf("ID: %d", VehicleInfo[v][vModel]);
	printf("Proprietario: %s", VehicleInfo[v][vOwner]);
	printf("Placa: %s", GetVehicleNumberPlate(v));
	SetVehicleNumberPlateEx(v,GetVehicleNumberPlate(v));
	SetVehicleToRespawn(v);

	for(new m = 0; m < MAX_MODS; m++)
	    if(VehicleInfo[v][vMod][m] > 0)
	        AddVehicleComponent(v,VehicleInfo[v][vMod][m]);

	if(VehicleInfo[v][vPaintjob] > -1)
	    ChangeVehiclePaintjob(v,VehicleInfo[v][vPaintjob]);

    if(VehicleInfo[v][vColor1] > -1 || VehicleInfo[v][vColor2] > -1)
        ChangeVehicleColor(v,VehicleInfo[v][vColor1],VehicleInfo[v][vColor2]);

    VehicleInfo[v][vPCID] = -1;
	MAX_VEH_SPAWNED++;

	LoadTrunkEx(VehicleInfo[v][vOwner], v);
	//if(IsStringSame(Player[playerid][pName], "Kuddy_Hirasawa", 24)) KAT(v);
	return true;
}

forward SavePlayerVehicle(playerid);
public SavePlayerVehicle(playerid)
{
    new v = GetOwnedVehicleID(playerid);
	if(v == INVALID_VEHICLE_ID)
	    return print("Carro não foi salvo");

	new file[128];
	format(file, 128, "/RPG/carros/%s.ini",ReturnPlayer(playerid));

	if(!DOF2_FileExists(file))
	    DOF2_CreateFile(file);

	SaveTrunkEx(VehicleInfo[v][vOwner], v);
//    if(IsStringSame(Player[playerid][pName], "Kuddy_Hirasawa", 24)) UnloadKAT();

    DOF2_SetInt(file, "Modelo", VehicleInfo[v][vModel]);
	DOF2_SetFloat(file, "ParkX", VehicleInfo[v][vX]);
	DOF2_SetFloat(file, "ParkY", VehicleInfo[v][vY]);
	DOF2_SetFloat(file, "ParkZ", VehicleInfo[v][vZ]);
	DOF2_SetFloat(file, "ParkA", VehicleInfo[v][vA]);
    DOF2_SetInt(file, "Cor1", VehicleInfo[v][vColor1]);
  	DOF2_SetInt(file, "Cor2", VehicleInfo[v][vColor2]);
   	DOF2_SetInt(file, "Pintura", VehicleInfo[v][vPaintjob]);
    DOF2_SetString(file, "Nome", VehicleInfo[v][vName]);
    DOF2_SetString(file, "Dono", ReturnPlayer(playerid));
    DOF2_SetBool(file, "Trancado", VehicleInfo[v][vLock]);
    DOF2_SetInt(file, "Estacionado", VehicleInfo[v][vPark]);
    DOF2_SetInt(file, "Mod0", VehicleInfo[v][vMod][0]);
    DOF2_SetInt(file, "Mod1", VehicleInfo[v][vMod][1]);
    DOF2_SetInt(file, "Mod2", VehicleInfo[v][vMod][2]);
    DOF2_SetInt(file, "Mod3", VehicleInfo[v][vMod][3]);
    DOF2_SetInt(file, "Mod4", VehicleInfo[v][vMod][4]);
    DOF2_SetInt(file, "Mod5", VehicleInfo[v][vMod][5]);
    DOF2_SetInt(file, "Mod6", VehicleInfo[v][vMod][6]);
    DOF2_SetInt(file, "Mod7", VehicleInfo[v][vMod][7]);
    DOF2_SetInt(file, "Mod8", VehicleInfo[v][vMod][8]);
    DOF2_SetInt(file, "Mod9", VehicleInfo[v][vMod][9]);
    DOF2_SetInt(file, "Mod10", VehicleInfo[v][vMod][10]);
    DOF2_SetInt(file, "Mod11", VehicleInfo[v][vMod][11]);
    DOF2_SetString(file, "Placa", GetVehicleNumberPlate(v));
    //VehicleInfo[v][vPCID] = -1;
	DOF2_SaveFile();
    format(VehicleInfo[v][vName], MAX_PLAYER_NAME, "%s", vehName[GetVehicleModel(v) - 400]);
	format(VehicleInfo[v][vOwner], MAX_PLAYER_NAME, "%s", Player[playerid][pName]);
    VehicleInfo[v][vModel] = 0;
    VehicleInfo[v][vLock] = false;

	DestroyVehicle(v);
	UnloadTrunk(v);
	return true;
}           */

forward GetAmmo(playerid, wep, ammo, i);
public GetAmmo(playerid, wep, ammo, i)
{
    new newwep,
        newammo,
        string[128];

	if(wep == 41)
	{
	    GetPlayerWeaponData(playerid, 9, newwep, newammo);
		if(ammo - newammo > 40)
		{
	 		if(PlayerToPoint(3.0, playerid,Pixacao[i][PixX],Pixacao[i][PixY],Pixacao[i][PixZ]))
	 		{
				if(IsACop(playerid))
				{
					new DonoAntigo = Pixacao[i][Dono];
					format(string, sizeof(string), "Um Oficial do(a) %s Limpou uma de suas Pichações.", OrgsNames[GetPlayerOrg(playerid)]);
					SendTeamMessage(DonoAntigo, COLOR_MARINE, string);
					Pixacao[i][Dono] = 0;
					format(string, sizeof(string), "Pixação\n\nGang : %s",OrgsNames[0]);
					Update3DTextLabelText(PixLabel[i], PixColors[0], string);
				}
	 		    else if(IsAGang(playerid))
	 		    {
					new DonoAntigo = Pixacao[i][Dono];
					if(GetPlayerOrg(playerid) != Pixacao[i][Dono] && GetPlayerOrg(playerid) != 0)
					{
					    if(DonoAntigo != 0)
					    {
							format(string, sizeof(string), "Um membro da Gang %s rasurou uma de suas Pichações.", OrgsNames[GetPlayerOrg(playerid)]);
							SendTeamMessage(DonoAntigo, COLOR_MARINE, string);
					    }
						Pixacao[i][Dono] = GetPlayerOrg(playerid);
						format(string, sizeof(string), "Pixação\n\nGang : %s",OrgsNames[GetPlayerOrg(playerid)]);
						Update3DTextLabelText(PixLabel[i], PixColors[GetPlayerOrg(playerid)], string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Esta pixação já pertence à sua gang.");
					}
				}
			}
		}
		else
		{
	        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não usou spray suficiente");
		}
        Pixando[playerid] = false;
        LimpandoPiche[playerid] = false;
	}
	if(wep == 42)
	{
	    GetPlayerWeaponData(playerid, 9, newwep, newammo);
	    if(ammo - newammo > 30)
		{
    		if(fogo[i] > 0)
			{
			    /*if(fogo[i] == 2)
			    {
			        fogo[i] = 1;
			        jatocol[playerid] = 1;
		        }
				if(fogo[i] == 1 && jatocol[playerid] == 1)
				    return SendClientMessage(playerid, COLOR_GREY, "Você já fez sua parte. Aguarde reforço.");*/

			    DestroyDynamicObject(fogoobj[i]);
			    /*foreach(new k: Player)
			    {
			    	if(ProxDetectorS(10.0, playerid, k) && Player[k][pMember] == TEAM_BOMBE)
		    		{*/

		   	    GivePlayerGP(playerid, 150);
    			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você ganhou R$150 por apagar um incêndio.");
    			jatocol[playerid] = 0;
    			fogo[i] = 0;

		   		foreach(new j: Player)
		   		    if(Player[j][pMember] == TEAM_BOMBE)
			   		    RemovePlayerMapIcon(j, 50 + i);

		   		return true;
	   		}
   		}
   		else
	        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não usou jato suficiente");
	}
	return true;
}

stock GetPixacaoOwner(pixacaoid)
{
	new dono[20];
	if(Pixacao[pixacaoid][Dono] == 0)
	    dono = "Nenhum";
	else
	    format(dono,20,OrgsNames[Pixacao[pixacaoid][Dono]]);

	return dono;
}

forward SafePutPlayerInVehicle(playerid, vid, vaga);
public SafePutPlayerInVehicle(playerid, vid, vaga)
{
    noab2[playerid] = true;
    SetTimerEx("ResetAB",1100,false, "i", playerid);
    PutPlayerInVehicle(playerid, vid, vaga);
}

stock SetPlayerWeapon(plyid, weaponid, ammo)
{
	GivePlayerWeapon(plyid, weaponid, 1);
    SetPlayerAmmo(plyid, weaponid, ammo);
	nowh[plyid] = 1;
	return true;
}

public SafeGivePlayerWeapon(plyid, weaponid, ammo)
{
	GivePlayerWeapon(plyid, weaponid, ammo);
	nowh[plyid] = 1;
	return true;
}

forward SafeSetPlayerPos(playerid, Float:X,Float:Y,Float:Z);
public SafeSetPlayerPos(playerid, Float:X,Float:Y,Float:Z)
{
	SetPlayerPos(playerid, Float:X,Float:Y,Float:Z);
	noab2[playerid] = true;
	SetTimerEx("ResetAB",1100,false, "i", playerid);
	return true;
}

forward ResetAB(playerid);
public ResetAB(playerid)
{
	noab2[playerid] = false;
	return true;
}

public RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12] = 0;
	new plyAmmo[12] = 0;
	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);

		if(wep != weaponid && ammo != 0)
			GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);

	}

	ResetPlayerWeapons(playerid);
	for(new slot = 0; slot != 12; slot++)
	    if(plyAmmo[slot] != 0)
			SafeGivePlayerWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
	return true;
}

/*
@CONCESSIONARIA
forward DeleteVehicle(ownerid);
public  DeleteVehicle(ownerid)
{
	new vehicleid = GetOwnedVehicleID(ownerid);
	if(vehicleid == INVALID_VEHICLE_ID)
		return 0;
    new string[128];
    format(string, 128, "/RPG/carros/%s.ini", ReturnPlayer(ownerid));
	if(DOF2_FileExists(string)) DOF2_RemoveFile(string);
	Player[ownerid][pCar] = INVALID_VEHICLE_ID;
	VehicleInfo[vehicleid][vModel] = 0;
	VehicleInfo[vehicleid][vX] = 0;
	VehicleInfo[vehicleid][vY] = 0;
	VehicleInfo[vehicleid][vZ] = 0;
	VehicleInfo[vehicleid][vA] = 0;
	VehicleInfo[vehicleid][vColor1] = 0;
	VehicleInfo[vehicleid][vColor2] = 0;
	VehicleInfo[vehicleid][vPaintjob] = 0;
	format(VehicleInfo[vehicleid][vName], MAX_PLAYER_NAME, "%s", vehName[GetVehicleModel(vehicleid) - 400]);
	format(VehicleInfo[vehicleid][vOwner], MAX_PLAYER_NAME, "Nenhum");
	VehicleInfo[vehicleid][vPark] = 0;
	for(new m = 0; m < MAX_MODS; m++) VehicleInfo[vehicleid][vMod][m] = 0;
	DestroyVehicle(vehicleid);
	return true;
}

forward BrowseCars(playerid);
public BrowseCars(playerid)
{
	if(CarShopping[playerid] != true) return true;

	new keys, updown, leftright;
	GetPlayerKeys(playerid, keys, updown, leftright);

	new color1 = CarColor[playerid][0];
	new color2 = CarColor[playerid][1];

	if(leftright == KEY_RIGHT)
	{
	    carbrowse[playerid]++;
	    if(carbrowse[playerid] > 53) carbrowse[playerid] = 0;
	    DestroyVehicle(ShopCar[playerid]);
        SafeSetPlayerPos(playerid,-1965.0438,288.5635,47.7031);
	    ShopCar[playerid] = CreateVehicle(CarModels[carbrowse[playerid]], -1972.5745,284.5845,34.8772, 0.0, color1, color2, 6000000);
        SetVehicleVirtualWorld(ShopCar[playerid], 1);
        SetVehicleNumberPlateEx(ShopCar[playerid],"SemPlaca");
        SafePutPlayerInVehicle(playerid, ShopCar[playerid], 0);
        SetVehicleParamsEx(ShopCar[playerid],VEHICLE_PARAMS_OFF,0,0,0,0,0,0);
        VehicleInfo[ShopCar[playerid]][vLock] = false;
	}
	else if(leftright == KEY_LEFT)
	{
	    carbrowse[playerid]--;
	    if(carbrowse[playerid] < 1) carbrowse[playerid] = 0;
	    DestroyVehicle(ShopCar[playerid]);
        SafeSetPlayerPos(playerid,-1965.0438,288.5635,47.7031);
	    ShopCar[playerid] = CreateVehicle(CarModels[carbrowse[playerid]], -1972.5745,284.5845,34.8772, 0.0, color1, color2, 6000000);
	   	SetVehicleVirtualWorld(ShopCar[playerid], 1);
	   	SetVehicleNumberPlateEx(ShopCar[playerid],"SemPlaca");
        SafePutPlayerInVehicle(playerid, ShopCar[playerid], 0);
        SetVehicleParamsEx(ShopCar[playerid],VEHICLE_PARAMS_OFF,0,0,0,0,0,0);
        VehicleInfo[ShopCar[playerid]][vLock] = false;
	}
	else if(keys == KEY_FIRE)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    new stringe[128];
	    new preco = GetVehicleCost(vehicleid);
 		if(GetPlayerGP(playerid) >= preco)
   	 	{
   	 	    if(preco==0)
   	 	    {
   	 	        CarShopping[playerid] = false;
				DestroyVehicle(ShopCar[playerid]);
			    carbrowse[playerid] = 0;
				Kick(playerid);
   	 	        return true;
   	 	    }
            new file[128];
			format(file, 128, "/RPG/carros/%s.ini",ReturnPlayer(playerid));
			DOF2_CreateFile(file);
   	 	    SetVehiclePos(ShopCar[playerid], 546.3990,-1276.1610,16.9535);
   	 	    SetVehicleNumberPlateEx(ShopCar[playerid],"SemPlaca");
   	 	    //VehicleInfo[vehicleid][vPCID] = 1;
   	 	    format(stringe, sizeof(stringe), "%s comprou um %s por %d",Player[playerid][pName], VehicleName[carbrowse[playerid]], preco);
   	 	    SendClientMessage(playerid, COLOR_GREEN, "Você comprou um veículo. Digite /carmenu para ter acesso aos comandos.");
            strmid(VehicleInfo[vehicleid][vOwner], ReturnPlayer(playerid), 0, strlen(ReturnPlayer(playerid)), MAX_PLAYER_NAME);


			GivePlayerGP(playerid, -GetVehicleCost(vehicleid));

		    CarShopping[playerid] = false;
		    carbrowse[playerid] = 0;
		    GameTextForPlayer(playerid, " ", 1000, 3);
		    SafePutPlayerInVehicle(playerid, ShopCar[playerid], 0);
		    SetVehicleZAngle(vehicleid, OrgA[playerid]);
            SetPlayerVirtualWorld(playerid, 0);
		    SetVehicleVirtualWorld(vehicleid, 0);
		    SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,0,0,0,0,0,0);
		    Conce[playerid] = 0;
		    SetCameraBehindPlayer(playerid);
		    if(BizzInfo[13][bProducts]>0)
			{
			    BizzInfo[13][bTill] += 5000;
			    ExtortionBiz(13, 5000);
				BizzInfo[13][bProducts]--;
			}

		    vehicleid = ShopCar[playerid];
		    VehicleInfo[vehicleid][vModel] = GetVehicleModel(vehicleid);
		    Player[playerid][pCar] = vehicleid;
			VehicleInfo[vehicleid][vX] = OrgX[playerid];
			VehicleInfo[vehicleid][vY] = OrgY[playerid];
			VehicleInfo[vehicleid][vZ] = OrgZ[playerid];
			VehicleInfo[vehicleid][vA] = OrgA[playerid];
			VehicleInfo[vehicleid][vColor1] = CarColor[playerid][0];
			VehicleInfo[vehicleid][vColor2] = CarColor[playerid][1];
			VehicleInfo[vehicleid][vPaintjob] = -1;
			strmid(VehicleInfo[vehicleid][vName], vehName[GetVehicleModel(vehicleid)-400], 0, strlen(vehName[GetVehicleModel(vehicleid)-400]), 128);

			SafePutPlayerInVehicle(playerid, vehicleid, 0);
			VehicleInfo[vehicleid][vPark] = 0;
			Conce[playerid] = 0;
			for(new m = 0; m < MAX_MODS; m++) VehicleInfo[vehicleid][vMod][m] = 0;
			OnPlayerSave(playerid);
   		}
   		else
   		{
   		    new mes[64];
   		    format(mes, sizeof mes, "|-Este %s Custa R$ %d! Você só tem R$%d-|", VehicleName[carbrowse[playerid]], GetVehicleCost(vehicleid), GetPlayerGP(playerid));
   		    SendClientMessage(playerid, COLOR_RED, mes);
   		}
	}
	else if(keys == KEY_SECONDARY_ATTACK)
	{
        Conce[playerid] = 0;
	    DestroyVehicle(ShopCar[playerid]);
	    TogglePlayerControllable(playerid, true);
	    CarShopping[playerid] = false;
	    carbrowse[playerid] = 0;
	    GameTextForPlayer(playerid, " ", 1000, 3);
	    SafeSetPlayerPos(playerid, OrgX[playerid], OrgY[playerid], OrgZ[playerid]);
 		SetPlayerFacingAngle(playerid, OrgA[playerid]);
   		SetPlayerVirtualWorld(playerid, 0);
	    SetCameraBehindPlayer(playerid);
	}

	new gt[32];
	if(CarShopping[playerid] == true)
	{
		format(gt, sizeof gt, "~g~%s", VehicleName[carbrowse[playerid]]);
		GameTextForPlayer(playerid, gt, 7000, 3);
	}

	SetTimerEx("BrowseCars", 300, 0, "d", playerid);
	return true;
}       */

forward FreezeCar(playerid);
public  FreezeCar(playerid)
{
    if(CarShopping[playerid] != true) return true;
    SetVehiclePos(ShopCar[playerid], -1955.7070,268.3966,35.1677);
    SetTimerEx("FreezeCar", 100, 0, "d", playerid);
    return true;
}

stock GetVehicleModelIDFromName(vname[]) //
{
	for(new i = 0; i < sizeof(vehName); i++)
		if(strfind(vehName[i], vname, true) != -1) return i+400;

	return -1;
}

stock GetVehicleType(vehicleid) // Criado Em Pixels Não Mecha
{
	new type;
    switch(GetVehicleModel(vehicleid))
	{
		case
		445,   //admiral
		602,   //alpha
		485,   //baggage
		568,   //bandito
		499,   //benson
		424,   //bfinject,
		536,   //blade
		496,   //blistac
		504,   //bloodra
		422,   //bobcat
		609,   //boxburg
		498,   //boxville,
		401,   //bravura
		575,   //broadway,
		518,   //buccanee,
		402,   //buffalo
		482,   //burrito
		527,   //cadrona
		483,   //camper
		524,   //cement
		542,   //clover
		589,   //club
		578,   //dft30
		486,   //dozer
		507,   //elegant
		585,   //emperor
		427,   //enforcer,
		419,   //esperant,
		587,   //euros
		533,   //feltzer
		544,   //firela
		407,   //firetruk,
		455,   //flatbed
		530,   //forklift,
		526,   //fortune
		466,   //glendale,
		604,   //glenshit,
		492,   //greenwoo,
		474,   //hermes
		434,   //hotknife,
		502,   //hotrina
		503,   //hotrinb
		494,   //hotring
		579,   //huntley
		545,   //hustler
		546,   //intruder,
		508,   //journey
		400,   //landstal,
		403,   //linerun
		517,   //majestic,
		410,   //manana
		551,   //merit
		500,   //mesa
		418,   //moonbeam,
		572,   //mower
		423,   //mrwhoop
		516,   //nebula
		582,   //newsvan
		467,   //oceanic
		404,   //peren
		514,   //petro
		603,   //phoenix
		600,   //picador
		413,   //pony
		426,   //premier
		436,   //previon
		547,   //primo
		489,   //rancher
		479,   //regina
		534,   //remingtn,
		505,   //rnchlure,
		442,   //romero
		440,   //rumpo
		475,   //sabre
		543,   //sadler
		605,   //sadlshit,
		495,   //sandking,
		567,   //savanna
		428,   //securica,
		405,   //sentinel,
		535,   //slamvan
		458,   //solair
		580,   //stafford,
		439,   //stallion,
		561,   //stratum
		409,   //stretch
		550,   //sunrise
		601,   //BOPEvan
		574,   //sweeper
		566,   //tahoma
		549,   //tampa
		420,   //taxi
		459,   //topfun
		576,   //tornado
		583,   //tug
		552,   //utility
		540,   //vincent
		491,   //virgo
		412,   //voodoo
		478,   //walton
		421,   //washing
		529,   //willard
		555,   //windsor
		456,   //yankee
		554,   //yosemite,
		438    //cabbie
		: type = VTYPE_CAR;
	//=====================SPORT===========
		case
		451,   //turismo
		558,   //uranus
		560,   //sultan
		559,   //jester
		477,   //zr 350
		506,   //supergt
		415,   //cheetah
		429,   //banshee
		565,   //flash
		480,   //comet
		411,   //infernus,
		562,   //elegy
		541   //bullet
		: type = VTYPE_SPORT;



	// ================== MOTORBIKES =======
		case
		581,   //bf400  -  bike
		462,   //faggio  -  bike
		461,   //pcj600  -  bike
		448,   //pizzaboy,   //bike
		468,   //sanchez  -  bike
		586,   //wayfarer,   //bike
		463,   // freeway
		471,   //quad  -  quad
		523
		: type = VTYPE_MOTORBIKE;

    // ================== BIKES =======
		case
		509,   //bike  -  bmx
		521,   //fcr900  -  bike
		522,   //nrg500  -  bike
		481,   //bmx  -  bmx
		510   //mtbike  -  bmx
		: type = VTYPE_BIKE;

	// ================== SEA =======
		case
		472,   //coastg  -  boat
		473,   //dinghy  -  boat
		493,   //jetmax  -  boat
		595,   //launch  -  boat
		484,   //marquis  -  boat
		430,   //predator,   //boat
		453,   //reefer  -  boat
		452,   //speeder  -  boat
		446,   //squalo  -  boat
		454   //tropic  -  boat
		: type = VTYPE_SEA;
	// ================== HEAVY =======
		case
		497,
		487   //tram  -  train
		: type = VTYPE_MAV;


	// ================== HEAVY =======
		case
		437,   //coach
		532,   //combine
		433,   //barracks,
		414,   //mule
		443,   //packer
		432,   //rhino
		525,   //towtruck,
		531,   //tractor
		408,   //trash
		406,   //dumper  -  mtruck
		573,   //duneride,   //mtruck
		444,   //monster  -  mtruck
		556,   //monstera,   //mtruck
		557,   //monsterb,   //mtruck
		435,   //artict1  -  trailer
		450,   //artict2  -  trailer
		591,   //artict3  -  trailer
		606,   //bagboxa  -  trailer
		607,   //bagboxb  -  trailer
		610,   //farmtr1  -  trailer
		584,   //petrotr  -  trailer
		608,   //tugstair,   //trailer
		611,   //utiltr1  -  trailer
		590,   //freibox  -  train
		569,   //freiflat,   //train
		537,   //freight  -  train
		538,   //streak  -  train
		570,   //streakc  -  train
		449   //tram  -  train
		: type = VTYPE_HEAVY;

		// ================== MISC =======
		case
		441,   //rcbandit,   //misc
		594,   //rccam  -  misc
		564,   //rctiger  -  misc
		515,   //rdtrain  -  misc
		571   //kart  -  misc
		: type = VTYPE_MISC;
	}
	return type;
}

stock IsVehicleSpawned(vehicleid)
{
	new Float:X,Float:Y,Float:Z;
	GetVehiclePos(vehicleid, X, Y, Z);
	if(X == 0.0 && Y == 0.0 && Z == 0.0) return 0;
	return true;
}

stock GetOwnedVehicleID(vehicleid)
{
	for(new v = 0; v < sizeof(CarInfo); v++)
	    if(CarInfo[v][cID] != INVALID_VEHICLE_ID)
            if(CarInfo[v][cID] == vehicleid)
				return v;

	return INVALID_VEHICLE_ID;
}

stock GetPlayerVehicleIndex(playerid, vehicleid)
{
    new vId = GetOwnedVehicleID(vehicleid);
	for(new v = 1; v < 5; v++)
        if(Player[playerid][pCar] == vId)
			return v;

	return -1;
}

stock PlayerInVehicle(vehicleid)
{
	foreach(new i: Player)
        if(IsPlayerInVehicle(i, vehicleid)) return i;

	return INVALID_PLAYER_ID;
}

stock GetVehicleDriver(vehicleid)
{
	foreach(new i: Player)
        if(IsPlayerInVehicle(i, vehicleid))
            if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
                return i;

	return INVALID_PLAYER_ID;
}

stock IsPlayerInMorro(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if((x >= 2202.403320 && y >= -1131.981933 && x <= 2322.403320 && y <= -1107.981933)
    || (x >= 2041.285644 && y >= -1075.884277 && x <= 2320.285644 && y <= -940.884277)
    || (x >= 2106.894042 && y >= -1108.459472 && x <= 2319.894042 && y <= -1075.459472)
    || (x >= 2320.003906 && y >= -1108.388183 && x <= 2494.003906 && y <= -942.388183)) return true;
    else return 0;
}
stock IsPlayerInShop(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 1061.1545 && y >= -1566.9081 && x <= 1190.9424 && y <= -1411.1282) return true;
    else return 0;
}
stock IsPlayerInSkate(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 1861.9410 && y >= -1450.6462 && x <= 1976.5867 && y <= -1351.4069) return true;
    else return 0;
}
stock IsPlayerInAero(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 1395.7454 && y >= -2368.6396 && x <= 1566.4358 && y <= -2204.4346) return true;
    else return 0;
}
stock IsPlayerInPier(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 318.0144 && y >= -2120.061 && x <= 437.1136 && y <= -1993.733) return true;
    else return 0;
}
stock IsPlayerInMateriala(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= -447.7593 && y >= -1535.479 && x <= -316.0 && y <= -1334.634) return true;
    else return 0;
}

stock IsPlayerInGuerra(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= -200.0000 && y >= 1650.0000 && x <= 450.0000 && y <= 2550.0000) return true;
    else return 0;
}

stock IsPlayerInUsina(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= -907.0000 && y >= 1365.0000 && x <= -480.0000 && y <= 2148.0000) return true;
    else return 0;
}

stock IsPlayerInAQFA(playerid)
{
    if(IsPlayerInArea(playerid, 2920.0000, -855.0000, 95.0000, -2748.0000))
        return true;
    return false;
}

stock IsPlayerInEscond(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 1090.4170 && y >= -1334.7106 && x <= 1131.4000 && y <= -1310.9320) return true;
    else if(x >= 1283.2437 && y >= -1254.0242 && x <= 1305.1622 && y <= -1235.2523) return true;
    else if(x >= 2023.7374 && y >= -1308.6909 && x <= 2036.3375 && y <= -1271.4386) return true;
    else if(x >= 2322.7417 && y >= -1268.2914 && x <= 2351.6724 && y <= -1221.7603) return true;
    else if(x >= 2598.6558 && y >= -1408.6494 && x <= 2616.3311 && y <= -1391.2493) return true;
    else return 0;
}

stock OnPlayerUpdateSpike(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;

    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        for(new i = 0; i < sizeof(SpikeInfo); i++)
  	    {
  	        if(IsPlayerInRangeOfPoint(playerid, 3.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
            {
  	            if(SpikeInfo[i][sCreated] == 1)
  	            {
  	                new panels, doors, lights, tires;
  	                new carid = GetPlayerVehicleID(playerid);
		            GetVehicleDamageStatus(carid, panels, doors, lights, tires);
		            tires = encode_tires(1, 1, 1, 1);
		            UpdateVehicleDamageStatus(carid, panels, doors, lights, tires);
  	                return 0;
  	            }
  	        }
  	    }
  	}
	return 1;
}

stock CreateStrip(Float:x,Float:y,Float:z,Float:Angle)
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(SpikeInfo[i][sCreated] == 0)
  	    {
            SpikeInfo[i][sCreated]=1;
            SpikeInfo[i][sX]=x;
            SpikeInfo[i][sY]=y;
            SpikeInfo[i][sZ]=z-0.7;
            SpikeInfo[i][sObject] = CreateDynamicObject(2899, x, y, z-0.9, 0, 0, Angle-90);
	        return i;
  	    }
  	}
  	return -1;
}

stock DeleteAllStrip()
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(SpikeInfo[i][sCreated] == 1)
  	    {
  	        SpikeInfo[i][sCreated]=0;
            SpikeInfo[i][sX]=0.0;
            SpikeInfo[i][sY]=0.0;
            SpikeInfo[i][sZ]=0.0;
            DestroyDynamicObject(SpikeInfo[i][sObject]);
  	    }
	}
    return 0;
}

stock DeleteClosestStrip()
{
    for(new i = 0; i < sizeof(SpikeInfo); i++)
  	{
  	    if(SpikeInfo[i][sCreated] == 1)
            {
                SpikeInfo[i][sCreated]=0;
                SpikeInfo[i][sX]=0.0;
                SpikeInfo[i][sY]=0.0;
                SpikeInfo[i][sZ]=0.0;
                DestroyDynamicObject(SpikeInfo[i][sObject]);
                return 1;
  	    }
  	}
    return 0;
}

encode_tires(tires1, tires2, tires3, tires4) {

	return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);

}

public GranaTerritorios()
{
	new string[128],
		drugs[MAX_ORGS],
		bool:AreaDroga[MAX_ORGS],
		OrgsTurfs[MAX_ORGS][2],
		pOrg,
        Race[MAX_ORGS][2],
        rand,
        bool:shown[MAX_ORGS];

	for(new i = 0; i < sizeof(TurfsCoords); i++)
	{
		OrgsTurfs[gZonesData[i][ZoneOwner]][0] ++;
		OrgsTurfs[gZonesData[i][ZoneOwner]][1] += TURF_PAYOUT;
	}
    for(new i = 0; i < MAX_RACEGZ; i++)
    {
        if(RaceGZ[i][rOwner] != 0)
        {
            rand = random(150) + 100;
            Race[RaceGZ[i][rOwner]][0] += 1;
            Race[RaceGZ[i][rOwner]][1] += rand;
            CofreOrg[RaceGZ[i][rOwner]][cfDinheiro] += RACEGZ_PAYOUT;
            CofreOrg[RaceGZ[i][rOwner]][cfDrogas] += rand;
        }
    }

	foreach(new playerid: Player)
	{
		pOrg = GetPlayerOrg(playerid);
		if(pOrg != 0)
        {
            if(OrgsTurfs[pOrg][0] != 0)
    		{
    		    if(pOrg == 14 || pOrg == 15 || pOrg == 17)
    		    {
    		        if(!AreaDroga[pOrg])
    		        {
    		            drugs[pOrg] = 70 * OrgsTurfs[pOrg][0];
    		            CofreOrg[pOrg][cfMat] += drugs[pOrg];
    		            GivePlayerGP(playerid, OrgsTurfs[pOrg][1]);
    		            AreaDroga[pOrg] = true;
    		        }
    		        format(string, sizeof(string), "{FF0000}[Info]:{FFFFFF} Você recebeu {009900}R$%d {FFFFFF}por manter %d área(s) sob controle.", OrgsTurfs[pOrg][1], OrgsTurfs[pOrg][0]);
    			    SendClientMessage(playerid, SERVER_INFO, string);
    			    format(string, sizeof(string), "{FF0000}[Info]:{FFFFFF} Sua organização recebeu %d materiais no cofre por manter %d área(s) sob controle.", drugs[pOrg], OrgsTurfs[pOrg][0]);
    			    SendClientMessage(playerid, SERVER_INFO, string);
    			    continue;
    		    }
    		    if(!IsACop(playerid))
    		    {
    				if(!AreaDroga[pOrg])
    				{
    				    drugs[pOrg] = random(20)+5 * OrgsTurfs[pOrg][0];
    					CofreOrg[pOrg][cfDrogas] += drugs[pOrg];
         				GivePlayerGP(playerid, OrgsTurfs[pOrg][1]);
    					AreaDroga[pOrg] = true;
    				}
                    if(Race[pOrg][0] != 0)
                        shown[pOrg] = true;

    				format(string, sizeof(string), "{FF0000}[Info]:{FFFFFF} Você recebeu {009900}R$%d {FFFFFF}por manter %d área(s) sob controle.", OrgsTurfs[pOrg][1] + Race[pOrg][0] * RACEGZ_PAYOUT, OrgsTurfs[pOrg][0] + Race[pOrg][0]);
    			    SendClientMessage(playerid, SERVER_INFO, string);
       				format(string, sizeof(string), "{FF0000}[Info]:{FFFFFF} Sua gang recebeu %dg de Drogas no cofre por manter %d área(s) sob controle.", drugs[pOrg] + Race[pOrg][1], OrgsTurfs[pOrg][0] + Race[pOrg][0]);
    			    SendClientMessage(playerid, SERVER_INFO, string);
    			    continue;
    		    }
    		    else
    		    {
    			    format(string, sizeof(string), "{FF0000}[Info]:{FFFFFF} Você recebeu {009900}R$%d{FFFFFF} por manter %d área(s) sob controle.", OrgsTurfs[pOrg][1], OrgsTurfs[pOrg][0]);
    			    SendClientMessage(playerid, SERVER_INFO, string);
    		        GivePlayerGP(playerid, OrgsTurfs[pOrg][1]);
    		        continue;
                }
    		}
            if((pOrg == 11 || pOrg == 12) && Race[pOrg][0] != 0 && !shown[pOrg])
            {
            	format(string, sizeof(string), "{FF0000}[Info]:{FFFFFF} Você recebeu {009900}R$%d{FFFFFF} e sua gangue %dg de Drogas por manter %d área(s) sob controle.", Race[pOrg][0] * RACEGZ_PAYOUT, Race[pOrg][1], Race[pOrg][0]);
                SendClientMessage(playerid, SERVER_INFO, string);
            }
        }
	}

 	/*for(new i=0; i< sizeof(TurfsCoords); i++)
	{
		if(gZonesData[i][ZoneOwner] != TEAM_NONE)
		{
		    foreach(new x: Player)
		    {

			}
		}
	}*/

	new OrgsGrana[MAX_ORGS][2], bool:PlayersOn[MAX_ORGS];
	for(new i = 0; i < MAX_PIX; i++)
	{
		OrgsGrana[Pixacao[i][Dono]][0] ++;
		OrgsGrana[Pixacao[i][Dono]][1] += GRANA_PIX;
	}
	foreach(new playerid: Player)
	{
	    if(!IsAGangOrgID(GetPlayerOrg(playerid)) || !OrgsGrana[GetPlayerOrg(playerid)][0]) continue;
		format(string, sizeof(string), "{FF0000}[Info]:{FFFFFF} Sua gang recebeu R$%d no cofre por manter %d pixações sob seu domínio.", OrgsGrana[GetPlayerOrg(playerid)][1], OrgsGrana[GetPlayerOrg(playerid)][0]);
		SendClientMessage(playerid, SERVER_INFO, string);
		PlayersOn[GetPlayerOrg(playerid)] = true;
	}
	for(new i = 0; i < MAX_ORGS; i++)
	{
	    if(!IsAGangOrgID(i) || !OrgsGrana[i][0] || !PlayersOn[i]) continue;
		GiveOrgMoney(i, OrgsGrana[i][1]);
	}

/*	foreach(new x: Player)
	{
		for(new i = 0; i < MAX_PIX; i ++)
		{
			if(Player[x][pMember] == Pixacao[i][Dono] && Pixacao[i][Dono] != 0)
			{
				GranaPix[x] += GRANA_PIX;
				NumPix[x] ++;
			}
		}
		if(NumPix[x] > 0)
		{
			format(string, sizeof(string), "{FF0000}[Info]:{FFFFFF} Você recebeu R$%d e sua gang %dg de drogas, por manter %d pixações sob seu domínio.", GranaPix[x], NumPix[x], NumPix[x]);
			SendClientMessage(x, SERVER_INFO, string);
			GivePlayerGP(x, GranaPix[x]);
		    Player[x][pDrugs] += NumPix[x];
		}
	}*/
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	new count;
    new cV = GetOwnedVehicleID(vehicleid);

	new vehicleide = GetVehicleModel(vehicleid);
    new modok = islegalcarmod(vehicleide, componentid);

    if (!modok)
	{
        SendClientMessage(playerid, COLOR_YELLOW, "[Se fodeo]: Toma um ban básico aí.");
        BanEx(playerid, "Mods Ilegais");
        ABroadCast(0xFFFFFFFF, "Mais um trouxa banido UAHEUAEHEAUHEAUH", 1);
        return 0;
    }
    if(cV != INVALID_VEHICLE_ID)
    {
    	for(new m = 0; m < MAX_MODS; m++)
    	{
    	    if(CarInfo[cV][cMod][m] == 0)
    	    {
    	        count++;
    	        CarInfo[cV][cMod][m] = componentid;
    	        break;
    	    }
    	}
    }
    else
    {
    	for(new m = 0; m < MAX_MODS; m++)
    	{
    	    if(VehicleInfo[vehicleid][vMod][m] == 0)
    	    {
    	        count++;
    	        VehicleInfo[vehicleid][vMod][m] = componentid;
    	        break;
    	    }
    	}
    }
	if(count == 0) SendClientMessage(PlayerInVehicle(vehicleid), COLOR_RED, "Você atingiu o limite modificacões. Você pode deixar de adicionar componentes a menos que você 'Redefinir Mods'!");
//	new model = GetVehicleModel(vehicleid);

/*    switch(componentid)
	{
        case 1000:
        {
			switch(model)
			{
				case 589,492,516,404,547,489,505,405,421: return true;
			}
		}
        case 1001:
        {
			switch(model)
		  	{
     			case 496,401,518,527,415,585,546,410,603,426,436,405,580,439,550,549,420,540,529: return true;
     		}
        }
        case 1002:
        {
			switch(model)
		  	{
			  	case 496,546,517,551,418,516,404,489,505: return true;
			}
        }
        case 1003:
        {
			switch(model)
		  	{
				case 496,401,518,415,585,517,410,551,426,436,547,439,550,549,420,491,529: return true;
			}
        }
        case 1004:
        {
          	switch(model)
		  	{
			  	case 401,589,492,546,516,600,426,489,505,550,420,540,478: return true;
        	}
        }
        case 1005:
        {
          	switch(model)
		  	{
			  	case 401,518,589,492,551,600,426,489,505,550,420,478: return true;
			}
		}
        case 1006:
        {
          	switch(model)
		  	{
			  	case 496,401,518,589,585,492,546,551,418,603,600,426,436,489,505,580,550,540,529,477: return true;
        	}
        }
        case 1007,1017:
        {
          	switch(model)
		  	{
			  	case 496,422,401,518,527,415,589,585,546,517,410,516,404,603,600,436,580,439,549,540,491,529,477: return true;
        	}
        }
        case 1011:
        {
          	switch(model)
		  	{
			  	case 496,549,529: return true;
			}
		}
        case 1012:
        {
          	switch(model)
		  	{
			  	case 549,478,529: return true;
			}
        }
        case 1013:
        {
          	switch(model)
		  	{
			  	case 422,401,518,589,585,400,410,500,404,600,436,489,505,478,439: return true;
			}
        }
        case 1014:
        {
          	switch(model)
		  	{
			  	case 527,542,405,491,421: return true;
			}
        }
        case 1015:
        {
          	switch(model)
		  	{
			  	case 527,542,516: return true;
			}
        }
        case 1016:
        {
          	switch(model)
		  	{
			  	case 589,492,517,551,418,516,404,547,489,505,421: return true;
			}
        }
        case 1018:
        {
          	switch(model)
		  	{
			  	case 518,527,415,542,589,585,546,400,517,551,516,603,600,547,489,505,405,580,550,549,540,491,421,529,477: return true;
        	}
        }
        case 1019:
        {
          	switch(model)
		  	{
			  	case 496,422,401,415,542,585,546,400,517,410,551,500,516,404,603,426,436,547,489,505,405,550,549,420,540,491,421,529,477: return true;
        	}
        }
        case 1020:
        {
          	switch(model)
		  	{
			  	case 496,422,401,518,527,542,589,585,400,517,410,551,500,418,516,404,603,600,436,547,489,505,405,580,550,549,540,491,478,421,529,477: return true;
        	}
        }
        case 1021:
        {
          	switch(model)
		  	{
			  	case 422,527,542,400,410,551,500,418,516,404,426,436,547,405,420,491,478,421,477: return true;
        	}
        }
        case 1022:
        {
          	switch(model)
		  	{
			  	case 600,436,478: return true;
			}
        }
        case 1023:
        {
          	switch(model)
		  	{
			  	case 496,518,415,585,546,517,410,551,603,405,580,439,550,549,540,491,421,529: return true;
        	}
        }
        case 1024:
        {
          	switch(model)
		  	{
			  	case 589,546,400,410,500,603,489,505,540,478: return true;
			}
        }
        case 1008..1010, 1025, 1073..1087, 1096..1098:
        {
            if(IsTransfenderVehicle(model) || IsLocolowVehicle(model) || IsWAAVehicle(model)) return true;
        }
        case 1190..1193, 1134..1137:
        {
             if(model == 576) return true;
        }
        case 1186..1189, 1129..1133, 1102:
        {
             if(model == 567) return true;
        }
        case 1181..1184, 1128, 1107..1108, 1103..1105:
        {
             if(model == 536) return true;
        }
        case 1185, 1178..1180, 1122..1127, 1106, 1100..1101:
        {
             if(model == 534) return true;
        }
        case 1174..1177, 1099, 1042..1044:
        {
             if(model == 575) return true;
        }
        case 1173, 1158..1162, 1065..1072:
        {
             if(model == 559) return true;
        }
        case 1171..1172, 1146..1149, 1034..1041:
        {
             if(model == 562) return true;
        }
        case 1169..1170, 1138..1141, 1026..1033:
        {
             if(model == 560) return true;
        }
        case 1163..1168, 1088..1095:
        {
             if(model == 558) return true;
        }
        case 1154..1157, 1055..1064:
        {
             if(model == 561) return true;
        }
        case 1150..1153, 1045..1054:
        {
             if(model == 565) return true;
        }
        case 1109..1121:
        {
             if(model == 535) return true;
        }
        case 1142..1145:
        {
            switch(model)
		  	{
			  	case 401,518,542,589,585,546,517,603,439,550,549,540,491: return true;
			}
        }
    }*/
	return true;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    new cV = GetOwnedVehicleID(vehicleid);
    if(cV != INVALID_VEHICLE_ID)
    {
    	CarInfo[cV][cColor1] = color1;
    	CarInfo[cV][cColor2] = color2;
    }
    else
    {
    	VehicleInfo[vehicleid][vColor1] = color1;
    	VehicleInfo[vehicleid][vColor2] = color2;
    }
	return true;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    new cV = GetOwnedVehicleID(vehicleid);
    if(cV != INVALID_VEHICLE_ID)
        CarInfo[cV][cPaintjob] = paintjobid;
    else
        VehicleInfo[vehicleid][vPaintjob] = paintjobid;
	return true;
}

forward IsAtPayNSpray(playerid);
forward ChangeColor(playerid);
forward IsAtCandySprunk(playerid);
forward SetHP(playerid);

public SetHP(playerid)
{
    TookSprunk[playerid] = 0;
    return true;
}

public ChangeColor(playerid)
{
    TookColor[playerid] = 0;
    return true;
}

public IsAtPayNSpray(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 4, 2065.8745,-1831.3428,13.2515)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 4, 487.3143,-1739.5155,10.8310)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 4, 1025.3625,-1024.5664,31.8062)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 4, -1904.5110,284.0212,41.0469)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 4, 1974.8307,2162.2549,11.0703)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 4, 720.2000,-456.6821,16.3359)) return true;
    else return 0;
}

public IsAtCandySprunk(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 1, -2420.219, 984.578, 44.297)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -2420.180, 985.945, 44.297)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2225.203, -1153.422, 1025.906)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2576.703, -1284.430, 1061.094)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2155.906, 1606.773, 1000.055)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2209.906, 1607.195, 1000.055)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2222.203, 1606.773, 1000.055)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 495.969, -24.320, 1000.734)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 501.828, -1.430, 1000.734)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 373.828, -178.141, 1000.734)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 330.680, 178.500, 1020.070)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 331.922, 178.500, 1020.070)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 350.906, 206.086, 1008.477)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 361.563, 158.617, 1008.477)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 371.594, 178.453, 1020.070)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 374.891, 188.977, 1008.477)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2155.844, 1607.875, 1000.063)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2202.453, 1617.008, 1000.063)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2209.242, 1621.211, 1000.063)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2222.367, 1602.641, 1000.063)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 500.563, -1.367, 1000.734)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 379.039, -178.883, 1000.734)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2480.86,-1959.27,12.9609)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 1634.11,-2237.53,12.8906)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2139.52,-1161.48,23.3594)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2153.23,-1016.15,62.2344)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -1350.12,493.859,10.5859)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -2229.19,286.414,34.7031)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 1659.46,1722.86,10.2188)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2647.7,1129.66,10.2188)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2845.73,1295.05,10.7891)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 1398.84,2222.61,10.4219)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -1455.12,2591.66,55.2344)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -76.0312,1227.99,19.125)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 662.43,-552.164,15.7109)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -253.742,2599.76,62.2422)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2271.73,-76.4609,25.9609)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 1789.21,-1369.27,15.1641)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 1729.79,-1943.05,12.9453)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2060.12,-1897.64,12.9297)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 1928.73,-1772.45,12.9453)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2325.98,-1645.13,14.2109)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2352.18,-1357.16,23.7734)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 1154.73,-1460.89,15.1562)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -1350.12,492.289,10.5859)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -2118.97,-423.648,34.7266)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -2118.62,-422.414,34.7266)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -2097.27,-398.336,34.7266)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -2092.09,-490.055,34.7266)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -2063.27,-490.055,34.7266)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -2005.65,-490.055,34.7266)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -2034.46,-490.055,34.7266)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -2068.56,-398.336,34.7266)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -2039.85,-398.336,34.7266)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -2011.14,-398.336,34.7266)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -1980.79,142.664,27.0703)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2319.99,2532.85,10.2188)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 1520.15,1055.27,10.00)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2503.14,1243.7,10.2188)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 2085.77,2071.36,10.4531)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -862.828,1536.61,21.9844)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -14.7031,1175.36,18.9531)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, -253.742,2597.95,62.2422)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 201.016,-107.617,0.898438)) return true;
    else if(IsPlayerInRangeOfPoint(playerid, 1, 1277.84,372.516,18.9531)) return true;
    else return 0;
}

public Mensagens()
{
	new string[192];
	new random1 = random(sizeof(mensagens));
	format(string, sizeof(string), "%s", mensagens[random1]);
	SendClientMessageToAll(0xFF0000FF, string);
	return true;
}

public MensagensGuerra()
{
	new string[128];
	if(InGuerra == 1)
	{
		format(string, sizeof(string), "{FF0000}[Placar da Guerra]:{FFFF00} %d(FA) x %d(AlQaeda)", Guerra[GuerraPontos][0], Guerra[GuerraPontos][1]);
	}
	else if(ControleLS != 0)
	{
	    format(string, sizeof(string), "[BLS]: {FFFF00}A Organização {%s}%s {FFFF00}ainda está dominando Los Santos.", OrgsColorTags[ControleLS], OrgsNames[ControleLS]);
	}
	else
	{
	    format(string, sizeof(string), "{FF0000}[BLS]: {FFFF00}Nossa cidade ainda está em paz!");
	}
	SendClientMessageToAll(0xFF0000FF, string);

    //"Desarrombar Casa"
	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if(HouseInfo[i][hArrombada] == 1)
		{
            HouseInfo[i][hArrombada] = 0;
            HouseInfo[i][hLock] = 0;
        }
    }
	return true;
}

forward Close(gateid, Float:closex, Float:closey, Float:closez, Float:speed);
public Close(gateid, Float:closex, Float:closey, Float:closez, Float:speed)
{
	MoveDynamicObject(gateid, Float:closex, Float:closey, Float:closez, speed);
}

forward CloseEx(gateid, Float:closex, Float:closey, Float:closez, Float:speed, Float:rotx, Float:roty, Float:rotz);
public CloseEx(gateid, Float:closex, Float:closey, Float:closez, Float:speed, Float:rotx, Float:roty, Float:rotz)
{
	MoveDynamicObject(gateid, Float:closex, Float:closey, Float:closez, speed, rotx, roty, rotz);
}

stock CheckGates(newkeys, playerid)
{
//	new Float:X, Float:Y, Float:Z;


    if(newkeys == KEY_SPRINT || (IsPlayerInAnyVehicle(playerid) && newkeys == KEY_HANDBRAKE) || (IsPlayerInAnyVehicle(playerid) && newkeys == KEY_CROUCH))
	{
        new i = playerid;
/*        for(new loop = 0; loop < MAX_HOUSES; loop++)
        {
			if(HousePortao[loop])
			{
			    GetDynamicObjectPos(HousePortaoID[loop], X, Y, Z);
			    if(IsPlayerInRangeOfPoint(playerid, 15.0, X, Y, Z))
			    {
			        if(loop == 27)
					{
					    MoveDynamicObject(HousePortaoID[loop], 321.29998779, -1188.30004883, 77.00000000-10.0, 2.0);
					    SetTimerEx("Close", 5000, false, "iffff", HousePortaoID[loop], 321.29998779, -1188.30004883, 77.00000000, 2.0);
					}
			    }
			}
        } */
        if(IsPlayerInAnyVehicle(playerid) && newkeys == KEY_CROUCH)
        {
            if(PlayerToPoint(5.0, i, 57.9279, -1526.3668, 4.6909))
            {
                if(GetPlayerGP(playerid) < BizPedagioPrice)
                    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem esse dinheiro.");

                MoveDynamicObject(PortaoPedagio[0], 51.43148804, -1529.04138184, 5.03776741 - 0.05, 0.03, 0.00000000, 15.00000000, 80.00000000);
                SetTimerEx("CloseEx", 3000, false, "ifffffff", PortaoPedagio[0],  51.43148804, -1529.04138184, 5.03776741, 0.03, 0.00000000, 90.00000000, 80.00000000);

				GivePlayerGP(i, -BizPedagioPrice);
                GiveBizMoney(Biz_Pedagio, BizPedagioPrice);

                new string[155];
                format(string, 155, "~r~Pedagio Pago R$%d", BizPedagioPrice);
				GameTextForPlayer(i, string, 2000, 6);
                format(string, 155, "Pedagio Pago R$%d", BizPedagioPrice);
				SendClientMessage(i, COLOR_YELLOW, string);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
            }
            else if(PlayerToPoint(5.0, i, 44.5912, -1536.7943, 4.8906))
            {
                if(GetPlayerGP(playerid) < BizPedagioPrice)
                    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem esse dinheiro.");

                MoveDynamicObject(PortaoPedagio[1], 49.36935425, -1533.95703125, 4.93776703 - 0.05, 0.03, 0.00000000, 15.00000000, 260.00000000);
                SetTimerEx("CloseEx", 3000, false, "ifffffff", PortaoPedagio[1], 49.36935425, -1533.95703125, 4.93776703, 0.03, 0.00000000, 90.00000000, 260.00000000);

				GivePlayerGP(i, -BizPedagioPrice);
                GiveBizMoney(Biz_Pedagio, BizPedagioPrice);

                new string[155];
                format(string, 155, "~r~Pedagio Pago R$%d", BizPedagioPrice);
				GameTextForPlayer(i, string, 2000, 6);
                format(string, 155, "Pedagio Pago R$%d", BizPedagioPrice);
				SendClientMessage(i, COLOR_YELLOW, string);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
            }
        }

        //if(Player[playerid][pMember] == TEAM_PM || Player[playerid][pMember] == TEAM_PCIVIL || Player[playerid][pMember] == TEAM_PF || Player[playerid][pMember] == TEAM_FA || Player[playerid][pMember] == TEAM_PREF || Player[playerid][pMember] == TEAM_MUNICIPAL || Player[playerid][pMember] == TEAM_BOPE)
        if(IsACop(playerid))
        {
		    new Float:x,Float:y,Float:z;
		    GetPlayerPos(playerid,x,y,z);
			if(PlayerToPoint(12.0,i,1588.216,-1638.297,15.155))
			{
				MoveDynamicObject(Portao,1598.410,-1638.307,15.169,1.5);
				SetTimerEx("Close", 5000, false, "iffff", Portao, 1588.216,-1638.297,15.155, 1.5);
			}
			if(PlayerToPoint(12.0,i,-1192.0064, -1058.5029, 131.7910)) // porta treinamento
			{
				MoveDynamicObject(PortaTrein,-1192.0064, -1068.5029, 131.7910,1.5);
				SetTimerEx("Close", 5000, false, "iffff", PortaTrein, -1192.0064, -1058.5029, 131.7910, 1.5);
			}
			else if(PlayerToPoint(12.0,i,368.9174,163.0622,1013.1783) && z < 1018)
			{
				MoveDynamicObject(PortaPref1,368.9174,164.5622,1013.1783,1.5);
				SetTimerEx("Close", 5000, false, "iffff", PortaPref1, 368.9174,163.0622,1013.1783, 1.5);
			}
			else if(PlayerToPoint(5.0,i,369.2624,163.7901,1018.9876))
			{
				MoveDynamicObject(PortaPref2,369.3399,164.8623,1018.9876,1.5);
				SetTimerEx("Close", 5000, false, "iffff", PortaPref2, 369.2624,163.7901,1018.9876, 1.5);
				MoveDynamicObject(PortaPref3,369.3687,159.8054,1018.9843,1.5);
				SetTimerEx("Close", 5000, false, "iffff", PortaPref3, 369.2906,160.8021,1018.9843, 1.5);
			}
            else if(PlayerToPoint(2.0, playerid, 239.55490, 117.58360, 1003.46613) && GetPlayerVirtualWorld(playerid) == 0)
            {
                MoveDynamicObject(PortaBOPE[0], 239.55490, 117.58360 + 1.5, 1003.46613, 1.5);
                SetTimerEx("Close", 2000, false, "iffff", PortaBOPE[0], 239.55490, 117.58360, 1003.46613, 1.5);
            }
            else if(PlayerToPoint(2.0, playerid, 253.19250, 109.07550, 1003.46613) && GetPlayerVirtualWorld(playerid) == 0)
            {
                MoveDynamicObject(PortaBOPE[1], 253.19250, 109.07550 + 1.5, 1003.46613, 1.5);
                SetTimerEx("Close", 2000, false, "iffff", PortaBOPE[1], 253.19250, 109.07550, 1003.46613, 1.5);
            }
            else if(PlayerToPoint(2.0, playerid, 239.55490, 125.08360, 1003.46613) && GetPlayerVirtualWorld(playerid) == 0)
            {
                MoveDynamicObject(PortaBOPE[2], 239.55490, 125.08360 + 1.5, 1003.46613, 1.5);
                SetTimerEx("Close", 2000, false, "iffff", PortaBOPE[2], 239.55490, 125.08360, 1003.46613, 1.5);
            }
            else if(PlayerToPoint(2.0, playerid, 253.19250, 125.24360, 1003.46613) && GetPlayerVirtualWorld(playerid) == 0)
            {
                MoveDynamicObject(PortaBOPE[3], 253.19250, 125.24360 + 1.5, 1003.46613, 1.5);
                SetTimerEx("Close", 2000, false, "iffff", PortaBOPE[3], 253.19250, 125.24360, 1003.46613, 1.5);
            }
            else if(PlayerToPoint(2.0, playerid, 253.19250, 109.07550, 1003.46613) && GetPlayerVirtualWorld(playerid) == 1)
            {
                MoveDynamicObject(PortaPF[1], 253.19250, 109.07550 + 1.5, 1003.46613, 1.5);
                SetTimerEx("Close", 2000, false, "iffff", PortaPF[1], 253.19250, 109.07550, 1003.46613, 1.5);
            }
            else if(PlayerToPoint(2.0, playerid, 239.55490, 125.08360, 1003.46613) && GetPlayerVirtualWorld(playerid) == 1)
            {
                MoveDynamicObject(PortaPF[2], 239.55490, 125.08360 + 1.5, 1003.46613, 1.5);
                SetTimerEx("Close", 2000, false, "iffff", PortaPF[2], 239.55490, 125.08360, 1003.46613, 1.5);
            }
            else if(PlayerToPoint(2.0, playerid, 253.19250, 125.24360, 1003.46613) && GetPlayerVirtualWorld(playerid) == 1)
            {
                MoveDynamicObject(PortaPF[3], 253.19250, 125.24360 + 1.5, 1003.46613, 1.5);
                SetTimerEx("Close", 2000, false, "iffff", PortaPF[3], 253.19250, 125.24360, 1003.46613, 1.5);
            }
            else if(PlayerToPoint(2.0, playerid, 228.23540, 161.23970, 1003.26862))
            {
                MoveDynamicObject(PortaPC[1], 228.23540, 161.23970 + 1.5, 1003.26862, 1.5);
                SetTimerEx("Close", 2000, false, "iffff", PortaPC[1], 228.23540, 161.23970, 1003.26862, 1.5);
            }
            else if(PlayerToPoint(2.0, playerid, 231.48300, 169.84290, 1003.28027))
            {
                MoveDynamicObject(PortaPC[2], 231.48300 + 1.5, 169.84290, 1003.28027, 1.5);
                SetTimerEx("Close", 2000, false, "iffff", PortaPC[2], 231.48300, 169.84290, 1003.28027, 1.5);
            }
		}
        if(IsACop(playerid) || Player[playerid][pJob] == ADVOGADO)
        {
            if(PlayerToPoint(2.0, playerid, 239.55490, 117.58360, 1003.46613) && GetPlayerVirtualWorld(playerid) == 1)
            {
                MoveDynamicObject(PortaPF[0], 239.55490, 117.58360 + 1.5, 1003.46613, 1.5);
                SetTimerEx("Close", 2000, false, "iffff", PortaPF[0], 239.55490, 117.58360, 1003.46613, 1.5);
            }
            else if(PlayerToPoint(2.0, playerid, 228.23540, 151.23970, 1003.26862))
            {
                MoveDynamicObject(PortaPC[0], 228.23540, 151.23970 + 1.5, 1003.26862, 1.5);
                SetTimerEx("Close", 2000, false, "iffff", PortaPC[0], 228.23540, 151.23970, 1003.26862, 1.5);
            }
        }
		if(Player[playerid][pMember] == TEAM_PF)
		{
			if(PlayerToPoint(12.0,i,284.3263,-1539.7929,21.917))
			{
				MoveDynamicObject(PortaoF,283.603,-1543.500,21.009,1.5);
				SetTimerEx("Close", 5000, false, "iffff",PortaoF,283.603,-1543.500,26.1816,1.5);
			}
			else if(PlayerToPoint(12.0,i,320.3225,-1491.4619,21.966))
			{
				MoveDynamicObject(PortaoG,319.425,-1486.590,20.894,1.5);
				SetTimerEx("Close", 5000, false, "iffff",PortaoG,319.425,-1486.590,26.143,1.5);
			}
		}
        else if(GetPlayerOrg(playerid) == TEAM_BOPE)
        {
		    if(IsPlayerInRangeOfPoint(playerid, 8.0, 721.5000000, -1385.0000000, 13.5000000))
		    {
		        MoveDynamicObject(PortaoBOPE[0], 715.5000000, -1385.0000000, 13.5000000, 3.0);
		        SetTimerEx("Close", 7000, false, "dffff", PortaoBOPE[0], 721.5000000, -1385.0000000, 13.5000000, 3.0);

		        MoveDynamicObject(PortaoBOPE[1], 727.5000000,-1385.0000000,14.8000000, 3.0);
		        SetTimerEx("Close", 7000, false, "dffff", PortaoBOPE[1], 721.5000000,-1385.0000000,14.8000000, 3.0);

		        MoveDynamicObject(PortaoBOPE[2], 715.5000000,-1385.0000000,16.1000000, 3.0);
		        SetTimerEx("Close", 7000, false, "dffff", PortaoBOPE[2], 721.5000000,-1385.0000000,16.1000000, 3.0);
		    }
        }
		/*else if(GetPlayerOrg(playerid) == TEAM_HAMAS)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 8.0, 1067.40002441, 1358.19995117, 13.60000038))
		    {
		        MoveDynamicObject(PortaoHamas, 1061.4000200,1356.8000500,18.5000000, 1.5);
		        SetTimerEx("Close", 7000, false, "dffff", PortaoHamas, 1061.4000200,1356.8000500,9.5000000, 3.0);
		    }
		}*/

        // Portão casas
		if(Player[playerid][pHouseKey] == 34)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 15.0, 2747.80004883,-1178.50000000,71.19999695))
		    {
		        MoveDynamicObject(PortaoCasa34, 2747.80004883,-1178.50000000,74.19999695, 2.5);
		        SetTimerEx("Close", 5000, false, "dffff", PortaoCasa34, 2747.80004883,-1178.50000000,71.19999695, 2.5);
		    }
		}
		else if(Player[playerid][pHouseKey] == 23)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 15.0, 1009.70001221,-641.00000000,120.30000305))
		    {
		        MoveDynamicObject(PortaoCasa23, 1009.70001221,-641.00000000,110.30000305, 2.5);
		        SetTimerEx("Close", 5000, false, "dffff", PortaoCasa23, 1009.70001221,-641.00000000,120.30000305, 2.5);
		    }
		}//    CreateDynamicObject(985,-70.59999847,-1789.19995117,4.26999998,0.00000000,0.00000000,12.00000000); //object(gate_autor) (1)
        //CreateDynamicObject(985,-62.90000153,-1787.50000000,4.26999998,0.00000000,0.00000000,193.99707031); //object(gate_autor) (2)
		else if(Player[playerid][pHouseKey] == 113)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 15.0, -70.59999847,-1789.19995117,4.26999998))
		    {
		        MoveDynamicObject(PortaoCasa113_1, -70.59999847,-1789.19995117,-6.26999998, 2.5);
		        MoveDynamicObject(PortaoCasa113_2, -62.90000153,-1787.50000000,-6.26999998, 2.5);
		        SetTimerEx("Close", 5000, false, "dffff", PortaoCasa113_2, -62.90000153,-1787.50000000,4.26999998, 2.5);
		        SetTimerEx("Close", 5000, false, "dffff", PortaoCasa113_1, -70.59999847,-1789.19995117,4.26999998, 2.5);
		    }
		}

		if(Player[playerid][pMember] == TEAM_YAKUZA || Player[playerid][pLeader] == TEAM_YAKUZA)
		{
			if(PlayerToPoint(8.0,i,664.7974,-1307.4186,13.4609))
			{
				MoveDynamicObject(PortaoL,659.103760, -1309.579102, 6.232498,3.0);
				SetTimerEx("Close", 5000, false, "iffff",PortaoL,659.103760, -1309.579102, 12.727340,3.0);
			}
			if(PlayerToPoint(8.0,i,661.4077,-1228.4657,15.6664))
			{
				MoveDynamicObject(PortaoM,662.700073, -1222.286743, 8.625224,3.0);
				SetTimerEx("Close", 5000, false, "iffff",PortaoM,662.700073, -1222.286743, 15.000000,3.0);
			}
			if(PlayerToPoint(8.0,i,785.0167,-1152.6936,23.5571))
			{
				MoveDynamicObject(PortaoN,785.872986, -1158.263428, 16.330641,3.0);
				SetTimerEx("Close", 5000, false, "iffff",PortaoN,785.872986, -1158.263428, 22.776463,3.0);
			}
		}
		/*else if(Player[playerid][pMember] == TEAM_MUNICIPAL)
		{
			if(PlayerToPoint(12.0, i, -489.3417, -562.2106, 25.5234))
			{
				MoveDynamicObject(PortaGuarda[0], -489.1000100 + 5, -562.5999800, 24.5000000, 3.0);
				SetTimerEx("Close", 5000, false, "iffff", PortaGuarda[0], -489.1000100, -562.5999800, 24.5000000, 3.0);
				MoveDynamicObject(PortaGuarda[1], -489.3999900 - 5, -562.5999800, 24.5000000, 3.0);
				SetTimerEx("Close", 5000, false, "iffff", PortaGuarda[1], -489.3999900, -562.5999800, 24.5000000, 3.0);
			}
		}*/
		else if(Player[playerid][pMember] == TEAM_SANEWS)
		{
			if(PlayerToPoint(8.0,i,773.52679443359, -1330.1756591797, 12.735708236694))
			{
				MoveDynamicObject(PortaReporter,765.1337890625, -1329.9975585938, 12.572347640991,2.0);
				SetTimerEx("Close", 5000, false, "iffff",PortaReporter,773.52679443359, -1330.1756591797, 12.735708236694,2.0);
			}
		}
/*		else if(Player[playerid][pMember] == TEAM_HITMAN)
		{
		    if(PlayerToPoint(8.0,i,-36.8647, -2514.5994, 36.0320))
		    {
		        MoveDynamicObject(PortaHitmanBLS,-36.0200, -2513.0400, 32.2600,2.0, 0, 0, 305.9912109375);
		        SetTimerEx("Close", 5000, false, "iffff",PortaHitmanBLS,-36.0200, -2513.0400, 37.96001,2.0);
			}
		}*/
		/*else if(Player[playerid][pMember] == TEAM_DRIFTERS || Player[playerid][pLeader] == TEAM_DRIFTERS)
		{
			if(PlayerToPoint(8.0,i,958.0990, -1501.6966, 16.0927))
			{
				MoveDynamicObject(Portadrift1, 963.4574, -1501.9290, 16.09278,2.0);
				SetTimerEx("Close", 5000, false, "iffff",Portadrift1,958.0990, -1501.6966, 16.0927,2.0);
			}
		}*/
   		/*else if(Player[playerid][pMember] == TEAM_LOWRIDERS || Player[playerid][pLeader] == TEAM_LOWRIDERS)
		{
			if(PlayerToPoint(8.0, i, 2772.483154, -2006.139404, 13.554687))
			{
				MoveDynamicObject(Portalow,2778.4260253906, -2005.3458251953, 5.5546875,2.0);
				SetTimerEx("Close", 5000, false, "iffff",Portalow,2778.4260253906, -2005.3458251953, 12.5546875,2.0);
			}
		}*/
   		else if(Player[playerid][pMember] == TEAM_FA)
		{
			if(PlayerToPoint(12.0,i,-1465.7194,501.4144,1.0999))
			{
				MoveDynamicObject(PortaBarco,-1469.5000,500.4144,14.0000,1.5);
				SetTimerEx("Close", 10000, false, "iffff",PortaBarco,-1465.7194,501.4144,1.0999,1.5);
			}
			if(PlayerToPoint(12.0,i,-1532.0639, 493.4496, 9.7996))
			{
				MoveDynamicObject(PortaSF,-1525.9495, 494.4726, 7.8903,1.5);
				SetTimerEx("Close", 10000, false, "iffff",PortaSF,-1533.9495, 494.4726, 7.8903,1.5);
			}
			if(PlayerToPoint(8.0,i,-1445.1667,289.2140,7.2265))
			{
				MoveDynamicObject(PortaSF2, -1445.1667,283.2140,7.2265,2.0);
				SetTimerEx("Close", 5000, false, "iffff",PortaSF2, -1445.1667,289.2140,7.2265,2.0);
			}
		}
		/*else if(Player[playerid][pMember] == TEAM_ALQAEDA)
		{
			if(PlayerToPoint(8.0,i,403.9676,2476.2392,16.4890))
			{
	               MoveDynamicObject(PortaAlq, 398.4676,2476.2392,16.4890,2.0);
	               SetTimerEx("Close", 5000, false, "iffff",PortaAlq, 403.9676,2476.2392,16.4890,2.0);
			}
			if(PlayerToPoint(8.0,i,278.3422,2516.3193,17.3079))
			{
	               MoveDynamicObject(PortaAlq2, 278.3422,2512.3193,17.3079,2.0);
	               SetTimerEx("Close", 5000, false, "iffff",PortaAlq2, 278.3422,2516.3193,17.3079,2.0);
			}
		}*/
		/*else if(Player[playerid][pMember] == TEAM_KINGS)
		{
			if(PlayerToPoint(8.0,i,2184.9035,-1765.2412,13.3758))
			{
				MoveDynamicObject(PortaKings, 2175.134033, -1766.239014, 14.694445,2.0);
				SetTimerEx("Close", 5000, false, "iffff",PortaKings, 2184.872559, -1766.258423, 14.698030,2.0);
			}
		}*/
		else if(Player[playerid][pMember] == TEAM_BOPE)
		{
			if(PlayerToPoint(12.0,i,2771.0500,-2419.9607,9.600))
			{
				MoveDynamicObject(PortaoC,2771.0500,-2419.9607,3.000,1.5); //GALPAO 1
				SetTimerEx("Close", 5000, false, "iffff",PortaoC,2771.0500,-2419.9607,9.600,1.5);
			}
			if(PlayerToPoint(12.0,i,2771.0500,-2458.0896,9.600))
			{
				MoveDynamicObject(PortaoD,2771.0500,-2458.0896,3.000,1.5); //GALPAO 2
				SetTimerEx("Close", 5000, false, "iffff",PortaoD,2771.0500,-2458.0896,9.600,1.5);
			}
			if(PlayerToPoint(12.0,i,2771.0500,-2496.1295,9.600))
			{
				MoveDynamicObject(PortaoE,2771.0500,-2496.1295,3.000,1.5); //GALPAO 3
				SetTimerEx("Close", 5000, false, "iffff",PortaoE,2771.0500,-2496.1295,9.600,1.5);
			}
   		}
		else if(Player[playerid][pMember] == TEAM_PM)// || GetPlayerOrg(playerid) == TEAM_ROCAM || GetPlayerOrg(playerid) == TEAM_FT)
		{
			if(PlayerToPoint(2.0,i,241.68173218,74.36333466,1004.03906250)
            || PlayerToPoint(2.0,i,241.67047119,77.36907196,1004.03906250))
			{
               	MoveDynamicObject(PortaPM,241.6982,73.3635,1004.0390,1.5);
				SetTimerEx("Close", 5000, false, "iffff",PortaPM,241.6817,74.3633,1004.0390,1.5);
               	MoveDynamicObject(PortaPM2,241.64263916,78.31855011,1004.03906250,1.5);
				SetTimerEx("Close", 5000, false, "iffff",PortaPM2,241.67047119,77.36907196,1004.03906250,1.5);
			}
		}
/*		else if(Player[playerid][pMember] == TEAM_CV)
		{
		    if(PlayerToPoint(8.0, i, 2567.4892, -981.0471, 81.3856))
		    {
		        MoveDynamicObject(PortaoCV,2569.8667,-978.1734,80.4485,1.5);
		        SetTimerEx("Close", 5000, false, "iffff",PortaoCV,2564.1157,-984.1400,80.4485,1.5);
			}
			if(PlayerToPoint(8.0, i, 2483.9846, -970.6849, 81.4429))
			{
			    MoveDynamicObject(PortaoCV1,2484.7893,-974.1259,80.3714,1.5);
			    SetTimerEx("Close", 5000, false, "iffff",PortaoCV1,2482.6086,-965.8868,80.3714,1.5);
			}
		}   */
	}
    return 1;
}

stock IsTransfenderVehicle(model)
{
	switch(model)
	{
	    case 400,401,402,404,405,409,410,411,415,418,419,420,421,422,424,426,436,438,439,
	    442,445,451,458,466,467,474,475,477,478,479,480,489,491,492,496,500,505,506,
		507,516,517,518,527,526,529,533,540,541,542,545,546,547,549,550,551,555,575,
		579,580,585,587,589,600,602,603: return true;
	}
	return 0;
}

stock IsLocolowVehicle(model)
{
    switch(model)
    {
		case 412,534,535,536,566,567,576: return true;
	}

    return 0;
}

stock IsWAAVehicle(model)
{
    switch(model)
    {
		case 558,559,560,561,562,565: return true;
	}

    return 0;
}

forward MuteUpdate(playerid);
public MuteUpdate(playerid)
{
	if(!IsPlayerConnected(playerid)) return 0;
	if(Player[playerid][MuteTime] > 0)
	{
		Player[playerid][MuteTime] --;

		if(Player[playerid][MuteTime] == 1)
		{
            Player[playerid][MuteTime] = 0;
            GameTextForPlayer(playerid,"~y~chat ~b~liberado",2000,1);
		}

	 	SetTimerEx("MuteUpdate",1000,false,"i",playerid);
	}
	else return 0;

	return true;
}

stock IsPlayerInCar(playerid) //By Sacky
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));
		switch(vehicleclass)
		{
			case 448:return 0;
			case 461:return 0;
			case 462:return 0;
			case 463:return 0;
			case 468:return 0;
			case 521:return 0;
			case 522:return 0;
			case 523:return 0;
			case 581:return 0;
			case 586:return 0;
			case 481:return 0;
			case 509:return 0;
			case 510:return 0;
			case 430:return 0;
			case 446:return 0;
			case 452:return 0;
			case 453:return 0;
			case 454:return 0;
			case 472:return 0;
			case 473:return 0;
			case 484:return 0;
			case 493:return 0;
			case 595:return 0;
			case 417:return 0;
			case 425:return 0;
			case 447:return 0;
			case 465:return 0;
			case 469:return 0;
			case 487:return 0;
			case 488:return 0;
			case 497:return 0;
			case 501:return 0;
			case 548:return 0;
			case 563:return 0;
			case 406:return 0;
			case 444:return 0;
			case 556:return 0;
			case 557:return 0;
			case 573:return 0;
			case 460:return 0;
			case 464:return 0;
			case 476:return 0;
			case 511:return 0;
			case 512:return 0;
			case 513:return 0;
			case 519:return 0;
			case 520:return 0;
			case 539:return 0;
			case 553:return 0;
			case 577:return 0;
			case 592:return 0;
			case 593:return 0;
			case 471:return 0;
			case 596:return 0;
		}
		return true;
	}
	return 0;
}

stock GetVehicleName(modelid)
{
	return vehName[modelid - 400];
}

stock IsPlayerInPlane(playerid) //By Sacky
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));
		switch(vehicleclass)
		{
			case 460:return true;
			case 464:return true;
			case 476:return true;
			case 511:return true;
			case 512:return true;
			case 513:return true;
			case 519:return true;
			case 520:return true;
			case 539:return true;
			case 553:return true;
			case 577:return true;
			case 592:return true;
			case 593:return true;
			}
		}
	return 0;
}

stock IsPlayerInHelicopter(playerid) //By Sacky
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		new vehicleclass = GetVehicleModel(GetPlayerVehicleID(playerid));
		switch(vehicleclass)
		{
			case 417:return true;
			case 425:return true;
			case 447:return true;
			case 465:return true;
			case 469:return true;
			case 487:return true;
			case 488:return true;
			case 497:return true;
			case 501:return true;
			case 548:return true;
			case 563:return true;
		}
	}
	return 0;
}

stock CreateTextLabels()
{
	// Create3DTextLabel("Texto", cor, cordx, cordy,cordz, distancia pra ver, virtual world, 0);
	// Linha nova : \n
	// Na cord z, deve-se adicionar 1 unidade em relacao a posicao da pickup
	for(new i = 0; i < MAX_ATMS; i ++)
		Create3DTextLabel("{FFFFFF}Pressione {FF0000}'F' {FFFFFF}para acessar o caixa rápido", 0xFFFFFFFF, ATMs[i][ATMPosX], ATMs[i][ATMPosY], ATMs[i][ATMPosZ], 15, 0, 1);

    Create3DTextLabel("{FFFFFF}Pressione {FF0000}'F' {FFFFFF}para acessar o caixa", 0xFFFFFFFF, 2308.8520, -13.3233, 26.7418, 15, 0, 1);
	for(new i = 0; i < MAX_BOCAS; i++)
	    Create3DTextLabel("Boca de Fumo", COLOR_YELLOW, BocaCoords[i][0],BocaCoords[i][1],BocaCoords[i][2], 15, 0, 1);
	for(new i = 0; i < MAX_BAR; i++)
	{
		format(thestring, sizeof(thestring), "%s\n\n{FF0000}/CardapioBar", BarNome[i]);
		Create3DTextLabel(thestring, 0xFFFFFFFF, BarCoords[i][0],BarCoords[i][1],BarCoords[i][2], 30.0, 0, 1);
	}

//	Create3DTextLabel("Contrabando de Materiais.\n\n{FF0000}/Contrabando Materiais", 0xFFFFFFFF, 848.8222, -1360.2641, 13.5468, 10, 0, 1); // Materiais
	Create3DTextLabel("Use {FF0000}/Curar{FFFFFF}.", 0xFFFFFFFF, -785.9797, 500.0738, 1371.7421, 20, 0, 1); // Curar Do Restaurante
	Create3DTextLabel("Use {FF0000}/PegarMateriais{FFFFFF}.", 0xFFFFFFFF, -4481.1582, 5710.4150, 14.8167, 20, 0, 1); // Pegar Materiais Barco

 	Create3DTextLabel("{FFFFFF}Venha até aqui para trocar sua skin!\nDigite {00FFFF}/roupas{FFFFFF} para abrir a lista com imagens das skins.\nOu digite {00FFFF}/skin <ID>{FFFFFF} se preferir.", 0xFFFFFFFF, 218.2851,-98.5317,1005.2578, 20, 0, 1);// Binco
	Create3DTextLabel("Digite /curame para se curar!\n\nDigite /plano para adquirir um plano de saúde", 0xFFFFFFFF, 1173.2563,-1323.3102,16.3943, 15, 0, 1);// Hospital near Ammu
	Create3DTextLabel("Digite /curame para se curar!", 0xFFFFFFFF, 2029.5945,-1404.6426,18.2512, 15, 0, 1);// Hospital near speedway
	Create3DTextLabel("Digite '/pegar drogas' para pegar drogas \n OBS: As quantidades variam de acordo com a habilidade.", 0xFFFFFFFF, 2548.3142,-1293.8187,1045.1250, 40, 0, 1);//Buyable Drugs for Drug Dealers
	Create3DTextLabel("Bem vindo ao Departamento de Polícia, \n Digite /entrar para entrar", 0xFFFFFFFF, 1524.7883,-1677.8892,7.218750, 10, 0, true);
	//Create3DTextLabel("Bem vindo ao Corpo de Bombeiros\nF para entrar", 0xFFFFFFFF, 1032.3210,-2300.9087,13.3423, 15, 0, 1);
	Create3DTextLabel("Digite /viajar para ir até as outras cidades", 0xFFFFFFFF, 1642.3903,-2238.2710,14.4977, 40, 0, 0);
	Create3DTextLabel("Digite /viajar para ir até as outras cidades", 0xFFFFFFFF, 1673.0880,1447.8702,11.7865, 40, 0, 0);
	Create3DTextLabel("Digite /viajar para ir até as outras cidades", 0xFFFFFFFF, -1422.5396,-286.6204,15.1484, 40, 0, 0);
	Create3DTextLabel("Digite /rebite para pegar um rebite", 0xFFFFFFFF, -50.5683,-232.3341,7.7646, 15, 0, 1);
	Create3DTextLabel("Digite /luta para aprender um novo estilo de luta", 0xFFFFFFFF, 756.5177,5.5925,1001.6992, 15, 0, 1);
	Create3DTextLabel("Pressione F para ir até a garagem da DP", 0xFFFFFFFF, 246.5332,86.9715,1004.6406, 10, 0, 0);
	Create3DTextLabel("{FFFFFF}Digite {00FFFF}/pegaremprego", 0xFFFFFFFF, 362.1283,173.5610,1009.3828, 15, 0, 1);
	Create3DTextLabel("Digite /pegararma", 0xFFFFFFFF, 452.7145,-89.1509,999.5547, 10, 0, 1);
	Create3DTextLabel("{FFFFFF}Saida\n Tecle {FFFF00}'F' {FFFFFF}para sair.", 0xFFFFFFFF, 2674.3687, -610.8748, -71.6582, 15, 0, 1); //saida advogados
	AddStaticPickup(1242, 1, 2674.3687,-610.8748,-71.6582); //Saida avogados
	//Create3DTextLabel("{1E90FF}Digite {FF0000}/beber {1E90FF}para abrir o cardápio de bebidas.", 0xFFFFFFFF, 1393.4606,-1896.8706,13.53, 15, 0, 1);
    // praia
	Create3DTextLabel("{FFFFFF}Digite {00FFFF}/compraracessorios {FFFFFF}para comprar acessórios.", 0xFFFFFFFF, 204.1569,-101.3153,1005.2578, 15, 0, 1);
	Create3DTextLabel("{FFFFFF}Digite {00FFFF}/trocarskin {FFFFFF}para alterar a sua skin.", 0xFFFFFFFF, 207.3103,-100.6431,1005.2578, 15, 0, 1);
	AddStaticPickup(1242, 1, 452.7145,-89.1509,999.3000); // /PegarArma Bugado
	Create3DTextLabel("{FFFFFF}Bem vindo a Departamento de policia digite {00FFFF}/entrar", 0xFFFFFFFF, 1564.748657,-1666.576538,29.395606, 15, 0, 1);
	// @CONCESSIONARIA Create3DTextLabel("{1E90FF}Bem vindo à Wang Cars, use {FF8C00}/comprarveiculo {1E90FF}para comprar o seu", 0xFFFFFFFF, 555.9089,-1289.4904,18.2482, 15, 0, 1);
	Create3DTextLabel("{FFFFFF}Bem vindo. Aqui você pode usar {FF0000}'F' {FFFFFF}para entrar em serviço", 0xFFFFFFFF, 227.0215,73.6524,1005.0391, 5, 0, 0);
//	Create3DTextLabel("{1E90FF}Bem vindo. Aqui você pode usar {FF8C00}/batercartao {1E90FF}para entrar em serviço", 0xFFFFFFFF, 312.4371,-168.1607,1000.5938, 15, 0, 1);
	//Create3DTextLabel("{1E90FF}Bem vindo. Aqui você pode usar {FF8C00}/batercartao {1E90FF}para entrar em serviço", 0xFFFFFFFF, 240.2967,123.2390,1004.4366, 15, 0, 1);
	//Create3DTextLabel("{1E90FF}Bem vindo. Aqui você pode usar {FF8C00}/batercartao {1E90FF}para entrar em serviço", 0xFFFFFFFF, 298.0202,183.3977,1008.1719, 15, 0, 1);
	Create3DTextLabel("Bem vindo, você pode ser prostituta aqui", 0xFFFFFFFF, 1215.1304,-11.8431,1000.9220, 15, 0, 1);
	Create3DTextLabel("Use /subirh ou /descerh para ter acesso ao helicóptero", 0xFFFFFFFF, 1549.3488,-1636.6250,14.7996, 15, 0, 1);
	//Create3DTextLabel("Bem vindo,voce pode ser Vendedor de Drogas aqui \n Digite /emprego", 0xFFFFFFFF, 2166.3772,-1675.3829,16.0859, 15, 0, 1);
	//Create3DTextLabel("Digite /jornal para criar um jornal \n \n Digite /jornais para ver os jornais feitos", 0xFFFFFFFF, 356.0493,203.9216,1009.3828, 15, 0, 1);
	Create3DTextLabel("Bem vindo, você pode ser ladrão de carros aqui \n Digite /emprego", 0xFFFFFFFF, 1615.3705,-1502.8062,15.2257, 15, 0, 1);
//	Create3DTextLabel("Bem vindo, receba seus materiais aqui \n Digite '/contrabando obter' e pegue sua encomenda", 0xFFFFFFFF, 284.5255,-103.2017,1001.5229, 15, 0, 1);
	Create3DTextLabel("Bem vindo, você pode ser Jornaleiro aqui \n Digite /emprego", 0xFFFFFFFF, 362.1023,201.5996,1009.3828, 15, 0, 1);
	Create3DTextLabel("{FFFFFF}Pague aqui suas multas\n{00FFFF}/pagarmulta", 0xFFFFFFFF, 249.56, 67.87, 1003.64, 50, 0, 1);//pagar multa
	Create3DTextLabel("Digite /entrar para o circuito.", 0xFFFFFFFF, 2695.5396, -1704.4584, 11.8438, 50, 0, 1);//vaca
	Create3DTextLabel("Para sair digite /sair", 0xFFFFFFFF, 1105.1796,1529.5697,7.8212, 20, 0, 1);//vaca
	Create3DTextLabel("/cobertura", 0xFFFFFFFF, 1805.9925,-1303.5415,176.0000, 10, 0, 1);//cobertura
	Create3DTextLabel("/predio", 0xFFFFFFFF, 1795.0223,-1304.3663,133.0000, 15, 0, 1);//cobertura
 	Create3DTextLabel("Prefeitura", 0xFFFFFFFF, 1127.0536, -2036.8794, 69.8837, 25, 0, 50);
	Create3DTextLabel("Pressione F próximo ao botão para abrir o portão.", 0xFFFFFFFF, 243.628021,71.384002,1003.640625, 25, 0, 50); //tunar
	Create3DTextLabel("/tunar", 0xFFFFFFFF, 343.8566,-1809.3798,4.5179, 25, 0, 50); //tunar
	Create3DTextLabel("/pintar", 0xFFFFFFFF, 343.8566,-1809.3798,5.0179, 25, 0, 50); //pintar
	Create3DTextLabel("/pintura", 0xFFFFFFFF, 343.8566,-1809.3798,5.5179, 25, 0, 50); //pintura
	Create3DTextLabel("Saída", 0xFFFFFFFF, 1062.0598,2077.5920,10.8203, 25, 0, 50);// fabrica
	Create3DTextLabel("Saída", 0xFFFFFFFF, 1091.7177,2121.4656,15.3504, 25, 0, 50);// fabrica
	Create3DTextLabel("Saída", 0xFFFFFFFF, 2576.9580,-1289.8850,1044.1250, 25, 0, 50);// crack
	Create3DTextLabel("Delegacia de Policia", 0xFFFFFFFF, 1553.6526,-1675.6404,16.1953, 25, 0, 50);
	Create3DTextLabel("Saída", 0xFFFFFFFF, 247.0161,63.4486,1003.6406, 25, 0, 50);// dp
	Create3DTextLabel("Vendedor de Drogas\n/emprego", 0xFFFFFFFF, 2568.6938,-1296.7518,1044.1250, 25, 0, 50);// vendedor drogas
	Create3DTextLabel("Saída", 0xFFFFFFFF, 387.7342,2324.3560,1889.5764, 25, 0, 50);// igreja saida
	Create3DTextLabel("Saída", 0xFFFFFFFF, 389.1172,173.7952,1008.3828, 25, 0, 50);// pref
	Create3DTextLabel("Fichas", 0xFFFFFFFF, 256.7864,66.0127,1003.6406, 25, 0, 50);// fichas
	Create3DTextLabel("Limpar", 0xFFFFFFFF, 253.5105,68.8044,1003.6406, 25, 0, 50);//limpar DP
    Create3DTextLabel("Saída", 0xFFFFFFFF, 623.7094,-566.7054,26.1432, 25, 0, 50);//Saida heli
    Create3DTextLabel("Saída", 0xFFFFFFFF, 834.6631,7.6019,1004.1870, 25, 0, 50);//Saida lot
    Create3DTextLabel("Saída", 0xFFFFFFFF, 965.2943,2107.9243,1011.0303, 25, 0, 50);//Saida cat
    Create3DTextLabel("Saída", 0xFFFFFFFF, -229.2932,1401.1512,27.7656, 25, 0, 50);//jeff
	Create3DTextLabel("Saída", 0xFFFFFFFF,  -100.2626,-24.6579,1000.7188, 25, 0, 50);//sair sex
	Create3DTextLabel("Saída", 0xFFFFFFFF,  1133.2062,-15.3906,1000.6797, 25, 0, 50);//sair ggc
	Create3DTextLabel("Saída", 0xFFFFFFFF,  422.5723,2536.4336,10.0000, 25, 0, 50);//sair cv
	Create3DTextLabel("Saída", 0xFFFFFFFF,  2233.9465,1714.0837,1012.3369, 25, 0, 50);//sair pcc
	Create3DTextLabel("Saída", 0xFFFFFFFF,  2576.4312,-1300.4425,1060.9844, 25, 0, 50);//sair cassino
//	Create3DTextLabel("Saída", 0xFFFFFFFF,  1298.9878,-795.9027,1084.0078, 25, 0, 50);//sair Russa
	Create3DTextLabel("Saída", 0xFFFFFFFF,  204.3176,-168.1924,1000.9342, 25, 0, 50);//sair roupas
	Create3DTextLabel("Saída", 0xFFFFFFFF, -2636.7454,1402.7491,906.4609, 25, 0, 50);//sair Pimp
	Create3DTextLabel("Saída", 0xFFFFFFFF, 316.3909,-170.0306,999.5938, 25, 0, 50);//sair FA
	Create3DTextLabel("Saída", 0xFFFFFFFF, 318.2870,1114.9490,1083.8828, 25, 0, 50);//sair HQ ballas
	Create3DTextLabel("Saída", 0xFFFFFFFF, 1726.9360,-1638.0266,20.2188, 25, 0, 50);//sair condominio
	Create3DTextLabel("Saída", 0xFFFFFFFF, 1700.7046,-1667.8894,20.2188, 25, 0, 1);//sair condominio
	Create3DTextLabel("Saída", 0xFFFFFFFF, 2352.7756,-1180.9142,1027.9766, 25, 0, 50);//sair HQ aztecas
	Create3DTextLabel("Saída", 0xFFFFFFFF, 2495.9431,-1692.0835,1014.7422, 25, 0, 50);//sair HQ Grove
	Create3DTextLabel("Saída", 0xFFFFFFFF, -2158.6392,642.9149,1052.3750, 25, 0, 50);//sair HQ Yakuza
	Create3DTextLabel("Saída", 0xFFFFFFFF, 366.5605,197.1666,1008.3828, 25, 0, 50);//sair HQ REPORTER
	Create3DTextLabel("Celas", 0xFFFFFFFF, 267.0894,77.6527,1001.0391, 25, 0, 50);//sair DP garagem
	Create3DTextLabel("Ladrao de Carros\n/emprego", 0xFFFFFFFF, 1615.3705,-1502.8062,14.2257, 25, 0, 50);//Desmanchecaros
	Create3DTextLabel("Jornaleiro\n/emprego", 0xFFFFFFFF, 362.1023,201.5996,1008.3828, 25, 0, 50);//Jornaleiro
	//Create3DTextLabel("Anuncios Aqui", 0xFFFFFFFF, 356.6006,209.0214,1008.3828, 25, 0, 50);//Lugar de fazer /an
	Create3DTextLabel("Casamento\n/casar", 0xFFFFFFFF, 369.0977,2324.0381,1890.6047, 25, 0, 50);//Lugar de casar
	Create3DTextLabel("/disfarce <id> para pegar um disfarce", 0xFFFFFFFF, -689.948181, 942.725524, 13.632812, 25, 0, true);//DISFARCE HITMAN BLS
	//Create3DTextLabel("/disfarce <id> para pegar um disfarce", 0xFFFFFFFF, 2294.7925, 2459.7183, 10.8203, 25, 0, 50);//DISFARCE PCIVIL BLS
	Create3DTextLabel("Digite {FF0000}/pegararma", 0xFFFFFFFF, -689.948181, 942.725524, 14.032812, 25, 0, 50);//HITMAN
	AddStaticPickup(1242, 1, -689.948181, 942.725524, 13.632812);
	Create3DTextLabel("Digite {FF0000}/PegarArma\n{FFFFFF}ou {FF0000}/FazerDinamite", 0xFFFFFFFF, 321.9505,1118.5170,1083.8828, 25, 0, 50);//BALLAS
	AddStaticPickup(1239, 1, 321.9505,1118.5170,1083.8628);
    Create3DTextLabel("Digite {FF0000}/PegarArma\n{FFFFFF}ou {FF0000}/FazerDinamite", 0xFFFFFFFF, 2498.0517,-1698.6381,1014.7421, 25, 1, 50);//GROOVE
    AddStaticPickup(1239, 1, 2498.0517,-1698.6381,1014.7221, 1);
    Create3DTextLabel("Digite {FF0000}/PegarArma\n{FFFFFF}ou {FF0000}/FazerDinamite", 0xFFFFFFFF, 1117.5264,0.5784,1000.7054, 25, 0, 50);//LOWRIDERS
    AddStaticPickup(1239, 1, 1117.5264,0.5784,1000.6854);
    Create3DTextLabel("Digite {FF0000}/PegarArma\n{FFFFFF}ou {FF0000}/FazerDinamite", 0xFFFFFFFF, 2805.5715,-1170.9835,1025.5703, 25, 1, 50);//VAGOS
    AddStaticPickup(1239, 1, 2805.5715,-1170.9835,1025.5503, 1);
    Create3DTextLabel("Digite {FF0000}/PegarArma\n{FFFFFF}ou {FF0000}/FazerDinamite", 0xFFFFFFFF, 503.3531,-75.3996,998.7650, 25, 0, 50);//BIKERS
    AddStaticPickup(1239, 1, 503.3531,-75.3996,998.7450);
    Create3DTextLabel("Digite {FF0000}/PegarArma\n{FFFFFF}ou {FF0000}/FazerDinamite", 0xFFFFFFFF, 503.3531,-75.3996,998.7650, 25, 1, 50);//ANGELS
    AddStaticPickup(1239, 1, 503.3531,-75.3996,998.7450, 1);
    Create3DTextLabel("Digite {FF0000}/PegarArma\n{FFFFFF}ou {FF0000}/FazerDinamite", 0xFFFFFFFF, 2805.5715,-1170.9835,1025.5703, 25, 0, 50);//AZTECAS
    AddStaticPickup(1239, 1, 2805.5715,-1170.9835,1025.5503);
    Create3DTextLabel("Digite {FF0000}/PegarArma\n{FFFFFF}ou {FF0000}/FazerDinamite", 0xFFFFFFFF, -2162.1049,646.9216,1057.5860, 25, 0, 50);//Yakuza
    AddStaticPickup(1239, 1, -2162.1049,646.9216,1057.5660);
    Create3DTextLabel("Digite {FF0000}/PegarArma\n{FFFFFF}ou {FF0000}/FazerDinamite", 0xFFFFFFFF, -222.3987,1411.1451,27.7734, 25, 0, 50);//DRIFTERS
    AddStaticPickup(1239, 1, -222.3987,1411.1451,27.7534);
    Create3DTextLabel("Digite {FF0000}/PegarArma\n{FFFFFF}ou {FF0000}/FazerDinamite", 0xFFFFFFFF, 417.1714,2534.9667,10.0000, 25, 0, 50);//CV
    AddStaticPickup(1239, 1, 417.1714,2534.9667,10.0800);
    Create3DTextLabel("Digite {FF0000}/PegarArma\n{FFFFFF}ou {FF0000}/FazerDinamite", 0xFFFFFFFF, 2553.5957,-1291.4465,1060.9843, 25, 0, 50);//PCC
    AddStaticPickup(1239, 1, 2553.5957,-1291.4465,1060.9643);
    Create3DTextLabel("Digite {FF0000}/PegarArma\n{FFFFFF}ou {FF0000}/FazerDinamite", 0xFFFFFFFF, 439.0771,-18.6395,1001.1328, 25, 0, 50);//KINGS
    AddStaticPickup(1239, 1, 439.0771,-18.6395,1001.1128);
    Create3DTextLabel("Digite {FF0000}/PegarArma\n{FFFFFF}ou {FF0000}/FazerDinamite\n{FFFFFF}Use {FF0000}/disfarce <id> {FFFFFF}para pegar um disfarce", 0xFFFFFFFF, 146.4011,2546.5224,17.9191, 25, 0, 50);//AL-QAEDA
    AddStaticPickup(1239, 1, 146.4011,2546.5224,17.8991);
    Create3DTextLabel("Digite {FF0000}/PegarArma\n{FFFFFF}ou {FF0000}/FazerDinamite", 0xFFFFFFFF, 1267.0629, -786.8563, 1084.0148, 25, 0, true);//MAFIA RUSSA
    AddStaticPickup(1239, 1, 1267.0629, -786.8563, 1084.0148, 0);
    /*Create3DTextLabel("Digite {FF0000}/PegarArma\n{FFFFFF}ou {FF0000}/FazerDinamite\n{FFFFFF}Use {FF0000}/disfarce <id> {FFFFFF}para pegar um disfarce", 0xFFFFFFFF, 1084.5673, 1297.5679, 10.8203, 25, 0, 50);//HAMAS
    AddStaticPickup(1239, 1, 1084.5673, 1297.5679, 10.8203);*/

    Create3DTextLabel("{FFFFFF}Bem vindo ao\n{00FFFF}Estacionamento Público.", 0xFFFFFFFF, 1808.6655,-1723.0306,13.5366, 20, 0, 0);
    Create3DTextLabel("{FFFFFF}Estacionamento Público\n{00FFFF}ENTRADA.", 0xFFFFFFFF, 1760.9188,-1700.4832,13.4270, 20, 0, 0);
    Create3DTextLabel("{FFFFFF}Estacionamento Público\n{00FFFF}SAÍDA.", 0xFFFFFFFF, 1761.3939,-1691.8328,13.4137, 20, 0, 0);
    Create3DTextLabel("{FFFFFF}Bem vindo ao\n{00FFFF}Estacionamento Público.", 0xFFFFFFFF, 973.4659,-1102.0347,23.9063, 20, 0, 0);

    Create3DTextLabel("{00FFFF}Showroom B - Concessionária\n{FFFFFF}Pressione 'F' para entrar", 0xFFFFFFFF, 1746.3688, -1107.4821, 24.0781, 40, 0, 0);
    Create3DTextLabel("{00FFFF}Showroom C - Concessionária\n{FFFFFF}Pressione 'F' para entrar", 0xFFFFFFFF, 1763.5934, -1107.4222, 24.0781, 40, 0, 0);
    Create3DTextLabel("{00FFFF}Showroom A - Concessionária\n{FFFFFF}Pressione 'F' para entrar", 0xFFFFFFFF, 1712.8915, -1107.4153, 24.0781, 40, 0, 0);
    Create3DTextLabel("{00FFFF}Showroom D - Concessionária\n{FFFFFF}Pressione 'F' para entrar", 0xFFFFFFFF, 1797.7703, -1107.4344, 24.0781, 40, 0, 0);

    //Plantação
/*    for(new i = 0; i < sizeof(Plantacao); i++)
    {
        format(thestring, sizeof(thestring), "%s:\n{FF0000}/Roubar", Rob[i][LocName]);
        AddInfoPickup(1239, Rob[i][CoordX], Rob[i][CoordY], Rob[i][CoordZ], thestring, 0xFFFFFFFF, Rob[i][RouboVW]);
    } */

	//Outros
	AddInfoPickup(1239, 1745.5720, -1456.8271, 13.5318, "Detran:\n{FF0000}/Emplacar", 0xFFFFFFFF); // /DesbugarDetran{FFFFFF})"
    AddInfoPickup(1239, 1568.0610, -1896.8332, 13.5605, "Pizzaria:\n{FF0000}/Pizzaria", 0xFFFFFFFF);
    AddInfoPickup(1241, 1465.2401, -1050.9406, 24.0156, "Farmácia:\n{FF0000}/Remedios", 0xFFFFFFFF);
    AddInfoPickup(1239, 211.62220, 1811.95650, 21.8594, "Monitor:\n{FF0000}/Camera Bangu", 0xFFFFFFFF);
    AddInfoPickup(1239, 308.07620, -140.61480, 999.601, "Emprego de Vendedor de Armas:\n{FF0000}/Emprego", 0xFFFFFFFF);

    //Ammu Empresa
    AddInfoPickup(1239, 296.8856, -111.2499, 1001.5156, "Use {00FFFF}/Sair", 0xFF8C00FF);
    AddInfoPickup(1239, 285.9286, -85.21568, 1001.5156, "Use {00FFFF}/Sair", 0xFF8C00FF);
    AddInfoPickup(1239, 295.5867, -80.42690, 1001.5156, "Loja de Armas:\n{FF0000}/ComprarArma", 0xFFFFFFFF);
    AddInfoPickup(1239, 290.1323, -109.2387, 1001.5156, "Loja de Armas:\n{FF0000}/ComprarArma", 0xFFFFFFFF);

    //Máfia Russa
    AddInfoPickup(1239, 915.83430, -917.7040, 42.601500, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 1279.4471, -789.2729, 1084.0078, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF, 0);
    AddInfoPickup(1239, 1252.4471, -789.2729, 1084.0078, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF, 0);
    AddInfoPickup(1239, 1239.4416, -812.3161, 1084.0078, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF, 0);

    //BIKERS
    AddInfoPickup(1239, 681.64590, -473.3458, 16.5362000, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 501.89800, -67.56290, 998.757800, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF);

    //Angels
    AddInfoPickup(1239, 2310.0471, -1643.4968, 14.827000, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 501.89800, -67.562900, 998.75780, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF, 1);

    //Vagos
    AddInfoPickup(1239, 2808.0278, -1176.4579, 25.377700, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 2807.6198, -1174.1999, 1025.5703, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF, 1);

    //Auto-Escola
    AddInfoPickup(1239, 952.55830, -909.3518, 45.7656000, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 1494.4216, 1303.9289, 1093.28900, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF);
    AddInfoPickup(1239, 1491.0194, 1305.7502, 1093.29630, "Auto-Escola:\n{FF0000}/AutoEscola", 0xFFFFFFFF);

    //Ammu
    AddInfoPickup(1239, 1368.1035, -1279.8251, 13.546900, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 315.75720, -143.13860, 999.60150, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF);
    AddInfoPickup(1239, 306.41930, -141.82890, 1004.0547, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 303.60680, -141.90460, 1004.0625, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF);
    AddInfoPickup(1239, 302.60040, -134.87320, 1004.0625, "Ammu-Nation:\n{FF0000}/TiroAoAlvo", 0xFFFFFFFF);

    //Bares
    AddInfoPickup(1239, 1220.11590, -1420.4179, 13.249400, "Bar:\n{FF0000}/Beber", 0xFFFFFFFF);
    AddInfoPickup(1239, 1096.84520, -1232.9197, 15.820300, "Bar:\n{FF0000}/Beber", 0xFFFFFFFF);
    AddInfoPickup(1239, 499.731700, -20.670600, 1000.6796, "Bar:\n{FF0000}/Beber", 0xFFFFFFFF);
    AddInfoPickup(1239, 2187.66550, 1603.64720, 1005.0625, "Bar:\n{FF0000}/Beber", 0xFFFFFFFF);
    AddInfoPickup(1239, 1215.18930, -12.933300, 1000.9218, "Bar:\n{FF0000}/Beber", 0xFFFFFFFF);
    AddInfoPickup(1239, -2659.0961, 1417.17740, 906.27340, "Bar:\n{FF0000}/Beber", 0xFFFFFFFF);
    AddInfoPickup(1239, 2862.26200, -1891.8096, 10.934200, "Bar:\n{FF0000}/Beber", 0xFFFFFFFF);
    AddInfoPickup(1239, 2856.22070, -1885.8684, 10.935900, "Bar:\n{FF0000}/Beber", 0xFFFFFFFF);
    AddInfoPickup(1239, 2850.15450, -1892.1344, 10.923400, "Bar:\n{FF0000}/Beber", 0xFFFFFFFF);
    AddInfoPickup(1239, 2856.19780, -1897.9268, 10.929800, "Bar:\n{FF0000}/Beber", 0xFFFFFFFF);
    AddInfoPickup(1239, 358.276400, -1749.8837, 5.6906000, "Bar:\n{FF0000}/Beber", 0xFFFFFFFF);
    AddInfoPickup(1239, 370.5042, -1690.3040, 14.2927,"Bar:\n{FF0000}/Beber", 0xFFFFFFFF);

    //Corridas
    for(new i = 0; i < MAX_RACEGZ; i++)
        AddInfoPickup(1239, RacePickupPos[i][0], RacePickupPos[i][1], RacePickupPos[i][2], "Corrida pela GangZone:\n{FF0000}/ChamarCorrida\n/AceitarCorrida", 0xFFFFFFFF);

    //Roubos
    for(new i = 1; i < MAX_ROBS; i++)
    {
        format(thestring, sizeof(thestring), "%s:\n{FF0000}/Roubar", Rob[i][LocName]);
        AddInfoPickup(1239, Rob[i][CoordX], Rob[i][CoordY], Rob[i][CoordZ], thestring, 0xFFFFFFFF, Rob[i][RouboVW]);
    }
    AddInfoPickup(1239, 2144.1770, 1626.5814, 993.6882, "Porta:\n{FF0000}/PlantarBomba", 0xFFFFFFFF);

    //Banco
    AddInfoPickup(1239, 1462.3992, -1011.6098, 26.843700, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 2305.2165, -16.132400, 26.742100, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF);
    AddInfoPickup(1239, 2315.5764, -0.3131000, 26.742100, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 2528.4375, -1293.9272, 1031.4218, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF);
    AddInfoPickup(1239, 2541.8823, -1304.0325, 1025.0703, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 2144.1704, 1628.44950, 993.57610, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF, 1);

    //Bombeiros
    AddInfoPickup(1239, 1034.9765, -2305.8129, 13.34230, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 322.16260, 302.362500, 999.1484, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF);

    AddInfoPickup(1239, 320.6506, 309.4522, 999.1484, "Pressione {FF0000}'F'{FFFFFF} para Bater Cartão", 0xFFFFFFFF);

    //24-7 Spawn
    AddInfoPickup(1239, 1832.6463, -1842.5885, 13.578100, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, -27.35410, -29.693300, 1003.5572, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF);
    AddInfoPickup(1239, -30.92730, -28.232300, 1003.5572, "24-7:\n{FF0000}/Comprar", 0xFFFFFFFF);

    //24-7 DP
    AddInfoPickup(1239, 1352.2979, -1758.2746, 13.50780, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, -27.41170, -57.362100, 1003.5468, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF);
    AddInfoPickup(1239, -23.30760, -54.843100, 1003.5468, "24-7:\n{FF0000}/Comprar", 0xFFFFFFFF);

    //24-7 Norte
    AddInfoPickup(1239, 1315.598, -898.9420, 39.578100, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, -25.9887, -140.2994, 1003.5468, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF);
    AddInfoPickup(1239, -22.1435, -138.1402, 1003.5468, "24-7:\n{FF0000}/Comprar", 0xFFFFFFFF);

    //24-7 perto da Cluckin' Bell
    AddInfoPickup(1239, 2423.5771, -1923.2297, 13.5468, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, -27.41170, -57.3621, 1003.5468, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF, 1);
    AddInfoPickup(1239, -23.30760, -54.8431, 1003.5468, "24-7:\n{FF0000}/Comprar", 0xFFFFFFFF, 1);

    //24-7 Pier
    AddInfoPickup(1239, 374.96340, -2055.7504, 8.01560, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, -25.8902, -186.5804, 1003.5468, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF);
    AddInfoPickup(1239, -29.0461, -184.9516, 1003.5468, "24-7:\n{FF0000}/Comprar", 0xFFFFFFFF);

    //Pedagio
    AddInfoPickup(1239, 57.9279, -1526.3668, 4.6909, "Pressione {FF0000}'H'{FFFFFF} para Pagar o Pedagio", 0xFFFFFFFF);
    AddInfoPickup(1239, 44.5912, -1536.7943, 4.8906, "Pressione {FF0000}'H'{FFFFFF} para Pagar o Pedagio", 0xFFFFFFFF);

    AddInfoPickup(1239, 55.6816, -1531.2508, 5.2470, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 53.6119, -1530.9697, 5.2686, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF);

    //Policia Militar
    AddInfoPickup(1239, 231.3648, 75.93870, 1005.0391, "Monitor:\n{FF0000}/Camera{FFFFFF} e{FF0000} /Radar", 0xFFFFFFFF);

    //BOPE
    AddInfoPickup(1239, 720.6233, -1339.6533, 13.8400, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 246.4869, 107.7615, 1003.2188, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF);

    AddInfoPickup(1239, 240.2817, 123.2749, 1003.2576, "Pressione {FF0000}'F'{FFFFFF} para Bater Cartão", 0xFFFFFFFF);
    AddInfoPickup(1239, 237.2128, 123.2008, 1003.2187, "Fichas:\n{FF0000}/Ficha{FFFFFF} e{FF0000} /Limpar", 0xFFFFFFFF);
    AddInfoPickup(1239, 234.4819, 111.3183, 1003.2257, "Monitor:\n{FF0000}/Camera{FFFFFF} e{FF0000} /Radar", 0xFFFFFFFF);

    AddInfoPickup(1239, 223.4776, 113.9726, 999.0156 , "Celas:\n{FF0000}/Deter", 0xFFFFFFFF);

    //FBI
    AddInfoPickup(1239, 327.2900, -1513.4558, 36.0325, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 316.1740, -1513.7009, 24.9218, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 313.6436, -1505.7624, 76.9545, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 246.4869, 107.7615, 1003.2188, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF, 1);
    AddInfoPickup(1239, 225.6330, 124.2645, 999.01560, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF, 1);
    AddInfoPickup(1239, 238.6568, 114.9122, 1010.2187, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF, 1);

    AddInfoPickup(1239, 240.2817, 123.2749, 1003.2576, "Pressione {FF0000}'F'{FFFFFF} para Bater Cartão", 0xFFFFFFFF, 1);
    AddInfoPickup(1239, 237.2128, 123.2008, 1003.2187, "Fichas:\n{FF0000}/Ficha{FFFFFF} e{FF0000} /Limpar", 0xFFFFFFFF, 1);
    AddInfoPickup(1239, 234.4819, 111.3183, 1003.2257, "Monitor:\n{FF0000}/Camera{FFFFFF} e{FF0000} /Radar", 0xFFFFFFFF, 1);

    AddInfoPickup(1239, 223.4776, 113.9726, 999.0156 , "Celas:\n{FF0000}/Deter", 0xFFFFFFFF, 1);

    //Policia Civil
    /*AddInfoPickup(1239, 2286.9734,2431.6416,10.8203, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 2337.1655,2458.6545,14.9688, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 2296.6287,2451.5303,10.8203, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 288.7672, 167.0111, 1007.1719, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF);
    AddInfoPickup(1239, 238.7007, 139.3007, 1003.0234, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF);
    AddInfoPickup(1239, 188.5492, 179.3079, 1003.0234, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF);
    AddInfoPickup(1239, 2296.7625,2468.7229,10.8203, "Pressione {FF0000}'F'{FFFFFF} para Subir", 0xFFFFFFFF);
    AddInfoPickup(1239, 2278.6238,2444.6726,46.9766, "Pressione {FF0000}'F'{FFFFFF} para Descer", 0xFFFFFFFF);

    AddInfoPickup(1239, 220.7165, 176.6567, 1003.0253, "Pressione {FF0000}'F'{FFFFFF} para Bater Cartão", 0xFFFFFFFF);
    AddInfoPickup(1239, 199.0265, 168.3035, 1003.0234, "Fichas:\n{FF0000}/Ficha{FFFFFF} e{FF0000} /Limpar\n\n{FFFFFF}Monitor:\n{FF0000}/Camera{FFFFFF} e{FF0000} /Radar", 0xFFFFFFFF);*/
    //AddInfoPickup(1239, 198.0737, 178.3433, 1003.0234, "Celas:\n{FF0000}/Deter", 0xFFFFFFFF);

    /*Policia Rodoviaria Federal
    AddInfoPickup(1239, -560.6564, -514.8737, 26.1058, "Pressione {FF0000}'F'{FFFFFF} para Entrar", 0xFFFFFFFF);
    AddInfoPickup(1239, 322.1626, 302.3625, 999.1484, "Pressione {FF0000}'F'{FFFFFF} para Sair", 0xFFFFFFFF, 1);

    AddInfoPickup(1239, 320.6506, 309.4522, 999.1484, "Pressione {FF0000}'F'{FFFFFF} para Bater Cartão", 0xFFFFFFFF, 1);
    AddInfoPickup(1239, 326.7650, 307.2324, 999.1484, "Fichas:\n{FF0000}/Ficha{FFFFFF} e {FF0000}/Limpar", 0xFFFFFFFF, 1);
    AddInfoPickup(1239, 325.2403, 305.0568, 999.1484, "Lista de Veículos Apreendidos:\n{FF0000}/Apreendidos", 0xFFFFFFFF, 1);*/

    //Forças Armadas
    AddInfoPickup(1239, 318.5724, -164.8772, 999.5937, "Pressione {FF0000}'F'{FFFFFF} para Bater Cartão", 0xFFFFFFFF);
    AddInfoPickup(1239, 311.8334, -168.7328, 999.5937, "Fichas:\n{FF0000}/Ficha{FFFFFF} e{FF0000} /Limpar", 0xFFFFFFFF);
    AddInfoPickup(1239, 313.4121, -159.6292, 999.5937, "Monitor:\n{FF0000}/Camera{FFFFFF} ou{FF0000} /Camera Bangu{FFFFFF}\ne{FF0000} /Radar", 0xFFFFFFFF);
}

ReturnOrgsCommands(playerid)
{
	new string[1024];
	if(Player[playerid][pMember] == TEAM_PM)
/*    || GetPlayerOrg(playerid) == TEAM_ROCAM
    || GetPlayerOrg(playerid) == TEAM_FT)*/
	{
		format(string,1024, "%s[%s] /trocarskin (/r)adio (/d)epartmentos (/m)egafone (/su)speito /ficha /rf /rcr /camburao\n", string, OrgsNames[GetPlayerOrg(playerid)]);
		format(string,1024, "%s[%s] /revistar /apreender /multar (/gov)erno (fechar) /arrombarporta /deter /limpar\n", string, OrgsNames[GetPlayerOrg(playerid)]);
		format(string,1024, "%s[%s] /soltarrefem /procurados /algemar /imobilizar /radar /arrombarporta /minhaorg /camera\n", string, OrgsNames[GetPlayerOrg(playerid)]);
    }
    /*else if(Player[playerid][pMember] == TEAM_PCIVIL)
    {
        format(string,1024, "%s[Policia Civil] /trocarskin (/r)adio (/d)epartmentos (/m)egafone (/su)speito /ficha /rf /rcr /camburao\n", string);
		format(string,1024, "%s[Policia Civil] /revistar /apreender /multar (/gov)erno (fechar) /arrombarporta /deter /limpar\n", string);
		format(string,1024, "%s[Policia Civil] /soltarrefem /procurados /algemar /imobilizar /radar /arrombarporta /minhaorg /camera\n", string);
	}*/
	else if(Player[playerid][pMember] == TEAM_PF)
	{
		format(string,1024, "%s[Polícia Federal] /trocarskin (/r)adio (/d)epartmentos (/m)egafone (/su)speito /ficha /camburao\n", string);
		format(string,1024, "%s[Polícia Federal] /revistar /apreender /multar (/gov)erno /arrombarporta /minhaorg /camera\n", string);
		format(string,1024, "%s[Polícia Federal] /soltarrefem /procurados /algemar /imobilizar /radar /arrombarporta /deter /limpar\n", string);
   	}
	else if(Player[playerid][pMember] == TEAM_FA)
	{
		format(string,1024, "%s[Forcas Armadas] /trocarskin (/r)adio (/d)epartmentos (/m)egafone (/su)speito /ficha /camera /camburao\n", string);
		format(string,1024, "%s[Forcas Armadas] /subirhydra /descerhydra /revistar /apreender /multar (/gov)erno /arrombarporta /minhaorg\n", string);
		format(string,1024, "%s[Forcas Armadas] /subircarrier /descercarrier /soltarrefem /procurados /algemar /imobilizar /radar /deter /limpar\n", string);
    }
    else if(Player[playerid][pMember] == TEAM_BOMBE)
	{
       	format(string,1024, "%s[Bombeiros] /trocarskin (/r)adio /gov /minhaorg\n", string);
	}
	else if(Player[playerid][pMember] == TEAM_BALLAS)
	{
       	format(string,1024, "%s[Front Yard Ballas] /gf /rgf /plantarbomba /roubar /trocarskin /tacarfogo /minhaorg /pixinfo\n", string);
	}
	else if(Player[playerid][pMember] == TEAM_GROOVE)
	{
       	format(string,1024, "%s[Grove Street Families] /gf /rgf /plantarbomba /roubar /trocarskin /tacarfogo /minhaorg /pixinfo\n", string);
	}
	else if(GetPlayerOrg(playerid) == TEAM_BIKERS || GetPlayerOrg(playerid) == TEAM_ANGELS)
	{
       	format(string,1024, "%s[%s] /gf /rgf /plantarbomba /roubar /trocarskin /tacarfogo /minhaorg /pixinfo /chamarcorrida /aceitarcorrida\n", string, OrgsNames[GetPlayerOrg(playerid)]);
	}
	else if(Player[playerid][pMember] == TEAM_PREF)
	{
       	format(string,1024, "%s[Prefeito] /trocarskin /d /r /minhaorg\n", string);
	}
	else if(Player[playerid][pMember] == TEAM_HITMAN)
	{
       	format(string,1024, "%s[Hitman] /trocarskin /contrato /laptop /minhaorg\n", string);
	}
	else if(Player[playerid][pMember] == TEAM_SANEWS)
	{
		format(string,1024, "%s[San News] /trocarskin /noticias /aovivo /jornal /jornais /aovivo /minhaorg\n", string);
	}
	/*else if(Player[playerid][pMember] == TEAM_LOWRIDERS)
	{
       	format(string,1024, "%s[Lowriders]  /gf /rgf /plantarbomba /roubar /trocarskin /tacarfogo /minhaorg /pixinfo\n", string);
	}*/
	else if(Player[playerid][pMember] == TEAM_VAGOS)
	{
       	format(string,1024, "%s[Los Santos Vagos] /gf /rgf /plantarbomba /roubar /trocarskin /tacarfogo /minhaorg /pixinfo\n", string);
	}
	/*else if(Player[playerid][pMember] == TEAM_MUNICIPAL)
	{
		format(string,1024, "%s[Polícia Rodoviária] /trocarskin (/r)adio (/d)epartmentos (/m)egafone (/su)speito /bafometro /ficha /abrir(fechar)porta dp\n", string);
		format(string,1024, "%s[Polícia Rodoviária] /multados /minhaorg /cone /rcone /rtcones /checarcinto / apreendidos /apreendercarro /liberarcarro /revistar\n", string);
		format(string,1024, "%s[Polícia Rodoviária] /apreender /multar (/gov)erno /arrombarporta /corrente /rcorrente /rtcorrentes /soltarrefem /procurados\n", string);
		format(string,1024, "%s[Polícia Rodoviária] /algemar /imobilizar /radar /arrombarporta /deter /limpar /placa\n", string);
    }*/
	else if(Player[playerid][pMember] == TEAM_AZTECAS)
	{
       	format(string,1024, "%s[Varrio Los Aztecas] /gf /rgf /plantarbomba /roubar /trocarskin /tacarfogo /minhaorg /pixinfo\n", string);
	}
	else if(Player[playerid][pMember] == TEAM_RUSSA)
	{
       	format(string,1024, "%s[Máfia Russa]  /gf /rgf /plantarbomba /roubar /trocarskin /tacarfogo /minhaorg\n", string);
	}
	else if(Player[playerid][pMember] == TEAM_YAKUZA)
	{
       	format(string,1024, "%s[Yakuza]  /gf /rgf /plantarbomba /roubar /trocarskin /tacarfogo /minhaorg\n", string);
	}
	/*else if(Player[playerid][pMember] == TEAM_DRIFTERS)
	{
       	format(string,1024, "%s[Drifters]  /gf /rgf /plantarbomba /roubar /trocarskin /tacarfogo /minhaorg /pixinfo\n", string);
    }
	else if(Player[playerid][pMember] == TEAM_CV)
	{
		format(string,1024, "%s[Comando Vermelho]  /gf /rgf /plantarbomba /roubar /trocarskin /tacarfogo /minhaorg /pixinfo\n", string);
	}
	else if(Player[playerid][pMember] == TEAM_PCC)
	{
        format(string,1024, "%s[PCC]  /gf /rgf /plantarbomba /roubar /trocarskin /tacarfogo /minhaorg /pixinfo\n", string);
	}*/
	else if(Player[playerid][pMember] == TEAM_BOPE)
	{
		format(string,1024, "%s/procurados  Ver os nomes dos suspeitos do servidor.\n", string);
		format(string,1024, "%s/r - Fala com todos dar organização.\n", string);
		format(string,1024, "%sEspaço (Backspace) - Abre o portão do estacionamento.\n", string);
		format(string,1024, "%s/d  Fala com todos do Departamento de Policia(todos os membros da Lei do servidor).\n", string);
		format(string,1024, "%s/m  Para dar ordens pelo Megafone.\n", string);
		format(string,1024, "%s/algemar (ID)  Para algemar um suspeito dentro da viatura.\n", string);
		format(string,1024, "%s/soltarrefem (ID)  Para soltar um suspeito de dentro da viatura.\n", string);
		format(string,1024, "%s/deter (ID) (TEMPO)  Para prender um suspeito.\n", string);
		format(string,1024, "%s/ficha (ID)  Para ver a ficha dos players(apenas no DP ou dentro de uma viatura).\n", string);
		format(string,1024, "%s/limpar (ID)  Para limpar a ficha de um player(apenas no DP).\n", string);
		format(string,1024, "%s/imo(Imobilizar) (ID) - Para imobilizar o suspeito, não pode ser usado em combate ou resistência.\n", string);
		format(string,1024, "%s/apreender (ID) () - Somente cargo nível 2+. Para pegar as armas, materiais, drogas e licenças.\n", string);
		format(string,1024, "%s/radar - Para vê as câmeras espalhadas pela cidade, somente no DP.\n", string);
		format(string,1024, "%s/abrirdp - Para abrir a porta do DP.\n", string);
		format(string,1024, "%s/arrombarporta - Caso o suspeito entre em uma residência, use para entrar.\n", string);
		format(string,1024, "%s/revistar (ID) - Usado para revistar civis ou suspeitos, caso ele tenha materiais ou droga deve ser detido.\n", string);
		format(string,1024, "%s/multar (ID) (VALOR) - Para multar o individuo.\n", string);
		format(string,1024, "%s/su (ID) (SU) - Serve para aplicar uma denúncia cometida pelo individuo.\n", string);
		format(string,1024, "%s/membros  Para ver os membros online.\n", string);
	}
	else if(GetPlayerOrg(playerid) == TEAM_ALQAEDA)
       	format(string,1024, "%s[Al-Qaeda] /gf /rgf /trocarskin /carrobomba /atentado /sequestrar /tacarfogo /minhaorg\n", string);
	/*else if(GetPlayerOrg(playerid) == TEAM_HAMAS)
       	format(string,1024, "%s[Hamas] /gf /rgf /trocarskin /carrobomba /atentado /sequestrar /tacarfogo /minhaorg\n", string);*/
   /*	else if(Player[playerid][pMember] == TEAM_KINGS)
       format(string,1024, "%s[King's]  /gf /rgf /plantarbomba /roubar /trocarskin /tacarfogo /minhaorg /pixinfo\n", string);
   */
 	return string;
}
stock IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	    if(string[i] > '9' || string[i] < '0') return 0;

	return true;
}

stock PlaySoundForPlayer(playerid, soundid)
{
	new Float:pX, Float:pY, Float:pZ;
	GetPlayerPos(playerid, pX, pY, pZ);
	PlayerPlaySound(playerid, soundid,pX, pY, pZ);
}

forward ShowOrgHelp(playerid);
public ShowOrgHelp(playerid)
{
	new result[1024];
	format(result, 1024, "Organização: %s \nCargo: %s \n\n%s", OrgsNames[GetPlayerOrg(playerid)], GetPlayerRank(playerid), ReturnOrgsCommands(playerid));
 	ShowPlayerDialog(playerid,100, DIALOG_STYLE_MSGBOX, "Sua Org", result, "Ok", "Voltar");
	return true;
}

forward ShowJobHelp(playerid);
public ShowJobHelp(playerid)
{
	new result[1024];
	format(result, 1024, "Emprego: %s \n\nComandos: \n%s", JobsNames[Player[playerid][pJob]], JobsCommands[Player[playerid][pJob]]);
 	ShowPlayerDialog(playerid,100, DIALOG_STYLE_MSGBOX, "Seu Emprego", result, "Ok", "Voltar");
	return true;
}

forward Float:GetDistanceBetweenPlayers(p1,p2);
public Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}
stock GetPlayerRank(playerid)
{
	new rank[48] = "Nenhum";
	if(Player[playerid][pMember] == TEAM_PM || Player[playerid][pLeader] == TEAM_PM)
//    || GetPlayerOrg(playerid) == TEAM_ROCAM || GetPlayerOrg(playerid) == TEAM_FT)//PM Ranks
	{
		if(Player[playerid][pRank] == 1)rank = "Guarda";
	   	else if(Player[playerid][pRank] == 2)rank = "Cabo";
		else if(Player[playerid][pRank] == 3)rank = "Oficial";
		else if(Player[playerid][pRank] == 4)rank = "Capitão";
		else if(Player[playerid][pRank] == 5)rank = "Coronel";
    	else if(Player[playerid][pRank] == 6)rank = "Chefe de Estado Maior";
	  	//else  rank = "Nenhum";
	}
	else if(Player[playerid][pMember] == TEAM_PF || Player[playerid][pLeader] == TEAM_PF)//PF Ranks
	{
		if(Player[playerid][pRank] == 1)rank = "Escrivão";
	   	else if(Player[playerid][pRank] == 2)rank = "Agente Federal";
	   	else if(Player[playerid][pRank] == 3)rank = "Agente Especial";
	   	else if(Player[playerid][pRank] == 4)rank = "Perito Criminal";
	  	else if(Player[playerid][pRank] == 5)rank = "Chefe de departamento";
		else if(Player[playerid][pRank] == 6)rank = "Delegado Federal";
		//else rank = "Nenhum";
	}
	else if(Player[playerid][pMember] == TEAM_FA || Player[playerid][pLeader] == TEAM_FA)//FA Ranks
	{
		if(Player[playerid][pRank] == 1)rank = "Soldado";
    	else if(Player[playerid][pRank] == 2)rank = "Sargento";
	   	else if(Player[playerid][pRank] == 3)rank = "Tenente";
	   	else if(Player[playerid][pRank] == 4)rank = "Capitão";
	   	else if(Player[playerid][pRank] == 5)rank = "Coronel";
		else if(Player[playerid][pRank] == 6)rank = "General";
		//else  rank = "Nenhum";
    }
    else if(Player[playerid][pMember] == TEAM_BOMBE || Player[playerid][pLeader] == TEAM_BOMBE)//FA Ranks
	{
		if(Player[playerid][pRank] == 1)rank = "Soldado";
    	else if(Player[playerid][pRank] == 2)rank = "Sargento";
	   	else if(Player[playerid][pRank] == 3)rank = "Sub-Tenente";
	   	else if(Player[playerid][pRank] == 4)rank = "Tenente";
	   	else if(Player[playerid][pRank] == 5)rank = "Capitão";
		else if(Player[playerid][pRank] == 6)rank = "Coronel";
		//else  rank = "Nenhum";
    }
    else if(Player[playerid][pMember] == TEAM_BOPE || Player[playerid][pLeader] == TEAM_BOPE)//BOPE Ranks
	{
		if(Player[playerid][pRank] == 1)rank = "Soldado";
	    else if(Player[playerid][pRank] == 2)rank = "Cabo";
	   	else if(Player[playerid][pRank] == 3)rank = "Sargento";
	   	else if(Player[playerid][pRank] == 4)rank = "Tenente";
	   	else if(Player[playerid][pRank] == 5)rank = "Sub Comando Aguiar";
		else if(Player[playerid][pRank] == 6)rank = "Comando Aguiar";
		//else  rank = "Nenhum";
    }
	else if(Player[playerid][pMember] == TEAM_BALLAS || Player[playerid][pLeader] == TEAM_BALLAS || Player[playerid][pMember] == TEAM_GROOVE || Player[playerid][pLeader] == TEAM_GROOVE || Player[playerid][pMember] == TEAM_VAGOS || Player[playerid][pLeader] == TEAM_VAGOS || Player[playerid][pMember] == TEAM_AZTECAS || Player[playerid][pLeader] == TEAM_AZTECAS)//Grove/Ballas/Vagos/Aztecas Ranks
	{
		if(Player[playerid][pRank] == 1)rank = "Batizado";
	   	else if(Player[playerid][pRank] == 2)rank = "Fogueteiro";
		else if(Player[playerid][pRank] == 3)rank = "Membro";
		else if(Player[playerid][pRank] == 4)rank = "Gangster";
	   	else if(Player[playerid][pRank] == 5)rank = "Braço direito";
  	   	else if(Player[playerid][pRank] == 6)rank = "Chefão";
	   	//else  rank = "Nenhum";
    }
 	/*else if(Player[playerid][pMember] == TEAM_LOWRIDERS || Player[playerid][pLeader] == TEAM_LOWRIDERS || Player[playerid][pMember] == TEAM_DRIFTERS || Player[playerid][pLeader] == TEAM_DRIFTERS)// || Player[playerid][pMember] == TEAM_KINGS || Player[playerid][pLeader] == TEAM_KINGS)//Lowriders Ranks
	{
		if(Player[playerid][pRank] == 6)rank = "Presidente";
		else if(Player[playerid][pRank] == 5)rank = "Vice-Presidente";
		else if(Player[playerid][pRank] == 4)rank = "Sócio";
		else if(Player[playerid][pRank] == 3)rank = "Super Membro";
		else if(Player[playerid][pRank] == 2)rank = "Membro";
		else if(Player[playerid][pRank] == 1)rank = "Aspirante";
		//else  rank = "Nenhum";
	}*/
	/*else if(Player[playerid][pMember] == TEAM_CV || Player[playerid][pLeader] == TEAM_CV || Player[playerid][pMember] == TEAM_PCC || Player[playerid][pLeader] == TEAM_PCC)//CV/PCC Ranks
	{
		if(Player[playerid][pRank] == 6)rank = "Rei do trafico";
		else if(Player[playerid][pRank] == 5)rank = "Chefe do trafico";
		else if(Player[playerid][pRank] == 4)rank = "Traficante";
		else if(Player[playerid][pRank] == 3)rank = "Sub-Traficante";
		else if(Player[playerid][pRank] == 2)rank = "Membro";
		else if(Player[playerid][pRank] == 1)rank = "Novato";
		//else  rank = "Nenhum";
	}*/
	else if(Player[playerid][pMember] == TEAM_PREF || Player[playerid][pLeader] == TEAM_PREF)//Prefeito Ranks
	{
		if(Player[playerid][pRank] == 1)rank = "Motorista";
		else if(Player[playerid][pRank] == 2)rank = "Capitão de Segurança";
	    else if(Player[playerid][pRank] == 3)rank = "Inspetor";
		else if(Player[playerid][pRank] == 4)rank = "Vereador";
	    else if(Player[playerid][pRank] == 5)rank = "Vice-prefeito";
	    else if(Player[playerid][pRank] == 6)rank = "Prefeito";
		//else rank = "Nenhum";
	}
	else if(Player[playerid][pMember] == TEAM_HITMAN || Player[playerid][pLeader] == TEAM_HITMAN)//Hitman Ranks
	{
		if(Player[playerid][pRank] == 1)rank = "Iniciante";
		else if(Player[playerid][pRank] == 2)rank = "Especialista";
		else if(Player[playerid][pRank] == 3)rank = "Assassino";
		else if(Player[playerid][pRank] == 4)rank = "Assassino Profissional";
		else if(Player[playerid][pRank] == 5)rank = "Mestre Conselheiro";
	  	else if(Player[playerid][pRank] == 6)rank = "Boss";
		//else rank = "Nenhum";
	}
	/*else if(Player[playerid][pMember] == TEAM_MUNICIPAL || Player[playerid][pLeader] == TEAM_MUNICIPAL)//MUNICIPAL Ranks
	{
		if(Player[playerid][pRank] == 1)rank = "Estagiário Guarda";
	   	else if(Player[playerid][pRank] == 2)rank = "Policial Rodoviário";
	   	else if(Player[playerid][pRank] == 3)rank = "Sub-Inspetor Guarda";
	   	else if(Player[playerid][pRank] == 4)rank = "Inspetor Guarda";
	   	else if(Player[playerid][pRank] == 5)rank = "Sub-Chefe Guarda";
		else if(Player[playerid][pRank] == 6)rank = "Chefe da Guarda";
	   	//else rank = "Nenhum";
	}*/
	else if(Player[playerid][pMember] == TEAM_SANEWS || Player[playerid][pLeader] == TEAM_SANEWS)//Reporters Ranks
	{
		if(Player[playerid][pRank] == 1)rank = "Cinegrafista Amador";
		else if(Player[playerid][pRank] == 2)rank = "Entrevistador";
		else if(Player[playerid][pRank] == 3)rank = "Repórter";
		else if(Player[playerid][pRank] == 4)rank = "Dirigente";
		else if(Player[playerid][pRank] == 5)rank = "Editor";
		else if(Player[playerid][pRank] == 6)rank = "Produtor";
		//else rank = "Nenhum";
	}
    else if(GetPlayerOrg(playerid) == TEAM_RUSSA
         || GetPlayerOrg(playerid) == TEAM_YAKUZA)
	{
		if(Player[playerid][pRank] == 1) rank = "Novato";
		else if(Player[playerid][pRank] == 2) rank = "Membro";
		else if(Player[playerid][pRank] == 3) rank = "Especialista";
		else if(Player[playerid][pRank] == 4) rank = "Associante";
		else if(Player[playerid][pRank] == 5) rank = "Sub-Chefe";
	    else if(Player[playerid][pRank] == 6) rank = "Don";
		//else rank = "Nenhum";
	}
	/*if(Player[playerid][pMember] == TEAM_PCIVIL || Player[playerid][pLeader] == TEAM_PCIVIL)//PCivil BLS Ranks
	{
		if(Player[playerid][pRank] == 1)rank = "Escrivão Civil";
	   	else if(Player[playerid][pRank] == 2)rank = "Investigador Civil";
		else if(Player[playerid][pRank] == 3)rank = "Espião Civil";
		else if(Player[playerid][pRank] == 4)rank = "Agente Civil";
		else if(Player[playerid][pRank] == 5)rank = "Chefe de departamento";
    	else if(Player[playerid][pRank] == 6)rank = "Delegado Civil";
	  	//else  rank = "Nenhum";
	}*/
	else if(Player[playerid][pMember] == TEAM_ALQAEDA || Player[playerid][pLeader] == TEAM_ALQAEDA)//ALQAEDA Ranks
	{
		if(Player[playerid][pRank] == 1)rank = "Novato";
	   	else if(Player[playerid][pRank] == 2)rank = "Consolidado";
	   	else if(Player[playerid][pRank] == 3)rank = "Terrorista";
	   	else if(Player[playerid][pRank] == 4)rank = "Chefe do Terror";
	  	else if(Player[playerid][pRank] == 5)rank = "Sadan Hussein";
		else if(Player[playerid][pRank] == 6)rank = "Bin-Laden";
		//else rank = "Nenhum";
	}
	/*else if(Player[playerid][pMember] == TEAM_HAMAS || Player[playerid][pLeader] == TEAM_HAMAS)//Hamas Ranks
	{
		if(Player[playerid][pRank] == 1)rank = "Homem-Bomba";
	   	else if(Player[playerid][pRank] == 2)rank = "Membro";
	   	else if(Player[playerid][pRank] == 3)rank = "Terrorista";
	   	else if(Player[playerid][pRank] == 4)rank = "Bombardeador";
	  	else if(Player[playerid][pRank] == 5)rank = "Sub-Chefe";
		else if(Player[playerid][pRank] == 6)rank = "Ahmed Yassin";
		//else rank = "Nenhum";
	}*/
    else if(GetPlayerOrg(playerid) == TEAM_ANGELS || GetPlayerOrg(playerid) == TEAM_BIKERS)
    {
		if(Player[playerid][pRank] == 1)rank = "Batedor";
	   	else if(Player[playerid][pRank] == 2)rank = "Co-Piloto";
	   	else if(Player[playerid][pRank] == 3)rank = "Piloto";
	   	else if(Player[playerid][pRank] == 4)rank = "Piloto de Fuga";
	  	else if(Player[playerid][pRank] == 5)rank = "Braço Direito";
		else if(Player[playerid][pRank] == 6)rank = "Chefe";
    }
	return rank;
}

stock AddFlitsPaal(playerid, radarid, Float:xx, Float:yy, Float:zz, radius, speed, local[])
{
	#pragma unused zz
 	new newcar = GetVehicleModel(GetPlayerVehicleID(playerid));
  	if(floatround(Player[playerid][LastSpeed]) > speed)
  	{
		if(IsPlayerInCircle(playerid, xx, yy, radius) && GetPlayerState(playerid)== PLAYER_STATE_DRIVER)
		{
            if(!IsACop(playerid) && Player[playerid][pMember] != TEAM_BOMBE)
            {
	    	    if(!IsAPlane(newcar) && newcar != 481 && newcar != 509 && newcar != 510 && newcar != 416)
	    	    {
	    	        if(AdminDuty[playerid] != MODOSA_TRABALHANDO)
	    	        {
						Multado[playerid][radarid] = true;
	    	            new string[170];
						new finemais = random(5) + 120;
						new finem = random(5) + 85;
		    			new fine = random(5) + (floatround(Player[playerid][LastSpeed])-speed)*2 + 100;
		                format(string, sizeof(string), "[Radar]: O limite de velocidade é {FF0000}%d KM/H{FFFFFF}. Você foi flagrado à {FF0000}%d KM/H{FFFFFF} e foi multado em {FF0000}R$%d,00!",speed, floatround(Player[playerid][LastSpeed]),fine);
		                SendClientMessage(playerid, COLOR_WHITE, string);
						if(Player[playerid][pCarLic] == 0)
						{
							format(string, sizeof(string), "[Radar]: Os computadores identificaram que você não tem licença terrestre. Houve um incremento de R$ {FF0000}%d,00 {FFFFFF}na multa.", finemais);
							SendClientMessage(playerid, COLOR_WHITE, string);
							multa[playerid] += finemais;
						}
						if(strcmp(GetVehicleNumberPlate(GetPlayerVehicleID(playerid)),"SemPlaca",true) == 0)
						{
							format(string, sizeof(string), "[Radar]: Os computadores identificaram que você seu carro não está emplacado. Houve um incremento de R$ {FF0000}%d,00 {FFFFFF}na multa.", finem);
							SendClientMessage(playerid, COLOR_WHITE, string);
							multa[playerid] += finem;
						}
		                multa[playerid] += fine;
		                multas[playerid] += 1;
		                if(Player[playerid][pCarLic] != 0)
		                    Player[playerid][pCarLicPoints]++;
		                if(multas[playerid] == 10)
		                {
			                WantedPoints[playerid] += 2;
			                if(Player[playerid][pCarLic] != 0)
							{
			                	Player[playerid][pCarLicPoints] += 3;
							}
							SetPlayerCriminal(playerid, 255, "Desrespeito às leis de trânsito", local);
				    		PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
				    		/*format(string, 170, "HQ - Todas as unidades APB: Relato: Radares");
							SendTeamMessage(TEAM_MUNICIPAL, COLOR_RED, string);
							format(string, 170, "HQ - Crime: Desrespeito às leis de trânsito (10 multas), Suspeito: %s, Localização Desconhecida.",Player[playerid][pName]);
							SendTeamMessage(TEAM_MUNICIPAL, COLOR_RED, string);*/
						}
						else if(multas[playerid] == 5)
						{
						    WantedPoints[playerid] += 1;
						    if(Player[playerid][pCarLic] != 0)
							{
			                	Player[playerid][pCarLicPoints] += 2;
							}
							SetPlayerCriminal(playerid, 255, "Direção agressiva", local);
				    		PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
				    		/*format(string, 170, "HQ - Todas as unidades APB: Relato: Radares");
							SendTeamMessage(TEAM_MUNICIPAL, COLOR_RED, string);
							format(string, 170, "HQ - Crime: Direção agressiva (5 multas), Suspeito: %s, Localização Desconhecida.",Player[playerid][pName]);
							SendTeamMessage(TEAM_MUNICIPAL, COLOR_RED, string); */
						}
						else if(multas[playerid] == 1)
						{
						    WantedPoints[playerid] += 1;
						    if(Player[playerid][pCarLic] != 0)
							{
			                	Player[playerid][pCarLicPoints]++;
							}
							SetPlayerCriminal(playerid, 255, "Excesso de velocidade", local);
				    		PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
				    		/*format(string, 170, "HQ - Todas as unidades APB: Relato: Radares");
							SendTeamMessage(TEAM_MUNICIPAL, COLOR_RED, string);
							format(string, 170, "HQ - Crime: Excesso de velocidade (1 multa), Suspeito: %s, Localização Desconhecida.",Player[playerid][pName]);
							SendTeamMessage(TEAM_MUNICIPAL, COLOR_RED, string);*/
						}
						if(Player[playerid][pCarLicPoints] >= 20)
						{
			               	Player[playerid][pCarLicPoints] = 0;
			               	Player[playerid][pCarLic] = 0;
			               	SendClientMessage(playerid, COLOR_RED, "Você perdeu sua carteira de motorista por atingir 20 pontos.");
						}
					}
	    		}
			}
		}
	}
}

/*>-=-=-=-=-=-=-=-=-=-=-=-=-=-<//
	  	   Log System
//>-=-=-=-=-=-=-=-=-=-=-=-=-=-<*/
stock WriteLog(filename[],text[])
{
	printf("%s => %s", filename, text);
	new File:file;
	new filepath[256], string[128], year,day,month, hour,minute,second;
	getdate(year,day,month); GetTimeFix(hour,minute,second);
	format(filepath,sizeof(filepath),"/RPG/logs/%s.log",filename);
	file = fopen(filepath,io_append);
	format(string,sizeof(string),"[%02d/%02d/%d|%02d:%02d:%02d] %s\r\n",day,month,year,hour,minute,second,text);
	fwrite(file,string);
	fclose(file);
	return true;
}

stock LottoLog(number, players[], jackpot)
{
	print("====> Jackpot Fallen (/RPG/logs/LottoLog.txt) <====");
	new CurrentStatus[6], File:file, logstring[256];

	getdate(CurrentStatus[2], CurrentStatus[1], CurrentStatus[0]);
	GetTimeFix(CurrentStatus[3], CurrentStatus[4], CurrentStatus[5]);

	file = fopen("RPG/logs/LottoLog.txt", io_append);
	format(logstring, 256, "%02d/%02d/%02d - %02d:%02d\r\n", CurrentStatus[0], CurrentStatus[1], CurrentStatus[2], CurrentStatus[3], CurrentStatus[4]); fwrite(file, logstring);
	fwrite(file, "O resultado da loteria acabou de sair!\r\n-----------------------------\r\n");
	format(logstring, 256, "O número sorteado foi: %d, R$%d.\r\n", number, jackpot); fwrite(file, logstring);
	fwrite(file, players); fwrite(file, "\r\n");
	fwrite(file, "A loteria iniciou.\r\n-----------------------------\r\n\r\n");
	fclose(file);

	//Exemplo de Log:
	//00/00/0000 - 00:00
	//O Resultado da Loteria Acabou de Sair!
	//-----------------------------
	//O Numero Sorteado Foi: 0.
	//{FF0000}[Info]:{FFFFFF} Nome Ganhou {009900}R$0{FFFFFF} na Loteria!
	//A Loteria Iniciou.
	//-----------------------------
	return true;
}

/*>-=-=-=-=-=-=-=-=-=-=-=-=-=-<//
	  	   Ban System
//>-=-=-=-=-=-=-=-=-=-=-=-=-=-<*/
forward BanExtend(playerid,id,reason[], days);  //função de ban
public BanExtend(playerid,id,reason[], days)
{
	new string[200];
	if(!days)
		format(string, 200,"[ATENÇÃO]: O jogador %s foi banido pelo %s %s. Motivo: %s",Player[id][pName], AccountName(playerid), Player[playerid][pName],reason);
	else
		format(string, 200,"[ATENÇÃO]: O jogador %s foi banido pelo %s %s. Tempo: %d dias. Motivo: %s",Player[id][pName], AccountName(playerid), Player[playerid][pName], days, reason);

	SendClientMessageToAll(COLOR_OOC,string);

	new playerip[24];
	GetPlayerIp(id, playerip, sizeof(playerip));
	new banfile[64];

	banfile = GetBannedFile(id);

	new hour, minute, second, day, month, year;
	GetTimeFix(hour, minute, second);
	getdate(year, month, day);

	DOF2_CreateFile(banfile);
	DOF2_SetString(banfile,"PlayerName", Player[id][pName]);
	if(days)
	{
		DOF2_SetInt(banfile,"BanTime", GetTickCount()+ONE_DAY*days);
 		DOF2_SetInt(banfile,"BanDays", days);
	}

	new str[52];
	format(str,52,"%s %s", AccountName(playerid), Player[playerid][pName]);

	DOF2_SetString(banfile,"AdminName", str);
	DOF2_SetString(banfile,"Motivo", reason);

	format(string, sizeof(string), "%02d/%02d às %02d:%02d", day, month, hour, minute);
	DOF2_SetString(banfile,"Data", string);
	DOF2_SaveFile();
	if(gPlayerLogged[playerid])
	{
		new banfile2[256];
		format(banfile2,256,"/RPG/bans/%s.ini", Player[id][pName]);
		DOF2_CreateFile(banfile2);
		if(days)
		{
			DOF2_SetInt(banfile2,"BanTime", GetTickCount()+ONE_DAY*days);
   			DOF2_SetInt(banfile2,"BanDays", days);
		}
	 	DOF2_SetString(banfile2,"AdminName", str);
		DOF2_SetString(banfile2,"Motivo", reason);
		DOF2_SetString(banfile2,"Data", string);
		DOF2_SetString(banfile2,"IP", playerip);
		DOF2_SaveFile();
	    if(days)
		    DOF2_SetInt(GetPlayerFile(id),"Banned",2);
  		else
		    DOF2_SetInt(GetPlayerFile(id),"Banned",1);

		DOF2_SaveFile();
	}

	SendClientMessage(playerid,COLOR_OOC,"[Atenção]: Informações importantes sobre o Ban:");
	format(string, 128,"[Atenção]: Nick: %s - Admin: %s - Motivo: %s", Player[id][pName], Player[playerid][pName], reason);
	SendClientMessage(playerid, COLOR_OOC,string);
	format(string, 128,"[Atenção]: Data: %02d/%02d/%d - IP: %s  (Salve Esses Dados)",day, month, year, playerip);
	SendClientMessage(playerid, COLOR_OOC,string);
	/*if(Player[id][pBizKey] != 255)
	{
	    new empresa = Player[id][pBizKey];

		BizzInfo[empresa][bOwned] = 0;
		strmid(BizzInfo[empresa][bOwner], "governo", 0, strlen("governo"), 255);
		strmid(BizzInfo[empresa][bExtortion], "---", 0, strlen("---"), 255);
		empresa = 255;
	} */
	CallRemoteFunction("OnPlayerBan","i",id);
	return Kick(id);
}

forward UnbanEx(playerid,params[]);
public UnbanEx(playerid,params[])
{
	new string[128];
  	new banfile[48];

	format(banfile,48,"/RPG/bans/%s.ini", params);
	if(DOF2_FileExists(banfile))
	{
		new buff[128], accfile[128];
		format(buff,128,"/RPG/bans/%s.ini", DOF2_GetString(banfile,"PlayerName"));
		format(accfile,128,"/RPG/users/%s.ini", DOF2_GetString(banfile,"PlayerName"));

		format(string, 128,"[ATENÇÃO]: O IP/Nick '%s' (%s) foi desbanido pelo %s %s.", params,DOF2_GetString(banfile,"PlayerName"), AccountName(playerid),Player[playerid][pName]);
		SendAdminMessage(COLOR_OOC,string);

	    format(string,128,"/RPG/bans/%s.ini", DOF2_GetString(banfile,"IP"));
	    if(DOF2_FileExists(string))
			DOF2_RemoveFile(string);

		if(DOF2_FileExists(accfile))
		{
			DOF2_SetInt(accfile, "Banned", 0);
			DOF2_SaveFile();
		}

		if(DOF2_FileExists(buff))
		    DOF2_RemoveFile(buff);

		DOF2_RemoveFile(banfile);
		format(banfile, 48, "unbanip %s", params);
		SendRconCommand(banfile);
		SendRconCommand("reloadbans");
	}
	else
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O IP/Nick escolhido não está banido.");

	return true;
}

stock GetPlayerFile(playerid)
{
	new string[50],
	pname[MAX_PLAYER_NAME];
	GetPlayerName(playerid,pname,MAX_PLAYER_NAME);
	format(string, 50,"/RPG/users/%s.ini",pname);
	return string;
}

stock GetBannedFile(playerid)
{
	new string[50];
	new playerip[20];
	GetPlayerIp(playerid, playerip, sizeof(playerip));
	format(string, 50,"/RPG/bans/%s.ini", playerip);
	return string;
}

stock AccountName(i)
{
	new admtext[22];
    if(Player[i][pAdmin] == 8)
		admtext = "Fundador";
	else if(Player[i][pAdmin] == 7)
		admtext = "Gestor";
    else if(Player[i][pAdmin] == 6)
		admtext = "Coordenador";
  	else if(Player[i][pAdmin] == 5)
	  	admtext = "Auxiliar";
    else if(Player[i][pAdmin] == 4)
		admtext = "Supervisor";
	else if(Player[i][pAdmin] == 3)
		admtext = "Administrador";
	else if(Player[i][pAdmin] == 2)
		admtext = "Moderador";
	else if(Player[i][pAdmin] == 1)
		admtext = "Operador";
	else if(Player[i][pAdmin] == 0)
	    admtext = "{FF0000}Não.";
	return admtext;
}

stock AccountNameEx(var)
{
	new admtext[22];
    if(var == 8)
		admtext = "Fundador";
    else if(var == 7)
		admtext = "Gestor";
	else if(var == 6)
		admtext = "Coordenador";
  	else if(var == 5)
	  	admtext = "Auxiliar";
    else if(var == 4)
		admtext = "Supervisor";
	else if(var == 3)
		admtext = "Administrador";
	else if(var == 2)
		admtext = "Moderador";
	else if(var == 1)
		admtext = "Operador";
	else if(var == 0)
	    admtext = "{FF0000}Não.";
	return admtext;
}

stock ConvertSecondsToMins(number)
{
	new hours, mins, secs, string[64];
	hours = floatround(number / 3600.0, floatround_floor);
	mins = floatround((number / 60.0) - (hours * 60.0), floatround_floor);
	secs = floatround(number - ((hours * 3600.0) + (mins * 60.0)), floatround_floor);
	new days = 0;

	if(hours >= 24)
	{
		days = floatround((hours/24.0), floatround_floor);
		hours = hours % 24;
	}

	if(days > 0)
		format(string, 64, "%dd %02d:%02d:%02d", days, hours, mins, secs);
	else if(hours > 0)
		format(string, 64, "%02d:%02d:%02d", hours, mins, secs);
	else
		format(string, 64, "%02d:%02d", mins, secs);

	return string;
}

stock Convert(number)
{
	new hours = 0, mins = 0, secs = 0, string[100];
	hours = floatround(number / 3600);
	mins = floatround((number / 60) - (hours * 60));
	secs = floatround(number - ((hours * 3600) + (mins * 60)));
	new days = 0;

	if(hours >= 24)
	{
		days = floatround((hours/24), floatround_floor);
		hours = hours % 24;
	}

	if(days > 0)
	{
		format(string, 100, "%d, %dh %dm e %ds", days, hours, mins, secs);
	}
	else if(hours > 0)
	{
		format(string, 100, "%dh %dm e %ds", hours, mins, secs);
	}
	else
	{
		format(string, 100, "%dm e %ds", mins, secs);
	}
	return string;
}

stock ConvertMins(number)
{
	new hours = 0, mins = 0, string[100];
	hours = floatround(number / 60);
	mins = floatround((number) - (hours * 60));
	new days = 0;

	if(hours >= 24)
	{
		days = floatround((hours/24), floatround_floor);
		hours = hours % 24;
	}

	if(days > 0)
	{
		format(string, 100, "%d, %dh e %dm", days, hours, mins);
	}
	else if(hours > 0)
	{
		format(string, 100, "%dh e %dm", hours, mins);
	}
	else
	{
		format(string, 100, "%dm", mins);
	}
	return string;
}

forward IsPlayerAdminCall(playerid);
public IsPlayerAdminCall(playerid)
{
	if(Player[playerid][pAdmin] >= 1)
		return true;
	else
		return 0;
}

stock GetPlayerOrg(playerid)
{
	if(Player[playerid][pLeader] != 0)
	    return Player[playerid][pLeader];
	else
	    return Player[playerid][pMember];
}

//----------------------------------------------------------------//
//************************* Turf System **************************//
//----------------------------------------------------------------//
stock GetZoneOwnerName(zoneid)
{
	new name[24];
	if(gZonesData[zoneid][ZoneOwner] == TEAM_NONE)
	    name = "Desocupado";
	else
	    format(name,24,OrgsNames[gZonesData[zoneid][ZoneOwner]]);
	return name;
}

stock GetPlayerZone(playerid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || Player[playerid][Spawned] == false || GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
		return 999;

	new Float:playerX, Float:playerY, Float:playerZ;
	GetPlayerPos(playerid, playerX, playerY, playerZ);
	for (new i=0;i<MAX_TURFS;i++)
	{
		if(playerX >= TurfsCoords[i][zMinX] && playerX < TurfsCoords[i][zMaxX] && playerY >= TurfsCoords[i][zMinY] && playerY < TurfsCoords[i][zMaxY])
		{
			Player[playerid][LastZone] = i;
		    return i;
		}
	}
	return 999;
}

GetGangPlayersInZone(zoneid, gangid)
{
	new count;
	new Float:playerX, Float:playerY, Float:playerZ;
	foreach(new i: Player)
	{
		if(Player[i][pMorto] == 0 && !IsPlayerInAnyVehicle(i) && GetPlayerInterior(i) == 0 && GetPlayerOrg(i) == gangid && GetPlayerVirtualWorld(i) == 0 && GetPlayerState(i) != PLAYER_STATE_SPECTATING && AdminDuty[i] != MODOSA_TRABALHANDO && Player[i][pLevel] > 1)
		{
    		GetPlayerPos(i, playerX, playerY, playerZ);
			if(playerX >= TurfsCoords[zoneid][zMinX] && playerX < TurfsCoords[zoneid][zMaxX] && playerY >= TurfsCoords[zoneid][zMinY] && playerY < TurfsCoords[zoneid][zMaxY])
			{
				count ++;
			}
		}
	}
	return count;
}

forward GangZonesCheck();
public GangZonesCheck()
{
	new string[128];
	foreach(new i: Player)
	{
		if(Player[i][Spawned] == true)
		{
			new pZone = GetPlayerZone(i);
		    if(pZone != 999)
		    {
		    	if(gZonesData[pZone][ZoneInWar] == true && (GetPlayerOrg(i) == gZonesData[pZone][ZoneOwner] ||GetPlayerOrg(i) == gZonesData[pZone][ZoneAttacker]))
				{
			        new score[256];
    		 	    format(score,256,"Placar da Guerra ~n~~r~%s ~w~x ~b~%s ~n~~y~Pontos: ~r~%d  ~w~-  ~b~%d~n~~y~Kills: ~r~%d  ~w~-  ~b~%d~n~~n~~p~Tempo Restante: ~w~%s",
					OrgsNamesSmall[gZonesData[pZone][ZoneAttacker]],OrgsNamesSmall[gZonesData[pZone][ZoneOwner]],
					gZonesData[pZone][ZoneWarPoints][gZonesData[pZone][ZoneAttacker]], gZonesData[pZone][ZoneWarPoints][gZonesData[pZone][ZoneOwner]],
					gZonesData[pZone][ZoneWarKillCount][gZonesData[pZone][ZoneAttacker]], gZonesData[pZone][ZoneWarKillCount][gZonesData[pZone][ZoneOwner]], ConvertSecondsToMins(gZonesData[pZone][ZoneWarTimeLeft]));
			        TextDrawSetString(WarPointsTD[i], score);

			        if(Player[i][SeePoints] == false)
			        {
						TextDrawShowForPlayer(i, WarPointsTD[i]);
						Player[i][SeePoints] = true;
					}
				}
				else
				{
  					if(Player[i][SeePoints] == true)
  					{
						TextDrawHideForPlayer(i, WarPointsTD[i]);
						Player[i][SeePoints] = false;
					}
				}

	   			format(string,128,"- %s -~n~~p~Territorio: ~w~~h~%s", TurfsCoords[pZone][zName], GetZoneOwnerName(pZone));

				TextDrawSetString(ZoneName[i], string);
				if(Player[i][SeeName] == false && Player[i][Spawned] == true)
				{
					TextDrawShowForPlayer(i, ZoneName[i]);
					Player[i][SeeName] = true;
				}

				if(IsAGang(i))
				{
				    SetPlayerChatBubble( i, "GangZone", COLOR_RED, 50.0, 20000);
				    InGZ[i] = 60;
			    }

				if(gZonesData[pZone][ZonePlayerReqMet][GetPlayerOrg(i)] > 0 && gZonesData[pZone][ZoneOwner] != GetPlayerOrg(i))
				{
				    new percent = 100;
					percent = floatround((100*gZonesData[pZone][ZonePlayerReqMet][GetPlayerOrg(i)])/ZONE_CHECKS);

					TextDrawShowForPlayer(i, ChecksBar[percent]);
					TextDrawShowForPlayer(i, ChecksBar[MAX_PLAYERS]);
					TextDrawShowForPlayer(i, ChecksBar[MAX_PLAYERS + 1]);
					TextDrawShowForPlayer(i, ChecksBar[MAX_PLAYERS + 2]);
					Player[i][SeeChecksBar] = true;
				}
				else
				{
					if(Player[i][SeeChecksBar] == true)
					{
					    for(new x = 0; x < sizeof(ChecksBar); x ++)
							TextDrawHideForPlayer(i, ChecksBar[x]);

						Player[i][SeeChecksBar] = false;
					}
				}
			}
		    else
			{
				if(Player[i][SeeChecksBar] == true)
				{
				    for(new x = 0; x < sizeof(ChecksBar); x ++)
						TextDrawHideForPlayer(i, ChecksBar[x]);

					Player[i][SeeChecksBar] = false;
				}
				if(Player[i][SeePoints] == true)
				{
					TextDrawHideForPlayer(i, WarPointsTD[i]);
					Player[i][SeePoints] = false;
				}
				if(Player[i][SeeName] == true)
				{
		        	Player[i][SeeName] = false;
		       	 	TextDrawHideForPlayer(i, ZoneName[i]);
				}
			}
		}
	}
	return true;
}

forward CheckAreasAzuis();
public CheckAreasAzuis()
{
    foreach(new playerid: Player)
    {
        IsPlayerCivil[playerid] = false;
        if(IsPlayerInAreaAzul(playerid))
        {
            if(WantedPoints[playerid] != 0
            || GetPlayerOrg(playerid) != 0
            || SendoProcurado[playerid])
                continue;

            SetPlayerChatBubble(playerid, AreaAzulText, AreaAzulColor, 50.0, 5000);
            IsPlayerCivil[playerid] = true;
        }

        if(TAAStarted[playerid] != 0)
            if(!IsPlayerInRangeOfPoint(playerid, 1.5, PosTAA[playerid][0], PosTAA[playerid][1], PosTAA[playerid][2]))
                EndTAA(playerid);
    }
    return 1;
}

new bool:Counted[MAX_TURFS] = false;

forward GlobalTimer();
public GlobalTimer()
{
	for(new i = 0; i < sizeof(VeiculosMateriais); i++)
	{
	    if(VeiculoMaterialAlugado[i][1] > 0)
	    {
	        VeiculoMaterialAlugado[i][1] --;
	        if(VeiculoMaterialAlugado[i][1] == 0)
			{
			    new playerid = GetVehicleDriver(VeiculosMateriais[i]);
			    if(playerid != INVALID_PLAYER_ID)
			    {
				    /*AddVehicleMaterial(VeiculosMateriais[i], 0);
				    TrunkInfo[VeiculosMateriais[i]][TrunkMateriais] = 0;
				    VeiculoMaterialAlugado[i][0] = -1;
				    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} O Tempo Acabou. Quando Sair do Veiculo ele irá Respawnar.");*/
				    if(i == 3) ShowPlayerDialog(playerid, 6602, DIALOG_STYLE_MSGBOX, "Alugar:", "Você deseja Alugar este Veiculo?\n\n{FFFFFF}Carga: {FF0000}7.500\n{FFFFFF}Tempo: {FF0000}30 Minutos\n{FFFFFF}Preço: {009900}R$5.000", "Continuar", "Cancelar");
				    else ShowPlayerDialog(playerid, 6602, DIALOG_STYLE_MSGBOX, "Alugar:", "Você deseja Alugar este Veiculo?\n\n{FFFFFF}Carga: {FF0000}15.000\n{FFFFFF}Tempo: {FF0000}30 Minutos\n{FFFFFF}Preço: {009900}R$10.000", "Continuar", "Cancelar");
			    }
			    else
			    {
				    SetVehicleToRespawn(VeiculosMateriais[i]);
				    AddVehicleMaterial(VeiculosMateriais[i], 0);
				    TrunkInfo[VeiculosMateriais[i]][TrunkMateriais] = 0;
				}
				VeiculoMaterialAlugado[i][0] = 0;
			    VeiculoMaterialAlugado[i][1] = 0;
			}
	    }
	}
	for (new j=0;j<MAX_TURFS;j++)
	{
	    if(gZonesData[j][ZoneInWar] == false)
		{
			for (new l = 1; l < MAX_ORGS; l++)
	  		{
		  		if(gZonesData[j][ZoneOwner] != l)
	  	    	{
		  	        new PlayersIn = GetGangPlayersInZone(j,l);
					if(PlayersIn >= PLAYERS_REQUIRED && Counted[j] == false)
					{
					    Counted[j] = true;
						gZonesData[j][ZonePlayerReqMet][l] += PlayersIn;
					}
					if(PlayersIn < PLAYERS_REQUIRED)
					{
						gZonesData[j][ZonePlayerReqMet][l] = 0;
					}

				   	if(gZonesData[j][ZonePlayerReqMet][l] >= ZONE_CHECKS)
					{
						StartWar(j, gZonesData[j][ZoneOwner], l);
					}

					gZonesData[j][ZonePlayerCountEx][l] = PlayersIn;
					gZonesData[j][ZonePlayerCount][l] = 0;
				}
			}
		}
		Counted[j] = false;
	    if(gZonesData[j][ZoneInWar])
	    {
			if(gZonesData[j][ZoneWarTimeLeft] > 0)
			{
			    gZonesData[j][ZoneWarTimeLeft]--;
				new defenders = gZonesData[j][ZoneOwner];
				new attackers = gZonesData[j][ZoneAttacker];

				new def_in = GetGangPlayersInZone(j,defenders);
				gZonesData[j][ZoneWarPlayers][defenders] = def_in;
				gZonesData[j][ZoneWarPoints][defenders] += STAYING_POINTS*def_in;

				new atk_in = GetGangPlayersInZone(j,attackers);
				gZonesData[j][ZoneWarPlayers][attackers] = atk_in;
				gZonesData[j][ZoneWarPoints][attackers] += STAYING_POINTS*atk_in;

			}
			else
			{
			    TurfWarEnd(j, gZonesData[j][ZoneOwner], gZonesData[j][ZoneAttacker]);
			}
	    }
	}
}


forward StartWar(zoneid, defend_gang, attack_gang);
public StartWar(zoneid, defend_gang, attack_gang)
{
	new lol = 0;
	for(new i = 0; i < sizeof(AllowedOrgs[]); i ++)
		if(AllowedOrgs[zoneid][i] == attack_gang && AllowedOrgs[zoneid][i] != 0)
			lol = 1;

	if(lol == 0)
	{
		format(thestring,sizeof(thestring),"[ERRO]:{FFFFFF} Sua organização não pode atacar o território %s.", TurfsCoords[zoneid][zName]);
		SendMessageToGang(attack_gang, COLOR_RED, thestring);
		gZonesData[zoneid][ZoneWarPoints][attack_gang] = 0;
		gZonesData[zoneid][ZoneWarKillCount][attack_gang] = 0;
		gZonesData[zoneid][ZonePlayerCount][attack_gang] = 0;
		gZonesData[zoneid][ZonePlayerReqMet][attack_gang] = 0;
		gZonesData[zoneid][ZoneWarPlayers][attack_gang] = 0;
		return true;
	}

    if(!TurfsCoords[zoneid][zCanAttack])
    {
		format(thestring,sizeof(thestring),"[ERRO]:{FFFFFF} Houve uma guerra a pouco tempo no território %s.", TurfsCoords[zoneid][zName]);
		SendMessageToGang(attack_gang, COLOR_RED, thestring);
		gZonesData[zoneid][ZoneWarPoints][attack_gang] = 0;
		gZonesData[zoneid][ZoneWarKillCount][attack_gang] = 0;
		gZonesData[zoneid][ZonePlayerCount][attack_gang] = 0;
		gZonesData[zoneid][ZonePlayerReqMet][attack_gang] = 0;
		gZonesData[zoneid][ZoneWarPlayers][attack_gang] = 0;
        return 1;
    }

	if(defend_gang == TEAM_NONE && attack_gang != TEAM_NONE)
	{
		new atk_info[128], atk_info2[128];
		format(atk_info,128,"Sua ORG conquistou um territorio desocupado");
		format(atk_info2,128,"[TERRITÓRIO] Sua ORG conquistou um território desocupado.");
		TextDrawSetString(AttackersTextDraw, atk_info);
		TextDrawAlignment(AttackersTextDraw, 2);

		SendMessageToGang(attack_gang, COLOR_YELLOW, atk_info2);
		HideScreenTextForGang(attack_gang, 6200);
		TimeTextForGang(attack_gang, AttackersTextDraw, 6000);
		GangZoneHideForAll(zoneid);
		GangZoneShowForAll(zoneid, ((OrgsColors[attack_gang] & ~0xFF) | 0x77));
		gZonesData[zoneid][ZoneOwner] = attack_gang;
		return true;
	}

	gZonesData[zoneid][ZoneWarPoints][defend_gang] = DEF_POINTS;
	ResetWarData(zoneid, attack_gang, defend_gang);

	gZonesData[zoneid][ZoneWarTimeLeft] = WAR_TIME;

	gZonesData[zoneid][ZoneAttacker] = attack_gang;
    gZonesData[zoneid][ZoneInWar] = true;

	HideScreenTextForGang(attack_gang, 6200);
	HideScreenTextForGang(defend_gang, 6200);

	ShowTurfInfo(zoneid);
	for (new i=0;i<= HighestID;i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(GetPlayerOrg(i) == defend_gang || GetPlayerOrg(i) == attack_gang)
	        {
				GangZoneFlashForPlayer(i, zoneid,  ((OrgsColors[attack_gang] & ~0xFF) | 0x77));
				if(IsPlayerInTurf(i,zoneid) && GetPlayerOrg(i) == attack_gang)
				{
					AddWarPoints(i, START_WAR);
				}
			}
	    }
	}

	gZonesData[zoneid][ZoneKillCount][attack_gang] = 0;
	gZonesData[zoneid][ZoneKillCount][defend_gang] = 0;
	gZonesData[zoneid][ZoneWarCount]++;

    return true;
}
forward  TurfWarEnd(zoneid,defend_gang,attack_gang);
public TurfWarEnd(zoneid,defend_gang,attack_gang)
{
    new msg_winner[128], msg_loser[128], text_winner[128], text_loser[128];
	new winner, loser;

	//compare kills
	if(gZonesData[zoneid][ZoneWarPoints][attack_gang] == gZonesData[zoneid][ZoneWarPoints][defend_gang])
	{
	    if(gZonesData[zoneid][ZoneWarPlayers][attack_gang] <= gZonesData[zoneid][ZoneWarPlayers][defend_gang])
	    {
	        winner = defend_gang;
	        loser = attack_gang;
	    }
		else if(gZonesData[zoneid][ZoneWarPlayers][attack_gang] > gZonesData[zoneid][ZoneWarPlayers][defend_gang])
	    {
	        winner = attack_gang;
	        loser = defend_gang;
	    }
	}
	else if(gZonesData[zoneid][ZoneWarPoints][attack_gang] < gZonesData[zoneid][ZoneWarPoints][defend_gang])
	{
        winner = defend_gang;
        loser = attack_gang;
	}
	else if(gZonesData[zoneid][ZoneWarPoints][attack_gang] > gZonesData[zoneid][ZoneWarPoints][defend_gang])
	{
        winner = attack_gang;
        loser = defend_gang;
	}
   	if(winner == defend_gang)
	{
		format(msg_winner,128,"** Sua organização defendeu o território %s da organização {%s}%s. **", TurfsCoords[zoneid][zName], OrgsColorTags[attack_gang], OrgsNames[attack_gang]);

		format(text_winner,128,"Sua gang defendeu o territorio %s da gang %s", TurfsCoords[zoneid][zName], OrgsNames[attack_gang]);
		TextDrawSetString(WinnerTextDraw,text_winner);
		TextDrawAlignment(WinnerTextDraw, 2);

		format(msg_loser,128,"** Sua organização falhou em dominar o território %s da organização {%s}%s.{AFAFAF} **",TurfsCoords[zoneid][zName], OrgsColorTags[defend_gang], OrgsNames[defend_gang]);
		format(text_loser,128,"Sua gang falhou em dominar o territorio %s da gang %s",TurfsCoords[zoneid][zName], OrgsNames[defend_gang]);
		TextDrawSetString(LoserTextDraw, text_loser);
		TextDrawAlignment(LoserTextDraw, 2);
	}
	else if(winner == attack_gang)
	{
		format(msg_winner,128,"** Sua organização dominou o território %s da organização {%s}%s.{AFAFAF} **", TurfsCoords[zoneid][zName], OrgsColorTags[defend_gang], OrgsNames[defend_gang]);

		format(text_winner,128,"Sua gang dominou o territorio %s da gang %s",TurfsCoords[zoneid][zName], OrgsNames[defend_gang]);
		TextDrawSetString(WinnerTextDraw,text_winner);
		TextDrawAlignment(WinnerTextDraw, 2);

		format(msg_loser,128,"** Sua organização perdeu o território %s para a organização {%s}%s. {AFAFAF}**", TurfsCoords[zoneid][zName], OrgsColorTags[attack_gang], OrgsNames[attack_gang]);

		format(text_loser,128,"Sua gang perdeu o territorio %s para a gang %s",TurfsCoords[zoneid][zName], OrgsNames[attack_gang]);
		TextDrawSetString(LoserTextDraw, text_loser);
		TextDrawAlignment(LoserTextDraw, 2);
	}
	//Turf color update
	for (new k=0;k<= HighestID;k++)
	{
	    if(!IsPlayerConnected(k))
	        continue;

 		if(GetPlayerOrg(k) == defend_gang || GetPlayerOrg(k) == attack_gang)
		{
		    // Defenders Won
		    if(winner == defend_gang)
		    {
			 	if(GetPlayerOrg(k) == attack_gang)
			 	    RemoveWarPoints(k, LOSE_WAR);

				if(GetPlayerOrg(k) == defend_gang && GetPlayerZone(k) == zoneid)
				    AddWarPoints(k, DEFEND_TURF);

				if(GetPlayerOrg(k) == defend_gang)
				{
					TimeTextForPlayer(k,WinnerTextDraw,4500);
    				SendClientMessage(k, SERVER_INFO, msg_winner);
				}
				if(GetPlayerOrg(k) == attack_gang)
				{
				    SendClientMessage(k, COLOR_GREY, msg_loser);
					TimeTextForPlayer(k,LoserTextDraw,4500);
				}
			}
		    //Attackers Won
		    else if(winner == attack_gang)
		    {
			 	if(GetPlayerOrg(k) == defend_gang)
			 	    RemoveWarPoints(k, LOSE_WAR);

				if(GetPlayerOrg(k) == attack_gang && IsPlayerInZone(k, zoneid))
					AddWarPoints(k, TAKE_OVER);


				if(GetPlayerOrg(k) == defend_gang)
				{
				    SendClientMessage(k, COLOR_GREY, msg_loser);
					TimeTextForPlayer(k,LoserTextDraw,4500);
				}
				if(GetPlayerOrg(k) == attack_gang)
				{
					TimeTextForPlayer(k,WinnerTextDraw,4500);
       				SendClientMessage(k, COLOR_WHITE, msg_winner);
				}
			}
		}
	}

    TurfsCoords[zoneid][zCanAttack] = false;
    SetTimerEx("AllowGZ", (15*60*1000),  false, "d", zoneid);

	HideScreenTextForGang(attack_gang, 6200);
	HideScreenTextForGang(defend_gang, 6200);

	if(winner == attack_gang)
	{
		GangZoneShowForAll(zoneid, ((OrgsColors[attack_gang] & ~0xFF) | 0x77));
		gZonesData[zoneid][ZoneOwner] = attack_gang;
	}
	else if(loser == attack_gang)
	{
   		GangZoneShowForAll(zoneid, ((OrgsColors[defend_gang] & ~0xFF) | 0x77));
		gZonesData[zoneid][ZoneOwner] = defend_gang;
	}

	for (new i=0;i<MAX_ORGS;i++)
	{
		gZonesData[zoneid][ZoneWarPoints][i] = 0;
		gZonesData[zoneid][ZoneWarKillCount][i] = 0;
		gZonesData[zoneid][ZonePlayerCount][i] = 0;
		gZonesData[zoneid][ZonePlayerReqMet][i] = 0;
		gZonesData[zoneid][ZoneWarPlayers][i] = 0;
	}

	gZonesData[zoneid][ZoneInWar] = false;

	for (new k=0;k<= HighestID;k++)
	{
	    if(IsPlayerConnected(k))
	    {
	        if(GetPlayerOrg(k) == defend_gang || GetPlayerOrg(k) == attack_gang)
	        {
				GangZoneStopFlashForPlayer(k, zoneid);
			}
	    }
 	}

    for(new p = 0; p < sizeof(Plantacao); p++)
        Update3DTextLabelText(PlantacaoText[p], 0x3C7035FF, GetPlantacaoString(p));
}

forward AllowGZ(zoneid);
public AllowGZ(zoneid)
{
    TurfsCoords[zoneid][zCanAttack] = true;
    return 1;
}

forward WarCode_PlayerDeath(playerid, killerid, reason);
public WarCode_PlayerDeath(playerid, killerid, reason)
{
    new pZone = GetPlayerZone(playerid), string[128];
    if(!IsPlayerConnected(killerid))
    {
        if(pZone != 999)
        {
            if(gZonesData[pZone][ZoneInWar] == true && GetPlayerVirtualWorld(playerid) == 0)
            {
                if(GetPlayerOrg(playerid) == gZonesData[pZone][ZoneOwner])
                {
                    format(string, sizeof(string),"[Guerra]: %s (%s) Morreu na Zona de Guerra %s", Player[playerid][pName], OrgsNames[GetPlayerOrg(playerid)], TurfsCoords[pZone][zName]);
                    SendTeamMessage(gZonesData[pZone][ZoneAttacker], COLOR_RED, string);
                    SendTeamMessage(gZonesData[pZone][ZoneOwner], COLOR_RED, string);
                    Player[playerid][TurfDeaths] ++;
                    gZonesData[pZone][ZoneWarPoints][gZonesData[pZone][ZoneAttacker]]+= KILLING_POINTS;
                }
                else if(GetPlayerOrg(playerid) == gZonesData[pZone][ZoneAttacker])
                {
                    format(string, sizeof(string),"[Guerra]: %s (%s) Morreu na Zona de Guerra %s", Player[playerid][pName], OrgsNames[GetPlayerOrg(playerid)], TurfsCoords[pZone][zName]);
                    SendTeamMessage(gZonesData[pZone][ZoneAttacker], COLOR_RED, string);
                    SendTeamMessage(gZonesData[pZone][ZoneOwner], COLOR_RED, string);
                    Player[playerid][TurfDeaths] ++;
                    gZonesData[pZone][ZoneWarPoints][gZonesData[pZone][ZoneOwner]]+= KILLING_POINTS;
                }
            }
        }
    }
    else
    {
        new kZone = GetPlayerZone(killerid);
        if(GetPlayerOrg(killerid) != 0 && GetPlayerVirtualWorld(playerid) == 0 && IsPlayerConnected(playerid) && IsPlayerConnected(killerid) && pZone != 999 && kZone != 999)
        {
            if(gZonesData[pZone][ZoneInWar] == true || gZonesData[kZone][ZoneInWar] == true)
            {
                new zone;
                if(gZonesData[pZone][ZoneInWar] == true)
                    zone = pZone;
                else if(gZonesData[kZone][ZoneInWar] == true)
                    zone = kZone;
                if(GetPlayerOrg(killerid) == GetPlayerOrg(playerid) && (gZonesData[kZone][ZoneOwner] == GetPlayerOrg(playerid) || gZonesData[kZone][ZoneAttacker] == GetPlayerOrg(playerid)))
                {
                    new othergang;
                    if(gZonesData[kZone][ZoneOwner] == GetPlayerOrg(killerid))
                        othergang = gZonesData[kZone][ZoneAttacker];
                    else
                        othergang = gZonesData[kZone][ZoneOwner];

                    gZonesData[zone][ZoneWarPoints][othergang]+= KILLING_POINTS;
                    gZonesData[zone][ZoneWarKillCount][othergang] ++;
                }
                else if((GetPlayerOrg(killerid) == gZonesData[zone][ZoneAttacker] && GetPlayerOrg(playerid) == gZonesData[zone][ZoneOwner]) ||(GetPlayerOrg(killerid) == gZonesData[zone][ZoneOwner] && GetPlayerOrg(playerid) == gZonesData[zone][ZoneAttacker]))
                {
                    gZonesData[zone][ZoneWarPoints][GetPlayerOrg(killerid)]+= KILLING_POINTS;
                    gZonesData[zone][ZoneWarKillCount][GetPlayerOrg(killerid)] ++;
                    Player[killerid][TurfKills] ++;
                    Player[playerid][TurfDeaths] ++;
                    AddWarPoints(killerid, KILL_IN_WAR);

                    if(killerid != INVALID_PLAYER_ID)
                    {
                        format(string, sizeof(string),"[GUERRA]: {%s}%s {FFFFFF}matou{%s} %s {FFFFFF}no território {33CCFF}%s", OrgsColorTags[GetPlayerOrg(killerid)], Player[killerid][pName], OrgsColorTags[GetPlayerOrg(playerid)], Player[playerid][pName], TurfsCoords[zone][zName]);
                        SendTeamMessage(gZonesData[kZone][ZoneAttacker], COLOR_WHITE, string);
                        SendTeamMessage(gZonesData[kZone][ZoneOwner], COLOR_WHITE, string);
                    }
                    if(GetWarPoints(playerid) >= DIE_IN_WAR)
                    {
                        RemoveWarPoints(playerid, DIE_IN_WAR);
                    }
                    if(gZonesData[zone][ZoneWarPoints][GetPlayerOrg(killerid)] >= gZonesData[zone][ZoneWarPoints][GetPlayerOrg(playerid)])
                    {
                        gZonesData[zone][ZoneWarTimeLeft] -= TIME_BOBUS_WINNING;
                    }
                    else if(gZonesData[zone][ZoneWarPoints][GetPlayerOrg(killerid)] < gZonesData[zone][ZoneWarPoints][GetPlayerOrg(playerid)])
                    {
                        gZonesData[zone][ZoneWarTimeLeft] += TIME_BOBUS_LOSING;
                    }
                }
            }
            if(!gZonesData[pZone][ZoneInWar] && gZonesData[pZone][ZonePlayerReqMet] > 0 && GetPlayerOrg(killerid) == gZonesData[pZone][ZoneOwner])
            {
                gZonesData[pZone][ZonePlayerReqMet]--;
            }
            if(kZone == pZone && gZonesData[kZone][ZoneOwner] == GetPlayerOrg(killerid) && !gZonesData[kZone][ZoneInWar] && !gZonesData[kZone][ZoneIsSpawn])
            {
                GivePlayerGP(killerid, MONEY_BONUS);
            }
        }
    }
}


stock ResetWarData(zoneid, attack_gang, defend_gang)
{
  	gZonesData[zoneid][ZoneWarPoints][attack_gang] = 0;
	gZonesData[zoneid][ZoneWarPlayers][defend_gang] = 0;
	gZonesData[zoneid][ZoneWarPlayers][attack_gang] = 0;
	gZonesData[zoneid][ZonePlayerReqMet][defend_gang] = 0;
	gZonesData[zoneid][ZonePlayerCount][attack_gang] = 0;
	gZonesData[zoneid][ZonePlayerCount][defend_gang] = 0;
	gZonesData[zoneid][ZonePlayerReqMet][attack_gang] = 0;
	gZonesData[zoneid][ZoneWarKillCount][attack_gang] = 0;
	gZonesData[zoneid][ZoneWarKillCount][defend_gang] = 0;
}

forward TurfsDebug(playerid);
public TurfsDebug(playerid)
{
	for (new j=0;j<MAX_TURFS;j++)
	{
		if(gZonesData[j][ZoneInWar] == true)
		{
			if(GetPlayerOrg(playerid) == gZonesData[j][ZoneOwner] || GetPlayerOrg(playerid) == gZonesData[j][ZoneAttacker])
			{
				GangZoneFlashForPlayer(playerid, j,  ((OrgsColors[gZonesData[j][ZoneAttacker]] & ~0xFF) | 0x77));
        	}
		}
	}
}

forward ShowTurfInfo(zoneid);
public ShowTurfInfo(zoneid)
{

	new atk_info[128], atk_info2[128];
	new def_info[128], def_info2[128];
	format(def_info,128,"Um de nossos territorios esta sendo atacado pela gang %s",OrgsNames[gZonesData[zoneid][ZoneAttacker]]);
	format(def_info2,128,"** Um de nossos territorios está sendo atacado pela gang %s **",OrgsNames[gZonesData[zoneid][ZoneAttacker]]);
	format(atk_info,128,"Sua Gang iniciou uma guerra de territorios contra %s", OrgsNames[gZonesData[zoneid][ZoneOwner]]);
	format(atk_info2,128,"** Sua gang iniciou uma guerra de territorios contra a gang %s **", OrgsNames[gZonesData[zoneid][ZoneOwner]]);


	TextDrawSetString(AttackersTextDraw, atk_info);
	TextDrawAlignment(AttackersTextDraw, 2);

	TextDrawSetString(DefendersTextDraw, def_info);
	TextDrawAlignment(DefendersTextDraw, 2);

	TimeTextForGang(gZonesData[zoneid][ZoneOwner],DefendersTextDraw, 6000);
	TimeTextForGang(gZonesData[zoneid][ZoneAttacker],AttackersTextDraw, 6000);

	SendMessageToGang(gZonesData[zoneid][ZoneAttacker], COLOR_YELLOW, atk_info2);
	SendMessageToGang(gZonesData[zoneid][ZoneOwner], COLOR_RED, def_info2);

	new string[200];
	format(string,200, "[GUERRAS]: A ORG {%s}%s {FFFFFF}está atacando o território {33CCFF}%s {FFFFFF}da ORG {%s}%s.", OrgsColorTags[gZonesData[zoneid][ZoneAttacker]], OrgsNames[gZonesData[zoneid][ZoneAttacker]], TurfsCoords[zoneid][zName], OrgsColorTags[gZonesData[zoneid][ZoneOwner]], OrgsNames[gZonesData[zoneid][ZoneOwner]]);
	OOCNews(COLOR_WHITE, string);
	return true;
}

forward ShowScreenTextForGang(gangid);
public ShowScreenTextForGang(gangid)
{
	foreach(new i: Player)
	{
	    if(GetPlayerOrg(i) == gangid)
	    {
	       	TextDrawShowForPlayer(i, ServerLogo1);
	       	TextDrawShowForPlayer(i, ServerLogo2);
			//Player[i][SeeName] = true;
	       	TextDrawShowForPlayer(i, ZoneName[i]);
		}
 	}
}

forward HideScreenTextForGang(gangid, time);
public HideScreenTextForGang(gangid, time)
{
	SetTimerEx("ShowScreenTextForGang", time, 0, "i", gangid);
	foreach(new i: Player)
	{
	    if(GetPlayerOrg(i) == gangid)
	    {
	        TextDrawHideForPlayer(i, ServerLogo1);
	        TextDrawHideForPlayer(i, ServerLogo2);
	        //Player[i][SeeName] = false;
	       	TextDrawHideForPlayer(i, ZoneName[i]);
		}
 	}
}

stock SendMessageToGang(gangid, color, message[])
{
 	foreach(new i: Player)
 	{
  		if(GetPlayerOrg(i) == gangid)
  		{
			PlaySoundForPlayer(i, 1052);
			SendClientMessage(i, color, message);
		}
 	}
	return true;
}

stock TimeTextForGang(gangid, Text:textdraw, time)
{
	for (new i=0;i<= HighestID;i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(GetPlayerOrg(i) == gangid)
			{
				TimeTextForPlayer(i, textdraw, time);
			}
		}
	}

}

forward TimeTextForPlayer(playerid, Text:text, time);
public TimeTextForPlayer(playerid, Text:text, time)
{
    TextDrawShowForPlayer(playerid,text);
    SetTimerEx("HideTextTimer",time,0,"ii",playerid, _:text); // _: from Simon
}

forward HideTextTimer(playerid, Text:text);
public HideTextTimer(playerid, Text:text)
{
	TextDrawHideForPlayer(playerid, text);
}

//>-=-=-=-=-=-=-=-=-=-=-=-=-=-<//
//    War Points Functions     //
//>-=-=-=-=-=-=-=-=-=-=-=-=-=-<//
stock AddWarPoints(playerid, points)
{
	Player[playerid][WarPoints] += points;
}

stock RemoveWarPoints(playerid, points)
{
	Player[playerid][WarPoints] -= points;
}


stock GetWarPoints(playerid)
{
	return Player[playerid][WarPoints];
}


stock StartSpectate(playerid, specid)
{
	foreach(new x: Player)
	{
 		if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && Player[x][gSpectateID] == playerid)
		{
  			AdvanceSpectate(x);
   		}
    }
	if(IsPlayerInAnyVehicle(specid))
	{
		SetPlayerInterior(playerid,GetPlayerInterior(specid));
        TogglePlayerSpectating(playerid, 1);
        PlayerSpectateVehicle(playerid, GetPlayerVehicleID(specid));
        Player[playerid][gSpectateID] = specid;
        Player[playerid][gSpectateType] = ADMIN_SPEC_TYPE_VEHICLE;
    }
	else
	{
        SetPlayerInterior(playerid,GetPlayerInterior(specid));
        TogglePlayerSpectating(playerid, 1);
        PlayerSpectatePlayer(playerid, specid);
        Player[playerid][gSpectateID] = specid;
		Player[playerid][gSpectateType] = ADMIN_SPEC_TYPE_PLAYER;
    }

    SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(specid));

    new string[128];
    format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~%s - ID:%d~n~~y~~h~< Shift ~w~-~b~~h~ Space >", Player[specid][pName],specid);
	GameTextForPlayer(playerid,string,10000,3);
    return true;
}

stock StopSpectate(playerid)
{
    TogglePlayerSpectating(playerid, 0);
   	Player[playerid][gSpectateID] = INVALID_PLAYER_ID;
   	Player[playerid][gSpectateType] = ADMIN_SPEC_TYPE_NONE;
    GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~r~Spectate Desligado",1000,3);
    return true;
}

stock ConnectedPlayers()
{
        new count;
        foreach(new x: Player)
        	count++;
        return count;
}

stock AdvanceSpectate(playerid)
{
    if(ConnectedPlayers() == 2)
	{
		StopSpectate(playerid);
		return true;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && Player[playerid][gSpectateID] != INVALID_PLAYER_ID)
	{
    	for(new x = Player[playerid][gSpectateID] + 1; x <= MAX_PLAYERS; x++)
		{
    		if(x == MAX_PLAYERS)
			{
				x = 0;
			}
			if(IsPlayerConnected(x) && x != playerid)
			{
				if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && Player[x][gSpectateID] != INVALID_PLAYER_ID || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
				{
					continue;
				}
				else
				{
					StartSpectate(playerid, x);
					break;
				}
			}
		}
	}
 	return true;
}

stock ReverseSpectate(playerid)
{
    if(ConnectedPlayers() == 2) { StopSpectate(playerid); return true; }
    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && Player[playerid][gSpectateID] != INVALID_PLAYER_ID) {
            for(new x=Player[playerid][gSpectateID]-1; x>=0; x--) {
                if(x == 0) { x = MAX_PLAYERS; }
                if(IsPlayerConnected(x) && x != playerid) {
                                if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && Player[x][gSpectateID] != INVALID_PLAYER_ID ||
                                        (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
                                {
                                        continue;
                                }
                                else {
                                        StartSpectate(playerid, x);
                                        break;
                                }
                        }
                }
        }
    return true;
}

//Pichação - By Kuddy e Marcos_Marques

CMD:irpix(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new Pix;
	if(sscanf(params, "d", Pix))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/irpix <id da pichação>");

	if(Pix < 0 || Pix >= MAX_PIX)
	{
	    new PixStr[64];
	    format(PixStr, 64, "[ERRO]:{FFFFFF} Ids Possiveis: 0 à %d.", MAX_PIX-1);
	    SendClientMessage(playerid, 0xFF0000AA, PixStr);
	    return 1;
	}

	SetPlayerInterior(playerid, 0);
	SafeSetPlayerPos(playerid, Pixacao[Pix][PixX], Pixacao[Pix][PixY], Pixacao[Pix][PixZ]);
	GameTextForPlayer(playerid, "~w~Teleportando", 5000, 1);
	return true;
}

CMD:donopix(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

   	new Pix, Org;
	if(sscanf(params, "dd", Pix, Org))
		return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/donopix <id da pichação> <id da org>");

	if(Pix < 0 || Pix >= MAX_PIX)
	{
	    new PixStr[64];
	    format(PixStr, 64, "[ERRO]:{FFFFFF} Ids Possiveis: 0 à %d.", MAX_PIX-1);
	    SendClientMessage(playerid, 0xFF0000AA, PixStr);
	    return 1;
	}
	else if(Org < 1 || Org > 24)
	{
	    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Números entre 1 e 18");
		return 1;
	}

	new string[64];
	Pixacao[Pix][Dono] = Org;
	format(string, sizeof(string), "Pixação\n\nGang : %s", OrgsNames[Org]);
	Update3DTextLabelText(PixLabel[Pix], PixColors[Org], string);
	return true;
}

CMD:resetarpix(playerid, params[])
{
    if (gPlayerLogged[playerid] == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está logado.");
    if(GetAdminLevel(playerid) < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

	new string[128];
	for(new i = 0; i < MAX_PIX; i++)
	{
		Pixacao[i][Dono] = 0;
		format(string, sizeof(string), "Pixação\n\nGang : %s", OrgsNames[0]);
		Update3DTextLabelText(PixLabel[i], PixColors[0], string);
	}

	format(string, sizeof(string), "[Administração]:{008080} O administrador %s resetou todos os Piches.", Player[playerid][pName]);
	SendClientMessageToAll(COLOR_ADMIN, string);
	return true;
}

stock InitPixLoad()
{
    new Num[32],
		CurrentMs = GetTickCount();

    if(fexist(PixFile))
    {
	    for(new Pix = 0; Pix < MAX_PIX; Pix++)
	    {
	        format(Num, sizeof(Num), "Pix%d", Pix);
			Pixacao[Pix][Dono] = DOF2_GetInt(PixFile, Num);
		}
	    printf("%d Pichações Carregadas. (%d Ms)", MAX_PIX, GetTickCount() - CurrentMs);
	}
	else
	{
	    DOF2_CreateFile(PixFile);
	    for(new Pix = 0; Pix < MAX_PIX; Pix++)
	    {
	        format(Num, sizeof(Num), "Pix%d", Pix);
	        DOF2_SetInt(PixFile, Num, Pixacao[Pix][Dono]);
		}
		DOF2_SaveFile();
	    printf("%d Pichações Criadas. (%d Ms)", MAX_PIX, GetTickCount() - CurrentMs);
	}
	return 1;
}

stock SavePix()
{
    new Num[32],
		CurrentMs = GetTickCount();

    for(new Pix = 0; Pix < MAX_PIX; Pix++)
    {
        format(Num, sizeof(Num), "Pix%d", Pix);
        DOF2_SetInt(PixFile, Num, Pixacao[Pix][Dono]);
	}

    DOF2_SaveFile();
    printf("%d Pichações Salvas. (%d Ms)", MAX_PIX, GetTickCount() - CurrentMs);
    return 1;
}

//Carregar Drogas das Gangs - By Kuddy e Marcos_Marques

stock LoadGangDrugs()
{
    new Num[32],
        Gangs,
		CurrentMs = GetTickCount();

    if(fexist(OrgDrugFile))
    {
	    for(new Id = 0; Id < MAX_ORGS; Id++)
	    {
	        if(IsAGangOrgID(Id) || Id == TEAM_PREF || Id == 14 || Id == 15 || Id == 17)
	        {
		        format(Num, sizeof(Num), "%d_Drugs", Id);
				CofreOrg[Id][cfDrogas] = DOF2_GetInt(OrgDrugFile, Num);
		        format(Num, sizeof(Num), "%d_Mats", Id);
				CofreOrg[Id][cfMat] = DOF2_GetInt(OrgDrugFile, Num);
		        format(Num, sizeof(Num), "%d_Dinheiro", Id);
				CofreOrg[Id][cfDinheiro] = DOF2_GetInt(OrgDrugFile, Num);
				Gangs ++;
			}
		}
	    printf("%d Cofres Carregados. (%d Ms)", Gangs, GetTickCount() - CurrentMs);
	}
	else
	{
	    DOF2_CreateFile(OrgDrugFile);
	    for(new Id = 0; Id < MAX_ORGS; Id++)
	    {
         	if(IsAGangOrgID(Id) || Id == TEAM_PREF || Id == 14 || Id == 15 || Id == 17)
	        {
                if(Id != TEAM_PREF)
                {
    	            CofreOrg[Id][cfDrogas] = 1000;
    	            CofreOrg[Id][cfMat] = 20000;
    				CofreOrg[Id][cfDinheiro] = 10000;
                }
                else
                {
    	            CofreOrg[Id][cfDrogas] = 0;
    	            CofreOrg[Id][cfMat] = 0;
    				CofreOrg[Id][cfDinheiro] = random(100000);
                }

		        format(Num, sizeof(Num), "%d_Drugs", Id);
		        DOF2_SetInt(OrgDrugFile, Num, CofreOrg[Id][cfDrogas]);
		        format(Num, sizeof(Num), "%d_Mats", Id);
		        DOF2_SetInt(OrgDrugFile, Num, CofreOrg[Id][cfMat]);
		        format(Num, sizeof(Num), "%d_Dinheiro", Id);
		        DOF2_SetInt(OrgDrugFile, Num, CofreOrg[Id][cfDinheiro]);
				Gangs ++;
			}
		}
		DOF2_SaveFile();
	    printf("%d Cofres Criados. (%d Ms)", Gangs, GetTickCount() - CurrentMs);
	}
	CriarCofres();
	return 1;
}

stock SaveGangDrugs()
{
    new Num[32],
		Gangs,
		CurrentMs = GetTickCount();

    for(new Id = 0; Id < MAX_ORGS; Id++)
    {
        if(IsAGangOrgID(Id) || Id == TEAM_PREF || Id == 14 || Id == 15 || Id == 17)
        {
	        format(Num, sizeof(Num), "%d_Drugs", Id);
	        DOF2_SetInt(OrgDrugFile, Num, CofreOrg[Id][cfDrogas]);
	        format(Num, sizeof(Num), "%d_Mats", Id);
	        DOF2_SetInt(OrgDrugFile, Num, CofreOrg[Id][cfMat]);
	        format(Num, sizeof(Num), "%d_Dinheiro", Id);
	        DOF2_SetInt(OrgDrugFile, Num, CofreOrg[Id][cfDinheiro]);
			Gangs ++;
		}
	}

    DOF2_SaveFile();
    printf("%d Cofres Salvos. (%d Ms)", Gangs, GetTickCount() - CurrentMs);
    return 1;
}

//KuddyAutoTunne

stock KAT(i)
{
	if(KuddyCar[7] == 1) return ApplyKAT(i);

    KuddyCar[0] = CreateObject(1158,0,0,0,0,0,0);
    KuddyCar[1] = CreateObject(1116,0,0,0,0,0,0);
	KuddyCar[2] = CreateObject(1188,0,0,0,0,0,0);
	KuddyCar[3] = CreateObject(1142,0,0,0,0,0,0);
	KuddyCar[4] = CreateObject(1142,0,0,0,0,0,0);
	KuddyCar[5] = CreateObject(1112,0,0,0,0,0,0);
	KuddyCar[6] = i;
	KuddyCar[7] = 1;
	AttachObjectToVehicle(KuddyCar[0], i, -0.01948338,-0.22405702,0.89217186,0.00000000,0.00000000,0.00000000);
    AttachObjectToVehicle(KuddyCar[1], i, -0.01758121,2.64800930,-0.25782585,11.91000366,0.00000000,0.00000000);
    AttachObjectToVehicle(KuddyCar[2], i, 0.90932840,2.53044176,9.69183731-10,0.00000000,0.00000000,0.00000000);
    AttachObjectToVehicle(KuddyCar[3], i, 0.54327220,2.11655593,0.39217186,356.02999878,0.00000000,0.00000000);
    AttachObjectToVehicle(KuddyCar[4], i, -0.61936581,2.08817410,0.39217186,356.02844238,0.00000000,0.00000000);
    AttachObjectToVehicle(KuddyCar[5], i, 0.01469910,2.51393795,0.34218407,0.00000000,0.00000000,0.00000000);
	return 1;
}

stock UnloadKAT()
{
	if(KuddyCar[7] == 0) return 1;
    DestroyObject(KuddyCar[0]);
    DestroyObject(KuddyCar[1]);
	DestroyObject(KuddyCar[2]);
	DestroyObject(KuddyCar[3]);
	DestroyObject(KuddyCar[4]);
	DestroyObject(KuddyCar[5]);
	KuddyCar[6] = INVALID_VEHICLE_ID;
	KuddyCar[7] = 0;
	return 1;
}

stock ApplyKAT(i)
{
	KuddyCar[6] = i;
	AttachObjectToVehicle(KuddyCar[0], i, -0.01948338,-0.22405702,0.89217186,0.00000000,0.00000000,0.00000000);
    AttachObjectToVehicle(KuddyCar[1], i, -0.01758121,2.64800930,-0.25782585,11.91000366,0.00000000,0.00000000);
    AttachObjectToVehicle(KuddyCar[2], i, 0.90932840,2.53044176,9.69183731-10,0.00000000,0.00000000,0.00000000);
    AttachObjectToVehicle(KuddyCar[3], i, 0.54327220,2.11655593,0.39217186,356.02999878,0.00000000,0.00000000);
    AttachObjectToVehicle(KuddyCar[4], i, -0.61936581,2.08817410,0.39217186,356.02844238,0.00000000,0.00000000);
    AttachObjectToVehicle(KuddyCar[5], i, 0.01469910,2.51393795,0.34218407,0.00000000,0.00000000,0.00000000);
    return 1;
}

//ModoSA

stock SetAdminWorking(playerid, bool:Working)
{
	if(Player[playerid][pAdmin] < 1)
	{
	    Player[playerid][pAdminWork] = 0;
		return 1;
	}

    if(!strcmp(ReturnPlayer(playerid), "--")
    || !strcmp(ReturnPlayer(playerid), "Smith_Bls")
    || !strcmp(ReturnPlayer(playerid), "--"))
    {
        Player[playerid][pAdminWork] = Player[playerid][pAdmin];
        return 1;
    }

	if(Working)
	{
	    Player[playerid][pAdminWork] = Player[playerid][pAdmin];
	    return 1;
	}
	Player[playerid][pAdminWork] = 0;
	return 1;
}

stock GetAdminLevel(playerid)
{
	return Player[playerid][pAdminWork];
}

stock ShowAdminsOnMap(playerid)
{
    foreach(new i: Player) if(AdminDuty[i] == MODOSA_TRABALHANDO) SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
	return 1;
}

stock AdminMapUpdate(playerid)
{
	new bool:Show;
	if(AdminDuty[playerid] == MODOSA_TRABALHANDO) Show = true;
	else Show = false;

    foreach(new i: Player)
	{
	    if(Show) SetPlayerMarkerForPlayer(i, playerid, GetPlayerColor(playerid));
	    if(!Show) SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
	}
}

stock SetAdminColor(playerid)
{
	if(Player[playerid][pAdmin] < 1) SetPlayerColor(playerid, 0xFFFFFF00);
	else if(AdminDuty[playerid] == MODOSA_JOGANDO) SetPlayerColor(playerid, 0xFFFFFF00);
	else if(AdminDuty[playerid] == MODOSA_TRABALHANDO)
	{
	    if(AdminAfk[playerid] == 0) SetPlayerColor(playerid, 0xFFFF00FF);
	    else SetPlayerColor(playerid, 0x228B22FF);
	}
	else if(AdminDuty[playerid] == MODOSA_RPG) SetPlayerColor(playerid, 0xFFFFFF00);
	return 1;
}

//Debug

enum _dbg
{
	dbName[32],
	CurrentNumber
}
new _Debug[_dbg];

stock Debug(_Nome[], playerid = INVALID_PLAYER_ID)
{
    new str[64];
	if(!strcmp(_Nome, _Debug[dbName]))
	{
	    _Debug[CurrentNumber] ++;
	    format(str, 64, "Debug: %s - %d", _Nome, _Debug[CurrentNumber]);
	    if(IsPlayerConnected(playerid)) SendClientMessage(playerid, -1, str);
	    else print(str);
	    return 1;
	}
	format(_Debug[dbName], 32, "%s", _Nome);
    _Debug[CurrentNumber] = 0;
    format(str, 64, "Debug: %s - %d", _Nome, _Debug[CurrentNumber]);
    if(IsPlayerConnected(playerid)) SendClientMessage(playerid, -1, str);
    else print(str);
	return 1;
}

//BarDialog

stock BarCMD(playerid)
{
	new bool:Found = false;
	for(new i = 0; i < MAX_BAR; i ++)
		if(PlayerToPoint(5.0, playerid, BarCoords[i][0], BarCoords[i][1], BarCoords[i][2]))
		    Found = true;

	if(!Found) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta em um Bar.");

	ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Frituras:\n- Coxinha\n- Pastel\n- Batata Frita\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
	BarDialog[playerid] = 1;
	return 1;
}

stock BarResponse(playerid, dialogid, listitem)
{
    new string[256];
	if(dialogid == 1) //Cardapio
	{
		if(listitem == 0 || listitem == 4)
		{
			ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Frituras:\n- Coxinha\n- Pastel\n- Batata Frita\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
			BarDialog[playerid] = 1;
		    return 1;
		}
		else if(listitem == 1) ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Sabores:\n- Frango\n- Carne", "Comprar", "Sair");
		else if(listitem == 2) ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Sabores:\n- Frango\n- Carne\n- Queijo\n- Camarão", "Comprar", "Sair");
		else if(listitem == 3) ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Acompanhamento:\n- Katchup e Sal\n- Cebola e Sal\n- Completo", "Comprar", "Sair");
		else if(listitem == 5)
			{
		    if(GetPlayerGP(playerid) < 3)
		    {
		        SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem R$3.");
				ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Frituras:\n- Coxinha\n- Pastel\n- Batata Frita\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
				BarDialog[playerid] = 1;
		        return true;
		    }

		    format(string, sizeof(string), "* %s bebeu Sprunk 150ml.", PlayerGetName(playerid));
            ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);
	        ShowPlayerDialog(playerid, 1452, DIALOG_STYLE_LIST, "Cardapio", "{FF0000}Comidas:\n- Mini-Pizza R$15\n- Pizza Média R$30\n- Pizza Grande R$45\n- Pizza Familia R$200\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
		    GivePlayerGP(playerid, -3);
            GiveBizMoney(Biz_Bebidas, 9);

		    new Float:Health;
		    GetPlayerHealth(playerid, Health);
		    if(Health+3 > 100) SetPlayerHealth(playerid, 100.0);
		    else SetPlayerHealth(playerid, Health+3);
		    return 1;
		}
		else if(listitem == 6)
		{
		    if(GetPlayerGP(playerid) < 5)
		    {
		        SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem R$5.");
				ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Frituras:\n- Coxinha\n- Pastel\n- Batata Frita\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
				BarDialog[playerid] = 1;
		        return true;
		    }

		    format(string, sizeof(string), "* %s bebeu Sprunk Lata.", PlayerGetName(playerid));
            ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);
	        ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Frituras:\n- Coxinha\n- Pastel\n- Batata Frita\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
		    GivePlayerGP(playerid, -5);
            GiveBizMoney(Biz_Bebidas, 15);

		    new Float:Health;
		    GetPlayerHealth(playerid, Health);
		    if(Health+5 > 100) SetPlayerHealth(playerid, 100.0);
		    else SetPlayerHealth(playerid, Health+5);
		    return 1;
		}
		else if(listitem == 7)
		{
		    if(GetPlayerGP(playerid) < 8)
		    {
		        SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem R$8.");
				ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Frituras:\n- Coxinha\n- Pastel\n- Batata Frita\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
				BarDialog[playerid] = 1;
		        return true;
		    }

		    format(string, sizeof(string), "* %s bebeu Sprunk 600ml.", PlayerGetName(playerid));
            ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);
	        ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Frituras:\n- Coxinha\n- Pastel\n- Batata Frita\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
		    GivePlayerGP(playerid, -8);
            GiveBizMoney(Biz_Bebidas, 24);

		    new Float:Health;
		    GetPlayerHealth(playerid, Health);
		    if(Health+8 > 100) SetPlayerHealth(playerid, 100.0);
		    else SetPlayerHealth(playerid, Health+8);
		    return 1;
		}
		else if(listitem == 8)
		{
		    if(GetPlayerGP(playerid) < 15)
		    {
		        SendClientMessage(playerid, 0xFF0000AA, "[ERRO]:{FFFFFF} Você não tem R$15.");
				ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Frituras:\n- Coxinha\n- Pastel\n- Batata Frita\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
				BarDialog[playerid] = 1;
		        return true;
		    }

		    format(string, sizeof(string), "* %s bebeu Sprunk 2l.", PlayerGetName(playerid));
            ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);
	        ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Frituras:\n- Coxinha\n- Pastel\n- Batata Frita\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
		    GivePlayerGP(playerid, -15);
            GiveBizMoney(Biz_Bebidas, 45);

		    new Float:Health;
		    GetPlayerHealth(playerid, Health);
		    if(Health+15 > 100) SetPlayerHealth(playerid, 100.0);
		    else SetPlayerHealth(playerid, Health+15);
		    return 1;
		}

		BarDialogInfo[playerid][_bdItem] = listitem;
		BarDialog[playerid] = 2;
		return 1;
	}
	else if(dialogid == 2) //Sabor
	{
	    if(listitem == 0)
	    {
			ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Frituras:\n- Coxinha\n- Pastel\n- Batata Frita\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
            BarDialogInfo[playerid][_bdItem] = 0;
			BarDialog[playerid] = 1;
		    return 1;
	    }
        if(BarDialogInfo[playerid][_bdItem] == 1) ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Quantidade:\n- Caixa R$18\n- Duas R$6\n- Unica R$3", "Comprar", "Sair");
        else if(BarDialogInfo[playerid][_bdItem] == 2) ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Quantidade:\n- Caixa R$24\n- Duas R$8\n- Unica R$4", "Comprar", "Sair");
        else if(BarDialogInfo[playerid][_bdItem] == 3) ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Tamanho:\n- Grande R$20\n- Medio R$15\n- Pequeno R$10", "Comprar", "Sair");
  		BarDialogInfo[playerid][_bdSabor] = listitem;
		BarDialog[playerid] = 3;
		return 1;
	}
	else if(dialogid == 3) //Tamanho e Fim
	{
	    if(listitem == 0)
	    {
			ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Frituras:\n- Coxinha\n- Pastel\n- Batata Frita\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
            BarDialogInfo[playerid][_bdItem] = 0;
            BarDialogInfo[playerid][_bdSabor] = 0;
			BarDialog[playerid] = 1;
		    return 1;
	    }
	    new Item[32], Sabor[32], Tamanho[32], Preco;
	    Preco = BarPrecos[BarDialogInfo[playerid][_bdItem]-1][BarDialogInfo[playerid][_bdSabor]-1];

	    if(GetPlayerGP(playerid) < Preco)
	    {
			ShowPlayerDialog(playerid, BAR_DIALOG, DIALOG_STYLE_LIST, "Bar:", "{FF0000}Frituras:\n- Coxinha\n- Pastel\n- Batata Frita\n{FF0000}Bebidas:\n- Sprunk 150ml R$3\n- Sprunk Lata R$5\n- Sprunk 600ml R$8\n- Sprunk 2l R$15", "Comprar", "Sair");
            BarDialogInfo[playerid][_bdItem] = 0;
            BarDialogInfo[playerid][_bdSabor] = 0;
			BarDialog[playerid] = 1;
	        return 1;
	    }
	    GivePlayerGP(playerid, -Preco);
        GiveBizMoney(Biz_Alimentos, Preco * 3);

	    new Float:Health;
	    GetPlayerHealth(playerid, Health);
	    if(Health+Preco > 100) SetPlayerHealth(playerid, 100.0);
	    else SetPlayerHealth(playerid, Health+Preco);

        if(BarDialogInfo[playerid][_bdItem] == 1)
        {
            format(Item, 32, "Coxinhas");
            if(BarDialogInfo[playerid][_bdSabor] == 1) format(Sabor, 32, "de Frango");
            else format(Sabor, 32, "de Carne");
        }
        else if(BarDialogInfo[playerid][_bdItem] == 2)
        {
            format(Item, 32, "Pasteis");
            if(BarDialogInfo[playerid][_bdSabor] == 1) format(Sabor, 32, "de Frango");
            else if(BarDialogInfo[playerid][_bdSabor] == 2) format(Sabor, 32, "de Carne");
            else if(BarDialogInfo[playerid][_bdSabor] == 3) format(Sabor, 32, "de Queijo");
            else format(Sabor, 32, "de Camarão");
        }
        else if(BarDialogInfo[playerid][_bdItem] == 3)
        {
            format(Item, 32, "Batata Frita");
            if(BarDialogInfo[playerid][_bdSabor] == 1) format(Sabor, 32, "com Katchup e Sal");
            else if(BarDialogInfo[playerid][_bdSabor] == 2) format(Sabor, 32, "com Cebola e Sal");
            else format(Sabor, 32, "Completa");
        }

	    if(listitem == 1)
	    {
	        if(BarDialogInfo[playerid][_bdItem] == 1) format(Tamanho, 32, "Caixa");
	        else if(BarDialogInfo[playerid][_bdItem] == 2) format(Tamanho, 32, "Caixa");
	        else if(BarDialogInfo[playerid][_bdItem] == 3) format(Tamanho, 32, "Porção Grande");
	        format(string, 256, "%s comeu uma %s de %s %s.", Player[playerid][pName], Tamanho, Item, Sabor);
	    }
		else if(listitem == 2)
		{
	        if(BarDialogInfo[playerid][_bdItem] == 1) format(Tamanho, 32, "Duas");
	        else if(BarDialogInfo[playerid][_bdItem] == 2) format(Tamanho, 32, "Duas");
	        else if(BarDialogInfo[playerid][_bdItem] == 3) format(Tamanho, 32, "uma Porção Media");
	        format(string, 256, "%s comeu %s %s %s.", Player[playerid][pName], Tamanho, Item, Sabor);
		}
		else if(listitem == 3)
		{
	        if(BarDialogInfo[playerid][_bdItem] == 1) format(Tamanho, 32, "Unica");
	        else if(BarDialogInfo[playerid][_bdItem] == 2) format(Tamanho, 32, "Unica");
	        else if(BarDialogInfo[playerid][_bdItem] == 3) format(Tamanho, 32, "Porção Pequena");
	        format(string, 256, "* %s comeu uma %s %s %s.", Player[playerid][pName], Tamanho, Item, Sabor);
		}

        ProxDetectorEx(30.0, playerid, string, COLOR_PURPLE);
		return 1;
	}
	return 1;
}

//Remover Linha do Arquivo

stock fdeleteline(filename[], linetext[])
{
	new SafeString[256], SecondName[64];

	new File:Arquivo1 = fopen(filename, io_read); //Arquivo 1 = Ler

	format(SecondName, sizeof(SecondName), "%s_Safe", filename);

	new File:Arquivo2 = fopen(SecondName, io_write); //Arquivo 2 = Escrever

	while(fread(Arquivo1, SafeString)) //Passar o Texto do Arquivo 1 para o Arquivo 2
		if(!IsStringSame(linetext, SafeString, 256)) //Se o Texto nao For o Texto Deletado
			fwrite(Arquivo2, SafeString);

	fclose(Arquivo1);
	fclose(Arquivo2);

	Arquivo1 = fopen(filename, io_write); //Arquivo 1 = Escrever
	Arquivo2 = fopen(SecondName, io_read); //Arquivo 2 = Ler

	while(fread(Arquivo2, SafeString)) //Passa todo o Texto do Arquivo 2 para o Arquivo 1
		fwrite(Arquivo1, SafeString);

	fclose(Arquivo1);
	fclose(Arquivo2);

	fremove(SecondName); //Remove o Arquivo 2
	return 1;
}

//Irc

stock LoadIrc()
{
	new Tick = GetTickCount();
    for(new IrcId = 0; IrcId < MaxIrc; IrcId++)
    {
        format(thestring, 256, "/RPG/IRC/%d.ini", IrcId);
        if(!fexist(thestring))
        {
            format(IrcInfo[IrcId][IrcLider], 32, "Ninguem");
            format(IrcInfo[IrcId][IrcNome], 32, "Livre %d", IrcId + 1);
            IrcInfo[IrcId][IrcTipo] = 0;
            IrcInfo[IrcId][IrcMembros] = 0;
			IrcInfo[IrcId][IrcMaxMembros] = 20;

	        DOF2_CreateFile(thestring);
	        DOF2_SetString(thestring, "Lider", "Ninguem");
	        DOF2_SetString(thestring, "Nome", IrcInfo[IrcId][IrcNome]);
	        DOF2_SetInt(thestring, "MaxMembros", 20);
	        DOF2_SetInt(thestring, "Membros", 0);
            DOF2_SetInt(thestring, "Tipo", 0);
            DOF2_SaveFile();
            continue;
        }
        format(IrcInfo[IrcId][IrcLider], 32, DOF2_GetString(thestring, "Lider"));
        format(IrcInfo[IrcId][IrcNome], 32, DOF2_GetString(thestring, "Nome"));
        IrcInfo[IrcId][IrcTipo] = DOF2_GetInt(thestring, "Tipo");
        IrcInfo[IrcId][IrcMaxMembros] = DOF2_GetInt(thestring, "MaxMembros");
        IrcInfo[IrcId][IrcMembros] = DOF2_GetInt(thestring, "Membros");
    }
    printf("%d Ircs Carregados. (%d Ms)", MaxIrc, GetTickCount() - Tick);
	return 1;
}

stock SaveIrc()
{
	new Tick = GetTickCount();
    for(new IrcId = 0; IrcId < MaxIrc; IrcId++)
    {
        format(thestring, 256, "/RPG/IRC/%d.ini", IrcId);
        DOF2_SetString(thestring, "Lider", IrcInfo[IrcId][IrcLider]);
        DOF2_SetString(thestring, "Nome", IrcInfo[IrcId][IrcNome]);
        DOF2_SetInt(thestring, "MaxMembros", IrcInfo[IrcId][IrcMaxMembros]);
        DOF2_SetInt(thestring, "Membros", IrcInfo[IrcId][IrcMembros]);
        DOF2_SetInt(thestring, "Tipo", IrcInfo[IrcId][IrcTipo]);
        DOF2_SaveFile();
    }
    printf("%d Ircs Salvos. (%d Ms)", MaxIrc, GetTickCount() - Tick);
}

stock SendIrcMessage(IrcId, Message[])
{
	foreach(new playerid: Player)
	    if(Player[playerid][pIrcId] == IrcId)
			SendClientMessage(playerid, COLOR_YELLOW, Message);

	return 1;
}

stock SetIrc(playerid, IrcId)
{
	if(IrcId == -1)
	{
		format(thestring, 256, "[Irc]: {FFFFFF}%s saiu do Chat.", Player[playerid][pName]);
		SendIrcMessage(Player[playerid][pIrcId], thestring);
		IrcInfo[Player[playerid][pIrcId]][IrcConnectedPlayers] --;
		Player[playerid][pIrcId] = IrcId;
	    return 1;
	}
	if(Player[playerid][pIrcId] != -1) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já esta em um Chat Irc.");

	new Tipo = IrcInfo[IrcId][IrcTipo];
	if(Tipo == IrcAdmin)
	{
		if(Player[playerid][pAdmin] < 1)
		{
		    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode se Conectar a este Chat Irc.");
			return 1;
		}
	}
	else if(Tipo == IrcFamilia)
	{
		if(!MembroIrc(IrcId, Player[playerid][pName]) && LiderIrc(playerid) == -1)
		{
			SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode se Conectar a este Chat Irc.");
			return 1;
		}
	}

	Player[playerid][pIrcId] = IrcId;
	format(thestring, 256, "[Irc]: {FFFFFF}%s entrou no Chat.", Player[playerid][pName]);
	SendIrcMessage(IrcId, thestring);
	IrcInfo[IrcId][IrcConnectedPlayers] ++;
	return 1;
}

stock LiderIrc(playerid)
{
	for(new IrcId = 0; IrcId < MaxIrc; IrcId++)
	{
	    if(IsStringSame(IrcInfo[IrcId][IrcLider], Player[playerid][pName], 32))
	    {
	        return IrcId;
	    }
	}
	return -1;
}

stock MembroIrc(IrcId, NomeJogador[])
{
    format(thestring, sizeof(thestring), "/RPG/IRC/%dMembros.ini", IrcId);

    if(!fexist(thestring)) return false;

	new File:MembrosFile = fopen(thestring, io_read);
	new ReadMsg[64];

	while(fread(MembrosFile, ReadMsg))
	{
		strmid(ReadMsg, ReadMsg, 0, strlen(ReadMsg) - 2, 64);
		if(IsStringSame(ReadMsg, NomeJogador, 64))
		{
		    fclose(MembrosFile);
		    return true;
		}
	}

	fclose(MembrosFile);
	return false;
}

//Cmds Irc Player

CMD:i(playerid, params[]) return cmd_irc(playerid, params);

CMD:irc(playerid, params[]) //Falar Irc
{
	if(Player[playerid][pIrcId] == -1) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta em um Chat Irc.");
	new Msg[128];
	if(sscanf(params, "s[128]", Msg))
	{
	    SendClientMessage(playerid, COLOR_GREY, "[USO]:{FFFFFF} (/I)rc <Mensagem>");
	    return 1;
	}

	format(thestring, 256, "[Irc]:{FFFF00} %s:{FFFFFF} %s", Player[playerid][pName], Msg);
	SendIrcMessage(Player[playerid][pIrcId], thestring);
	return 1;
}

CMD:irclista(playerid) //Lista dos Canais IRC
{
	new BigString[(MaxIrc + (MaxIrc / 4)) * 96]; //MaxIrc = 20, (20 + (20 / 4)) [25] * 96 = 2400
	for(new IrcId = 0; IrcId < MaxIrc; IrcId++)
	{
	    if(IrcInfo[IrcId][IrcTipo] == IrcLivre) format(thestring, sizeof(thestring), "{FFFFFF}%d - {FF0000}%s {0066FF}(%d)\n", IrcId + 1, IrcInfo[IrcId][IrcNome], IrcInfo[IrcId][IrcConnectedPlayers]);
	    else if(IrcInfo[IrcId][IrcTipo] == IrcAdmin) format(thestring, sizeof(thestring), "{FFFFFF}%d - {FF0000}%s\n", IrcId + 1, IrcInfo[IrcId][IrcNome]);
	    else if(IrcInfo[IrcId][IrcTipo] == IrcFamilia) format(thestring, sizeof(thestring), "{FFFFFF}%d - {FF0000}%s - %s {0066FF}(%02d/%02d)\n", IrcId + 1, IrcInfo[IrcId][IrcNome], IrcInfo[IrcId][IrcLider], IrcInfo[IrcId][IrcConnectedPlayers], IrcInfo[IrcId][IrcMembros]);
		strcat(BigString, thestring);
	}
	ShowPlayerDialog(playerid, 131, DIALOG_STYLE_MSGBOX, "Lista de Canais IRC:", BigString, "Fechar", "");
	return 1;
}

CMD:ircmembros(playerid) //Lista dos Players Conectados/Liberados no IRC
{
	if(Player[playerid][pIrcId] == -1) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta em um Chat Irc.");
	if(IrcInfo[Player[playerid][pIrcId]][IrcTipo] != IrcFamilia)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "Lista de Pessoas no IRC:");
	    foreach(new pId: Player)
	    {
	        if(Player[pId][pIrcId] == Player[playerid][pIrcId])
	        {
	            format(thestring, 256, "- %s", Player[pId][pName]);
	            SendClientMessage(playerid, -1, thestring);
	        }
	    }
	    SendClientMessage(playerid, COLOR_GREEN, "|---|");
	    return 1;
	}
	new BigString[2048], File:Arquivo, ArquivoString[64], pId, IrcId;

	IrcId = Player[playerid][pIrcId];

	if(!IsStringSame(IrcInfo[IrcId][IrcLider], "Ninguem", MAX_PLAYER_NAME))
	{
	    pId = IsPlayerConnectedEx(IrcInfo[IrcId][IrcLider]);
	    if(IsPlayerConnected(pId)) format(thestring, 256, "{FF0000}%s - {00D900}Online", IrcInfo[IrcId][IrcLider]);
	    else format(thestring, 256, "{FF0000}%s - {AA3333}Offline", IrcInfo[IrcId][IrcLider]);
	    strcat(BigString, thestring);
	}
	format(thestring, 256, "/RPG/IRC/%dMembros.ini", Player[playerid][pIrcId]);
	Arquivo = fopen(thestring, io_read);
	while(fread(Arquivo, ArquivoString))
	{
	    if(ArquivoString[0] != 0)
	    {
			strmid(ArquivoString, ArquivoString, 0, strlen(ArquivoString) - 2, 64);
			pId = IsPlayerConnectedEx(ArquivoString);
		    if(IsPlayerConnected(pId)) format(thestring, 256, "\n{FFFFFF}%s - {00D900}Online", ArquivoString);
		    else format(thestring, 256, "\n{FFFFFF}%s - {AA3333}Offline", ArquivoString);
		    strcat(BigString, thestring);
		}
	}
	ShowPlayerDialog(playerid, 131, DIALOG_STYLE_MSGBOX, "Lista de Membros:", BigString, "Fechar", "");
	return 1;
}

CMD:ircentrar(playerid, params[])
{
	if(Player[playerid][pIrcId] != -1) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já esta em um Chat Irc.");
	if(TempoEntre(IrcTime[playerid]) < 30000) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você so pode entrar em um IRC de 30 em 30 Segundos.");
	new IrcId;
	if(sscanf(params, "d", IrcId))
	{
	    SendClientMessage(playerid, COLOR_GREY, "[USO]:{FFFFFF} /IrcEntrar <IrcID> {FFFF00}(/IrcLista)");
	    return 1;
	}

	if(IrcId < 1 || IrcId > MaxIrc) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} IrcID Invalido.");

	SetIrc(playerid, IrcId - 1);
    IrcTime[playerid] = GetTickCount();
	return 1;
}

CMD:ircsair(playerid)
{
	if(Player[playerid][pIrcId] == -1) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta em um Chat Irc.");

	SetIrc(playerid, -1);
	return 1;
}

//Cmds Irc Lider

CMD:ircconvidar(playerid, params[])
{
	if(LiderIrc(playerid) == -1) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é Lider de um Irc.");
//	else if(Player[playerid][pIrcId] != LiderIrc(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é esta no seu Irc.");
	else if(IrcInfo[LiderIrc(playerid)][IrcTipo] != IrcFamilia) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Seu Irc não tem esta Função.");
	else if(IrcInfo[LiderIrc(playerid)][IrcMembros] >= IrcInfo[LiderIrc(playerid)][IrcMaxMembros]) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Seu Irc atingiu o Maximo de Players.");

	new InvitePlayer[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", InvitePlayer))
	{
	    SendClientMessage(playerid, COLOR_GREY, "[USO]:{FFFFFF} /IrcConvidar <NomeDoJogador>");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Obs]:{FFFFFF} Nome Exato(Ex: Correto: Marcos_Marques. Incorreto: mArCoS_Marques), não o ID. Pode estar Off-Line.");
	    return 1;
	}

	new IrcId = LiderIrc(playerid);
	format(thestring, 256, "/RPG/users/%s.ini", InvitePlayer);
	if(strfind(InvitePlayer, "_") == -1 || !fexist(thestring)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Jogador Não Registrado.");

	format(thestring, 256, "/RPG/IRC/%dMembros.ini", IrcId);
    new File:MembrosFile = fopen(thestring, io_append);
	format(thestring, 256, "%s\r\n", InvitePlayer);
	fwrite(MembrosFile, thestring);
	fclose(MembrosFile);

	IrcInfo[IrcId][IrcMembros] ++;
	new pId = ReturnUser(InvitePlayer);

	if(IsPlayerConnected(pId))
	{
	    format(thestring, 256, "[Irc]: {FFFFFF}O Lider do Canal Irc %s(%s - Id %d) liberou o seu Acesso. /IrcEntrar.", Player[playerid][pName], IrcInfo[IrcId][IrcNome], IrcId + 1);
	    SendClientMessage(pId, COLOR_YELLOW, thestring);

	    format(thestring, 256, "[Irc]: {FFFFFF}Você liberou o Acesso de %s(%d) ao seu Irc.", InvitePlayer, pId);
		SendClientMessage(playerid, COLOR_YELLOW, thestring);
		return 1;
	}

    format(thestring, 256, "[Irc]: {FFFFFF}Você liberou o Acesso de %s ao seu Irc.", InvitePlayer);
	SendClientMessage(playerid, COLOR_YELLOW, thestring);

	format(thestring, 256, "%s adicionou %s para Irc %d.", Player[playerid][pName], InvitePlayer, IrcId);
    WriteLog("Irc", thestring);
	return 1;
}

CMD:ircremover(playerid, params[])
{
	if(LiderIrc(playerid) == -1) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é Lider de um Irc.");
//	else if(Player[playerid][pIrcId] != LiderIrc(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é esta no seu Irc.");
	else if(IrcInfo[LiderIrc(playerid)][IrcTipo] != IrcFamilia) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Seu Irc não tem esta Função.");

	new RemovePlayer[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", RemovePlayer))
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "[USO]:{FFFFFF} /IrcRemover <NomeDoJogador>");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Obs]:{FFFFFF} Nome Exato(Ex: Correto: Marcos_Marques. Incorreto: mArCoS_Marques), não o ID. Pode estar Off-Line.");
	    return 1;
	}

	new IrcId = LiderIrc(playerid);
	if(!MembroIrc(IrcId, RemovePlayer)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este jogador não tem Acesso ao seu Irc.");

	new RemoveLine[128];
	format(thestring, 256, "/RPG/IRC/%dMembros.ini", IrcId);
	format(RemoveLine, 128, "%s\r\n", RemovePlayer);
	fdeleteline(thestring, RemoveLine);

	IrcInfo[IrcId][IrcMembros] --;
	new pId = ReturnUser(RemovePlayer);

	if(IsPlayerConnected(pId))
	{
	    format(thestring, 256, "[Irc]: {FFFFFF}O Lider do Canal Irc %s(%s) removeu o seu Acesso.", Player[playerid][pName], IrcInfo[IrcId][IrcNome]);
	    SendClientMessage(pId, COLOR_YELLOW, thestring);

	    format(thestring, 256, "[Irc]: {FFFFFF}Você removeu o Acesso de %s(%d) ao seu Irc.", RemovePlayer, pId);
		SendClientMessage(playerid, COLOR_YELLOW, thestring);

		if(Player[pId][pIrcId] == IrcId) SetIrc(pId, -1);
		return 1;
	}

    format(thestring, 256, "[Irc]: {FFFFFF}Você removeu o Acesso de %s ao seu Irc.", RemovePlayer);
	SendClientMessage(playerid, COLOR_YELLOW, thestring);

	format(thestring, 256, "%s removeu %s do Irc %d.", Player[playerid][pName], RemovePlayer, IrcId);
    WriteLog("Irc", thestring);
	return 1;
}

CMD:ircnome(playerid, params[])
{
	if(LiderIrc(playerid) == -1) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é Lider de um Irc.");
//	else if(Player[playerid][pIrcId] != LiderIrc(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é esta no seu Irc.");

	new SetName[32];
	if(sscanf(params, "s[32]", SetName))
	{
	    SendClientMessage(playerid, COLOR_GREY, "[USO]:{FFFFFF} /IrcNome <Nome>");
	    return 1;
	}

	new IrcId = LiderIrc(playerid);
	format(IrcInfo[IrcId][IrcNome], 32, SetName);

	format(thestring, 256, "[Irc]: {FFFFFF}%s trocou o Nome do Irc para %s.", Player[playerid][pName], SetName);
	SendIrcMessage(IrcId, thestring);

	format(thestring, 256, "%s trocou o Nome do Irc %d para %s.", Player[playerid][pName], IrcId, SetName);
    WriteLog("Irc", thestring);
	return 1;
}

//Cmds Irc Admin

CMD:irclider(playerid, params[])
{
	if(GetAdminLevel(playerid) < 5) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando.");

	new pId, IrcId;
	if(sscanf(params, "ud", pId, IrcId))
	{
	    SendClientMessage(playerid, COLOR_GREY, "[USO]:{FFFFFF} /IrcLider <PlayerID/Nome> <IrcID> {FFFF00}(/IrcLista)");
	    return 1;
	}

	if(IrcId < 1 || IrcId > MaxIrc) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} IrcID Invalido.");
	IrcId --;

	for(new Id = 0; Id < MaxIrc; Id++)
	    if(IsStringSame(Player[pId][pName], IrcInfo[Id][IrcLider], 32))
			return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este Jogador já é Lider de um Irc.");

	format(IrcInfo[IrcId][IrcLider], 32, Player[pId][pName]);
	IrcInfo[IrcId][IrcMembros] ++;

	format(thestring, 256, "{FF0000}[Info]:{FFFFFF} %s deu Lider do Irc %s(%d) para %s.", Player[playerid][pName], IrcInfo[IrcId][IrcNome], IrcId + 1, Player[pId][pName]);
	SendClientMessageToAll(SERVER_INFO, thestring);
	SendClientMessage(pId, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Use /Ajuda > Irc para Saber os Novos Comandos.");

    format(thestring, 256, "%s deu Lider do Irc %d para %s.", Player[playerid][pName], IrcId, Player[pId][pName]);
    WriteLog("Irc", thestring);
    WriteLog("Admins2", thestring);
	return 1;
}

CMD:irctirarlider(playerid, params[])
{
	if(GetAdminLevel(playerid) < 5) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando.");

	new IrcId;
	if(sscanf(params, "d", IrcId))
	{
	    SendClientMessage(playerid, COLOR_GREY, "[USO]:{FFFFFF} /IrcTirarLider <IrcID> {FFFF00}(/IrcLista)");
	    return 1;
	}

	if(IrcId < 1 || IrcId > MaxIrc) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} IrcID Invalido.");
	IrcId --;

	if(IsStringSame(IrcInfo[IrcId][IrcLider], "Ninguem", 32)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este Irc não tem Lider.");

	format(IrcInfo[IrcId][IrcLider], 32, "Ninguem");

	format(thestring, 256, "{FF0000}[Info]:{FFFFFF} %s removeu o Lider do Irc %s(%d).", Player[playerid][pName], IrcInfo[IrcId][IrcNome], IrcId + 1);
	SendClientMessageToAll(SERVER_INFO, thestring);

    format(thestring, 256, "%s deu Lider do Irc %d.", Player[playerid][pName], IrcId);
    WriteLog("Irc", thestring);
    WriteLog("Admins2", thestring);
	return 1;
}

CMD:ircresetar(playerid, params[])
{
	if(GetAdminLevel(playerid) < 5) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando.");

	new IrcId;
	if(sscanf(params, "d", IrcId))
	{
	    SendClientMessage(playerid, COLOR_GREY, "[USO]:{FFFFFF} /IrcResetar <IrcID> {FFFF00}(/IrcLista)");
	    return 1;
	}

	if(IrcId < 1 || IrcId > MaxIrc) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} IrcID Invalido.");
	IrcId --;

	format(thestring, 256, "{FF0000}[Info]:{FFFFFF} %s resetou o Irc %s(%d).", Player[playerid][pName], IrcInfo[IrcId][IrcNome], IrcId + 1);
	SendClientMessageToAll(SERVER_INFO, thestring);

	format(IrcInfo[IrcId][IrcLider], 32, "Ninguem");
	IrcInfo[IrcId][IrcMembros] = 0;
	IrcInfo[IrcId][IrcMaxMembros] = 20;

	format(thestring, 256, "/RPG/IRC/%dMembros.ini", IrcId);
	if(fexist(thestring)) fremove(thestring);

	foreach(new i: Player)
	    if(Player[i][pIrcId] == IrcId)
	        SetIrc(i, -1);

    format(thestring, 256, "%s resetou o Irc %d.", Player[playerid][pName], IrcId);
    WriteLog("Irc", thestring);
    WriteLog("Admins2", thestring);
	return 1;
}

CMD:irceditar(playerid, params[])
{
	if(GetAdminLevel(playerid) < 7) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando.");

	new IrcId, IrcStatus, IrcInfo_[32];
	if(sscanf(params, "dds[32]", IrcId, IrcStatus, IrcInfo_))
	{
	    SendClientMessage(playerid, COLOR_GREY, "[USO]:{FFFFFF} /IrcEditar <IrcID> <Status> <Info> {FFFF00}(/IrcLista)");
	    SendClientMessage(playerid, COLOR_YELLOW, "[Status]:{FFFFFF} 1 - Nome 2 - MaxMembros 3 - Lider 4 - Tipo");
	    return 1;
	}

	if(IrcId < 1 || IrcId > MaxIrc) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} IrcID Invalido.");
	IrcId --;

	if(IrcStatus == 1)
	{
	    format(IrcInfo[IrcId][IrcNome], 32, IrcInfo_);

	    SendClientMessage(playerid, COLOR_YELLOW, "[Irc]: {FFFFFF}Nome Alterado.");
	    return 1;
	}
	else if(IrcStatus == 2)
	{
	    if(!IsNumeric(IrcInfo_))
	    {
		    SendClientMessage(playerid, COLOR_GREY, "[USO]:{FFFFFF} /IrcEditar <IrcID> <Status> <Info> {FFFF00}(/IrcLista)");
		    SendClientMessage(playerid, COLOR_YELLOW, "[Status]:{FFFFFF} 1 - Nome 2 - MaxMembros 3 - Lider 4 - Tipo");
		    return 1;
	    }
	    IrcInfo[IrcId][IrcMaxMembros] = strval(IrcInfo_);

	    SendClientMessage(playerid, COLOR_YELLOW, "[Irc]: {FFFFFF}MaxMembros Alterado.");
	    return 1;
	}
	else if(IrcStatus == 3)
	{
	    format(IrcInfo[IrcId][IrcLider], 32, IrcInfo_);

	    SendClientMessage(playerid, COLOR_YELLOW, "[Irc]: {FFFFFF}MaxMembros Alterado.");
	    return 1;
	}
	else if(IrcStatus == 4)
	{
	    if(!IsNumeric(IrcInfo_))
	    {
		    SendClientMessage(playerid, COLOR_GREY, "[USO]:{FFFFFF} /IrcEditar <IrcID> <Status> <Info> {FFFF00}(/IrcLista)");
		    SendClientMessage(playerid, COLOR_YELLOW, "[Status]:{FFFFFF} 1 - Nome 2 - MaxMembros 3 - Lider 4 - Tipo");
		    return 1;
	    }
	    IrcInfo[IrcId][IrcTipo] = strval(IrcInfo_);

	    SendClientMessage(playerid, COLOR_YELLOW, "[Irc]: {FFFFFF}Tipo Alterado.");
	}
	else if(IrcStatus == 149)
	{
	    if(!IsNumeric(IrcInfo_))
	    {
		    SendClientMessage(playerid, COLOR_GREY, "[USO]:{FFFFFF} /IrcEditar <IrcID> <Status> <Info> {FFFF00}(/IrcLista)");
		    SendClientMessage(playerid, COLOR_YELLOW, "[Status]:{FFFFFF} 1 - Nome 2 - MaxMembros 3 - Lider 4 - Tipo");
		    return 1;
	    }
	    IrcInfo[IrcId][IrcMembros] = strval(IrcInfo_);

	    SendClientMessage(playerid, COLOR_YELLOW, "[Irc]: {FFFFFF}Membros Alterado.");
	}
	else
	{
	    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Status Invalido.");
	    return 1;
	}
	return 1;
}

//Sistema de Desafio

CMD:iniciardesafio(playerid)
{
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	if(!g_e@b_checker)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O evento não está carregado, animal!");

    IniciarKoEvent();
	return 1;
}

CMD:carregardesafio(playerid, params[])
{
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	if(g_e@b_checker)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Já tem um evento Carregado.");

	new NomeEvento[32];
	if(sscanf(params, "s[32]", NomeEvento))
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/CarregarDesafio <Nome>");

	new FileName[64];
	format(FileName, 64, "RPG/AdEvents/%s.cfg", NomeEvento);
	if(!fexist(FileName)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Esse arquivo não existe.");

    PrepararKoEvent(NomeEvento);
	return 1;
}

CMD:descarregardesafio(playerid, params[])
{
    if(GetAdminLevel(playerid) < 7)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	if(!g_e@b_checker)
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não há desafios carregados!");

    g_e@b_checker = false;
    g_e@b_started = false;
    //drINI_UnloadLoadedObjects();
	return 1;
}

//Sistema de Evento

stock CriarVeiculo_Evento(string[])
{
	new	ItemInfo[7][16],
		VehicleModel,
		Float:Pos[3],
		Float:Rot,
		Color[2],
		VehId;

    if(strfind(string, "CreateVehicle(", true) == -1) return 0;
    //Deixar Apenas Numeros e Virgulas
    strdel(string, 0, strlen("CreateVehicle("));
    strdel(string, strfind(string, ");", true), strlen(string));
    //Separar Numeros das Virgulas
    split(string, ItemInfo, ',');
	//Carregar
	VehicleModel = strval(ItemInfo[0]);
	Pos[0] = floatstr(ItemInfo[1]);
	Pos[1] = floatstr(ItemInfo[2]);
	Pos[2] = floatstr(ItemInfo[3]);
	Rot = floatstr(ItemInfo[4]);
	Color[0] = strval(ItemInfo[5]);
	Color[1] = strval(ItemInfo[6]);
	//Criar
	VehId = CreateVehicle(VehicleModel, Pos[0], Pos[1], Pos[2], Rot, Color[0], Color[1], -1);
    LinkVehicleToInterior(VehId, EventoInfo[EventoInt]);

    if(EventoInfo[EventoNos]) AddVehicleComponent(VehId, 1010);
	EventoInfo[VeiculoEvento][VehId] = true;
	VehicleInfo[VehId][vCustom] = true;
    VehicleInfo[VehId][vUseGas] = false;
    VehicleInfo[VehId][vGas] = GasMax;
	return VehId;
}

stock GetEventoCP(id, string[])
{
	new	ItemInfo[3][16];

    //Separar Numeros das Virgulas
    split(string, ItemInfo, ',');
	//Carregar
	EventoCheckPoint[id][0] = floatstr(ItemInfo[0]);
	EventoCheckPoint[id][1] = floatstr(ItemInfo[1]);
	EventoCheckPoint[id][2] = floatstr(ItemInfo[2]);
	return 1;
}

stock GetEventoSpawn(string[], &Float:spawnX, &Float:spawnY, &Float:spawnZ)
{
	new	ItemInfo[3][16];

    //Separar Numeros das Virgulas
    split(string, ItemInfo, ',');
	//Carregar
	spawnX = floatstr(ItemInfo[0]);
	spawnY = floatstr(ItemInfo[1]);
	spawnZ = floatstr(ItemInfo[2]);
	return 1;
}

stock CarregarEvento(Name[])
{
	new FileName[64];
	format(FileName, 64, "%s%s.ini", PastaEvento, Name);

	if(!fexist(FileName)) return -1;

    format(EventoInfo[EventoArquivo], 32, "%s", Name);

	EventoInfo[EventoCarregado] = true;

	EventoInfo[EventoVeiculos] = DOF2_GetBool(FileName, "TemVeiculos");
	EventoInfo[EventoArmas] = DOF2_GetBool(FileName, "TemArmas");
	EventoInfo[EventoCP] = DOF2_GetBool(FileName, "TemCP");
	EventoInfo[EventoObjetos] = DOF2_GetBool(FileName, "TemObjetos");

    format(EventoInfo[EventoNome], 32, DOF2_GetString(FileName, "Nome"));

	format(thestring, 256, "%s", DOF2_GetString(FileName, "Spawn"));
    GetEventoSpawn(thestring, EventoInfo[EventoSpawn][0], EventoInfo[EventoSpawn][1], EventoInfo[EventoSpawn][2]);
    EventoInfo[EventoInt] = DOF2_GetInt(FileName, "Interior");

    EventoInfo[EventoNoAnim] = DOF2_GetBool(FileName, "NaoPodeAnim");
    EventoInfo[EventoSkin][0] = DOF2_GetInt(FileName, "Skin");

	EventoInfo[EventoGanhador][0] = false;
	EventoInfo[EventoGanhador][1] = false;
	EventoInfo[EventoGanhador][2] = false;

	if(EventoInfo[EventoVeiculos])
	{
		new VehicleStr[128];
	    EventoInfo[NumeroVeiculos] = DOF2_GetInt(FileName, "QuantidadeVeiculos");
	    EventoInfo[EventoNos] = DOF2_GetBool(FileName, "Nos");
        EventoInfo[EventoRace] = DOF2_GetBool(FileName, "EventoRace");

        if(!EventoInfo[EventoRace])
        {
    	    for(new i = 0; i < EventoInfo[NumeroVeiculos]; i++)
    	    {
    	        format(thestring, 256, "Veiculo%d", i);
    	        format(VehicleStr, 128, "%s", DOF2_GetString(FileName, thestring));
    	        CriarVeiculo_Evento(VehicleStr);
    	    }
        }
	}
	if(EventoInfo[EventoArmas])
	{
	    EventoInfo[EventoColete] = DOF2_GetBool(FileName, "Colete");
        EventoInfo[EventoTDM] = DOF2_GetBool(FileName, "EventoTDM");

	    for(new i = 0; i < 12; i++)
	    {
	        format(thestring, 256, "Arma%d", i);
	        EventoInfo[ArmaEvento][i] = DOF2_GetInt(FileName, thestring);
	    }
        if(EventoInfo[EventoTDM])
        {
            EventoInfo[EventoNoFF] = DOF2_GetBool(FileName, "NoFriendlyFire");
            EventoInfo[EventoSkin][1] = DOF2_GetInt(FileName, "Skin2");
            format(thestring, 256, "%s", DOF2_GetString(FileName, "Spawn2"));
            GetEventoSpawn(thestring, EventoInfo[EventoSpawn2][0], EventoInfo[EventoSpawn2][1], EventoInfo[EventoSpawn2][2]);
        }
	}
	if(EventoInfo[EventoCP])
	{
	    new CheckStr[128];
	    EventoInfo[NumeroCheck] = DOF2_GetInt(FileName, "QuantiaCP");

	    for(new i = 0; i < EventoInfo[NumeroCheck]; i++)
	    {
	        format(thestring, 256, "CP%d", i);
	        format(CheckStr, 128, "%s", DOF2_GetString(FileName, thestring));
	        GetEventoCP(i, CheckStr);
	    }
	}
	/*if(EventoInfo[EventoObjetos])
	{
	    format(thestring, 64, "%s%sObjetos.ini", PastaEvento, Name);
	    drINI_LoadObjectsFromFile(thestring);
	}*/
	return 1;
}

stock DescarregarEvento()
{
	if(!EventoInfo[EventoCarregado]) return -1;

	EventoInfo[EventoCarregado] = false;

	EventoInfo[EventoVeiculos] = false;
	EventoInfo[EventoArmas] = false;
	EventoInfo[EventoCP] = false;

	format(EventoInfo[EventoNome], 32, "Nenhum");

	EventoInfo[EventoSpawn][0] = 0.0;
	EventoInfo[EventoSpawn][1] = 0.0;
	EventoInfo[EventoSpawn][2] = 0.0;

	EventoInfo[EventoInt] = 0;
    EventoInfo[EventoSkin][0] = 0;

    EventoInfo[EventoNoAnim] = false;

	EventoInfo[EventoGanhador][0] = false;
	EventoInfo[EventoGanhador][1] = false;
	EventoInfo[EventoGanhador][2] = false;

	EventoInfo[NumeroVeiculos] = 0;
	EventoInfo[EventoNos] = false;
	EventoInfo[EventoRace] = false;

	for(new i = 0; i < MAX_VEHICLES; i++)
    {
		if(EventoInfo[VeiculoEvento][i])
		{
		    EventoInfo[VeiculoEvento][i] = false;
		    VehicleInfo[i][vCustom] = false;
            VehicleInfo[i][vUseGas] = true;
		    DestroyVehicle(i);
		}
	}

	EventoInfo[EventoColete] = false;

    EventoInfo[EventoTDM] = false;

    for(new i = 0; i < 12; i++)
    {
		EventoInfo[ArmaEvento][i] = 0;
    }

    EventoInfo[EventoNoFF] = false;
    EventoInfo[EventoSkin][1] = 0;
	EventoInfo[EventoSpawn2][0] = 0.0;
	EventoInfo[EventoSpawn2][1] = 0.0;
	EventoInfo[EventoSpawn2][2] = 0.0;

    EventoInfo[NumeroCheck] = 0;

    for(new i = 0; i < sizeof(EventoCheckPoint); i++)
    {
       	EventoCheckPoint[i][0] = 0.0;
		EventoCheckPoint[i][1] = 0.0;
		EventoCheckPoint[i][2] = 0.0;
    }

    /*if(EventoInfo[EventoObjetos])
    {
        EventoInfo[EventoObjetos] = false;
        drINI_UnloadLoadedObjects();
    }*/
	return 1;
}

stock SetPlayerEventoCP(playerid, CPID)
{
    if(CPID == EventoInfo[NumeroCheck] - 1)
        return SetPlayerRaceCheckpoint(playerid, 1, EventoCheckPoint[CPID][0], EventoCheckPoint[CPID][1], EventoCheckPoint[CPID][2], 0.0, 0.0, 0.0, 5.0);

    SetPlayerRaceCheckpoint(playerid, 0, EventoCheckPoint[CPID][0], EventoCheckPoint[CPID][1], EventoCheckPoint[CPID][2], EventoCheckPoint[CPID + 1][0], EventoCheckPoint[CPID + 1][1], EventoCheckPoint[CPID + 1][2], 5.0);
	return 1;
}

stock AbrirEvento(playerid, bool:eventoCarregado)
{
    for(new pId = 0; pId < MAX_PLAYERS; pId++)
    {
        EventoInfo[InscritoEvento][pId] = false;
        EventoInfo[EventoTeam][pId] = 0;
        noevento[pId] = false;
    }

    if(eventoCarregado && EventoInfo[EventoCarregado])
    {
		evento = 1;
		format(thestring, sizeof(thestring), "[Administração]:{008080} Inscrições para o evento abertas. Use o comando /inscreverevento para se inscrever.");
		SendClientMessageToAll(COLOR_ADMIN, thestring);

        if(EventoInfo[EventoSpawn][0] == 0.0 && EventoInfo[EventoSpawn][1] == 0.0 && EventoInfo[EventoSpawn][2] == 0.0)
            GetPlayerPos(playerid, EventoDest[0], EventoDest[1], EventoDest[2]);
        else
        {
    		EventoDest[0] = EventoInfo[EventoSpawn][0];
    		EventoDest[1] = EventoInfo[EventoSpawn][1];
    		EventoDest[2] = EventoInfo[EventoSpawn][2];
        }
        eventoint = EventoInfo[EventoInt];
		eventovw = 0;
    }
	else
	{
		evento = 1;
		format(thestring, sizeof(thestring), "[Administração]:{008080} Inscrições para o evento abertas. Use o comando /inscreverevento para se inscrever.");
		SendClientMessageToAll(COLOR_ADMIN,thestring);
		GetPlayerPos(playerid, EventoDest[0],EventoDest[1],EventoDest[2]);
		eventoint = GetPlayerInterior(playerid);
		eventovw = GetPlayerVirtualWorld(playerid);
    }
    return 1;
}

CMD:listaeventos(playerid, params[])
{
    if(GetAdminLevel(playerid) < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");

    ShowAjuda(playerid, "ListaEventos", false);
	return 1;
}

CMD:carregarevento(playerid, params[])
{
    if(GetAdminLevel(playerid) < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	if(EventoInfo[EventoCarregado])
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Já tem um evento Carregado.");

	new NomeEvento[32];
	if(sscanf(params, "s[32]", NomeEvento))
	    return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/CarregarEvento <Nome>");

	new FileName[64];
	format(FileName, 64, "%s%s.ini", PastaEvento, NomeEvento);
	if(!fexist(FileName)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Esse arquivo não existe.");

    CarregarEvento(NomeEvento);
    SafeSetPlayerPos(playerid, EventoInfo[EventoSpawn][0], EventoInfo[EventoSpawn][1], EventoInfo[EventoSpawn][2]);
    SetPlayerInterior(playerid, EventoInfo[EventoInt]);
    SetPlayerVirtualWorld(playerid, 0);

    format(thestring, 256, "{FF0000}[Info]:{FFFFFF} Você carregou um Evento. Nome: %s.", EventoInfo[EventoNome]);
    SendClientMessage(playerid, SERVER_INFO, thestring);

    if(EventoInfo[EventoRace])
    {
        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Para Iniciar a Corrida use /LiberarVeiculosEvento.");
        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Para Criar mais Veiculos para Corrida use /VEvento (/veh não irá funcionar).");
    }
    return 1;
}

CMD:descarregarevento(playerid)
{
    if(GetAdminLevel(playerid) < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	if(!EventoInfo[EventoCarregado])
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não tem um evento Carregado.");

    DescarregarEvento();

    SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você descarregou o Evento.");
	return 1;
}

CMD:removerveiculosevento(playerid)
{
    if(GetAdminLevel(playerid) < 4)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar este comando.");
	if(!EventoInfo[EventoCarregado])
	    return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não tem um evento carregado.");

	new bool:VeiculoUsado[MAX_VEHICLES];
	foreach(new pId: Player)
		if(IsPlayerInAnyVehicle(playerid) && EventoInfo[VeiculoEvento][GetPlayerVehicleID(playerid)])
		    VeiculoUsado[GetPlayerVehicleID(playerid)] = true;

	for(new i = 0; i < MAX_VEHICLES; i++)
    {
		if(EventoInfo[VeiculoEvento][i] && !VeiculoUsado[i])
		{
		    DestroyVehicle(i);
            VehicleInfo[i][vCustom] = false;
		    EventoInfo[VeiculoEvento][i] = false;
		}
	}

	SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Você removeu os veiculos inutilizados do evento.");
	return 1;
}

/*drObjects

new bool:_IsObjectLoaded[MAX_OBJECTS],
	LoadedObjects = 0,
	LastObjectID;

stock drIsObjectLoaded(objectid)
{
	return _IsObjectLoaded[objectid];
}

stock drINI_LoadObjectsFromFile(const FileName[])
{
	if(!fexist(FileName)) return printf("%s File Not Found", FileName);
	else if(LoadedObjects != 0) return 0;

	new File:drFile = fopen(FileName, io_read),
		drObjectLine[256],
		drInfo[7][32],
		ObjectModel,
		Float:Pos[3],
		Float:Rot[3],
		ObjectID;

	while(fread(drFile, drObjectLine) && LastObjectID < MAX_OBJECTS)
	{
	    LoadedObjects ++;
	    if(strfind(drObjectLine, "CreateObject(", true) == -1) continue;
	    //Deixar Apenas Numeros e Virgulas
	    strdel(drObjectLine, 0, strlen("CreateObject("));
	    strdel(drObjectLine, strfind(drObjectLine, ");", true), strlen(drObjectLine));
	    //Separar Numeros das Virgulas
	    split(drObjectLine, drInfo, ',');
		//Carregar
		ObjectModel = strval(drInfo[0]);
		Pos[0] = floatstr(drInfo[1]);
		Pos[1] = floatstr(drInfo[2]);
		Pos[2] = floatstr(drInfo[3]);
		Rot[0] = floatstr(drInfo[4]);
		Rot[1] = floatstr(drInfo[5]);
		Rot[2] = floatstr(drInfo[6]);
		//Criar
		ObjectID = CreateDynamicObject(ObjectModel, Pos[0], Pos[1], Pos[2], Rot[0], Rot[1], Rot[2]);
		//Setar
		_IsObjectLoaded[ObjectID] = true;
	    LastObjectID = ObjectID;
	}
	return 1;
}

stock drINI_UnloadLoadedObjects()
{
	if(!LoadedObjects) return 0;
	new CurrentObject = 0;
	while(CurrentObject <= LastObjectID)
	{
	    CurrentObject ++;
	    if(!_IsObjectLoaded[CurrentObject]) continue;
	    DestroyDynamicObject(CurrentObject);
	    _IsObjectLoaded[CurrentObject] = false;
	    LoadedObjects --;
	}
	LastObjectID = 0;
	return 1;
}*/

//Funcoes De Vida/Colete

stock AddVida(playerid, Float:Vida, Float:Max = 100.0)
{
	new Float:Vida_;
	GetPlayerHealth(playerid, Vida_);

    if(Vida_ + Vida > Max) SetPlayerHealth(playerid, Max);
    else SetPlayerHealth(playerid, Vida_ + Vida);
	return 1;
}

stock AddColete(playerid, Float:Colete, Float:Max = 90.0)
{
	new Float:Colete_;
	GetPlayerArmour(playerid, Colete_);

    if(Colete_ + Colete > Max) SetPlayerArmour(playerid, Max);
    else SetPlayerArmour(playerid, Colete_ + Colete);
	return 1;
}

//Extorcao

stock Extorquir(playerid, empresa, dinheiro)
{
	if(GetPlayerGP(playerid) < dinheiro)
        return false;

    GivePlayerGP(playerid, -dinheiro);
    GiveBizMoney(empresa, dinheiro);
	return true;
}

//Sistema de Cofre da Org

stock CriarCofres()
{
    RemoveBuilding(1738, -2158.3999, 647.0999, 1057.1999, 1.0); //Yakuza
    CreateDynamicObject(2332,421.35000610,2542.60009766,9.50000000,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2332,495.39999390,-80.69999695,998.20001221,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2332,2814.80004883,-1170.59997559,1028.59997559,0.00000000,0.00000000,180.00000000);
	CreateDynamicObject(2332,-2158.39990234,646.90002441,1057.00000000,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2332,2496.39990234,-1700.59997559,1017.79998779,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2332,-221.30000305,1407.50000000,27.20000076,0.00000000,0.00000000,0.00000000);
	CreateDynamicObject(2332,438.60000610,-15.50000000,1000.20001221,0.00000000,0.00000000,90.00000000);
	CreateDynamicObject(2332,1143.40002441,2.90000010,1000.09997559,0.00000000,0.00000000,270.00000000);
	CreateDynamicObject(2332,305.79998779,1124.90002441,1083.30004883,0.00000000,0.00000000,0.00000000);
    //CreateDynamicObject(2332,1088.00000000,1285.09997559,11.19999981,0.00000000,0.00000000,180.00000000); //Hamas

	for(new i = 0; i < MAX_ORGS; i++)
	{
	    if(CofreOrgVW[i] != -1)
	    {
	        format(thestring, sizeof(thestring), "%s\n{FFFFFF}Cofre da Org", OrgsNames[i]);
	        Create3DTextLabel(thestring, PixColors[i], CofreOrgCoords[i][0], CofreOrgCoords[i][1], CofreOrgCoords[i][2], 25.0, CofreOrgVW[i], true);

	        if(i == 14 || i == 15 || i == 17) format(thestring, sizeof(thestring), "%s\n{FFFFFF}Armazem de Materiais", OrgsNames[i]);
	        else format(thestring, sizeof(thestring), "%s\n{FFFFFF}Local de Entrega", OrgsNames[i]);

	        Create3DTextLabel(thestring, PixColors[i], EntregaHQ[i][0], EntregaHQ[i][1], EntregaHQ[i][2], 25.0, 0, true);
	        AddStaticPickup(1239, 1,  EntregaHQ[i][0], EntregaHQ[i][1], EntregaHQ[i][2]);
	    }
	}

    Create3DTextLabel("Prefeitura\n{FFFFFF}Cofre da Org", PixColors[TEAM_PREF], 350.1580, 160.2090, 1025.7890, 25.0, 0, true);
	return 1;
}

CMD:cofreorgadm(playerid, params[])
{
	if(Player[playerid][pAdmin] < 7)
		return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não tem permissão para usar esse comando.");

	new id;
	if(!sscanf(params, "d", id))
	{
	    format(thestring, 256, "{%s}%s - R$%d, %d drogas e %d materiais.", OrgsColorTags[id], OrgsNames[id], CofreOrg[id][cfDinheiro], CofreOrg[id][cfDrogas], CofreOrg[id][cfMat]);
	    return SendClientMessage(playerid, 0xFFFFFFFF, thestring);
	}
	return SendClientMessage(playerid, COLOR_GREY, "[Uso]:{FFFFFF} /cofreorgadm <id da org>");
}

CMD:cofreorg(playerid)
{
	if(IsAGang(playerid) || GetPlayerOrg(playerid) == 14 || GetPlayerOrg(playerid) == 15 || GetPlayerOrg(playerid) == 17)
    {
        new i = GetPlayerOrg(playerid);
	    if(CofreOrgVW[i] != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, CofreOrgCoords[i][0], CofreOrgCoords[i][1], CofreOrgCoords[i][2]))
	        return ShowPlayerDialog(playerid, 1547, DIALOG_STYLE_LIST, "Cofre da Org", "{009900}Dinheiro\n{FF0000}Drogas\n{CCCCCC}Materiais", "Selecionar", "Cancelar");

        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta no Cofre da sua Org.");
    }
    else if(GetPlayerOrg(playerid) == TEAM_PREF)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.5, 350.1580, 160.2090, 1025.7890))
        {
            new datString[128];
            if(CofreOrg[TEAM_PREF][cfDinheiro] > -1)
                format(datString, 128, "{FFFFFF}Cofre Público: {009900}R$%d{FFFFFF}.", CofreOrg[TEAM_PREF][cfDinheiro]);
            else
                format(datString, 128, "{FFFFFF}Cofre Público: {FF0000}R$%d{FFFFFF}.", CofreOrg[TEAM_PREF][cfDinheiro] * -1);

            if(Player[playerid][pLeader] != TEAM_PREF)
                ShowPlayerDialog(playerid, 9547, DIALOG_STYLE_MSGBOX, "Cofre da Org", datString, "Fechar", "");
            else
                ShowPlayerDialog(playerid, 9547, DIALOG_STYLE_MSGBOX, "Cofre da Org", datString, "Alterar", "Fechar");
            return 1;
        }

        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta no Cofre da sua Org.");
    }
    else
         return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Sua Org não tem um Cofre.");
    return 1;
}

CMD:editorgcofre(playerid, params[])
{
    if(Player[playerid][pAdmin] < 7)
        return 0;

    new org, info, set, amount;
    if(sscanf(params, "dddd", org, info, set, amount))
    {
        SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditOrgCofre <OrgID> <Info> <Set> <Amount>");
        SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}<Info> = 1: Dinheiro, 2: Materiais, 3: Drogas");
        SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}<Set> = 1: Setar, 2: Aumentar");
        return 1;
    }
    if(org < 1 || org >= MAX_ORGS)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} OrgID Invalida. (< 1 ou >= MAX_ORGS)");
    if(info < 1 || info > 3)
        return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}<Info> = 1: Dinheiro, 2: Materiais, 3: Drogas");
    if(set < 1 || set > 2)
        return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}<Set> = 1: Setar, 2: Aumentar");
    if(amount < 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Amount Invalida. (< 0)");

    new str[32], str2[32];
    if(info == 1)
    {
        str = "Dinheiro";
        if(set == 1)
        {
            str2 = "Setou";
            CofreOrg[org][cfDinheiro] = amount;
        }
        else if(set == 2)
        {
            str2 = "Aumentou";
            CofreOrg[org][cfDinheiro] += amount;
        }
    }
    else if(info == 2)
    {
        str = "Materiais";
        if(set == 1)
        {
            str2 = "Setou";
            CofreOrg[org][cfMat] = amount;
        }
        else if(set == 2)
        {
            str2 = "Aumentou";
            CofreOrg[org][cfMat] += amount;
        }
    }
    else if(info == 3)
    {
        str = "Drogas";
        if(set == 1)
        {
            str2 = "Setou";
            CofreOrg[org][cfDrogas] = amount;
        }
        else if(set == 2)
        {
            str2 = "Aumentou";
            CofreOrg[org][cfDrogas] += amount;
        }
    }

    new datString[155];
    format(datString, 155, "Você %s '{FFFF00}%s{FFFFFF}' da org '{0066FF}%s{FFFFFF}' para '{009900}%d{FFFFFF}'.", str2, str, OrgsNames[org], amount);
    SendClientMessage(playerid, -1, datString);

    format(datString, 155, ">> ADM: %s %s %d %s da org %d", ReturnPlayer(playerid), str2, str, amount, org);
    WriteLog("cofreorg", datString);
    return 1;
}

//Sistema de Material

stock GetMaxVehMaterial(vehicleid)
{
	if(MaxVehMaterial[GetVehicleModel(vehicleid) - 400] == -1) return 0;
	else if(vehicleid == VeiculosMateriais[0] || vehicleid == VeiculosMateriais[1] || vehicleid == VeiculosMateriais[2]
	|| vehicleid == RussaCar[8] || vehicleid == YakuzaCars[8] || vehicleid == TerrorCar[2]) return 15000;
	else if(vehicleid == VeiculosMateriais[2]) return 7500;
	else return MaxVehMaterial[GetVehicleModel(vehicleid) - 400];
}

/*ObjetosVeiculosCaminhao[i][4] = CreateDynamicObject(944,0.00000000,1.50000000,0.60000002,0.00000000,0.00000000,0.00000000);
ObjetosVeiculosCaminhao[i][5] = CreateDynamicObject(944,0.10000000,0.00000000,0.60000002,0.00000000,0.00000000,0.00000000);
ObjetosVeiculosCaminhao[i][6] = CreateDynamicObject(944,0.10000000,-1.50000000,0.60000002,0.00000000,0.00000000,0.00000000);
ObjetosVeiculosCaminhao[i][7] = CreateDynamicObject(944,0.10000000,-3.00000000,0.60000002,0.00000000,0.00000000,0.00000000);
ObjetosVeiculosCaminhao[i][8] = CreateDynamicObject(944,0.10000000,-4.50000000,0.60000002,0.00000000,0.00000000,0.00000000);*/
/*AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[i][4], VeiculosMateriais[i], 0.00000000,1.50000000,0.60000002, 0.00000000,0.00000000,0.00000000);
AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[i][5], VeiculosMateriais[i], 0.00000000,0.00000000,0.60000002, 0.00000000,0.00000000,0.00000000);
AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[i][6], VeiculosMateriais[i], 0.00000000,-1.50000000,0.60000002, 0.00000000,0.00000000,0.00000000);
AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[i][7], VeiculosMateriais[i], 0.00000000,-3.00000000,0.60000002, 0.00000000,0.00000000,0.00000000);
AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[i][8], VeiculosMateriais[i], 0.00000000,-4.50000000,0.60000002, 0.00000000,0.00000000,0.00000000);*/

stock PossivelVeiculoDeTransporte(vehicleid)
{
	if(vehicleid < VeiculosMateriais[0] && vehicleid > VeiculosMateriais[2]
	&& vehicleid != RussaCar[8]
	&& vehicleid != YakuzaCars[8]
	//&& vehicleid != HamasCar[19]
	&& vehicleid != TerrorCar[2])
        return false;
	return true;
}

stock AddVehicleMaterial(vehicleid, quantidade)
{
	new VehId;
	if(TransportVehicle(vehicleid) != INVALID_VEHICLE_ID && TransportVehicle(vehicleid) != 3) VehId = TransportVehicle(vehicleid);
	else if(vehicleid == RussaCar[8]) VehId = 3;
	else if(vehicleid == YakuzaCars[8]) VehId = 4;
	//else if(vehicleid == HamasCar[19]) VehId = 5;
	else if(vehicleid == TerrorCar[2]) VehId = 6;
	else return 0;

	if(quantidade == 0)
    {
		if(IsValidDynamicObject(ObjetosVeiculosCaminhao[VehId][4])) { DestroyDynamicObject(ObjetosVeiculosCaminhao[VehId][4]); ObjetosVeiculosCaminhao[VehId][4] = -1; }
 		if(IsValidDynamicObject(ObjetosVeiculosCaminhao[VehId][5])) { DestroyDynamicObject(ObjetosVeiculosCaminhao[VehId][5]); ObjetosVeiculosCaminhao[VehId][5] = -1; }
		if(IsValidDynamicObject(ObjetosVeiculosCaminhao[VehId][6])) { DestroyDynamicObject(ObjetosVeiculosCaminhao[VehId][6]); ObjetosVeiculosCaminhao[VehId][6] = -1; }
		if(IsValidDynamicObject(ObjetosVeiculosCaminhao[VehId][7])) { DestroyDynamicObject(ObjetosVeiculosCaminhao[VehId][7]); ObjetosVeiculosCaminhao[VehId][7] = -1; }
		if(IsValidDynamicObject(ObjetosVeiculosCaminhao[VehId][8])) { DestroyDynamicObject(ObjetosVeiculosCaminhao[VehId][8]); ObjetosVeiculosCaminhao[VehId][8] = -1; }
        return 1;
    }
    if(quantidade > 0)
	{
	    if(!IsValidDynamicObject(ObjetosVeiculosCaminhao[VehId][4])) ObjetosVeiculosCaminhao[VehId][4] = CreateDynamicObject(944,0.00000000,1.50000000,0.60000002,0.00000000,0.00000000,0.00000000);
	    AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[VehId][4], vehicleid, 0.00000000,1.50000000,0.60000002, 0.00000000,0.00000000,0.00000000);
	}
    if(quantidade >= 3000)
	{
		if(!IsValidDynamicObject(ObjetosVeiculosCaminhao[VehId][5])) ObjetosVeiculosCaminhao[VehId][5] = CreateDynamicObject(944,0.10000000,0.00000000,0.60000002,0.00000000,0.00000000,0.00000000);
		AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[VehId][5], vehicleid, 0.00000000,0.00000000,0.60000002, 0.00000000,0.00000000,0.00000000);
	}
    if(quantidade >= 6000)
    {
		if(!IsValidDynamicObject(ObjetosVeiculosCaminhao[VehId][6])) ObjetosVeiculosCaminhao[VehId][6] = CreateDynamicObject(944,0.10000000,-1.50000000,0.60000002,0.00000000,0.00000000,0.00000000);
		AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[VehId][6], vehicleid, 0.00000000,-1.50000000,0.60000002, 0.00000000,0.00000000,0.00000000);
	}
	if(quantidade >= 9000)
	{
		if(!IsValidDynamicObject(ObjetosVeiculosCaminhao[VehId][7])) ObjetosVeiculosCaminhao[VehId][7] = CreateDynamicObject(944,0.10000000,-3.00000000,0.60000002,0.00000000,0.00000000,0.00000000);
		AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[VehId][7], vehicleid, 0.00000000,-3.00000000,0.60000002, 0.00000000,0.00000000,0.00000000);
	}
	if(quantidade >= 12000)
	{
		if(!IsValidDynamicObject(ObjetosVeiculosCaminhao[VehId][8])) ObjetosVeiculosCaminhao[VehId][8] = CreateDynamicObject(944,0.10000000,-4.50000000,0.60000002,0.00000000,0.00000000,0.00000000);
		AttachDynamicObjectToVehicle(ObjetosVeiculosCaminhao[VehId][8], vehicleid, 0.00000000,-4.50000000,0.60000002, 0.00000000,0.00000000,0.00000000);
	}
    return 1;
}

stock RemoveVehicleMaterial(vehicleid, quantidade)
{
    if(!PossivelVeiculoDeTransporte(vehicleid)) return 0;
    new VehId = vehicleid;
	if(vehicleid >= VeiculosMateriais[0] && vehicleid <= VeiculosMateriais[2]) VehId = TransportVehicle(vehicleid);
	else if(vehicleid == RussaCar[8]) VehId = 3;
	else if(vehicleid == YakuzaCars[8]) VehId = 4;
	//else if(vehicleid == HamasCar[19]) VehId = 5;
	else if(vehicleid == TerrorCar[2]) VehId = 6;
    else return 0;

	if(IsValidDynamicObject(ObjetosVeiculosCaminhao[VehId][4]) && quantidade < 1) { DestroyDynamicObject(ObjetosVeiculosCaminhao[VehId][4]); ObjetosVeiculosCaminhao[VehId][4] = -1; }
	if(IsValidDynamicObject(ObjetosVeiculosCaminhao[VehId][5]) && quantidade < 3000) { DestroyDynamicObject(ObjetosVeiculosCaminhao[VehId][5]); ObjetosVeiculosCaminhao[VehId][5] = -1; }
	if(IsValidDynamicObject(ObjetosVeiculosCaminhao[VehId][6]) && quantidade < 6000) { DestroyDynamicObject(ObjetosVeiculosCaminhao[VehId][6]); ObjetosVeiculosCaminhao[VehId][6] = -1; }
	if(IsValidDynamicObject(ObjetosVeiculosCaminhao[VehId][7]) && quantidade < 9000) { DestroyDynamicObject(ObjetosVeiculosCaminhao[VehId][7]); ObjetosVeiculosCaminhao[VehId][7] = -1; }
	if(IsValidDynamicObject(ObjetosVeiculosCaminhao[VehId][8]) && quantidade < 12000) { DestroyDynamicObject(ObjetosVeiculosCaminhao[VehId][8]); ObjetosVeiculosCaminhao[VehId][8] = -1; }
    return 1;
}

CMD:pegarmateriais(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, -4481.1582, 5710.4150, 14.8167)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta no Barco.");
	if(GetPlayerOrg(playerid) != 14 && GetPlayerOrg(playerid) != 15 && !IsATerror(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é um Máfioso ou Terrorista.");
    if(IsACop(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é Criminoso.");

	new quantidade;
	if(sscanf(params, "d", quantidade))
	{
	    SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/PegarMateriais <Quantidade>");
	    return 1;
	}
	if(quantidade > 1000) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você so pode pegar 1000 materiais por vez.");
	else if(quantidade < 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Quantidades negativas não são válidas, espertinho.");
	else if(quantidade + Player[playerid][pMats] > 1000) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você so pode carregar 1000 Materiais.");

	new Preco = quantidade * 2;
	if(GetPlayerGP(playerid) < Preco)
	{
	    format(thestring, 256, "[ERRO]:{FFFFFF} Você não tem R$%d para Pagar.", Preco);
	    SendClientMessage(playerid, COLOR_RED, thestring);
	    return 1;
	}

	GivePlayerGP(playerid, -Preco);
	Player[playerid][pMats] += quantidade;
	format(thestring, 256, "{FF0000}[Info]:{FFFFFF} Você pagou {009900}R$%d{FFFFFF} em %d Materiais.", Preco, quantidade);
	SendClientMessage(playerid, SERVER_INFO, thestring);
	format(thestring, sizeof(thestring), "* %s comprou Materiais.", PlayerGetName(playerid));
	ProxDetector(20.0, playerid, thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:carregarcaminhao(playerid, params[])
{
	if(GetPlayerOrg(playerid) != 14 && GetPlayerOrg(playerid) != 15 && !IsATerror(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é da Máfia/Terrorista.");
	else if(!IsPlayerInRangeOfPoint(playerid, 5.0, EntregaHQ[GetPlayerOrg(playerid)][0], EntregaHQ[GetPlayerOrg(playerid)][1], EntregaHQ[GetPlayerOrg(playerid)][2])) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta no Armazem de Materiais.");
	else if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está em um Veiculo.");
	else if(GetMaxVehMaterial(GetPlayerVehicleID(playerid)) < 1) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode colocar materiais neste veículo.");
    else if(Player[playerid][pRank] < 5) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode fazer isto.");

	new Quantidade;
	if(sscanf(params, "d", Quantidade))
	{
	    SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/CarregarCaminhao <Quantidade>");
	    return 1;
	}
	new vehicleid = GetPlayerVehicleID(playerid);

	format(thestring, 256, "[ERRO]:{FFFFFF} Este veículo aguenta apenas %d materiais.", GetMaxVehMaterial(vehicleid));
	if(Quantidade > GetMaxVehMaterial(vehicleid)) return SendClientMessage(playerid, COLOR_RED, thestring);
	else if(Quantidade + TrunkInfo[vehicleid][TrunkMateriais] > GetMaxVehMaterial(vehicleid)) return SendClientMessage(playerid, SERVER_INFO, thestring);
	else if(Quantidade < 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Quantidades negativas não são válidas, espertinho.");

	if(CofreOrg[GetPlayerOrg(playerid)][cfMat] < Quantidade)
	{
	    format(thestring, 256, "[ERRO]:{FFFFFF} Sua organização não tem %d materiais.", Quantidade);
	    SendClientMessage(playerid, COLOR_RED, thestring);
	    return 1;
	}
    CofreOrg[GetPlayerOrg(playerid)][cfMat] -= Quantidade;

	TrunkInfo[vehicleid][TrunkMateriais] += Quantidade;

    if(PossivelVeiculoDeTransporte(vehicleid))
	   AddVehicleMaterial(vehicleid, TrunkInfo[vehicleid][TrunkMateriais]);

	format(thestring, 256, "{FF0000}[Info]:{FFFFFF} Você colocou %d(%d) materiais no veículo.", Quantidade, GetMaxVehMaterial(vehicleid));
	SendClientMessage(playerid, SERVER_INFO, thestring);
	format(thestring, sizeof(thestring), "* %s colocou Materiais no Veiculo.", PlayerGetName(playerid));
	ProxDetector(20.0, playerid, thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	format(thestring, sizeof(thestring), "[Org]: {FFFFFF}%s retirou %d materiais de sua HQ.", Player[playerid][pName], Quantidade);
	SendTeamMessage(GetPlayerOrg(playerid), COLOR_LIGHTGREEN, thestring);

    SaveTrunk(vehicleid);
	return 1;
}

CMD:descarregarcaminhao(playerid, params[])
{
	if(GetPlayerOrg(playerid) != 14 && GetPlayerOrg(playerid) != 15 && !IsATerror(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é da Máfia/Terrorista.");
	else if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta em um Veiculo.");
	else if(GetMaxVehMaterial(GetPlayerVehicleID(playerid)) < 1) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode colocar materiais neste Veiculo.");
    else if(Player[playerid][pRank] < 5) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode fazer isto.");

	new Quantidade;
	if(sscanf(params, "d", Quantidade))
	{
	    SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/DesarregarCaminhao <Quantidade>");
	    return 1;
	}

	new OrgId = 0;
	for(new i = 0; i < MAX_ORGS; i++)
	{
	    if(EntregaHQ[i][0] != 0.0 && IsPlayerInRangeOfPoint(playerid, 5.0, EntregaHQ[i][0], EntregaHQ[i][1], EntregaHQ[i][2]))
	    {
	        OrgId = i;
	        break;
		}
	}

	if(OrgId == 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não esta em um Local de Entrega.");

	new vehicleid = GetPlayerVehicleID(playerid);

	format(thestring, 256, "[ERRO]:{FFFFFF} Este veículo tem apenas %d materiais.", TrunkInfo[GetPlayerVehicleID(playerid)][TrunkMateriais]);
	if(Quantidade > GetMaxVehMaterial(vehicleid)) return SendClientMessage(playerid, COLOR_RED, thestring);
	else if(Quantidade - TrunkInfo[vehicleid][TrunkMateriais] > 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Quantidade Invalida.");
	else if(Quantidade < 0) return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Quantidades negativas não são válidas, espertinho.");

    CofreOrg[OrgId][cfMat] += Quantidade;

	TrunkInfo[vehicleid][TrunkMateriais] -= Quantidade;

    if(PossivelVeiculoDeTransporte(vehicleid))
	   RemoveVehicleMaterial(vehicleid, TrunkInfo[vehicleid][TrunkMateriais]);

	format(thestring, 256, "{FF0000}[Info]:{FFFFFF} Você descarregou %d materiais do veículo na HQ da organização %s.", Quantidade, OrgsNamesSmall[OrgId]);
	SendClientMessage(playerid, SERVER_INFO, thestring);
	format(thestring, sizeof(thestring), "* %s descarregou materiais do veiculo.", PlayerGetName(playerid));
	ProxDetector(20.0, playerid, thestring,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	format(thestring, sizeof(thestring), "[Org]: {FFFFFF}%s da %s deixou %d materiais em sua HQ.", Player[playerid][pName], OrgsNamesSmall[GetPlayerOrg(playerid)], Quantidade);
	SendTeamMessage(OrgId, COLOR_LIGHTGREEN, thestring);

    SaveTrunk(vehicleid);
	return 1;
}

// Sistema de animações

CMD:bebado(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:apontar(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:merda(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:mascararse(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:rob(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:cruzarb(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:deitar(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar");
    return 1;
}
CMD:abaixar(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:vomitar(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:eat(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:rap(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:passaramao(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:cobrar(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:overdose(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:smoke(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:smoke2(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:sentar(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:conversar(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "PED", "IDLE_CHAT", 4.0, 0, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:fodase(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "PED", "fucku", 4.0, 0, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:taichi(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

	ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0);
	SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
CMD:observar(playerid){
    if(noevento[playerid] && EventoInfo[EventoNoAnim])
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar Anims durante este Evento.");

    ApplyAnimation(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0);
    SendClientMessage(playerid, SERVER_INFO, "[BLS]:{FFFFFF} Você iniciou uma animação, use /PararAnim para parar.");
    return 1;
}
//---------------------Lista Animações------------------------------------
CMD:anims(playerid){
    new str[360];
	strcat(str, "{FF0000}Lista de animações:\n");
	strcat(str, "{FFFFFF}\t/handsup /ligar /desligar /bebado /apontar /merda /mascararse\n");
	strcat(str, "{FFFFFF}\t/rob /cruzarb /deitar /abaixar /vomitar /eat /rap /passaramao\n");
	strcat(str, "{FFFFFF}\t/cobrar /overdose /somke /smoke2 /sentar /conversar /fodase /taichi /observar\n\n");
	strcat(str, "{FFFFFF}\tPara parar as animações use {FF0000}/PararAnim{FFFFFF}.");
	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Lista de animações", str, "Ok", "");
    return 1;
}


//Sistema de Eleição
stock CreateVotacaoPickup()
{
    VotacaoPickup = CreatePickup(1239, 1, 358.9518, 188.1076, 1008.3828);
    VotacaoText = Create3DTextLabel("Eleição:\n{FF0000}/VerCandidatos{FFFFFF} e{FF0000} /Votar", 0xFFFFFFFF, 358.9518, 188.1076, 1008.8828, 20.0, 0, true);
    return true;
}

stock DestroyVotacaoPickup()
{
    DestroyPickup(VotacaoPickup);
    Delete3DTextLabel(VotacaoText);
    return true;
}

CMD:votar(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, 358.9518, 188.1076, 1008.3828))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está nas Urnas.");
    if(!VotacaoAberta)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não há Eleições.");
    if(Player[playerid][pVoto] == VotacaoID)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você já Votou.");
    if(Player[playerid][pPayDayHad] < 3)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você ainda não pode Votar.");

    new num;
    if(sscanf(params, "d", num))
        return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/Votar <Número>");
    if(num < 1 || num > 999999)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Candidato Não Encontrado.");

    for(new i = 0; i < sizeof(CandidatoInfo); i++)
    {
        if(CandidatoInfo[i][candNumero] == num)
        {
            CandidatoInfo[i][candVotos]++;
            Player[playerid][pVoto] = VotacaoID;

            format(thestring, sizeof(thestring), "Você votou para %s.", CandidatoInfo[i][candNome]);
            SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);

            format(thestring, sizeof(thestring), "%s votou em %s(N° %d) na Eleição %d", ReturnPlayer(playerid), CandidatoInfo[i][candNome], num, VotacaoID);
            WriteLog("Eleições", thestring);
            return true;
        }
    }

    SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Candidato Não Encontrado.");
    return true;
}

CMD:vercandidatos(playerid, params[])
{
    if(Player[playerid][pAdmin] > 5)
        return VerCandidatosADM(playerid);

    if(!VotacaoAberta)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não há Eleições.");

    new string[2048];
    format(string, 2048, "{33CCFF}");

    for(new i = 0; i < sizeof(CandidatoInfo); i++)
    {
        if(CandidatoInfo[i][candNumero] == 0)
            continue;

        format(thestring, sizeof(thestring), "- {FFFFFF}%s: {33CCFF}N° %d\n", CandidatoInfo[i][candNome], CandidatoInfo[i][candNumero]);
        strcat(string, thestring, 2048);
    }
    ShowPlayerDialog(playerid, 5231, DIALOG_STYLE_MSGBOX, "{33CCFF}Lista de Candidatos", string, "Fechar", "");

    /*SendClientMessage(playerid, COLOR_LIGHTBLUE, "------- Lista de Candidatos -------");
    for(new i = 0; i < sizeof(CandidatoInfo); i++)
    {
        if(CandidatoInfo[i][candNumero] == 0)
            continue;

        format(thestring, sizeof(thestring), "- {FFFFFF}%s: {33CCFF}N° %d", CandidatoInfo[i][candNome], CandidatoInfo[i][candNumero]);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
    }   */
    return true;
}

stock VerCandidatosADM(playerid)
{
    new string[2048];
    format(string, 2048, "{33CCFF}");

    for(new i = 0; i < sizeof(CandidatoInfo); i++)
    {
        if(CandidatoInfo[i][candNumero] == 0)
            continue;

        format(thestring, sizeof(thestring), "%02d - {FFFFFF}%s: {33CCFF}N° %d\n", i, CandidatoInfo[i][candNome], CandidatoInfo[i][candNumero]);
        strcat(string, thestring, 2048);
    }
    ShowPlayerDialog(playerid, 5231, DIALOG_STYLE_MSGBOX, "{33CCFF}Lista de Candidatos", string, "Fechar", "");
    return true;
}

CMD:editareleicao(playerid, params[])
{
    if(Player[playerid][pAdmin] < 6)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando.");

    new func;
    if(sscanf(params, "d", func))
    {
        format(thestring, sizeof(thestring), "Eleição Atual: %d", VotacaoID);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
        SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarEleicao <Função>");
        SendClientMessage(playerid, SERVER_INFO, "[Funções]: {FFFFFF}1: Inicar, 2: Finalizar, 3: AddCandidato");
        SendClientMessage(playerid, SERVER_INFO, "[Funções]: {FFFFFF}4: EditCandidatoNome, 5: EditCandidatoNum");
        return true;
    }
    else if(func == 1)
    {
        if(VotacaoAberta)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Uma Eleição já está Aberta.");

        SendClientMessageToAll(COLOR_LIGHTBLUE, "------------- Brasil Life Simulation -------------");
        SendClientMessageToAll(COLOR_LIGHTBLUE, "As Eleições Iniciaram! Vá a Prefeitura para Votar.");

        CreateVotacaoPickup();
        VotacaoAberta = true;

        format(thestring, sizeof(thestring), "%s Iniciou a Eleição %d", ReturnPlayer(playerid), VotacaoID);
        WriteLog("Eleições", thestring);

        SaveEleicao();
        return true;
    }
    else if(func == 2)
    {
        if(!VotacaoAberta)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não há uma Eleição Aberta.");

        SendClientMessageToAll(COLOR_LIGHTBLUE, "------------- Brasil Life Simulation -------------");
        SendClientMessageToAll(COLOR_LIGHTBLUE, "As Eleições Acabaram! Aguarde pelo Resutado.");

        DestroyVotacaoPickup();
        VotacaoAberta = false;

        format(thestring, sizeof(thestring), "%s Finalizou a Eleição %d", ReturnPlayer(playerid), VotacaoID);
        WriteLog("Eleições", thestring);

        //Salva os Dados da Eleição Fechada
        SaveEleicaoData();

        VotacaoID++;

        //Salva as Configurações das Eleições
        SaveEleicaoConfig();

        //Cria o Arquivo da Nova Eleição e Lê para Resetar os Dados
        LoadEleicao();
        return true;
    }
    else if(func == 3)
    {
        new v[MAX_PLAYER_NAME], v2;
        if(sscanf(params, "ds[24]d", func, v, v2))
        {
            format(thestring, sizeof(thestring), "Eleição Atual: %d", VotacaoID);
            SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
            SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarEleicao AddCandidato <Nome> <Numero>");
            return true;
        }
        if(v2 < 1 || v2 > 999999)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Numero Inválido. Use de 1 a 999999.");

        for(new i = 0; i < sizeof(CandidatoInfo); i++)
        {
            if(CandidatoInfo[i][candNumero] != 0)
                continue;

            format(CandidatoInfo[i][candNome], MAX_PLAYER_NAME, "%s", v);
            CandidatoInfo[i][candNumero] = v2;
            CandidatoInfo[i][candVotos] = 0;

            format(thestring, sizeof(thestring), "Você Adicionou o Candidato %s com o Numero %d no Index %d.", v, v2, i);
            SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);

            format(thestring, sizeof(thestring), "%s Adicionou o Candidato %s(N° %d) na Eleição %d", ReturnPlayer(playerid), v, v2, VotacaoID);
            WriteLog("Eleições", thestring);
            return true;
        }
        SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} O Limite de 25 Candidatos foi Excedido.");

        SaveEleicao();
        return true;
    }
    else if(func == 4)
    {
        new v, v2[MAX_PLAYER_NAME];
        if(sscanf(params, "dds[24]", func, v, v2))
        {
            format(thestring, sizeof(thestring), "Eleição Atual: %d", VotacaoID);
            SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
            SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarEleicao EditCandidatoNome <Index> <Nome>");
            return true;
        }
        if(v < 0 || v > 24)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Index Inválido. Use de 0 a 24.");
        if(CandidatoInfo[v][candNumero] == 0)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Candidato Inválido.");

        new oldNome[MAX_PLAYER_NAME];
        format(oldNome, MAX_PLAYER_NAME, "%s", CandidatoInfo[v][candNome]);

        format(CandidatoInfo[v][candNome], MAX_PLAYER_NAME, "%s", v2);

        format(thestring, sizeof(thestring), "Você Editou o Nome do Candidato %s para %s.", oldNome, v2);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);

        format(thestring, sizeof(thestring), "%s Alterou o nome do Candidato %s(%d) para %s na Eleição %d", ReturnPlayer(playerid), oldNome, v, v2, VotacaoID);
        WriteLog("Eleições", thestring);

        SaveEleicao();
        return true;
    }
    else if(func == 5)
    {
        new v, v2;
        if(sscanf(params, "ddd", func, v, v2))
        {
            format(thestring, sizeof(thestring), "Eleição Atual: %d", VotacaoID);
            SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
            SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarEleicao EditCandidatoNum <Index> <Numero>");
            SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Use Numero 0 para Remover o Candidato");
            return true;
        }
        if(v < 0 || v > 24)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Index Inválido. Use de 0 a 24.");
        if(CandidatoInfo[v][candNumero] == 0)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Candidato Inválido.");
        if(v2 < 0 || v2 > 999999)
            return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Numero Inválido. Use de 0 a 999999.");

        new oldNumero = CandidatoInfo[v][candNumero];
        CandidatoInfo[v][candNumero] = v2;

        format(thestring, sizeof(thestring), "Você Editou o Numero do Candidato %s de %d para %d.", CandidatoInfo[v][candNome], oldNumero, v2);
        SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);

        format(thestring, sizeof(thestring), "%s Alterou o numero do Candidato %s(%d) de %d para %d na Eleição %d", ReturnPlayer(playerid), CandidatoInfo[v][candNome], v, oldNumero, v2, VotacaoID);
        WriteLog("Eleições", thestring);

        SaveEleicao();
        return true;
    }
    format(thestring, sizeof(thestring), "Eleição Atual: %d", VotacaoID);
    SendClientMessage(playerid, COLOR_LIGHTBLUE, thestring);
    SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/EditarEleicao <Função>");
    SendClientMessage(playerid, SERVER_INFO, "[Funções]: {FFFFFF}1: Inicar, 2: Finalizar, 3: AddCandidato");
    SendClientMessage(playerid, SERVER_INFO, "[Funções]: {FFFFFF}4: EditCandidatoNome, 5: EditCandidatoNum");
    return true;
}

CMD:verresultado(playerid, params[])
{
    if(Player[playerid][pAdmin] < 1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não pode usar este comando.");

    new id;
    if(sscanf(params, "d", id))
        return SendClientMessage(playerid, COLOR_GREY, "[Uso]: {FFFFFF}/VerResultado <EleicaoID>");
    if(id < 0 || id > VotacaoID)
    {
        format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} ID da eleição inválido. Use de 0 a %d.", VotacaoID);
        SendClientMessage(playerid, COLOR_RED, thestring);
        return true;
    }
    if(id == VotacaoID)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Esta eleição não começou ou não terminou.");

    new Resultado[sizeof(CandidatoInfo)][CandidatoInf],
        file[64], datString[64];

    format(file, 64, "/RPG/Eleicao/E%d.INI", id);
    if(!fexist(file))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Esta eleição não está mais disponível.");

    for(new i = 0; i < sizeof(Resultado); i++)
    {
        format(datString, 64, "N%d", i);
        Resultado[i][candNumero] = DOF2_GetInt(file, datString);
        if(Resultado[i][candNumero] == 0)
            continue;

        format(datString, 64, "S%d", i);
        format(Resultado[i][candNome], MAX_PLAYER_NAME, "%s", DOF2_GetString(file, datString));
        format(datString, 64, "V%d", i);
        Resultado[i][candVotos] = DOF2_GetInt(file, datString);
    }

    new string[2048];
    format(string, 2048, "{33CCFF}");

    for(new i = 0; i < sizeof(Resultado); i++)
    {
        if(Resultado[i][candNumero] == 0)
            continue;

        format(thestring, sizeof(thestring), "%02d - {FFFFFF}%s, N° %d: {33CCFF}%d Votos\n", i, Resultado[i][candNome], Resultado[i][candNumero], Resultado[i][candVotos]);
        strcat(string, thestring, 2048);
    }
    ShowPlayerDialog(playerid, 5231, DIALOG_STYLE_MSGBOX, "{33CCFF}Resultado das Eleicoes", string, "Fechar", "");
    return true;
}

stock SaveEleicao()
{
    SaveEleicaoConfig();
    SaveEleicaoData();
    return true;
}

stock SaveEleicaoConfig()
{
    new file[64];
    format(file, 64, "/RPG/Eleicao/Config.INI");
    if(!fexist(file))
        fclose(fopen(file, io_write));

    DOF2_SetInt(file, "Current", VotacaoID);
    DOF2_SetBool(file, "Aberta", VotacaoAberta);
    DOF2_SaveFile();
}

stock SaveEleicaoData()
{
    new file[64], datString[64];
    format(file, 64, "/RPG/Eleicao/E%d.INI", VotacaoID);
    if(!fexist(file))
        fclose(fopen(file, io_write));

    for(new i = 0; i < sizeof(CandidatoInfo); i++)
    {
        if(CandidatoInfo[i][candNumero] == 0)
            continue;

        format(datString, 64, "N%d", i);
        DOF2_SetInt(file, datString, CandidatoInfo[i][candNumero]);
        format(datString, 64, "S%d", i);
        DOF2_SetString(file, datString, CandidatoInfo[i][candNome]);
        format(datString, 64, "V%d", i);
        DOF2_SetInt(file, datString, CandidatoInfo[i][candVotos]);
    }
    DOF2_SaveFile();
}

stock LoadEleicao()
{
    new Tick = GetTickCount();

    new file[64], datString[64];
    format(file, 64, "/RPG/Eleicao/Config.INI");
    if(!fexist(file))
        fclose(fopen(file, io_write));

    VotacaoID = DOF2_GetInt(file, "Current");
    VotacaoAberta = DOF2_GetBool(file, "Aberta");

    format(file, 64, "/RPG/Eleicao/E%d.INI", VotacaoID);
    if(!fexist(file))
        fclose(fopen(file, io_write));

    for(new i = 0; i < sizeof(CandidatoInfo); i++)
    {
        format(datString, 64, "N%d", i);
        CandidatoInfo[i][candNumero] = DOF2_GetInt(file, datString);
        if(CandidatoInfo[i][candNumero] == 0)
            continue;

        format(datString, 64, "S%d", i);
        format(CandidatoInfo[i][candNome], MAX_PLAYER_NAME, "%s", DOF2_GetString(file, datString));
        format(datString, 64, "V%d", i);
        CandidatoInfo[i][candVotos] = DOF2_GetInt(file, datString);
    }

    printf("Eleicao Carregada, Status: [%d], [%d]. %dms", VotacaoID, VotacaoAberta, GetTickCount() - Tick);
    return true;
}

//Funcao Falar

forward TimerNome();
public TimerNome()
{
    if(!USE_MASK) return 0;

	new playerid, pId;
	foreach(playerid: Player)
	{
	    foreach(pId: Player)
	    {
		    if(!ProxDetectorS(dista, playerid, pId)) ShowPlayerNameTagForPlayer(pId, playerid, false);
		    else if(Player[playerid][pMascarado]) ShowPlayerNameTagForPlayer(pId, playerid, false);
		    else ShowPlayerNameTagForPlayer(pId, playerid, true);
		}
	}
	return 1;
}

stock PlayerGetName(playerid)
{
	new Nome[MAX_PLAYER_NAME];
  	if(!Player[playerid][pMascarado]) GetPlayerName(playerid, Nome, MAX_PLAYER_NAME);
  	else Nome = "Mascarado";
  	return Nome;
}

stock Falar(playerid, info[], text[], Float:distancia)
{
	new String[256];
    format(String, 256, "%s %s: %s", PlayerGetName(playerid), info, text);

	ProxDetector(distancia, playerid, String, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return 1;
}

stock FalarEx(playerid, text[], Float:distancia, bool:corroxo = true)
{
	new String[256];
    format(String, 256, "%s %s", PlayerGetName(playerid), text);

	if(!corroxo) ProxDetector(distancia, playerid, String, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	else ProxDetector(distancia, playerid, String, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}

//Passou Tempo

stock TempoEntre(Var) return GetTickCount() - Var;

//Renomear Arquivo

stock RenameFile(fold[], fnew[])
{
	new File:OldFile = fopen(fold, io_read),
	    File:NewFile = fopen(fnew, io_write),
	    FileString[1024];

	while(fread(OldFile, FileString))
	    fwrite(NewFile, FileString);

	fclose(OldFile);
	fclose(NewFile);
	fremove(fold);
	return 1;
}

//Sistema de Guerra

stock AddPlayerTeamPoints(playerid, points)
{
	if(GetPlayerOrg(playerid) == 3) Guerra[GuerraPontos][0] += points;
	else if(GetPlayerOrg(playerid) == 17) Guerra[GuerraPontos][1] += points;
	return 1;
}

stock AddPlayerTeamKills(playerid, kills)
{
	if(GetPlayerOrg(playerid) == 3) Guerra[GuerraKills][0] += kills;
	else if(GetPlayerOrg(playerid) == 17) Guerra[GuerraKills][1] += kills;
	return 1;
}

stock GetPlayerTeamPoints(playerid)
{
	if(GetPlayerOrg(playerid) == 3) return Guerra[GuerraPontos][0];
	else if(GetPlayerOrg(playerid) == 17) return Guerra[GuerraPontos][1];
	return 0;
}

stock Guerrilheiro(playerid)
{
	if(GetPlayerOrg(playerid) == 3 || GetPlayerOrg(playerid) == 17) return 1;
	return 0;
}

//Sistema de Datas Melhorado e Calcular VIP

stock JaPassouDia(Antes)
{
	new Hoje = PegarIntHoje();
	if(Hoje > Antes) return true;
	return false;
}

stock PegarIntDia(Dia, Mes, Ano)
{
	new string[64];
	format(string, sizeof(string), "%04d%02d%02d", Ano, Mes, Dia);
	return strval(string);
}

stock PegarIntHoje()
{
	new Dia, Mes, Ano, Hoje;

	//Hoje
	getdate(Ano, Mes, Dia);
	Hoje = PegarIntDia(Dia, Mes, Ano);
	return Hoje;
}

stock SepararDia(Int, &Dia, &Mes, &Ano)
{
/*	new string[64];
	format(string, sizeof(string), "%d", Int);

	//Ano
	new AnoString[5];
	AnoString[0] = string[0];
	AnoString[1] = string[1];
	AnoString[2] = string[2];
	AnoString[3] = string[3];
	Ano = strval(AnoString);

	//Mes
	new MesString[3];
	MesString[0] = string[4];
	MesString[1] = string[5];
	Mes = strval(MesString);

	//Dia
	new DiaString[3];
	DiaString[0] = string[6];
	DiaString[1] = string[7];
	Dia = strval(DiaString);*/

	Ano = CarregarAnoInt(Int);
	Mes = CarregarMesInt(Int);
	Dia = CarregarDiaInt(Int);
	return 1;
}

stock CarregarDiaInt(Int)
{
	new Var[16], Dia;
	format(Var, 16, "%d", Int);

	strdel(Var, 0, 6);
	Dia = strval(Var);

	return Dia;
}

stock CarregarMesInt(Int)
{
	new Var[16], Mes;
	format(Var, 16, "%d", Int);

	strdel(Var, 0, 4);
	strdel(Var, 2, 4);
	Mes = strval(Var);

	return Mes;
}

stock CarregarAnoInt(Int)
{
	new Var[16], Ano;
	format(Var, 16, "%d", Int);

	strdel(Var, 4, 8);
	Ano = strval(Var);

	return Ano;
}

stock CalcularVIP(&Dia, &Mes, &Ano, Meses = 1)
{
    Mes += Meses;
    if(Mes > 12) //Se Acabar o Ano
    {
        Mes -= 12;
        Ano += 1;
    }
    if(Dia > DiasMeses[Mes - 1]) //Se Acabar o Mes
    {
        Dia -= DiasMeses[Mes - 1];
        Mes += 1;
    }
    return 1;
}

stock AddInfoPickup(pickupID, Float:posX, Float:posY, Float:posZ, string[], color, VW = 0)
{
    Create3DTextLabel(string, color, posX, posY, posZ + 0.5, 20.0, VW, true);
    AddStaticPickup(pickupID, 1, posX, posY, posZ, VW);
    return 1;
}

/*stock WriteLockedCars()
{
//    new DatTick = GetTickCount();

    new File:DatFile = fopen("/RPG/Apreendidos.INI", io_write),
        DatString[16];
    for(new vehicleid = 0; vehicleid < MAX_VEHICLES; vehicleid ++)
    {
        if(VehicleInfo[vehicleid][vPRFLock] == 1
        && VehicleInfo[vehicleid][vPCID] == -1)
        {
            format(DatString, 16, "%d\n", vehicleid);
            fwrite(DatFile, DatString);
        }
    }
    fclose(DatFile);

//    printf("Dat Function lasted %d Ticks", GetTickCount() - DatTick);
    return 1;
}

stock ReadLockedCars()
{
    new DatTick = GetTickCount();

    if(!fexist("/RPG/Apreendidos.INI"))
        return 1;

    new File:DatFile = fopen("/RPG/Apreendidos.INI", io_read),
        DatString[16];

    while(fread(DatFile, DatString, 16))
    {
        SetVehiclePRFLocked(strval(DatString));
//        printf("%s|%d", DatString, strval(DatString));
    }

    fclose(DatFile);

    printf("PRF Locked Cars Loaded in %d Ticks", GetTickCount() - DatTick);
    return 1;
}

stock SetVehiclePRFLocked(vehicleid, playerid = INVALID_PLAYER_ID)
{
    #pragma unused vehicleid
    #pragma unused playerid
    new bool:Found = false;
    for(new i = 0; i < sizeof(VeiculosApreendidos); i++)
    {
        if(VeiculosApreendidos[i] == -1)
        {
            VeiculosApreendidos[i] = vehicleid;
            VehicleInfo[vehicleid][vPRFDeposit] = i;
            Found = true;
            break;
        }
    }

    if(!Found)
    {
        if(IsPlayerConnected(playerid))
            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não há mais Vagas no Pátio.");
        else
            printf("Could not find a Deposit ID for vehicle %d", vehicleid);
        return 0;
    }

    new engine, lights, alarm, doors, bonnet, boot, objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(vehicleid,  false, lights, false,  true, bonnet, boot, objective);

    VehicleInfo[vehicleid][vPRFLock] = 1;

    //WriteLockedCars();

    if(IsPlayerConnected(playerid))
        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Veículo apreendido com sucesso.");
    return 1;
}

stock SetVehiclePRFUnlocked(vehicleid, playerid = INVALID_PLAYER_ID)
{
    #pragma unused vehicleid
    #pragma unused playerid
    if(VehicleInfo[vehicleid][vPRFLock] == 0)
    {
        if(IsPlayerConnected(playerid))
            SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Este veículo não esta apreendido.");
        return 0;
    }

    new engine, lights, alarm, doors, bonnet, boot, objective;
  	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
   	SetVehicleParamsEx(vehicleid, engine, lights, alarm, false, bonnet, boot, objective);

    if(VehicleInfo[vehicleid][vPRFDeposit] != 0)
    {
        VeiculosApreendidos[VehicleInfo[vehicleid][vPRFDeposit]] = -1;
        VehicleInfo[vehicleid][vPRFDeposit] = 0;
    }

    VehicleInfo[vehicleid][vPRFLock] = 0;
    VehicleInfo[vehicleid][vLock] = false;

//  DelApreendido(vehicleid);
    //WriteLockedCars();

    if(IsPlayerConnected(playerid))
        SendClientMessage(playerid, SERVER_INFO, "{FF0000}[Info]:{FFFFFF} Veículo liberado com sucesso.");
    return 1;
}

stock SetVehicleToRespawnFix(vehicleid)
{
    if(VehicleInfo[vehicleid][vPRFLock] == 1)
    {
        new Float:X, Float:Y, Float:Z, Float:R;
        GetDepositPos(VehicleInfo[vehicleid][vPRFDeposit], X, Y, Z, R);

        SetVehiclePos(vehicleid, X, Y, Z);
        SetVehicleZAngle(vehicleid, R);
        SetVehicleZAngle(vehicleid, R);

        SetVehicleHealth(vehicleid, 1000);
        RepairVehicle(vehicleid);
        return 1;
    }
    SetVehicleToRespawn(vehicleid);
    return 1;
}

stock GetDepositPos(id, &Float:posX, &Float:posY, &Float:posZ, &Float:rotZ)
{
    switch(id)
    {
        case 0: { posX = -469.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 1: { posX = -474.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 2: { posX = -479.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 3: { posX = -484.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 4: { posX = -489.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 5: { posX = -494.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 6: { posX = -499.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 7: { posX = -504.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 8: { posX = -509.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 9: { posX = -514.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 10: { posX = -519.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 11: { posX = -524.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 12: { posX = -529.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 13: { posX = -534.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 14: { posX = -539.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 15: { posX = -544.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 16: { posX = -549.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 17: { posX = -554.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 18: { posX = -559.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 19: { posX = -564.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 20: { posX = -569.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 21: { posX = -574.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 22: { posX = -579.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 23: { posX = -584.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 24: { posX = -589.299987; posY = -472.2000100; posZ = 25.5000000; rotZ = 0.0; }
        case 25: { posX = -470.100006; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 26: { posX = -475.100006; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 27: { posX = -480.100006; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 28: { posX = -485.100006; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 29: { posX = -490.100006; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 30: { posX = -495.100006; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 31: { posX = -500.100006; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 32: { posX = -505.100006; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 33: { posX = -510.100006; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 34: { posX = -515.099975; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 35: { posX = -520.099975; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 36: { posX = -525.099975; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 37: { posX = -530.099975; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 38: { posX = -535.099975; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 39: { posX = -540.099975; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 40: { posX = -545.099975; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 41: { posX = -550.099975; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 42: { posX = -555.099975; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 43: { posX = -560.099975; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 44: { posX = -565.099975; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 45: { posX = -570.099975; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 46: { posX = -575.099975; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 47: { posX = -580.099975; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 48: { posX = -585.099975; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 49: { posX = -590.099975; posY = -487.7999900; posZ = 25.5000000; rotZ = 180.0; }
        case 50: { posX = -468.000000; posY = -500.7000100; posZ = 25.5000000; rotZ = 0.0; }
        case 51: { posX = -472.359985; posY = -500.7000100; posZ = 25.5000000; rotZ = 0.0; }
        case 52: { posX = -476.719970; posY = -500.7000100; posZ = 25.5000000; rotZ = 0.0; }
        case 53: { posX = -481.079956; posY = -500.7000100; posZ = 25.5000000; rotZ = 0.0; }
        case 54: { posX = -485.439941; posY = -500.7000100; posZ = 25.5000000; rotZ = 0.0; }
        case 55: { posX = -489.799926; posY = -500.7000100; posZ = 25.5000000; rotZ = 0.0; }
        case 56: { posX = -494.159912; posY = -500.7000100; posZ = 25.5000000; rotZ = 0.0; }
        case 57: { posX = -498.519897; posY = -500.7000100; posZ = 25.5000000; rotZ = 0.0; }
        case 58: { posX = -502.879882; posY = -500.7000100; posZ = 25.5000000; rotZ = 0.0; }
        case 59: { posX = -507.239868; posY = -500.7000100; posZ = 25.5000000; rotZ = 0.0; }
        case 60: { posX = -511.599853; posY = -500.7000100; posZ = 25.5000000; rotZ = 0.0; }
        case 61: { posX = -515.959838; posY = -500.7000100; posZ = 25.5000000; rotZ = 0.0; }
        case 62: { posX = -520.319824; posY = -500.7000100; posZ = 25.5000000; rotZ = 0.0; }
        case 63: { posX = -524.679809; posY = -500.7000100; posZ = 25.5000000; rotZ = 0.0; }
        case 64: { posX = -529.039794; posY = -500.7000100; posZ = 25.5000000; rotZ = 0.0; }
        case 65: { posX = -533.399780; posY = -500.7000100; posZ = 25.5000000; rotZ = 0.0; }
        case 66: { posX = -468.100006; posY = -512.7000100; posZ = 25.5000000; rotZ = 180.0; }
        case 67: { posX = -472.459991; posY = -512.7000100; posZ = 25.5000000; rotZ = 180.0; }
        case 68: { posX = -476.819976; posY = -512.7000100; posZ = 25.5000000; rotZ = 180.0; }
        case 69: { posX = -481.179962; posY = -512.7000100; posZ = 25.5000000; rotZ = 180.0; }
        case 70: { posX = -485.539947; posY = -512.7000100; posZ = 25.5000000; rotZ = 180.0; }
        case 71: { posX = -489.899932; posY = -512.7000100; posZ = 25.5000000; rotZ = 180.0; }
        case 72: { posX = -494.259918; posY = -512.7000100; posZ = 25.5000000; rotZ = 180.0; }
        case 73: { posX = -498.619903; posY = -512.7000100; posZ = 25.5000000; rotZ = 180.0; }
        case 74: { posX = -502.979888; posY = -512.7000100; posZ = 25.5000000; rotZ = 180.0; }
        case 75: { posX = -507.339874; posY = -512.7000100; posZ = 25.5000000; rotZ = 180.0; }
        case 76: { posX = -511.699859; posY = -512.7000100; posZ = 25.5000000; rotZ = 180.0; }
        case 77: { posX = -516.059875; posY = -512.7000100; posZ = 25.5000000; rotZ = 180.0; }
        case 78: { posX = -520.419860; posY = -512.7000100; posZ = 25.5000000; rotZ = 180.0; }
        case 79: { posX = -524.779846; posY = -512.7000100; posZ = 25.5000000; rotZ = 180.0; }
        case 80: { posX = -529.139831; posY = -512.7000100; posZ = 25.5000000; rotZ = 180.0; }
        case 81: { posX = -533.499816; posY = -512.7000100; posZ = 25.5000000; rotZ = 180.0; }
        case 82: { posX = -619.0000000; posY = -470.299987; posZ = 25.5000000; rotZ = 90.0; }
        case 83: { posX = -619.0000000; posY = -474.659973; posZ = 25.5000000; rotZ = 90.0; }
        case 84: { posX = -619.0000000; posY = -479.019958; posZ = 25.5000000; rotZ = 90.0; }
        case 85: { posX = -619.0000000; posY = -483.379943; posZ = 25.5000000; rotZ = 90.0; }
        case 86: { posX = -619.0000000; posY = -487.739929; posZ = 25.5000000; rotZ = 90.0; }
        case 87: { posX = -619.0000000; posY = -492.099914; posZ = 25.5000000; rotZ = 90.0; }
        case 88: { posX = -619.0000000; posY = -496.459899; posZ = 25.5000000; rotZ = 90.0; }
        case 89: { posX = -619.0000000; posY = -500.819885; posZ = 25.5000000; rotZ = 90.0; }
        case 90: { posX = -619.0000000; posY = -505.179870; posZ = 25.5000000; rotZ = 90.0; }
        case 91: { posX = -619.0000000; posY = -509.539855; posZ = 25.5000000; rotZ = 90.0; }
        case 92: { posX = -619.0000000; posY = -513.899841; posZ = 25.5000000; rotZ = 90.0; }
        case 93: { posX = -619.0000000; posY = -518.259826; posZ = 25.5000000; rotZ = 90.0; }
        case 94: { posX = -619.0000000; posY = -522.619812; posZ = 25.5000000; rotZ = 90.0; }
        case 95: { posX = -619.0000000; posY = -526.979797; posZ = 25.5000000; rotZ = 90.0; }
        case 96: { posX = -619.0000000; posY = -531.339782; posZ = 25.5000000; rotZ = 90.0; }
        default: { posX = 0.0000000000; posY = 0.000000000; posZ = 0.00000000; rotZ = 0.00; }
    }
    return 1;
}*/

stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float:range)
{
    if(!IsVehicleSpawned(vehicleid))
        return false;

    new Float:posX, Float:posY, Float:posZ;
    GetVehiclePos(vehicleid, posX, posY, posZ);

    if(IsPlayerInRangeOfPoint(playerid, range, posX, posY, posZ))
        return true;

    return false;
}

stock IsPlayerInArea(playerid, Float:MaxX, Float:MaxY, Float:MinX, Float:MinY)
{
    if(!IsPlayerConnected(playerid))
        return false;

    new Float:posX, Float:posY, Float:posZ;
    GetPlayerPos(playerid, posX, posY, posZ);

    if(posX > MinX && posX < MaxX && posY > MinY && posY < MaxY)
        return true;

    return false;
}

stock IsPlayerInAreaAzul(playerid)
{
    for(new i = 0; i < MAX_AREASAZUIS; i++)
        if(IsPlayerInArea(playerid, AreasAzuis[i][azMaxPosX], AreasAzuis[i][azMaxPosY], AreasAzuis[i][azMinPosX], AreasAzuis[i][azMinPosY]) && GetPlayerInterior(playerid) == 0)
            return true;

    return false;
}

stock IsPlayerConnectedEx(PlayerName_[])
{
    foreach(Player, playerid)
        if(!strcmp(PlayerName_, ReturnPlayer(playerid)))
            return playerid;

    return INVALID_PLAYER_ID;
}

forward AtualizarTexturaDetran();
public AtualizarTexturaDetran()
{
	SetObjectMaterial(Objeto_Detran, 0, 3987, "civic01_lan", "sl_concretewall1", 0); //Piso
	SetObjectMaterial(Objeto_Detran, 1, 4141, "lan2_gm1", "poshentrance2_256", 0); //Portas
	SetObjectMaterial(Objeto_Detran, 2, 4141, "lan2_gm1", "poshentrance2_256", 0); //Lado
	SetObjectMaterial(Objeto_Detran, 3, 4020, "fighot", "plaintarmac1", 0);//Cima
	SetObjectMaterial(Objeto_Detran, 4, 4141, "civic01_lan", "sl_laglasswall2", 0); //Vidro
	SetObjectMaterial(Objeto_Detran, 5, 1315, "dyntraffic", "black64", 0); //Parte Preta
    return 1;
}

forward ExplodirCaixa(caixaID, orgID);
public ExplodirCaixa(caixaID, orgID)
{
    if(caixaID < 0 || caixaID > MAX_ATMS)
        return 0;

    CreateExplosion(ATMs[caixaID][ATMPosX], ATMs[caixaID][ATMPosY], ATMs[caixaID][ATMPosZ], 10, 2000.0);

    new Float:caixaX, Float:caixaY, Float:caixaZ, Float:caixaRot;
    GetDynamicObjectPos(ATMs[caixaID][ATMObj], caixaX, caixaY, caixaZ);
    GetDynamicObjectRot(ATMs[caixaID][ATMObj], uselessFloat, uselessFloat, caixaRot);

    DestroyDynamicObject(ATMs[caixaID][ATMObj]);
    ATMs[caixaID][ATMObj] = CreateDynamicObject(2943, caixaX, caixaY, caixaZ, 0.0, 0.0, caixaRot);

    ATMs[caixaID][ATMRoubado] = true;
    ATMs[caixaID][ATMPodeUsar] = false;

    SetTimerEx("RecuperarCaixa", (5*60*1000), false, "ib", caixaID, false);

    new capangas = -1,
        roubo[MAX_PLAYERS],
		rouboTotal;

    //Roubo Capangas
    foreach(new pId: Player)
    {
    	if(GetPlayerOrg(pId) == orgID && PlayerToPoint(15.0, pId, caixaX, caixaY, caixaZ)
        && GetPlayerState(pId) != PLAYER_STATE_SPECTATING && AdminDuty[pId] != MODOSA_TRABALHANDO)
    	{
    	    capangas++;
    	    roubo[pId] = random((ATM_CASH_MAX - ATM_CASH_MIN)) + ATM_CASH_MIN;
    	    rouboTotal += roubo[pId];

    		WantedPoints[pId] += 2;
    		SetPlayerCriminal(pId, 255, "Roubo de ATM", ATMs[caixaID][ATMNome]);

            GivePlayerGP(pId, roubo[pId]);

            Streamer_Update(pId);
		}
	}

    //Mensagem
    foreach(new pId: Player)
    {
    	if(GetPlayerOrg(pId) == orgID && PlayerToPoint(15.0, pId, caixaX, caixaY, caixaZ)
        && GetPlayerState(pId) != PLAYER_STATE_SPECTATING && AdminDuty[pId] != MODOSA_TRABALHANDO)
    	{
            SendClientMessage(pId, COLOR_GREEN, "Informações do Roubo:");
	        format(thestring, sizeof(thestring), "- Roubo: {009900}R$%d", roubo[pId]);
	        SendClientMessage(pId, -1, thestring);
	        format(thestring, sizeof(thestring), "- Capangas: {FFFF00}%d", capangas);
	        SendClientMessage(pId, -1, thestring);
	        format(thestring, sizeof(thestring), "- Total do Roubo: {009900}R$%d", rouboTotal);
	        SendClientMessage(pId, -1, thestring);
	        SendClientMessage(pId, COLOR_GREEN, "|---|");
		}
	}
    return 1;
}

forward RecuperarCaixa(caixaID, bool:liberarRoubo);
public RecuperarCaixa(caixaID, bool:liberarRoubo)
{
    if(!liberarRoubo)
    {
        new Float:caixaX, Float:caixaY, Float:caixaZ, Float:caixaRot;
        GetDynamicObjectPos(ATMs[caixaID][ATMObj], caixaX, caixaY, caixaZ);
        GetDynamicObjectRot(ATMs[caixaID][ATMObj], uselessFloat, uselessFloat, caixaRot);

        DestroyDynamicObject(ATMs[caixaID][ATMObj]);
        ATMs[caixaID][ATMObj] = CreateDynamicObject(2942, caixaX, caixaY, caixaZ, 0.0, 0.0, caixaRot);

        ATMs[caixaID][ATMRoubado] = true;
        ATMs[caixaID][ATMPodeUsar] = true;

        SetTimerEx("RecuperarCaixa", (25*60*1000), false, "ib", caixaID, true);
        return 1;
    }

    ATMs[caixaID][ATMRoubado] = false;
    ATMs[caixaID][ATMPodeUsar] = true;
    return 1;
}

public:do Float:RandomFloat(max) //Acredite, não da LAG NEM UM! (Executada 100k de vezes em 0 ms '-')
{
	new smallStr[8];
	format(smallStr, sizeof(smallStr), "%d.%04d", random(max), random(10000));
	new Float:Resultado = floatstr(smallStr);
	return Resultado;
}

//Int
stock Math_Clamp(cur, min, max) {
    if(cur < min)
        return min;
    else if(cur > max)
        return max;
    return cur;
}
#define Math:Clamp Math_Clamp

//Float
stock Float:Mathf_Clamp(Float:cur, Float:min, Float:max) {
    if(cur < min)
        return min;
    else if(cur > max)
        return max;
    return cur;
}
#define Mathf:Clamp Mathf_Clamp

stock SendGuerraMessage(color, text[])
{
    foreach(new playerid: Player)
        if(Guerrilheiro(playerid))
            SendClientMessage(playerid, color, text);
    return 1;
}

stock Pay(playerid, money)
{
    if(GetPlayerGP(playerid) < money)
    {
        format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} Você não tem {009900}R$%d{AA3333}.", money);
        SendClientMessage(playerid, COLOR_RED, thestring);
        return false;
    }
    GivePlayerGP(playerid, -money);
    return true;
}

stock AccountFile(nick[])
{
	new conta[128];
	format(conta, 128, "/RPG/users/%s.ini", nick);
    return conta;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    switch(weaponid)
    {
        // allowed
        case 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38:
        {

        }
		default:
		{
			// or just return 0
			BanExtend(playerid, playerid, "Crash aqui não, caralhudo! CHUPA HUE!!!", 0);
			return 0;
		}
	}
    if(TAAStarted[playerid] == 0)
        return 1;
    if(weaponid != TAAStatus[playerid][taaWeapon] && weaponid != 0)
        return EndTAA(playerid);

    TAAStatus[playerid][taaShots] ++;
    if(hittype == BULLET_HIT_TYPE_NONE)
    {
        TAAStatus[playerid][taaMiss] ++;
        return 1;
    }
    else if(hittype == BULLET_HIT_TYPE_PLAYER_OBJECT)
    {
        hitid = Streamer_GetItemStreamerID(playerid, STREAMER_TYPE_OBJECT, hitid); //Transforma ObjectID para DynamicObjectID

        //TAAObjects[][0] = Suporte
        //TAAObjects[][1+] = Partes
        for(new i = 1; i < sizeof(TAAObjects[]); i++)
        {
            if(TAAObjects[playerid][i] != -1 && !IsValidDynamicObject(hitid))
            {
                DestroyDynamicObject(TAAObjects[playerid][i]);
                TAAObjects[playerid][i] = -1;
                TAAHits[playerid] ++;
                continue;
            }

            if(hitid == TAAObjects[playerid][i])
            {
                DestroyDynamicObject(hitid);
                TAAHits[playerid] ++;
                if(TAAHits[playerid] == 5)
                {
                    if(GetTickCount() - TAATime[playerid] < TAAStatus[playerid][taaBestTime])
                        TAAStatus[playerid][taaBestTime] = GetTickCount() - TAATime[playerid];

                    TAAHits[playerid] = 0;
                    DestroyDynamicObject(TAAObjects[playerid][0]);
                    CreateTAATarget(playerid);
                    MoveTAATarget(playerid);
                    TAAStatus[playerid][taaTargets] ++;
                }
                return 1;
            }
        }
        TAAStatus[playerid][taaMiss] ++;
        return 1;
    }
    EndTAA(playerid);
  	if(hittype != BULLET_HIT_TYPE_NONE)
  	{
    	if(!(-200.0 <= fX <= 200.0 ) || !(-200.0 <= fY <= 200.0) || !(-200.0 <= fZ <= 200.0))
    	{
			BanExtend(playerid, playerid, "Crash aqui não! ZIFODEO", 0);
			return 0;
    	}
  	}
    return 1;
}

stock CreateTAATarget(playerid)
{
    new Float:targetX = 273.0;
    if(TAAStatus[playerid][taaWeapon] == 24 || TAAStatus[playerid][taaWeapon] == 25)
        targetX = 285.25;

    TAAObjects[playerid][0] = CreateDynamicObject(3025, targetX,       PosTAA[playerid][1],         1007.50,         0.0, 0.0, 90.0);
    TAAObjects[playerid][1] = CreateDynamicObject(1592, targetX + 0.2, PosTAA[playerid][1] + 0.015, 1007.50 - 2.500, 0.0, 0.0, 90.0);
    TAAObjects[playerid][2] = CreateDynamicObject(1591, targetX + 0.2, PosTAA[playerid][1] - 0.015, 1007.50 - 2.500, 0.0, 0.0, 90.0);
    TAAObjects[playerid][3] = CreateDynamicObject(1590, targetX + 0.2, PosTAA[playerid][1] - 0.015, 1007.50 - 2.525, 0.0, 0.0, 90.0);
    TAAObjects[playerid][4] = CreateDynamicObject(1589, targetX + 0.2, PosTAA[playerid][1] + 0.015, 1007.50 - 2.525, 0.0, 0.0, 90.0);
    TAAObjects[playerid][5] = CreateDynamicObject(1588, targetX + 0.2, PosTAA[playerid][1],         1007.50 - 2.550, 0.0, 0.0, 90.0);

    Streamer_Update(playerid);

    TAATime[playerid] = GetTickCount();
    return 1;
}

stock MoveTAATarget(playerid)
{
    if(TAAObjects[playerid][0] == -1)
        return 0;

    new Float:moveX = 294.0;
    if(TAAStatus[playerid][taaWeapon] == 34)
        moveX = 285.25;

    new Float:speed = RandomFloat(2) + 1.0;
    MoveDynamicObject(TAAObjects[playerid][0], moveX,       PosTAA[playerid][1],         1007.50,         speed);
    MoveDynamicObject(TAAObjects[playerid][1], moveX + 0.2, PosTAA[playerid][1] + 0.015, 1007.50 - 2.500, speed);
    MoveDynamicObject(TAAObjects[playerid][2], moveX + 0.2, PosTAA[playerid][1] - 0.015, 1007.50 - 2.500, speed);
    MoveDynamicObject(TAAObjects[playerid][3], moveX + 0.2, PosTAA[playerid][1] - 0.015, 1007.50 - 2.525, speed);
    MoveDynamicObject(TAAObjects[playerid][4], moveX + 0.2, PosTAA[playerid][1] + 0.015, 1007.50 - 2.525, speed);
    MoveDynamicObject(TAAObjects[playerid][5], moveX + 0.2, PosTAA[playerid][1],         1007.50 - 2.550, speed);
    return 1;
}

stock DestroyTAAObjects(playerid)
{
    for(new i = 0; i < sizeof(TAAObjects[]); i++)
    {
        if(IsValidDynamicObject(TAAObjects[playerid][i]))
        {
            DestroyDynamicObject(TAAObjects[playerid][i]);
            TAAObjects[playerid][i] = -1;
        }
    }
    return 1;
}

stock ShowTAAStatus(playerid)
{
    new datString[512], Float:Porcentagem[3], Float:MelhorTempo;
    // * 1.0 = Transformar em Float.
    Porcentagem[0] = (TAAStatus[playerid][taaShots] - TAAStatus[playerid][taaMiss]) * 1.0;
    Porcentagem[1] = TAAStatus[playerid][taaShots] * 1.0;
    Porcentagem[2] = Porcentagem[0] / Porcentagem[1];
    Porcentagem[2] *= 100;
    MelhorTempo = TAAStatus[playerid][taaBestTime] / 1000.0;

	new WeaponName[32];
	GetWeaponName(TAAStatus[playerid][taaWeapon], WeaponName, 32);

    format(datString, 512, "{FFFFFF}Tempo: %ds\nArma: %s\n{FF0000}- {FFFFFF}Tiros: %d\n{FF0000}- {FFFFFF}Acertos: %d\n{FF0000}- {FFFFFF}Percentual: %.2f\n\nAlvos: %d\n{FF0000}- {FFFFFF}Melhor Tempo: %.2fs", (GetTickCount() - TAAStarted[playerid]) / 1000, WeaponName, TAAStatus[playerid][taaShots], TAAStatus[playerid][taaShots] - TAAStatus[playerid][taaMiss], Porcentagem[2], TAAStatus[playerid][taaTargets], MelhorTempo);
    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Tiro ao Alvo - Status:", datString, "Fechar", "");
    return 1;
}

stock EndTAA(playerid, bool:show = true)
{
    if(show)
        ShowTAAStatus(playerid);

    InTAA[playerid] = false;
    TAAStarted[playerid] = 0;

    ResetPlayerWeapons(playerid);
    for(new i = 0; i < sizeof(ArmasTAA[]); i++)
        GivePlayerWeapon(playerid, ArmasTAA[playerid][i][0], ArmasTAA[playerid][i][1]);

    DestroyTAAObjects(playerid);
    return 1;
}

stock CleanTrunkInfo(trunkid)
{
    TrunkInfo[trunkid] = TrunkInfo[sizeof(trunkid) - 1];
    return 1;
}

stock MovePlayer(playerid, Float:posX, Float:posY, Float:posZ)
{
	if(GetPlayerState(playerid) == 2)
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		SetVehiclePos(tmpcar, posX, posY, posZ);
        return 1;
    }
	SafeSetPlayerPos(playerid, posX, posY, posZ);
    return 1;
}

stock PrepareGZRace()
{
    RaceInfo[rRacing] = false;
    RaceInfo[rAllowRace] = false;
    RaceInfo[rAllowInvite] = false;

    PlayerInRace[RaceInfo[rRacer][0]] = true;
    PlayerInRace[RaceInfo[rRacer][1]] = true;

    RaceRunnerID[RaceInfo[rRacer][0]] = 0;
    RaceRunnerID[RaceInfo[rRacer][1]] = 1;

    new gz = RaceInfo[rGZ];
    if(!IsPlayerInVehicle(RaceInfo[rRacer][0], RaceInfo[rVeh][0]))
    {
        SetVehicleToRespawn(RaceInfo[rVeh][0]);
        SetPlayerPos(RaceInfo[rRacer][0], RaceGZ[gz][rStart1][0], RaceGZ[gz][rStart1][1], RaceGZ[gz][rStart1][2]);
        SetVehiclePos(RaceInfo[rVeh][0], RaceGZ[gz][rStart1][0], RaceGZ[gz][rStart1][1], RaceGZ[gz][rStart1][2]);
        SetVehicleZAngle(RaceInfo[rVeh][0], RaceGZ[gz][rStart1][3]);
        PutPlayerInVehicle(RaceInfo[rRacer][0], RaceInfo[rVeh][0], 0);
    }
    else
    {
        SetVehiclePos(RaceInfo[rVeh][0], RaceGZ[gz][rStart1][0], RaceGZ[gz][rStart1][1], RaceGZ[gz][rStart1][2]);
        SetVehicleZAngle(RaceInfo[rVeh][0], RaceGZ[gz][rStart1][3]);
    }
    SetVehiclePos(RaceInfo[rVeh][1], RaceGZ[gz][rStart2][0], RaceGZ[gz][rStart2][1], RaceGZ[gz][rStart2][2]);
    SetVehicleZAngle(RaceInfo[rVeh][1], RaceGZ[gz][rStart2][3]);

    GetVehicleParamsNew(RaceInfo[rVeh][0]);
    SetVehicleParamsEx(RaceInfo[rVeh][0], false, lights, false, true, bonnet, boot, objective);

    GetVehicleParams(RaceInfo[rVeh][1]);
    SetVehicleParamsEx(RaceInfo[rVeh][1], false, lights, false, true, bonnet, boot, objective);

    SetPlayerRaceCheckpoint(RaceInfo[rRacer][0], 1, RaceGZ[gz][rEnd][0], RaceGZ[gz][rEnd][1], RaceGZ[gz][rEnd][2], 0.0, 0.0, 0.0, 6.0);
    SetPlayerRaceCheckpoint(RaceInfo[rRacer][1], 1, RaceGZ[gz][rEnd][0], RaceGZ[gz][rEnd][1], RaceGZ[gz][rEnd][2], 0.0, 0.0, 0.0, 6.0);

    SendClientMessage(RaceInfo[rRacer][0], COLOR_LIGHTYELLOW, "Corrida: {FFFFFF}O fim da corrida foi {FF0000}marcado{FFFFFF} no seu mapa.");
    SendClientMessage(RaceInfo[rRacer][1], COLOR_LIGHTYELLOW, "Corrida: {FFFFFF}O fim da corrida foi {FF0000}marcado{FFFFFF} no seu mapa.");

    GangZoneFlashForAll(RaceGZID[gz], OrgsColors[GetPlayerOrg(RaceInfo[rRacer][0])]);

    //Contagem
    TextDrawSetString(RaceCountTD[0], "_");
    TextDrawShowForPlayer(RaceInfo[rRacer][0], RaceCountTD[0]);
    TextDrawShowForPlayer(RaceInfo[rRacer][1], RaceCountTD[0]);

    //Tempo
    TextDrawSetString(RaceTime, "00:00");
    TextDrawShowForPlayer(RaceInfo[rRacer][0], RaceTime);
    TextDrawShowForPlayer(RaceInfo[rRacer][1], RaceTime);

    //Veiculo
    TextDrawSetPreviewModel(RaceVehPreview[0], RaceInfo[rVehModel][0]);
    TextDrawSetPreviewModel(RaceVehPreview[1], RaceInfo[rVehModel][1]);
    TextDrawSetPreviewVehCol(RaceVehPreview[0], 1, 1);
    TextDrawSetPreviewVehCol(RaceVehPreview[1], 1, 1);
    TextDrawShowForPlayer(RaceInfo[rRacer][0], RaceVehPreview[1]);
    TextDrawShowForPlayer(RaceInfo[rRacer][1], RaceVehPreview[0]);

    //Skin
    TextDrawSetPreviewModel(RaceSkinPreview[0], GetPlayerSkin(RaceInfo[rRacer][0]));
    TextDrawSetPreviewModel(RaceSkinPreview[1], GetPlayerSkin(RaceInfo[rRacer][1]));
    TextDrawShowForPlayer(RaceInfo[rRacer][0], RaceSkinPreview[1]);
    TextDrawShowForPlayer(RaceInfo[rRacer][1], RaceSkinPreview[0]);

    //Nome
    TextDrawSetString(RaceRacerName[0], ReturnPlayer(RaceInfo[rRacer][0]));
    TextDrawSetString(RaceRacerName[1], ReturnPlayer(RaceInfo[rRacer][1]));
    TextDrawColor(RaceRacerName[0], OrgsColors[GetPlayerOrg(RaceInfo[rRacer][0])]);
    TextDrawColor(RaceRacerName[1], OrgsColors[GetPlayerOrg(RaceInfo[rRacer][1])]);
    TextDrawShowForPlayer(RaceInfo[rRacer][0], RaceRacerName[1]);
    TextDrawShowForPlayer(RaceInfo[rRacer][1], RaceRacerName[0]);

    RaceCount(5, true);
    return 1;
}

public:do StartGZRace()
{
    RaceInfo[rRacing] = true;

    GetVehicleParamsNew(RaceInfo[rVeh][0]);
    SetVehicleParamsEx(RaceInfo[rVeh][0], true, lights, false, true, bonnet, boot, objective);
    SetVehicleParamsForPlayer(RaceInfo[rVeh][0], RaceInfo[rRacer][0], objective, false);

    GetVehicleParams(RaceInfo[rVeh][1]);
    SetVehicleParamsEx(RaceInfo[rVeh][1], true, lights, false, true, bonnet, boot, objective);
    SetVehicleParamsForPlayer(RaceInfo[rVeh][1], RaceInfo[rRacer][1], objective, false);

    RaceInfo[rStartTime] = GetTickCount();

    SetPlayerArmedWeapon(RaceInfo[rRacer][0], 0);
    SetPlayerArmedWeapon(RaceInfo[rRacer][1], 0);
    return 1;
}

public:do EndRace(end, playerid)
{
    new winnerOrg, string[155];
    if(end == RACE_WIN)
    {
        winnerOrg = GetPlayerOrg(playerid);

        format(string, 155, "Corrida: {FFFFFF}%s da gangue {%s}%s{FFFFFF} ganhou a corrida.", ReturnPlayer(playerid), OrgsColorTags[GetPlayerOrg(playerid)], OrgsNames[GetPlayerOrg(playerid)]);
        SendTeamMessage(TEAM_BIKERS, COLOR_LIGHTBLUE, string);
        SendTeamMessage(TEAM_ANGELS, COLOR_LIGHTBLUE, string);
    }
    else if(end == RACE_LOST_DISCONNECT)
    {
        new winner;
        if(RaceRunnerID[playerid] == 0)
            winner = RaceInfo[rRacer][1];
        else
            winner = RaceInfo[rRacer][0];

        winnerOrg = GetPlayerOrg(winner);

        format(string, 155, "Corrida: {FFFFFF}%s desconectou. {%s}%s{FFFFFF} ganhou a corrida.", ReturnPlayer(playerid), OrgsColorTags[GetPlayerOrg(winner)], OrgsNames[GetPlayerOrg(winner)]);
        SendTeamMessage(TEAM_BIKERS, COLOR_LIGHTBLUE, string);
        SendTeamMessage(TEAM_ANGELS, COLOR_LIGHTBLUE, string);
    }
    else if(end == RACE_LOST_RUNOUT)
    {
        new winner;
        if(RaceRunnerID[playerid] == 0)
            winner = RaceInfo[rRacer][1];
        else
            winner = RaceInfo[rRacer][0];

        winnerOrg = GetPlayerOrg(winner);

        format(string, 155, "Corrida: {FFFFFF}%s perdeu a Moto. {%s}%s{FFFFFF} ganhou a corrida.", ReturnPlayer(playerid), OrgsColorTags[GetPlayerOrg(winner)], OrgsNames[GetPlayerOrg(winner)]);
        SendTeamMessage(TEAM_BIKERS, COLOR_LIGHTBLUE, string);
        SendTeamMessage(TEAM_ANGELS, COLOR_LIGHTBLUE, string);
    }
    else if(end == RACE_LOST_DIE)
    {
        new winner;
        if(RaceRunnerID[playerid] == 0)
            winner = RaceInfo[rRacer][1];
        else
            winner = RaceInfo[rRacer][0];

        winnerOrg = GetPlayerOrg(winner);

        format(string, 155, "Corrida: {FFFFFF}%s morreu. {%s}%s{FFFFFF} ganhou a corrida.", ReturnPlayer(playerid), OrgsColorTags[GetPlayerOrg(winner)], OrgsNames[GetPlayerOrg(winner)]);
        SendTeamMessage(TEAM_BIKERS, COLOR_LIGHTBLUE, string);
        SendTeamMessage(TEAM_ANGELS, COLOR_LIGHTBLUE, string);
    }
    else if(end == RACE_LOST_NOPLAYER)
    {
        winnerOrg = GetPlayerOrg(playerid);

        format(string, 155, "[Corrida]: {FFFFFF}A gangue {%s}%s{FFFFFF} venceu a corrida e pegou o território '{0066FF}%s{FFFFFF}'.", OrgsColorTags[GetPlayerOrg(playerid)], OrgsNames[GetPlayerOrg(playerid)], RaceGZ[RaceInfo[rGZ]][rName]);
        SendClientMessageToAll(COLOR_WHITE, string);

        RaceGZ[RaceInfo[rGZ]][rOwner] = winnerOrg;
        GangZoneShowForAll(RaceGZID[RaceInfo[rGZ]], OrgsColors[winnerOrg]);

        RaceInfo[rRacing] = false;
        RaceInfo[rAllowRace] = false;
        RaceInfo[rAllowInvite] = false;
        SetTimer("AllowRace", (10*60*1000), false);
        return 1;
    }

    TextDrawHideForAll(RaceCountTD[0]);
    TextDrawHideForAll(RaceCountTD[1]);
    TextDrawHideForAll(RaceCountTD[2]);
    TextDrawHideForAll(RaceVehPreview[0]);
    TextDrawHideForAll(RaceVehPreview[1]);
    TextDrawHideForAll(RaceSkinPreview[0]);
    TextDrawHideForAll(RaceSkinPreview[1]);
    TextDrawHideForAll(RaceRacerName[0]);
    TextDrawHideForAll(RaceRacerName[1]);
    TextDrawHideForAll(RaceTime);

    RaceGZ[RaceInfo[rGZ]][rOwner] = winnerOrg;

    GangZoneStopFlashForAll(RaceGZID[RaceInfo[rGZ]]);
    GangZoneShowForAll(RaceGZID[RaceInfo[rGZ]], OrgsColors[winnerOrg]);

    PlayerInRace[RaceInfo[rRacer][0]] = false;
    PlayerInRace[RaceInfo[rRacer][1]] = false;

    DisablePlayerRaceCheckpoint(RaceInfo[rRacer][0]);
    DisablePlayerRaceCheckpoint(RaceInfo[rRacer][1]);

    GetVehicleParamsNew(RaceInfo[rVeh][0]);
    SetVehicleParamsEx(RaceInfo[rVeh][0], true, lights, false, false, bonnet, boot, objective);

    GetVehicleParams(RaceInfo[rVeh][1]);
    SetVehicleParamsEx(RaceInfo[rVeh][1], true, lights, false, false, bonnet, boot, objective);

    KillTimer(RaceTimer);

    RaceInfo[rRacing] = false;
    RaceInfo[rAllowRace] = false;
    RaceInfo[rAllowInvite] = false;
    SetTimer("AllowRace", (10*60*1000), false);
    return 1;
}

public:do AllowRace()
{
    RaceInfo[rRacing] = false;
    RaceInfo[rAllowRace] = true;
    RaceInfo[rAllowInvite] = false;
    return 1;
}

public:do RaceCount(number, bool:allowStart)
{
    new datString[16];
    if(number == 0)
    {
        format(datString, 16, "~g~Vai");

        TextDrawShowForPlayer(RaceInfo[rRacer][0], RaceCountTD[1]);
        TextDrawShowForPlayer(RaceInfo[rRacer][1], RaceCountTD[1]);
        TextDrawShowForPlayer(RaceInfo[rRacer][0], RaceCountTD[2]);
        TextDrawShowForPlayer(RaceInfo[rRacer][1], RaceCountTD[2]);

        if(allowStart)
            StartGZRace();
    }
    else if(number == -1)
    {
        TextDrawHideForAll(RaceCountTD[0]);
        TextDrawHideForAll(RaceCountTD[1]);
        TextDrawHideForAll(RaceCountTD[2]);
        return 1;
    }
    else
        format(datString, 16, "%d", number);

    RaceTimer = SetTimerEx("RaceCount", 1000, false, "db", number - 1, allowStart);
    TextDrawSetString(RaceCountTD[0], datString);
    return 1;
}

stock SetPlayerSkinEx(playerid, skinid)
{
    Player[playerid][pModel] = skinid;
    SetPlayerSkin(playerid, skinid);
    return 1;
}

stock AllowedJob(playerid, jobid)
    return AllowedOrgJobs[jobid][GetPlayerOrg(playerid)];

stock IsJobAllowedAtOrg(jobid, orgid)
    return AllowedOrgJobs[jobid][orgid];

stock SetAllowedJobs()
{
    for(new jobid = 0; jobid < MAX_JOBS; jobid++)
    {
        //Sem Org
        AllowedOrgJobs[jobid][0] = true;

        //Apenas uma Org
        for(new i = 1; i < MAX_ORGS; i++)
        {
            if(AllowedOrgJobs_[jobid] != i)
                AllowedOrgJobs[jobid][i] = false;
            else
                AllowedOrgJobs[jobid][i] = true;
        }

        //Todas Orgs
        if(AllowedOrgJobs_[jobid] == -1)
            for(new i = 1; i < MAX_ORGS; i++)
                AllowedOrgJobs[jobid][i] = true;

        //Orgs Criminosas
        if(AllowedOrgJobs_[jobid] == -2)
            for(new i = 1; i < MAX_ORGS; i++)
                if(IsACrimeOrg(i))
                    AllowedOrgJobs[jobid][i] = true;

        //Cops
        if(AllowedOrgJobs_[jobid] == -3)
            for(new i = 1; i < MAX_ORGS; i++)
                if(IsACopOrg(i))
                    AllowedOrgJobs[jobid][i] = true;

        //Orgs Não Criminosas
        if(AllowedOrgJobs_[jobid] == -4)
            for(new i = 1; i < MAX_ORGS; i++)
                if(!IsACrimeOrg(i))
                    AllowedOrgJobs[jobid][i] = true;
    }
    return 1;
}

stock ShowAllowedOrgs(playerid, jobid, bool:back = true)
{
    new datString[1024],
        str[128],
        bool:Found = false;

    format(datString, 1024, "{FFFFFF}Orgs Permitidas:\n");
    for(new i = 1; i < MAX_ORGS; i++)
    {
        if(AllowedOrgJobs[jobid][i])
        {
            format(str, 128, "\n{FF0000}-{FFFFFF} %s", OrgsNames[i]);
            strcat(datString, str, 1024);
            Found = true;
        }
    }
    if(!Found)
        strcat(datString, "\n{FF0000}-{FFFFFF} Somente Civis.", 1024);

    if(back)
        ShowPlayerDialog(playerid, DIALOG_EMPREGO + 2, DIALOG_STYLE_MSGBOX, "Emprego:", datString, "Voltar", "Sair");
    else
        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Emprego:", datString, "Sair", "");
    return 1;
}

stock PegarMinSec(Secs, &Sec, &Min)
{
    Min = Secs / 60;
    Sec = Secs - (Min * 60);
    return 1;
}

/*stock GiveReferral(i, pId)
{
    GivePlayerCash(pId, 5000);
	SendClientMessage(i, COLOR_WHITE, "{FF0000}[BLS]: {FFFFFF}Você atingiu dois paydays. Seu amigo recebeu BLS$5.000 por isso.");
	SendClientMessage(pId, COLOR_WHITE, "{FF0000}[BLS]: {FFFFFF}Você recebeu BLS$5.000 porque seu amigo atingiu dois paydays.");

    format(thestring, sizeof(thestring), "%s(On-Line) recebeu Referral de %s.", Player[i][pReferral], ReturnPlayer(i));
    WriteLog("referral", thestring);

    format(Player[i][pReferral], MAX_PLAYER_NAME, "--");
    return 1;
}*/

forward Float:floatlerp(Float:a, Float:b, Float:at);
public Float:floatlerp(Float:a, Float:b, Float:at)
    return floatadd(a, (b - a) * at);

stock GetPlayerSpeed(playerid)
{
    new Float:posX, Float:posY, Float:posZ, Float:Speed;
    if(IsPlayerInAnyVehicle(playerid))
        GetVehicleVelocity(GetPlayerVehicleID(playerid), posX, posY, posZ);
    else
        GetPlayerVelocity(playerid, posX, posY, posZ);

    //Speed = floatsqroot(floatpower(floatabs(posX), 2.0) + floatpower(floatabs(posY), 2.0) + floatpower(floatabs(posZ), 2.0)) * KHM_MULTIPLIER;
    Speed = floatsqroot(((posX*posX)+(posY*posY))+(posZ*posZ))*KHM_MULTIPLIER;
    return floatround(Speed);
}

stock GetVehicleSeats(vehicleid)
{
    new m = GetVehicleModel(vehicleid), z = 0;
    switch(m)
    {
        case 400:z=4; case 401:z=2; case 402:z=2; case 403:z=2; case 404:z=4; case 405:z=4;
        case 406:z=2; case 407:z=2; case 408:z=2; case 409:z=4; case 410:z=2; case 411:z=2;
        case 412:z=2; case 413:z=4; case 414:z=2; case 415:z=2; case 416:z=2; case 417:z=2;
        case 418:z=4; case 419:z=2; case 420:z=4; case 421:z=4; case 422:z=2; case 423:z=2;
        case 424:z=2; case 425:z=1; case 426:z=4; case 427:z=4; case 428:z=4; case 429:z=2;
        case 430:z=1; case 431:z=8; case 432:z=1; case 433:z=2; case 434:z=2; case 435:z=0;
        case 436:z=2; case 437:z=8; case 438:z=4; case 439:z=2; case 440:z=2; case 441:z=1;
        case 442:z=4; case 443:z=2; case 444:z=2; case 445:z=4; case 446:z=1; case 447:z=2;
        case 448:z=1; case 449:z=2; case 450:z=0; case 451:z=2; case 452:z=1; case 453:z=1;
        case 454:z=1; case 455:z=2; case 456:z=2; case 457:z=2; case 458:z=4; case 459:z=4;
        case 460:z=2; case 461:z=2; case 462:z=2; case 463:z=2; case 464:z=1; case 465:z=1;
        case 466:z=4; case 467:z=2; case 468:z=2; case 469:z=2; case 470:z=4; case 471:z=2;
        case 472:z=1; case 473:z=1; case 474:z=2; case 475:z=2; case 476:z=1; case 477:z=2;
        case 478:z=2; case 479:z=4; case 480:z=2; case 481:z=1; case 482:z=2; case 483:z=4;
        case 484:z=1; case 485:z=1; case 486:z=1; case 487:z=4; case 488:z=2; case 489:z=2;
        case 490:z=4; case 491:z=2; case 492:z=4; case 493:z=1; case 494:z=2; case 495:z=2;
        case 496:z=2; case 497:z=4; case 498:z=2; case 499:z=2; case 500:z=2; case 501:z=1;
        case 502:z=2; case 503:z=2; case 504:z=4; case 505:z=2; case 506:z=2; case 507:z=4;
        case 508:z=2; case 509:z=1; case 510:z=1; case 511:z=2; case 512:z=1; case 513:z=1;
        case 514:z=2; case 515:z=2; case 516:z=2; case 517:z=2; case 518:z=2; case 519:z=1;
        case 520:z=1; case 521:z=2; case 522:z=2; case 523:z=2; case 524:z=2; case 525:z=2;
        case 526:z=2; case 527:z=2; case 528:z=2; case 529:z=4; case 530:z=1; case 531:z=1;
        case 532:z=1; case 533:z=2; case 534:z=2; case 535:z=2; case 536:z=2; case 537:z=2;
        case 538:z=2; case 539:z=1; case 540:z=2; case 541:z=2; case 542:z=2; case 543:z=2;
        case 544:z=2; case 545:z=2; case 546:z=4; case 547:z=4; case 548:z=2; case 549:z=2;
        case 550:z=4; case 551:z=4; case 552:z=2; case 553:z=1; case 554:z=2; case 555:z=2;
        case 556:z=2; case 557:z=2; case 558:z=2; case 559:z=2; case 560:z=4; case 561:z=4;
        case 562:z=2; case 563:z=2; case 564:z=1; case 565:z=2; case 566:z=2; case 567:z=2;
        case 568:z=1; case 569:z=0; case 570:z=2; case 571:z=1; case 572:z=1; case 573:z=2;
        case 574:z=2; case 575:z=2; case 576:z=2; case 577:z=1; case 578:z=2; case 579:z=4;
        case 580:z=4; case 581:z=2; case 582:z=4; case 583:z=1; case 584:z=0; case 585:z=4;
        case 586:z=2; case 587:z=2; case 588:z=2; case 589:z=2; case 590:z=0; case 591:z=0;
        case 592:z=1; case 593:z=2; case 594:z=1; case 595:z=1; case 596:z=4; case 597:z=4;
        case 598:z=4; case 599:z=2; case 600:z=2; case 601:z=2; case 602:z=2; case 603:z=2;
        case 604:z=2; case 605:z=2; case 606:z=0; case 607:z=0; case 608:z=0; case 609:z=2;
        case 610:z=0; case 611:z=0;
    }
    return z;
}

stock SetEngine(vehicleid, bool:on)
{
    GetVehicleParamsNew(vehicleid);
    SetVehicleParamsEx(vehicleid, on, lights, alarm, doors, bonnet, boot, objective);
    VehicleInfo[vehicleid][vEngine] = on;
    return 1;
}

stock FindCarModelPrice(model)
{
    for(new c = 0; c < sizeof(ConceCars); c++)
        if(model == ConceCars[c][vModel])
            return ConceCars[c][vPreco];
    return 0;
}

public:do PortaBanco_1()
{
    SetDynamicObjectPos(PortaCofre[0], 2526.1499, -1300.1000, 1013.0500);
    SetDynamicObjectPos(PortaCofre[1], 2526.0000, -1300.1000, 1010.4000);
    return 1;
}

public:do ResetarBanco_1()
{
    SetDynamicObjectPos(PortaCofre[0], 2526.1499, -1300.1000, 1033.0500);
    SetDynamicObjectPos(PortaCofre[1], 2526.0000, -1300.1000, 1030.4000);
    PortaExplodida[0] = false;
    return 1;
}

public:do PortaBanco_2()
{
    SetDynamicObjectPos(PortaCofre[2], 2526.2000, -1316.2000, 1013.0500);
    SetDynamicObjectPos(PortaCofre[3], 2525.7000, -1316.2000, 1010.4000);
    return 1;
}

public:do ResetarBanco_2()
{
    SetDynamicObjectPos(PortaCofre[2], 2526.2000, -1316.2000, 1033.0500);
    SetDynamicObjectPos(PortaCofre[3], 2525.7000, -1316.2000, 1030.4000);
    PortaExplodida[1] = false;
    return 1;
}

public:do RobCofrePorta(id, bool:abrir)
{
    if(id == 0)
    {
        if(abrir)
            MoveDynamicObject(RobCofres[0][1], 821.1000400, 8.6135000, 1003.7000000, 0.1, 0.0000000, 0.0000000, 90.0000000);
        else
            MoveDynamicObject(RobCofres[0][1], 821.1000400, 8.6335000, 1003.7000000, 0.1, 0.0000000, 0.0000000, 180.0000000);
    }
    else if(id == 1)
    {
        if(abrir)
            MoveDynamicObject(RobCofres[1][1], 963.9000200, 2096.2151000, 1010.5000000, 0.1, 0.0000000, 0.0000000, 90.0000000);
        else
            MoveDynamicObject(RobCofres[1][1], 963.9000200, 2096.2351000, 1010.5000000, 0.1, 0.0000000, 0.0000000, 180.0000000);
    }
    else if(id == 2)
    {
        if(abrir)
            MoveDynamicObject(RobCofres[2][1], 350.6000100, 159.8050000, 1025.3000000, 0.1, 0.0000000, 0.0000000, 90.0000000);
        else
            MoveDynamicObject(RobCofres[2][1], 350.6000100, 159.8250000, 1025.3000000, 0.1, 0.0000000, 0.0000000, 180.0000000);
    }
    else if(id == 3)
    {
        if(abrir)
            MoveDynamicObject(RobCofres[3][1], 476.1000100, -11.0450000, 1003.2000000, 0.1, 0.0000000, 0.0000000, 270.0000000);
        else
            MoveDynamicObject(RobCofres[3][1], 476.1000100, -11.0250000, 1003.2000000, 0.1, 0.0000000, 0.0000000, 0.0000000);
    }
    else if(id == 4)
    {
        if(abrir)
            MoveDynamicObject(RobCofres[4][1], 366.3771100, 2330.1499000, 1890.1000000, 0.1, 0.0000000, 0.0000000, 270.0000000);
        else
            MoveDynamicObject(RobCofres[4][1], 366.3771100, 2330.1299000, 1890.1000000, 0.1, 0.0000000, 0.0000000, 0.0000000);
    }
    return 1;
}

public:do RobCofreMoney(id, bool:visivel)
{
    if(id == 0)
    {
        if(visivel)
            SetDynamicObjectPos(RobCofres[0][0], 820.7000100, 8.3200000, 1003.6150000);
        else
            SetDynamicObjectPos(RobCofres[0][0], 0.000000000, 0.0000000, 5000.0000000);
    }
    else if(id == 1)
    {
        if(visivel)
            SetDynamicObjectPos(RobCofres[1][0], 963.5000000, 2095.9150, 1010.4150000);
        else
            SetDynamicObjectPos(RobCofres[1][0], 0.000000000, 0.0000000, 5000.0000000);
    }
    else if(id == 2)
    {
        if(visivel)
            SetDynamicObjectPos(RobCofres[2][0], 350.2000100, 159.52150, 1025.2150000);
        else
            SetDynamicObjectPos(RobCofres[2][0], 0.000000000, 0.0000000, 5000.0000000);
    }
    else if(id == 3)
    {
        if(visivel)
            SetDynamicObjectPos(RobCofres[3][0], 476.5000000, -10.71500, 1003.1175000);
        else
            SetDynamicObjectPos(RobCofres[3][0], 0.000000000, 0.0000000, 5000.0000000);
    }
    else if(id == 4)
    {
        if(visivel)
            SetDynamicObjectPos(RobCofres[4][0], 366.7771000, 2330.4309, 1890.0200000);
        else
            SetDynamicObjectPos(RobCofres[4][0], 0.000000000, 0.0000000, 5000.0000000);
    }
    return 1;
}

public:do ShowGPSDialog(playerid)
{
	new listitems[(MAX_GPS + 1) * 64], string[64];
    for(new i = 0; i < sizeof(GPSListNames); i++)
    {
        format(string, 64, "%s\n", GPSListNames[i]);
        strcat(listitems, string);
    }

	ShowPlayerDialog(playerid, 7, DIALOG_STYLE_LIST, "GPS:", listitems, "Selecionar", "Sair");
    return 1;
}

public:do CheckAlarmArea(playerid)
{
    for(new i = 0; i < MAX_ALARME; i++)
    {
        if(!AlarmeInfo[i][alAtivo])
            continue;

        if(IsPlayerInRangeOfPoint(playerid, 25.0, AlarmeInfo[i][alX], AlarmeInfo[i][alY], AlarmeInfo[i][alZ])
        && GetPlayerVirtualWorld(playerid) == AlarmeInfo[i][alVW])
        {
            if(OuvindoAlarme[playerid] != i)
            {
                PlayerPlaySound(playerid, 41800, AlarmeInfo[i][alX], AlarmeInfo[i][alY], AlarmeInfo[i][alZ]);
                OuvindoAlarme[playerid] = i;
            }
            return 1;
        }
    }

    PlayerPlaySound(playerid, 0, 0.0, 0.0, 0.0);
    OuvindoAlarme[playerid] = -1;
    return 1;
}

public:do IniciarAlarmeBanco()
{
    AlarmeInfo[0][alAtivo] = true;
    AlarmeInfo[1][alAtivo] = true;
    AlarmeInfo[2][alAtivo] = true;
    AlarmeInfo[3][alAtivo] = true;

	foreach(new i: Player)
        if(IsACop(i))
            SendClientMessage(i, COLOR_RED, "HQ - O Alarme do Banco está Tocando.");
    return 1;
}

public:do PararAlarmeBanco()
{
    AlarmeInfo[0][alAtivo] = false;
    AlarmeInfo[1][alAtivo] = false;
    AlarmeInfo[2][alAtivo] = false;
    AlarmeInfo[3][alAtivo] = false;
    return 1;
}

public:do GiveBizMoney(bizid, money)
{
    if(BizzInfo[bizid][bProducts] > 0)
    {
		BizzInfo[bizid][bProducts] --;

        if(strcmp(bExtortion[bizid], "---", true) == 0)
    	    return BizzInfo[bizid][bTill] += money;

        new pId = IsPlayerConnectedEx(bExtortion[bizid]);
        if(pId != INVALID_PLAYER_ID)
        {
            BizzInfo[bizid][bTill] += floatround(money * 0.90);
            Player[pId][pBank] += floatround(money * 0.10);

            if(floatround(money * 0.10) != 0)
            {
    		    format(thestring, sizeof(thestring), "Você ganhou %d pela extorsão da empresa.", floatround(money * 0.10));
    		    SendClientMessage(pId, COLOR_YELLOW, thestring);
            }
            return true;
        }
        return true;
	}
    return true;
}

public:do GiveBizMoneyEx(bizid, money)
{
    if(strcmp(bExtortion[bizid], "---", true) == 0)
	    return true;

    new pId = IsPlayerConnectedEx(bExtortion[bizid]);
    if(pId != INVALID_PLAYER_ID)
    {
        BizzInfo[bizid][bTill] += floatround(money * 0.90);
        Player[pId][pBank] += floatround(money * 0.10);

        if(bizid != Biz_Mecanica && floatround(money * 0.10) != 0)
        {
    	    format(thestring, sizeof(thestring), "Você ganhou %d pela extorsão da empresa.", floatround(money * 0.10));
    	    SendClientMessage(pId, COLOR_YELLOW, thestring);
        }
        return true;
    }
    BizzInfo[bizid][bTill] += money;
    return true;
}

stock IsPlayerInRangeOfBiz(playerid, Float:range, biz)
{
    if(IsPlayerInRangeOfPoint(playerid, range, BizzInfo[biz][bEntranceX], BizzInfo[biz][bEntranceY], BizzInfo[biz][bEntranceZ]))
        return true;
    return false;
}

stock GetAluguelCarroVarID(vehid)
{
    for(new i = 0; i < sizeof(AluguelCarro); i++)
        if(vehid == AluguelCarro[i])
            return i;
    return -1;
}

stock GetAluguelMotoVarID(vehid)
{
    for(new i = 0; i < sizeof(AluguelMoto); i++)
        if(vehid == AluguelMoto[i])
            return i;
    return -1;
}

stock GetAluguelAeroVarID(vehid)
{
    for(new i = 0; i < sizeof(AluguelAero); i++)
        if(vehid == AluguelAero[i])
            return i;
    return -1;
}

stock IsBizLocked(biz)
{
    if(biz == Biz_PaintBall)
        return BizPaintBallLock;
    else if(biz == Biz_Ammu1)
        return BizAmmu1Lock;
    else if(biz == Biz_Ammu2)
        return BizAmmu2Lock;
    return false;
}

stock IsLockableBiz(biz)
{
    if(biz != Biz_PaintBall
    && biz != Biz_Ammu1
    && biz != Biz_Ammu2)
        return false;
    return true;
}

stock SetBizLocked(biz, bool:lock)
{
    if(biz == Biz_PaintBall)
        BizPaintBallLock = lock;
    else if(biz == Biz_Ammu1)
        BizAmmu1Lock = lock;
    else if(biz == Biz_Ammu2)
        BizAmmu2Lock = lock;
    return true;
}

stock GetEntranceCostString(biz)
{
    new Retorno[128];
    format(Retorno, 128, "");

    if(biz == Biz_Posto)
        format(Retorno, 128, "{FFFFFF}Preço do Combustivel: {008800}%.2f", BizPostoPrice);
    else if(biz == Biz_Produtos)
        format(Retorno, 128, "{FFFFFF}Preço do Produto: {008800}%d", BizProdutosPrice);
    else if(biz == Biz_Anuncios)
        format(Retorno, 128, "{FFFFFF}Preço do Anúncio: {008800}%d", BizAnunciosPrice);
    else if(biz == Biz_Pedagio)
        format(Retorno, 128, "{FFFFFF}Preço do Pedágio: {008800}%d", BizPedagioPrice);
    else if(biz == Biz_Loterica)
        format(Retorno, 128, "{FFFFFF}Preço do Bilhete: {008800}%d", BizLotericaPrice);
    else if(biz == Biz_Telefonica)
        format(Retorno, 128, "{FFFFFF}Preço dos Créditos: {008800}%.2f", BizTelefonicaPrice);
    else if(biz == Biz_PaintBall)
        format(Retorno, 128, "{FFFFFF}Preço da Entrada: {008800}%d", BizPaintBallPrice);
    else if(biz == Biz_Ammu1)
        format(Retorno, 128, "{FFFFFF}Preço da Entrada: {008800}%d", BizAmmu1Price);
    else if(biz == Biz_Ammu2)
        format(Retorno, 128, "{FFFFFF}Preço da Entrada: {008800}%d", BizAmmu2Price);
    else if(biz == Biz_Binco)
        format(Retorno, 128, "{FFFFFF}Preço das Roupas: {008800}%d", BizBincoPrice);
    return Retorno;
}

stock GetEntranceCostLabel(biz)
{
    new Retorno[128];
    format(Retorno, 128, "");

    if(biz == Biz_Posto)
        format(Retorno, 128, "\n{FFFFFF}Preço do Combustivel: {008800}%.2f", BizPostoPrice);
    else if(biz == Biz_Produtos)
        format(Retorno, 128, "\n{FFFFFF}Preço do Produto: {008800}%d", BizProdutosPrice);
    else if(biz == Biz_Anuncios)
        format(Retorno, 128, "\n{FFFFFF}Preço do Anúncio: {008800}%d", BizAnunciosPrice);
    else if(biz == Biz_Pedagio)
        format(Retorno, 128, "\n{FFFFFF}Preço do Pedágio: {008800}%d", BizPedagioPrice);
    else if(biz == Biz_Loterica)
        format(Retorno, 128, "\n{FFFFFF}Preço do Bilhete: {008800}%d", BizLotericaPrice);
    else if(biz == Biz_Telefonica)
        format(Retorno, 128, "\n{FFFFFF}Preço dos Créditos: {008800}%.2f", BizTelefonicaPrice);
    else if(biz == Biz_PaintBall)
        format(Retorno, 128, "\n{FFFFFF}Preço da Entrada: {008800}%d", BizPaintBallPrice);
    else if(biz == Biz_Ammu1)
        format(Retorno, 128, "\n{FFFFFF}Preço da Entrada: {008800}%d", BizAmmu1Price);
    else if(biz == Biz_Ammu2)
        format(Retorno, 128, "\n{FFFFFF}Preço da Entrada: {008800}%d", BizAmmu2Price);
    else if(biz == Biz_Binco)
        format(Retorno, 128, "\n{FFFFFF}Preço das Roupas: {008800}%d", BizBincoPrice);
    return Retorno;
}

stock GetBizExtortionString(biz)
{
    new Retorno[128];
    format(Retorno, 128, "");

    if(strcmp(bExtortion[biz], "---") != 0)
        format(Retorno, 128, "\n{FFFFFF}Sócio: {00FFFF}%s", bExtortion[biz]);

    return Retorno;
}

stock GetBizString(biz)
{
    new Retorno[512];

    if(BizzInfo[biz][bOwned])
    {
        if(!BizzInfo[biz][bCustomSell])
            format(Retorno, 512, "{FFFFFF}%s\n{FFFFFF}Dono: {00FFFF}%s%s%s\n{FFFFFF}Nível: {00FFFF}%d", bMessage[biz], bOwner[biz], GetBizExtortionString(biz), GetEntranceCostLabel(biz), BizzInfo[biz][bLevelNeeded]);
        else
            format(Retorno, 512, "{FFFFFF}A Venda\n{00FFFF}%s\n{FFFFFF}Dono: {00FFFF}%s%s%s\n{FFFFFF}Preço:{009900}%d \n{FFFFFF}Nível: {00FFFF}%d\n{FFFFFF}Use {00FFFF}/comprarempresa", bMessage[biz], bOwner[biz], GetBizExtortionString(biz), GetEntranceCostLabel(biz), BizzInfo[biz][bCustomPrice], BizzInfo[biz][bLevelNeeded]);
    }
    else
        format(Retorno, 512, "{FFFFFF}A Venda\n{00FFFF}%s%s\n{FFFFFF}Preço:{009900}R$%d \n{FFFFFF}Nível: {00FFFF}%d\n{FFFFFF}Use {00FFFF}/comprarempresa", bMessage[biz], GetEntranceCostLabel(biz), BizzInfo[biz][bBuyPrice], BizzInfo[biz][bLevelNeeded]);

    if(IsLockableBiz(biz))
        if(!IsBizLocked(biz))
            strcat(Retorno, "\n{FFFFFF}Use {00FFFF}/Entrar", 512);

    return Retorno;
}

stock GetBizPickupModel(biz)
{
    if(BizzInfo[biz][bOwned])
        if(!BizzInfo[biz][bCustomSell])
            return 1239;

    return 1272;
}

stock CheckBizEntranceExit(playerid, bool:display = true)
{
    if(IsPlayerInRangeOfBiz(playerid, 2.0, Biz_PaintBall))
    {
        if(IsBizLocked(Biz_PaintBall))
        {
            if(display)
                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Empresa Trancada.");
            return 1;
        }

        if(BizPaintBallPrice != 0
        && GetPlayerGP(playerid) < BizPaintBallPrice)
        {
            if(display)
            {
                format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} Você não tem {009900}R$%d{FFFFFF}.", BizPaintBallPrice);
                SendClientMessage(playerid, COLOR_RED, thestring);
            }
            return 1;
        }

	    PaintballPlayers ++;
	    PlayerPaintballing[playerid] = 1;
	    new rand = random(sizeof(PaintballSpawns));

		SafeSetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
		Congelar(playerid);

		GivePlayerGP(playerid, -BizPaintBallPrice);
        GiveBizMoney(Biz_PaintBall, BizPaintBallPrice);

		format(thestring, sizeof(thestring), "~r~R$%d", BizPaintBallPrice);
		GameTextForPlayer(playerid, thestring, 5000, 1);

		gSpentCash[playerid] = GetPlayerGP(playerid);

		format(thestring, sizeof(thestring), "%s pagou R$%d para entrar no PaintBall.", Player[playerid][pName], BizPaintBallPrice);
		WriteLog("Bizz", thestring);
        return 1;
    }
    else if(IsPlayerInRangeOfBiz(playerid, 2.0, Biz_Ammu1))
    {
        if(IsBizLocked(Biz_Ammu1))
        {
            if(display)
                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Empresa Trancada.");
            return 1;
        }

        if(BizAmmu1Price != 0
        && GetPlayerGP(playerid) < BizAmmu1Price)
        {
            if(display)
            {
                format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} Você não tem {009900}R$%d{AA3333}", BizAmmu1Price);
                SendClientMessage(playerid, COLOR_RED, thestring);
            }
            return 1;
        }

		GivePlayerGP(playerid, -BizAmmu1Price);
        GiveBizMoney(Biz_PaintBall, BizAmmu1Price);

		format(thestring, sizeof(thestring), "~r~R$%d", BizAmmu1Price);
		GameTextForPlayer(playerid, thestring, 5000, 1);

		format(thestring, sizeof(thestring), "%s pagou R$%d para entrar na Ammu1.", Player[playerid][pName], BizAmmu1Price);
		WriteLog("Bizz", thestring);

        SafeSetPlayerPos(playerid, 296.88565063, -111.24994659, 1001.51562500);
        SetPlayerInterior(playerid, 6);
        return 1;
    }
    else if(IsPlayerInRangeOfBiz(playerid, 2.0, Biz_Ammu2))
    {
        if(IsBizLocked(Biz_Ammu2))
        {
            if(display)
                SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Empresa Trancada.");
            return 1;
        }

        if(BizAmmu2Price != 0
        && GetPlayerGP(playerid) < BizAmmu2Price)
        {
            if(display)
            {
                format(thestring, sizeof(thestring), "[ERRO]:{FFFFFF} Você não tem {009900}R$%d{AA3333}", BizAmmu2Price);
                SendClientMessage(playerid, COLOR_RED, thestring);
            }
            return 1;
        }

		GivePlayerGP(playerid, -BizAmmu2Price);
        GiveBizMoney(Biz_PaintBall, BizAmmu2Price);

		format(thestring, sizeof(thestring), "~r~R$%d", BizAmmu2Price);
		GameTextForPlayer(playerid, thestring, 5000, 1);

		format(thestring, sizeof(thestring), "%s pagou R$%d para entrar na Ammu2.", Player[playerid][pName], BizAmmu2Price);
		WriteLog("Bizz", thestring);

        SafeSetPlayerPos(playerid, 285.92861938, -85.215682980, 1001.51562500);
        SetPlayerInterior(playerid, 4);
        return 1;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 296.88565063, -111.24994659, 1001.51562500))
    {
        SafeSetPlayerPos(playerid, BizzInfo[Biz_Ammu1][bEntranceX], BizzInfo[Biz_Ammu1][bEntranceY], BizzInfo[Biz_Ammu1][bEntranceZ]);
        SetPlayerInterior(playerid, 0);

        Player[playerid][pLocal] = 255;
        return 1;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 285.92861938, -85.215682980, 1001.51562500))
    {
        SafeSetPlayerPos(playerid, BizzInfo[Biz_Ammu2][bEntranceX], BizzInfo[Biz_Ammu2][bEntranceY], BizzInfo[Biz_Ammu2][bEntranceZ]);
        SetPlayerInterior(playerid, 0);

        Player[playerid][pLocal] = 255;
        return 1;
    }
    return 1;
}

public:do BizPayDay()
{
    GiveBizMoneyEx(Biz_Motos, 1000 + random(250 * 10));
    GiveBizMoneyEx(Biz_Carros, 2000 + random(250 * 10));
    GiveBizMoneyEx(Biz_Telefonica, 1000 + random(400 * 10));
    GiveBizMoneyEx(Biz_Produtos, 1000 + random(250 * 10));
    GiveBizMoneyEx(Biz_Anuncios, 1000 + random(250 * 10));
    GiveBizMoneyEx(Biz_Mecanica , 1000 + random(500 * 10));
    GiveBizMoneyEx(Biz_247, 1000 + random(250 * 10));
    GiveBizMoneyEx(Biz_PaintBall, 1000 + random(1000 * 10));
    GiveBizMoneyEx(Biz_PaySpray, 1000 + random(250 * 10));
    GiveBizMoneyEx(Biz_Alimentos, 4000 + random(250 * 10));
    GiveBizMoneyEx(Biz_Bebidas, 4000 + random(250 * 10));
    GiveBizMoneyEx(Biz_Aero, 1000 + random(250 * 10));
    GiveBizMoneyEx(Biz_Binco, 4000 + random(500 * 10));
    GiveBizMoneyEx(Biz_Pedagio, 2000 + random(250 * 10));
    GiveBizMoneyEx(Biz_Tunning, 1000 + random(250 * 10));
    OnPropUpdate();
    return true;
}

public:do SendFakeKillMessage(dead, killer, arma)
{
    new string[155];
    format(string, sizeof(string), "%s[ID %d] matou %s com a arma %d.", ReturnPlayer(killer), killer, ReturnPlayer(dead), arma);
	foreach(new i: Player)
	{
		if(Player[i][pAdmin] >= 1)
		{
            if(TipoAntiFK[i] == 1)
                SendDeathMessageToPlayer(i, killer, dead, arma);
            else if(TipoAntiFK[i] == 2)
    			SendClientMessage(i, COLOR_LIGHTRED, string);
		}
 	}
    return true;
}

public:do LoadAdminTimes(playerid, file[])
{
    if(Player[playerid][pAdmin] < 1)
        return true;

    AdminTime[playerid][Time_Work] = DOF2_GetInt(file, "ADM_TW");
    AdminTime[playerid][Time_Play] = DOF2_GetInt(file, "ADM_TP");
    AdminTime[playerid][Time_RPG] = DOF2_GetInt(file, "ADM_TR");
    AdminTime[playerid][Time_AFK] = DOF2_GetInt(file, "ADM_TA");
    return true;
}

public:do SaveAdminTimes(playerid, file[])
{
    if(Player[playerid][pAdmin] < 1)
        return true;

    DOF2_SetInt(file, "ADM_TW", AdminTime[playerid][Time_Work]);
    DOF2_SetInt(file, "ADM_TP", AdminTime[playerid][Time_Play]);
    DOF2_SetInt(file, "ADM_TR", AdminTime[playerid][Time_RPG]);
    DOF2_SetInt(file, "ADM_TA", AdminTime[playerid][Time_AFK]);
    return true;
}

stock GetPlantacaoQuality(plantId)
{
    new Retorno[32];
    format(Retorno, 32, "---");

    if(Plantacao[plantId][plantChance] == 0)
        format(Retorno, 32, "Perfeita");
    else if(Plantacao[plantId][plantChance] <= 5)
        format(Retorno, 32, "Melhor");
    else if(Plantacao[plantId][plantChance] <= 10)
        format(Retorno, 32, "Ótima");
    else if(Plantacao[plantId][plantChance] <= 15)
        format(Retorno, 32, "Boa");
    else if(Plantacao[plantId][plantChance] <= 20)
        format(Retorno, 32, "Mediana");
    else if(Plantacao[plantId][plantChance] <= 25)
        format(Retorno, 32, "Ruim");
    else
        format(Retorno, 32, "Horrível");
    return Retorno;
}

stock GetPlantacaoCommandString(plantId)
{
    new Retorno[64];
    format(Retorno, 64, "");

    if(IsACopOrg(gZonesData[Plantacao[plantId][plantPlace]][ZoneOwner]))
    {
        if(Plantacao[plantId][plantTime] != -1)
            format(Retorno, 64, "\n{3C7035}Use {FFFFFF}/QueimarPlantacao");
    }
    else if(IsAGangOrgID(gZonesData[Plantacao[plantId][plantPlace]][ZoneOwner]))
    {
        if(Plantacao[plantId][plantTime] == 0)
            format(Retorno, 64, "\n{3C7035}Use {FFFFFF}/ColherPlantacao");
        else if(Plantacao[plantId][plantTime] == -1)
            format(Retorno, 64, "\n{3C7035}Use {FFFFFF}/Plantar");
    }
    return Retorno;
}

stock GetPlantacaoString(plantId)
{
    new Retorno[256];
    format(Retorno, 256, "");

    if(Plantacao[plantId][plantTime] == 0)
        format(Retorno, 256, "Pronto para Colheita%s", GetPlantacaoCommandString(plantId));
    else if(Plantacao[plantId][plantTime] != -1)
        format(Retorno, 256, "Tempo Restante: {FFFFFF}%s%s", Convert(Plantacao[plantId][plantTime]), GetPlantacaoCommandString(plantId));
    else
        format(Retorno, 256, "Preço: {FFFFFF}R$%d\n{3C7035}Qualidade: {FFFFFF}%s\n{3C7035}Produção: {FFFFFF}%d%s", Plantacao[plantId][plantAmount] * DRUG_PRICE, GetPlantacaoQuality(plantId), Plantacao[plantId][plantAmount] * MAX_DRUGS, GetPlantacaoCommandString(plantId));

    return Retorno;
}

stock LoadPlantacao()
{
	new file[32];
	format(file, sizeof(file), "/RPG/Plantacao.INI");

	if(!DOF2_FileExists(file))
        return SavePlantacao();

    for(new i = 0; i < sizeof(Plantacao); i++)
    {
        format(thestring, sizeof(thestring), "P%d_T", i);
        Plantacao[i][plantTime] = DOF2_GetInt(file, thestring);
    }
    return 1;
}

stock SavePlantacao()
{
	new file[32];
	format(file, sizeof(file), "/RPG/Plantacao.INI");

	if(!DOF2_FileExists(file))
	    DOF2_CreateFile(file);

    for(new i = 0; i < sizeof(Plantacao); i++)
    {
        format(thestring, sizeof(thestring), "P%d_T", i);
        DOF2_SetInt(file, thestring, Plantacao[i][plantTime]);
    }
    DOF2_SaveFile();
    return 1;
}

CMD:plantar(playerid)
{
    new plantId = -1;
    for(new i = 0; i < sizeof(Plantacao); i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 1.5, Plantacao[i][plantPos][0], Plantacao[i][plantPos][1], Plantacao[i][plantPos][2]))
        {
            plantId = i;
            break;
        }
    }
    if(plantId == -1)
        return SendClientMessage(playerid, 0xAA3333AA, "[ERRO]:{FFFFFF} Você não está perto de uma Plantação.");

    if(gZonesData[Plantacao[plantId][plantPlace]][ZoneOwner] != GetPlayerOrg(playerid) || GetPlayerOrg(playerid) == 0)
        return SendClientMessage(playerid, 0xAA3333AA, "[ERRO]:{FFFFFF} Você não é dono desta GangZone.");
    if(Plantacao[plantId][plantTime] != -1)
        return SendClientMessage(playerid, 0xAA3333AA, "[ERRO]:{FFFFFF} Algo já foi Plantado.");
    if(GetPlayerGP(playerid) < Plantacao[plantId][plantAmount] * DRUG_PRICE)
        return SendClientMessage(playerid, 0xAA3333AA, "[ERRO]:{FFFFFF} Você não pode Pagar.");
    if(IsACop(playerid))
        return SendClientMessage(playerid, 0xAA3333AA, "[ERRO]:{FFFFFF} Infelizmente você é um Homem da Lei e não pode plantar aqui."); //;-;

    GivePlayerGP(playerid, -Plantacao[plantId][plantAmount] * DRUG_PRICE);
    Plantacao[plantId][plantTime] = (2 * 60 * 60);

    SendClientMessage(playerid, COLOR_YELLOW, "Você pagou por esta plantação, ela ficará pronta em 2 horas.");

    Update3DTextLabelText(PlantacaoText[plantId], 0x3C7035FF, GetPlantacaoString(plantId));
    return 1;
}

CMD:colherplantacao(playerid)
{
    new plantId = -1, objs = 0;
    for(new i = 0; i < sizeof(Plantacao); i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 1.5, Plantacao[i][plantPos][0], Plantacao[i][plantPos][1], Plantacao[i][plantPos][2]))
        {
            plantId = i;
            break;
        }
        else
            objs += Plantacao[i][plantAmount];
    }
    if(plantId == -1)
        return SendClientMessage(playerid, 0xAA3333AA, "[ERRO]:{FFFFFF} Você não está perto de uma Plantação.");

    if(gZonesData[Plantacao[plantId][plantPlace]][ZoneOwner] != GetPlayerOrg(playerid) || GetPlayerOrg(playerid) == 0)
        return SendClientMessage(playerid, 0xAA3333AA, "[ERRO]:{FFFFFF} Você não é dono desta GangZone.");
    if(Plantacao[plantId][plantTime] != 0)
        return SendClientMessage(playerid, 0xAA3333AA, "[ERRO]:{FFFFFF} A Plantação não está pronta para Colheita.");
    if(IsACop(playerid))
        return SendClientMessage(playerid, 0xAA3333AA, "[ERRO]:{FFFFFF} Infelizmente você é um Homem da Lei e não pode colher este produto."); //;-;

    Plantacao[plantId][plantTime] = -1;
    for(new o = objs; o < objs + Plantacao[plantId][plantAmount]; o++)
        SetDynamicObjectPos(PlantacaoObj[o], PlantacaoObjFinalPos[o][0], PlantacaoObjFinalPos[o][1], PlantacaoObjFinalPos[o][2] - 2.0);

    CofreOrg[GetPlayerOrg(playerid)][cfDrogas] += floatround((Plantacao[plantId][plantAmount] * MAX_DRUGS) * 0.95);
    Player[playerid][pDrugs] += floatround((Plantacao[plantId][plantAmount] * MAX_DRUGS) * 0.05);

    format(thestring, sizeof(thestring), "Você colheu as drogas e pegou %d para você.", floatround((Plantacao[plantId][plantAmount] * MAX_DRUGS) * 0.05));
    SendClientMessage(playerid, COLOR_YELLOW, thestring);

    Update3DTextLabelText(PlantacaoText[plantId], 0x3C7035FF, GetPlantacaoString(plantId));
    return 1;
}

CMD:queimarplantacao(playerid)
{
    new plantId = -1, objs = 0;
    for(new i = 0; i < sizeof(Plantacao); i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 1.5, Plantacao[i][plantPos][0], Plantacao[i][plantPos][1], Plantacao[i][plantPos][2]))
        {
            plantId = i;
            break;
        }
        else
            objs += Plantacao[i][plantAmount];
    }
    if(plantId == -1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não está perto de uma plantação.");

    if(gZonesData[Plantacao[plantId][plantPlace]][ZoneOwner] != GetPlayerOrg(playerid) || GetPlayerOrg(playerid) == 0)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não é dono desta GangZone.");
    if(Plantacao[plantId][plantTime] == -1)
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Não há nada para queimar.");
    if(!IsACop(playerid))
        return SendClientMessage(playerid, COLOR_RED, "[ERRO]:{FFFFFF} Você não quer queimar realmente este produto maravilhoso, quer?"); //;-;

    Plantacao[plantId][plantTime] = -1;
    for(new o = objs; o < objs + Plantacao[plantId][plantAmount]; o++)
        SetDynamicObjectPos(PlantacaoObj[o], PlantacaoObjFinalPos[o][0], PlantacaoObjFinalPos[o][1], PlantacaoObjFinalPos[o][2] - 2.0);

    format(thestring, sizeof(thestring), "Você queimou estas drogas, causando R$%d de prejuízo para quem plantou.", Plantacao[plantId][plantAmount] * DRUG_PRICE);
    SendClientMessage(playerid, COLOR_YELLOW, thestring);

    Update3DTextLabelText(PlantacaoText[plantId], 0x3C7035FF, GetPlantacaoString(plantId));
    return 1;
}

main()
{
	printf("BLS v2.0 - Por Pedro Henrique, Kuddy Hirasawa e Leonardo Leal");
	printf("Kiba e vamos atrás da sua mãe.");
	printf("Porque nois é nois");

	utf8encode(thestring, "Servidor iniciado em algum computador. Será ele nosso??");
	SendMessageToJamelao(thestring);
}

#include "gamemodes/cars/stocks.pwn"